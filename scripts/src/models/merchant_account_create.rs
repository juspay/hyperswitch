/*
 * Hyperswitch - API Documentation
 *
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: hyperswitch@juspay.in
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct MerchantAccountCreate {
    /// The identifier for the Merchant Account
    #[serde(rename = "merchant_id")]
    pub merchant_id: String,
    /// Name of the Merchant Account
    #[serde(rename = "merchant_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub merchant_name: Option<Option<String>>,
    #[serde(rename = "merchant_details", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub merchant_details: Option<Option<Box<crate::models::MerchantDetails>>>,
    /// The URL to redirect after the completion of the operation
    #[serde(rename = "return_url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub return_url: Option<Option<String>>,
    #[serde(rename = "webhook_details", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub webhook_details: Option<Option<Box<crate::models::WebhookDetails>>>,
    /// The routing algorithm to be used for routing payments to desired connectors
    #[serde(rename = "routing_algorithm", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub routing_algorithm: Option<Option<serde_json::Value>>,
    /// A boolean value to indicate if the merchant is a sub-merchant under a master or a parent merchant. By default, its value is false.
    #[serde(rename = "sub_merchants_enabled", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sub_merchants_enabled: Option<Option<bool>>,
    /// Refers to the Parent Merchant ID if the merchant being created is a sub-merchant
    #[serde(rename = "parent_merchant_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub parent_merchant_id: Option<Option<String>>,
    /// A boolean value to indicate if payment response hash needs to be enabled
    #[serde(rename = "enable_payment_response_hash", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub enable_payment_response_hash: Option<Option<bool>>,
    /// Refers to the hash key used for payment response
    #[serde(rename = "payment_response_hash_key", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub payment_response_hash_key: Option<Option<String>>,
    /// A boolean value to indicate if redirect to merchant with http post needs to be enabled
    #[serde(rename = "redirect_to_merchant_with_http_post", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub redirect_to_merchant_with_http_post: Option<Option<bool>>,
    /// You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.
    #[serde(rename = "metadata", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<Option<serde_json::Value>>,
    /// API key that will be used for server side API access
    #[serde(rename = "publishable_key", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub publishable_key: Option<Option<String>>,
    /// An identifier for the vault used to store payment method information.
    #[serde(rename = "locker_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub locker_id: Option<Option<String>>,
    #[serde(rename = "primary_business_details", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub primary_business_details: Option<Option<Box<crate::models::PrimaryBusinessDetails>>>,
    /// The frm routing algorithm to be used for routing payments to desired FRM's
    #[serde(rename = "frm_routing_algorithm", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub frm_routing_algorithm: Option<Option<serde_json::Value>>,
    /// Will be used to expire client secret after certain amount of time to be supplied in seconds (900) for 15 mins
    #[serde(rename = "intent_fulfillment_time", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub intent_fulfillment_time: Option<Option<i32>>,
}

impl MerchantAccountCreate {
    pub fn new(merchant_id: String) -> MerchantAccountCreate {
        MerchantAccountCreate {
            merchant_id,
            merchant_name: None,
            merchant_details: None,
            return_url: None,
            webhook_details: None,
            routing_algorithm: None,
            sub_merchants_enabled: None,
            parent_merchant_id: None,
            enable_payment_response_hash: None,
            payment_response_hash_key: None,
            redirect_to_merchant_with_http_post: None,
            metadata: None,
            publishable_key: None,
            locker_id: None,
            primary_business_details: None,
            frm_routing_algorithm: None,
            intent_fulfillment_time: None,
        }
    }
}


