/*
 * Hyperswitch - API Documentation
 *
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: hyperswitch@juspay.in
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PaymentsRequest {
    /// Unique identifier for the payment. This ensures idempotency for multiple payments that have been done by a single merchant. This field is auto generated and is returned in the API response.
    #[serde(rename = "payment_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub payment_id: Option<Option<String>>,
    /// This is an identifier for the merchant account. This is inferred from the API key provided during the request
    #[serde(rename = "merchant_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub merchant_id: Option<Option<String>>,
    /// The payment amount. Amount for the payment in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc.,
    #[serde(rename = "amount", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub amount: Option<Option<i64>>,
    #[serde(rename = "routing", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub routing: Option<Option<crate::models::RoutingAlgorithm>>,
    /// This allows the merchant to manually select a connector with which the payment can go through
    #[serde(rename = "connector", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub connector: Option<Option<Vec<crate::models::Connector>>>,
    #[serde(rename = "currency", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub currency: Option<Option<crate::models::Currency>>,
    #[serde(rename = "capture_method", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub capture_method: Option<Option<crate::models::CaptureMethod>>,
    /// The Amount to be captured/ debited from the users payment method. It shall be in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc., If not provided, the default amount_to_capture will be the payment amount.
    #[serde(rename = "amount_to_capture", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub amount_to_capture: Option<Option<i64>>,
    /// A timestamp (ISO 8601 code) that determines when the payment should be captured. Providing this field will automatically set `capture` to true
    #[serde(rename = "capture_on", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub capture_on: Option<Option<String>>,
    /// Whether to confirm the payment (if applicable)
    #[serde(rename = "confirm", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub confirm: Option<Option<bool>>,
    #[serde(rename = "customer", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub customer: Option<Option<Box<crate::models::CustomerDetails>>>,
    /// The identifier for the customer object. This field will be deprecated soon, use the customer object instead
    #[serde(rename = "customer_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub customer_id: Option<Option<String>>,
    /// The customer's email address This field will be deprecated soon, use the customer object instead
    #[serde(rename = "email", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub email: Option<Option<String>>,
    /// description: The customer's name This field will be deprecated soon, use the customer object instead
    #[serde(rename = "name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub name: Option<Option<String>>,
    /// The customer's phone number This field will be deprecated soon, use the customer object instead
    #[serde(rename = "phone", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub phone: Option<Option<String>>,
    /// The country code for the customer phone number This field will be deprecated soon, use the customer object instead
    #[serde(rename = "phone_country_code", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub phone_country_code: Option<Option<String>>,
    /// Set to true to indicate that the customer is not in your checkout flow during this payment, and therefore is unable to authenticate. This parameter is intended for scenarios where you collect card details and charge them later. This parameter can only be used with `confirm: true`.
    #[serde(rename = "off_session", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub off_session: Option<Option<bool>>,
    /// A description of the payment
    #[serde(rename = "description", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub description: Option<Option<String>>,
    /// The URL to redirect after the completion of the operation
    #[serde(rename = "return_url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub return_url: Option<Option<String>>,
    #[serde(rename = "setup_future_usage", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub setup_future_usage: Option<Option<crate::models::FutureUsage>>,
    #[serde(rename = "authentication_type", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub authentication_type: Option<Option<crate::models::AuthenticationType>>,
    #[serde(rename = "payment_method_data", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub payment_method_data: Option<Option<Box<crate::models::PaymentMethodData>>>,
    #[serde(rename = "payment_method", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub payment_method: Option<Option<crate::models::PaymentMethod>>,
    /// Provide a reference to a stored payment method
    #[serde(rename = "payment_token", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub payment_token: Option<Option<String>>,
    /// This is used when payment is to be confirmed and the card is not saved
    #[serde(rename = "card_cvc", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub card_cvc: Option<Option<String>>,
    #[serde(rename = "shipping", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub shipping: Option<Option<Box<crate::models::Address>>>,
    #[serde(rename = "billing", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub billing: Option<Option<Box<crate::models::Address>>>,
    /// For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters.
    #[serde(rename = "statement_descriptor_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub statement_descriptor_name: Option<Option<String>>,
    /// Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.
    #[serde(rename = "statement_descriptor_suffix", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub statement_descriptor_suffix: Option<Option<String>>,
    /// Information about the product , quantity and amount for connectors. (e.g. Klarna)
    #[serde(rename = "order_details", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub order_details: Option<Option<Vec<crate::models::OrderDetailsWithAmount>>>,
    /// It's a token used for client side verification.
    #[serde(rename = "client_secret", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub client_secret: Option<Option<String>>,
    #[serde(rename = "mandate_data", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub mandate_data: Option<Option<Box<crate::models::MandateData>>>,
    /// A unique identifier to link the payment to a mandate, can be use instead of payment_method_data
    #[serde(rename = "mandate_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub mandate_id: Option<Option<String>>,
    /// Additional details required by 3DS 2.0
    #[serde(rename = "browser_info", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub browser_info: Option<Option<serde_json::Value>>,
    #[serde(rename = "payment_experience", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub payment_experience: Option<Option<crate::models::PaymentExperience>>,
    #[serde(rename = "payment_method_type", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub payment_method_type: Option<Option<crate::models::PaymentMethodType>>,
    #[serde(rename = "business_country", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub business_country: Option<Option<crate::models::CountryAlpha2>>,
    /// Business label of the merchant for this payment
    #[serde(rename = "business_label", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub business_label: Option<Option<String>>,
    #[serde(rename = "merchant_connector_details", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub merchant_connector_details: Option<Option<Box<crate::models::MerchantConnectorDetailsWrap>>>,
    /// Allowed Payment Method Types for a given PaymentIntent
    #[serde(rename = "allowed_payment_method_types", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub allowed_payment_method_types: Option<Option<Vec<crate::models::PaymentMethodType>>>,
    /// Business sub label for the payment
    #[serde(rename = "business_sub_label", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub business_sub_label: Option<Option<String>>,
    #[serde(rename = "retry_action", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub retry_action: Option<Option<crate::models::RetryAction>>,
    /// You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.
    #[serde(rename = "metadata", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<Option<serde_json::Value>>,
    #[serde(rename = "connector_metadata", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub connector_metadata: Option<Option<Box<crate::models::ConnectorMetadata>>>,
    #[serde(rename = "feature_metadata", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub feature_metadata: Option<Option<Box<crate::models::FeatureMetadata>>>,
}

impl PaymentsRequest {
    pub fn new() -> PaymentsRequest {
        PaymentsRequest {
            payment_id: None,
            merchant_id: None,
            amount: None,
            routing: None,
            connector: None,
            currency: None,
            capture_method: None,
            amount_to_capture: None,
            capture_on: None,
            confirm: None,
            customer: None,
            customer_id: None,
            email: None,
            name: None,
            phone: None,
            phone_country_code: None,
            off_session: None,
            description: None,
            return_url: None,
            setup_future_usage: None,
            authentication_type: None,
            payment_method_data: None,
            payment_method: None,
            payment_token: None,
            card_cvc: None,
            shipping: None,
            billing: None,
            statement_descriptor_name: None,
            statement_descriptor_suffix: None,
            order_details: None,
            client_secret: None,
            mandate_data: None,
            mandate_id: None,
            browser_info: None,
            payment_experience: None,
            payment_method_type: None,
            business_country: None,
            business_label: None,
            merchant_connector_details: None,
            allowed_payment_method_types: None,
            business_sub_label: None,
            retry_action: None,
            metadata: None,
            connector_metadata: None,
            feature_metadata: None,
        }
    }
}


