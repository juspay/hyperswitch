/*
 * Hyperswitch - API Documentation
 *
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: hyperswitch@juspay.in
 * Generated by: https://openapi-generator.tech
 */


/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PaymentMethodType {
    #[serde(rename = "ach")]
    Ach,
    #[serde(rename = "affirm")]
    Affirm,
    #[serde(rename = "afterpay_clearpay")]
    AfterpayClearpay,
    #[serde(rename = "ali_pay")]
    AliPay,
    #[serde(rename = "ali_pay_hk")]
    AliPayHk,
    #[serde(rename = "apple_pay")]
    ApplePay,
    #[serde(rename = "bacs")]
    Bacs,
    #[serde(rename = "bancontact_card")]
    BancontactCard,
    #[serde(rename = "becs")]
    Becs,
    #[serde(rename = "blik")]
    Blik,
    #[serde(rename = "classic")]
    Classic,
    #[serde(rename = "credit")]
    Credit,
    #[serde(rename = "crypto_currency")]
    CryptoCurrency,
    #[serde(rename = "debit")]
    Debit,
    #[serde(rename = "eps")]
    Eps,
    #[serde(rename = "evoucher")]
    Evoucher,
    #[serde(rename = "giropay")]
    Giropay,
    #[serde(rename = "google_pay")]
    GooglePay,
    #[serde(rename = "ideal")]
    Ideal,
    #[serde(rename = "interac")]
    Interac,
    #[serde(rename = "klarna")]
    Klarna,
    #[serde(rename = "mb_way")]
    MbWay,
    #[serde(rename = "mobile_pay")]
    MobilePay,
    #[serde(rename = "multibanco")]
    Multibanco,
    #[serde(rename = "online_banking_czech_republic")]
    OnlineBankingCzechRepublic,
    #[serde(rename = "online_banking_finland")]
    OnlineBankingFinland,
    #[serde(rename = "online_banking_poland")]
    OnlineBankingPoland,
    #[serde(rename = "online_banking_slovakia")]
    OnlineBankingSlovakia,
    #[serde(rename = "pay_bright")]
    PayBright,
    #[serde(rename = "paypal")]
    Paypal,
    #[serde(rename = "przelewy24")]
    Przelewy24,
    #[serde(rename = "samsung_pay")]
    SamsungPay,
    #[serde(rename = "sepa")]
    Sepa,
    #[serde(rename = "sofort")]
    Sofort,
    #[serde(rename = "swish")]
    Swish,
    #[serde(rename = "trustly")]
    Trustly,
    #[serde(rename = "upi_collect")]
    UpiCollect,
    #[serde(rename = "walley")]
    Walley,
    #[serde(rename = "we_chat_pay")]
    WeChatPay,

}

impl ToString for PaymentMethodType {
    fn to_string(&self) -> String {
        match self {
            Self::Ach => String::from("ach"),
            Self::Affirm => String::from("affirm"),
            Self::AfterpayClearpay => String::from("afterpay_clearpay"),
            Self::AliPay => String::from("ali_pay"),
            Self::AliPayHk => String::from("ali_pay_hk"),
            Self::ApplePay => String::from("apple_pay"),
            Self::Bacs => String::from("bacs"),
            Self::BancontactCard => String::from("bancontact_card"),
            Self::Becs => String::from("becs"),
            Self::Blik => String::from("blik"),
            Self::Classic => String::from("classic"),
            Self::Credit => String::from("credit"),
            Self::CryptoCurrency => String::from("crypto_currency"),
            Self::Debit => String::from("debit"),
            Self::Eps => String::from("eps"),
            Self::Evoucher => String::from("evoucher"),
            Self::Giropay => String::from("giropay"),
            Self::GooglePay => String::from("google_pay"),
            Self::Ideal => String::from("ideal"),
            Self::Interac => String::from("interac"),
            Self::Klarna => String::from("klarna"),
            Self::MbWay => String::from("mb_way"),
            Self::MobilePay => String::from("mobile_pay"),
            Self::Multibanco => String::from("multibanco"),
            Self::OnlineBankingCzechRepublic => String::from("online_banking_czech_republic"),
            Self::OnlineBankingFinland => String::from("online_banking_finland"),
            Self::OnlineBankingPoland => String::from("online_banking_poland"),
            Self::OnlineBankingSlovakia => String::from("online_banking_slovakia"),
            Self::PayBright => String::from("pay_bright"),
            Self::Paypal => String::from("paypal"),
            Self::Przelewy24 => String::from("przelewy24"),
            Self::SamsungPay => String::from("samsung_pay"),
            Self::Sepa => String::from("sepa"),
            Self::Sofort => String::from("sofort"),
            Self::Swish => String::from("swish"),
            Self::Trustly => String::from("trustly"),
            Self::UpiCollect => String::from("upi_collect"),
            Self::Walley => String::from("walley"),
            Self::WeChatPay => String::from("we_chat_pay"),
        }
    }
}

impl Default for PaymentMethodType {
    fn default() -> PaymentMethodType {
        Self::Ach
    }
}




