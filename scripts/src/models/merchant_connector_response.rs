/*
 * Hyperswitch - API Documentation
 *
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: hyperswitch@juspay.in
 * Generated by: https://openapi-generator.tech
 */

/// MerchantConnectorResponse : Response of creating a new Merchant Connector for the merchant account.\"



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct MerchantConnectorResponse {
    #[serde(rename = "connector_type")]
    pub connector_type: crate::models::ConnectorType,
    /// Name of the Connector
    #[serde(rename = "connector_name")]
    pub connector_name: String,
    #[serde(rename = "connector_label")]
    pub connector_label: String,
    /// Unique ID of the connector
    #[serde(rename = "merchant_connector_id")]
    pub merchant_connector_id: String,
    /// Account details of the Connector. You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Useful for storing additional, structured information on an object.
    #[serde(rename = "connector_account_details", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub connector_account_details: Option<Option<serde_json::Value>>,
    /// A boolean value to indicate if the connector is in Test mode. By default, its value is false.
    #[serde(rename = "test_mode", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub test_mode: Option<Option<bool>>,
    /// A boolean value to indicate if the connector is disabled. By default, its value is false.
    #[serde(rename = "disabled", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub disabled: Option<Option<bool>>,
    /// Refers to the Parent Merchant ID if the merchant being created is a sub-merchant
    #[serde(rename = "payment_methods_enabled", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub payment_methods_enabled: Option<Option<Vec<crate::models::PaymentMethodsEnabled>>>,
    /// You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.
    #[serde(rename = "metadata", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<Option<serde_json::Value>>,
    #[serde(rename = "business_country")]
    pub business_country: crate::models::CountryAlpha2,
    /// Business Type of the merchant
    #[serde(rename = "business_label")]
    pub business_label: String,
    /// Business Sub label of the merchant
    #[serde(rename = "business_sub_label", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub business_sub_label: Option<Option<String>>,
    #[serde(rename = "frm_configs", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub frm_configs: Option<Option<Box<crate::models::FrmConfigs>>>,
}

impl MerchantConnectorResponse {
    /// Response of creating a new Merchant Connector for the merchant account.\"
    pub fn new(connector_type: crate::models::ConnectorType, connector_name: String, connector_label: String, merchant_connector_id: String, business_country: crate::models::CountryAlpha2, business_label: String) -> MerchantConnectorResponse {
        MerchantConnectorResponse {
            connector_type,
            connector_name,
            connector_label,
            merchant_connector_id,
            connector_account_details: None,
            test_mode: None,
            disabled: None,
            payment_methods_enabled: None,
            metadata: None,
            business_country,
            business_label,
            business_sub_label: None,
            frm_configs: None,
        }
    }
}


