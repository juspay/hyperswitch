/*
 * Hyperswitch - API Documentation
 *
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: hyperswitch@juspay.in
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PaymentListConstraints {
    /// The identifier for customer
    #[serde(rename = "customer_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub customer_id: Option<Option<String>>,
    /// A cursor for use in pagination, fetch the next list after some object
    #[serde(rename = "starting_after", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub starting_after: Option<Option<String>>,
    /// A cursor for use in pagination, fetch the previous list before some object
    #[serde(rename = "ending_before", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ending_before: Option<Option<String>>,
    /// limit on the number of objects to return
    #[serde(rename = "limit", skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,
    /// The time at which payment is created
    #[serde(rename = "created", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub created: Option<Option<String>>,
    /// Time less than the payment created time
    #[serde(rename = "created.lt", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub created_period_lt: Option<Option<String>>,
    /// Time greater than the payment created time
    #[serde(rename = "created.gt", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub created_period_gt: Option<Option<String>>,
    /// Time less than or equals to the payment created time
    #[serde(rename = "created.lte", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub created_period_lte: Option<Option<String>>,
    /// Time greater than or equals to the payment created time
    #[serde(rename = "created.gte", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub created_period_gte: Option<Option<String>>,
}

impl PaymentListConstraints {
    pub fn new() -> PaymentListConstraints {
        PaymentListConstraints {
            customer_id: None,
            starting_after: None,
            ending_before: None,
            limit: None,
            created: None,
            created_period_lt: None,
            created_period_gt: None,
            created_period_lte: None,
            created_period_gte: None,
        }
    }
}


