name: Run postman tests

on:
  workflow_dispatch:
  pull_request:
  merge_group:
    types: [checks_requested]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_INCREMENTAL: 1
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  RUST_BACKTRACE: short
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
  CONNECTORS: aci, adyen_uk, airwallex, authorizedotnet, bambora, bambora_3ds, bluesnap, checkout, globalpay, mollie, nexinets, nmi, shift4, stripe, trustpay, worldline

jobs:
  runner:
    name: Run postman tests
    runs-on: ubuntu-latest

    services:
      redis:
        image: "${{ github.event_name != 'pull_request' && 'redis' || '' }}"
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      postgres:
        image: "${{ github.event_name != 'pull_request' && 'postgres:14.5' || '' }}"
        env:
          POSTGRES_USER: db_user
          POSTGRES_PASSWORD: db_pass
          POSTGRES_DB: hyperswitch_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Ignore Tests incase of pull request
        if: github.event_name == 'pull_request'
        shell: bash
        run: |
          echo "Skipped tests as the event is pull request" 
          exit 0

      - name: Repository checkout
        if: github.event_name != 'pull_request'
        uses: actions/checkout@v3

      - name: Decrypt connector auth file
        if: github.event_name != 'pull_request'
        env:
          CONNECTOR_AUTH_PASSPHRASE: ${{ secrets.CONNECTOR_AUTH_PASSPHRASE }}
        shell: bash
        run: ./scripts/decrypt_connector_auth.sh

      - name: Set paths in env
        if: github.event_name != 'pull_request'
        id: config_path
        shell: bash
        run: |
          echo "CONNECTOR_AUTH_FILE_PATH=$HOME/target/test/connector_auth.toml" >> $GITHUB_ENV

      - name: Fetch keys
        if: github.event_name != 'pull_request'
        env:
          TOML_PATH: "./config/development.toml"
        run: |
          LOCAL_ADMIN_API_KEY=$(yq '.secrets.admin_api_key' $TOML_PATH)
          echo "ADMIN_API_KEY=$LOCAL_ADMIN_API_KEY" >> $GITHUB_ENV

      - name: Install Rust
        if: github.event_name != 'pull_request'
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      - name: Build and Cache Rust Dependencies
        if: github.event_name != 'pull_request'
        uses: Swatinem/rust-cache@v2.4.0

      - name: Install Diesel CLI with Postgres Support
        if: github.event_name != 'pull_request'
        uses: baptiste0928/cargo-install@v2.1.0
        with:
          crate: diesel_cli
          features: postgres
          args: "--no-default-features"

      - name: Diesel migration run
        if: github.event_name != 'pull_request'
        shell: bash
        env:
          DATABASE_URL: postgres://db_user:db_pass@localhost:5432/hyperswitch_db
        run: diesel migration run

      - name: Setup Local Server
        if: github.event_name != 'pull_request'
        run: |
          cargo run &
          COUNT=0
          # Wait for the server to start in port 8080
          while netstat -lnt | awk '$4 ~ /:8080$/ {exit 1}'; do 
              # Wait for 15 mins to start otherwise kill the task
              if [ $COUNT -gt 90 ];
              then
                  exit 1
              else 
                  COUNT=$((COUNT+1))
                  sleep 10
              fi
          done

      - name: Run Tests
        if: github.event_name != 'pull_request'
        env:
          BASE_URL: "http://localhost:8080"
          GATEWAY_MERCHANT_ID: ${{ secrets.STRIPE_GATEWAY_MERCHANT_ID }}
          GPAY_CERTIFICATE: ${{ secrets.STRIPE_GPAY_CERTIFICATE }}
          GPAY_CERTIFICATE_KEYS: ${{ secrets.STRIPE_GPAY_CERTIFICATE_KEYS }}
        shell: bash
        run: |
          # Declare variables
          RED='\033[0;31m'
          RESET='\033[0m'
          MAX_RETRIES=3
          FAILED_CONNECTORS=()
          PREVIOUS_FAILED_CONNECTORS=()

          # Runner function
          run_connector() {
            local connector_name="$1"
            if cargo run --bin test_utils -- --connector_name="$connector_name" --base_url="$BASE_URL" --admin_api_key="$ADMIN_API_KEY"; then
              echo "Connector $connector_name executed successfully."
              return 0
            else
              return 1
            fi
          }

          # Connectors are parsed and runner is called for each connector
          for i in $(echo "$CONNECTORS" | tr "," "\n"); do
            if ! run_connector "$i"; then
              FAILED_CONNECTORS+=("$i")
            fi
          done

          # Retry failed connectors by calling runner function with max retries set to 3
          if [ ${#FAILED_CONNECTORS[@]} -gt 0 ]; then
            PREVIOUS_FAILED_CONNECTORS=("${FAILED_CONNECTORS[@]}")

            echo "Retrying failed connectors..."
            RETRIES=0
            while [ $RETRIES -lt $MAX_RETRIES ] && [ ${#FAILED_CONNECTORS[@]} -gt 0 ]; do
              NEW_FAILED_CONNECTORS=()
              for i in "${FAILED_CONNECTORS[@]}"; do
                if run_connector "$i"; then
                  continue  # Skip processing successful connectors during the retry loop
                else
                  NEW_FAILED_CONNECTORS+=("$i")
                fi
              done
              FAILED_CONNECTORS=("${NEW_FAILED_CONNECTORS[@]}")
              RETRIES=$((RETRIES + 1))
            done

            # If any connectors failed to run previously but succeeded after retries, print them
            if [ ${#FAILED_CONNECTORS[@]} -lt ${#PREVIOUS_FAILED_CONNECTORS[@]} ]; then
              echo -e "${RED}One or more connectors failed to run but succeeded after retries:${RESET}"
              for i in "${PREVIOUS_FAILED_CONNECTORS[@]}"; do
                if ! printf '%s\n' "${FAILED_CONNECTORS[@]}" | grep -q "^$i$"; then
                  echo "$i"
                fi
              done
            fi

            # If any connectors still failed to run after retries, exit with error
            if [ ${#FAILED_CONNECTORS[@]} -gt 0 ]; then
              echo -e "${RED}One or more connectors still failed to run after retries:${RESET}"
              printf '%s\n' "${FAILED_CONNECTORS[@]}"
              exit 1
            fi
          fi
