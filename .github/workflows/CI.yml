name: CI

on:
  push:
    branches:
      - main
    # paths:
    #   - ".github/workflows/**"
    #   - "crates/**"
    #   - "examples/**"
    #   - "Cargo.lock"
    #   - "Cargo.toml"

  pull_request:
    # paths:
    #   - ".github/workflows/**"
    #   - "crates/**"
    #   - "examples/**"
    #   - "Cargo.lock"
    #   - "Cargo.toml"

  merge_group:
    types:
      - checks_requested

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Disable incremental compilation.
  #
  # Incremental compilation is useful as part of an edit-build-test-edit cycle,
  # as it lets the compiler avoid recompiling code that hasn't changed. However,
  # on CI, we're not making small edits; we're almost always building the entire
  # project from scratch. Thus, incremental compilation on CI actually
  # introduces *additional* overhead to support making future builds
  # faster...but no future builds will ever occur in any given CI environment.
  #
  # See https://matklad.github.io/2021/09/04/fast-rust-builds.html#ci-workflow
  # for details.
  CARGO_INCREMENTAL: 0
  # Allow more retries for network requests in cargo (downloading crates) and
  # rustup (installing toolchains). This should help to reduce flaky CI failures
  # from transient network timeouts or other issues.
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  # Don't emit giant backtraces in the CI logs.
  RUST_BACKTRACE: short

jobs:
  formatting:
    name: Check formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3.1.0

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          components: rustfmt

      - name: Check formatting
        shell: bash
        run: cargo +nightly fmt --all --check

  check-msrv:
    name: Check compilation on MSRV toolchain
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os:
          - ubuntu-latest
        # - macos-latest
        # - windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3.1.0

      - name: Install mold linker
        uses: rui314/setup-mold@v1
        if: ${{ runner.os == 'Linux' }}
        with:
          make-default: true

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.65

      - uses: Swatinem/rust-cache@v2.2.0

      - name: Install cargo-hack
        uses: baptiste0928/cargo-install@v1.3.0
        with:
          crate: cargo-hack

      - name: Deny warnings
        shell: bash
        run: sed -i 's/rustflags = \[/rustflags = \[\n    "-Dwarnings",/' .cargo/config.toml

      - name: Test compilation
        shell: bash
        run: cargo hack check --features="sandbox" --ignore-unknown-features 

  # cargo-deny:
  #   name: Run cargo-deny
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       checks:
  #         - advisories
  #         - bans licenses sources

  #   # Prevent sudden announcement of a new advisory from failing CI
  #   continue-on-error: ${{ matrix.checks == 'advisories' }}

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3.1.0

  #     - name: Run cargo-deny
  #       uses: EmbarkStudios/cargo-deny-action@v1.3.2
  #       with:
  #         command: check ${{ matrix.checks }}

  test:
    name: Run tests on stable toolchain
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        # - macos-latest
        # - windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3.1.0

      - name: Install mold linker
        uses: rui314/setup-mold@v1
        if: ${{ runner.os == 'Linux' }}
        with:
          make-default: true

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: clippy, rustfmt

      - name: Install cargo-hack
        uses: baptiste0928/cargo-install@v1.3.0
        with:
          crate: cargo-hack

      # - name: Install cargo-nextest
      #   uses: baptiste0928/cargo-install@v1.3.0
      #   with:
      #     crate: cargo-nextest

      - uses: Swatinem/rust-cache@v2.2.0

      # - name: Setup Embark Studios lint rules
      #   shell: bash
      #   run: |
      #     mkdir -p .cargo
      #     curl -sL https://raw.githubusercontent.com/EmbarkStudios/rust-ecosystem/main/lints.toml >> .cargo/config.toml

      - name: Deny warnings
        shell: bash
        run: sed -i 's/rustflags = \[/rustflags = \[\n    "-Dwarnings",/' .cargo/config.toml

      - name: Run clippy
        shell: bash
        run: cargo clippy --all-features --all-targets

      - name: Test compilation
        shell: bash
        run: cargo hack check --features="sandbox" --ignore-unknown-features 

      # - name: Run tests
      #   shell: bash
      #   run: cargo nextest run --all-features

  typos:
    name: Spell check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3.1.0

      - name: Spell check
        uses: crate-ci/typos@master
