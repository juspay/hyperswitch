name: CI-pr

on:
  pull_request:
    # paths:
    #   - ".github/workflows/**"
    #   - "crates/**"
    #   - "examples/**"
    #   - "Cargo.lock"
    #   - "Cargo.toml"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Disable incremental compilation.
  #
  # Incremental compilation is useful as part of an edit-build-test-edit cycle,
  # as it lets the compiler avoid recompiling code that hasn't changed. However,
  # on CI, we're not making small edits; we're almost always building the entire
  # project from scratch. Thus, incremental compilation on CI actually
  # introduces *additional* overhead to support making future builds
  # faster...but no future builds will ever occur in any given CI environment.
  #
  # See https://matklad.github.io/2021/09/04/fast-rust-builds.html#ci-workflow
  # for details.
  CARGO_INCREMENTAL: 0
  # Allow more retries for network requests in cargo (downloading crates) and
  # rustup (installing toolchains). This should help to reduce flaky CI failures
  # from transient network timeouts or other issues.
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  # Don't emit giant backtraces in the CI logs.
  RUST_BACKTRACE: short
  # Use cargo's sparse index protocol
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse

jobs:
  formatting:
    name: Check formatting
    runs-on: ubuntu-latest
    steps:
      - name: Generate a token
        if: ${{ github.event.pull_request.head.repo.full_name == github.event.pull_request.base.repo.full_name }}
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.HYPERSWITCH_BOT_APP_ID }}
          private-key: ${{ secrets.HYPERSWITCH_BOT_APP_PRIVATE_KEY }}

      - name: Checkout repository with token
        if: ${{ github.event.pull_request.head.repo.full_name == github.event.pull_request.base.repo.full_name }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ steps.generate_token.outputs.token }}

      - name: Checkout repository for fork
        if: ${{ github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name }}
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          components: rustfmt

      - name: Check formatting for forked pull requests
        if: ${{ github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name }}
        shell: bash
        run: cargo +nightly fmt --all --check

      - name: Run formatter
        if: ${{ github.event.pull_request.head.repo.full_name == github.event.pull_request.base.repo.full_name }}
        shell: bash
        run: |
          cargo +nightly fmt --all
          if ! git diff --exit-code --quiet -- crates; then
            echo "::notice::Formatting check failed"
            git config --local user.name 'hyperswitch-bot[bot]'
            git config --local user.email '148525504+hyperswitch-bot[bot]@users.noreply.github.com'
            git add crates
            git commit --message 'chore: run formatter'
            git push
          fi

  check-msrv:
    name: Check compilation on MSRV toolchain
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os:
          - ubuntu-latest
        # - macos-latest
        # - windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: "Fetch base branch"
        shell: bash
        run: git fetch origin $GITHUB_BASE_REF --depth 1

      - name: Install mold linker
        uses: rui314/setup-mold@v1
        if: ${{ runner.os == 'Linux' }}
        with:
          make-default: true

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.65

      - uses: Swatinem/rust-cache@v2.7.0
        with:
          save-if: ${{ github.event_name == 'push' }}

      - name: Install cargo-hack
        uses: baptiste0928/cargo-install@v2.2.0
        with:
          crate: cargo-hack
          version: 0.6.5

      - name: Deny warnings
        shell: bash
        run: sed -i 's/rustflags = \[/rustflags = \[\n    "-Dwarnings",/' .cargo/config.toml

      - name: Check modified crates
        shell: bash
        run: |
          # Obtain a list of workspace members
          workspace_members="$(
            cargo metadata --format-version 1 --no-deps \
              | jq --compact-output --monochrome-output --raw-output '.workspace_members | sort | .[] | split(" ")[0]'
          )"

          PACKAGES_CHECKED=()
          PACKAGES_SKIPPED=()

          while IFS= read -r package_name; do
            # Obtain comma-separated list of transitive workspace dependencies for each workspace member
            change_paths="$(cargo tree --all-features --no-dedupe --prefix none --package "${package_name}" \
              | grep 'crates/' \
              | sort --unique \
              | awk --field-separator ' ' '{ printf "crates/%s\n", $1 }' | paste -d ',' -s -)"

            # Store change paths in an array by splitting `change_paths` by comma
            IFS=',' read -ra change_paths <<< "${change_paths}"

            # A package must be checked if any of its transitive dependencies (or itself) has been modified
            if git diff --exit-code --quiet "origin/${GITHUB_BASE_REF}" -- "${change_paths[@]}"; then
              printf '::debug::Skipping `%s` since none of these paths were modified: %s\n' "${package_name}" "${change_paths[*]}"
              PACKAGES_SKIPPED+=("${package_name}")
            else
              printf '::debug::Checking `%s` since at least one of these paths was modified: %s\n' "${package_name}" "${change_paths[*]}"
              PACKAGES_CHECKED+=("${package_name}")
            fi
          done <<< "${workspace_members}"

          printf '::notice::Packages checked: %s; Packages skipped: %s\n' "${PACKAGES_CHECKED[*]}" "${PACKAGES_SKIPPED[*]}"
          echo "PACKAGES_CHECKED=${PACKAGES_CHECKED[*]}" >> ${GITHUB_ENV}
          echo "PACKAGES_SKIPPED=${PACKAGES_SKIPPED[*]}" >> ${GITHUB_ENV}

      - name: Run `cargo hack` on modified crates
        shell: bash
        run: |
          # Store packages to check in an array by splitting `PACKAGES_CHECKED` by space
          IFS=' ' read -ra PACKAGES_CHECKED <<< "${PACKAGES_CHECKED}"

          for package in "${PACKAGES_CHECKED[@]}"; do
            printf '::group::Running `cargo hack` on package `%s`\n' "${package}"
            cargo hack check --each-feature --all-targets --package "${package}"
            echo '::endgroup::'
          done

  # cargo-deny:
  #   name: Run cargo-deny
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       checks:
  #         - advisories
  #         - bans licenses sources

  #   # Prevent sudden announcement of a new advisory from failing CI
  #   continue-on-error: ${{ matrix.checks == 'advisories' }}

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Run cargo-deny
  #       uses: EmbarkStudios/cargo-deny-action@v1.3.2
  #       with:
  #         command: check ${{ matrix.checks }}

  test:
    name: Run tests on stable toolchain
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        # - macos-latest
        # - windows-latest

    steps:
      - name: Generate a token
        if: ${{ github.event.pull_request.head.repo.full_name == github.event.pull_request.base.repo.full_name }}
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.HYPERSWITCH_BOT_APP_ID }}
          private-key: ${{ secrets.HYPERSWITCH_BOT_APP_PRIVATE_KEY }}

      - name: Checkout repository for fork
        if: ${{ (github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name) }}
        uses: actions/checkout@v4

      - name: Checkout repository with token
        if: ${{ (github.event.pull_request.head.repo.full_name == github.event.pull_request.base.repo.full_name) }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ steps.generate_token.outputs.token }}

      - name: "Fetch base branch"
        shell: bash
        run: git fetch origin $GITHUB_BASE_REF --depth 1

      - name: Install mold linker
        uses: rui314/setup-mold@v1
        if: ${{ runner.os == 'Linux' }}
        with:
          make-default: true

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable 2 weeks ago
          components: clippy

      - name: Install cargo-hack
        uses: baptiste0928/cargo-install@v2.2.0
        with:
          crate: cargo-hack

      # - name: Install cargo-nextest
      #   uses: baptiste0928/cargo-install@v2.2.0
      #   with:
      #     crate: cargo-nextest

      - uses: Swatinem/rust-cache@v2.7.0
        with:
          save-if: ${{ github.event_name == 'push' }}

      # - name: Setup Embark Studios lint rules
      #   shell: bash
      #   run: |
      #     mkdir -p .cargo
      #     curl -sL https://raw.githubusercontent.com/EmbarkStudios/rust-ecosystem/main/lints.toml >> .cargo/config.toml

      - name: Deny warnings
        shell: bash
        run: sed -i 's/rustflags = \[/rustflags = \[\n    "-Dwarnings",/' .cargo/config.toml

      - name: Run clippy
        shell: bash
        run: cargo clippy --all-features --all-targets

      - name: Check Cargo.lock changed
        if: ${{ (github.event.pull_request.head.repo.full_name == github.event.pull_request.base.repo.full_name) }}
        shell: bash
        run: |
          if ! git diff --quiet --exit-code -- Cargo.lock ; then
            git config --local user.name 'hyperswitch-bot[bot]'
            git config --local user.email '148525504+hyperswitch-bot[bot]@users.noreply.github.com'
            git add Cargo.lock
            git commit --message 'chore: update Cargo.lock'
            git push
          fi

      - name: Check modified crates
        shell: bash
        run: |
          # Obtain a list of workspace members
          workspace_members="$(
            cargo metadata --format-version 1 --no-deps \
              | jq --compact-output --monochrome-output --raw-output '.workspace_members | sort | .[] | split(" ")[0]'
          )"

          PACKAGES_CHECKED=()
          PACKAGES_SKIPPED=()

          while IFS= read -r package_name; do
            # Obtain comma-separated list of transitive workspace dependencies for each workspace member
            change_paths="$(cargo tree --all-features --no-dedupe --prefix none --package "${package_name}" \
              | grep 'crates/' \
              | sort --unique \
              | awk --field-separator ' ' '{ printf "crates/%s\n", $1 }' | paste -d ',' -s -)"

            # Store change paths in an array by splitting `change_paths` by comma
            IFS=',' read -ra change_paths <<< "${change_paths}"

            # A package must be checked if any of its transitive dependencies (or itself) has been modified
            if git diff --exit-code --quiet "origin/${GITHUB_BASE_REF}" -- "${change_paths[@]}"; then
              printf '::debug::Skipping `%s` since none of these paths were modified: %s\n' "${package_name}" "${change_paths[*]}"
              PACKAGES_SKIPPED+=("${package_name}")
            else
              printf '::debug::Checking `%s` since at least one of these paths was modified: %s\n' "${package_name}" "${change_paths[*]}"
              PACKAGES_CHECKED+=("${package_name}")
            fi
          done <<< "${workspace_members}"

          printf '::notice::Packages checked: %s; Packages skipped: %s\n' "${PACKAGES_CHECKED[*]}" "${PACKAGES_SKIPPED[*]}"
          echo "PACKAGES_CHECKED=${PACKAGES_CHECKED[*]}" >> ${GITHUB_ENV}
          echo "PACKAGES_SKIPPED=${PACKAGES_SKIPPED[*]}" >> ${GITHUB_ENV}

      - name: Run `cargo hack` on modified crates
        shell: bash
        run: |
          # Store packages to check in an array by splitting `PACKAGES_CHECKED` by space
          IFS=' ' read -ra PACKAGES_CHECKED <<< "${PACKAGES_CHECKED}"

          for package in "${PACKAGES_CHECKED[@]}"; do
            printf '::group::Running `cargo hack` on package `%s`\n' "${package}"
            cargo hack check --each-feature --all-targets --package "${package}"
            echo '::endgroup::'
          done

  typos:
    name: Spell check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Spell check
        uses: crate-ci/typos@master
