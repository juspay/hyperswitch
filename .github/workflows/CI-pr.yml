name: CI-pr

on:
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Disable incremental compilation.
  #
  # Incremental compilation is useful as part of an edit-build-test-edit cycle,
  # as it lets the compiler avoid recompiling code that hasn't changed. However,
  # on CI, we're not making small edits; we're almost always building the entire
  # project from scratch. Thus, incremental compilation on CI actually
  # introduces *additional* overhead to support making future builds
  # faster...but no future builds will ever occur in any given CI environment.
  #
  # See https://matklad.github.io/2021/09/04/fast-rust-builds.html#ci-workflow
  # for details.
  CARGO_INCREMENTAL: 0
  # Allow more retries for network requests in cargo (downloading crates) and
  # rustup (installing toolchains). This should help to reduce flaky CI failures
  # from transient network timeouts or other issues.
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  # Don't emit giant backtraces in the CI logs.
  RUST_BACKTRACE: short
  # PR originated from same repository
  IS_PR_FROM_SAME_REPO: ${{ github.event.pull_request.head.repo.full_name == github.event.pull_request.base.repo.full_name }}

jobs:
  formatting:
    name: Check formatting
    runs-on: ubuntu-latest
    steps:
      - name: Generate a token
        if: ${{ env.IS_PR_FROM_SAME_REPO == 'true' }}
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.HYPERSWITCH_BOT_APP_ID }}
          private-key: ${{ secrets.HYPERSWITCH_BOT_APP_PRIVATE_KEY }}

      - name: Checkout repository with token
        if: ${{ env.IS_PR_FROM_SAME_REPO == 'true' }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ steps.generate_token.outputs.token }}

      - name: Checkout repository for fork
        if: ${{ env.IS_PR_FROM_SAME_REPO == 'false' }}
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          components: rustfmt

      - name: Check formatting for forked pull requests
        if: ${{ env.IS_PR_FROM_SAME_REPO == 'false' }}
        shell: bash
        run: cargo +nightly fmt --all --check

      - name: Run formatter
        if: ${{ env.IS_PR_FROM_SAME_REPO == 'true' }}
        shell: bash
        run: |
          cargo +nightly fmt --all
          if ! git diff --exit-code --quiet -- crates; then
            echo "::notice::Formatting check failed"
            git config --local user.name 'hyperswitch-bot[bot]'
            git config --local user.email '148525504+hyperswitch-bot[bot]@users.noreply.github.com'
            git add crates
            git commit --message 'chore: run formatter'
            git push
          fi

  check-msrv:
    name: Check compilation on MSRV toolchain
    runs-on: ${{ matrix.runner }}

    env:
      # Use `sccache` for caching compilation artifacts
      RUSTC_WRAPPER: sccache
      RUSTFLAGS: "-D warnings"

    strategy:
      fail-fast: false
      matrix:
        runner:
          - ubuntu-latest
          - hyperswitch-runners

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install mold linker
        uses: rui314/setup-mold@v1
        if: ${{ runner.os == 'Linux' }}
        with:
          make-default: true

      - name: Get rust version from Cargo.toml
        shell: bash
        run: |
          rust_version=$(yq -oy '.workspace.package.rust-version' Cargo.toml)
          echo "rust_version=${rust_version}" >> $GITHUB_ENV

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: "${{ env.rust_version }}"

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install sccache
        uses: taiki-e/install-action@v2.42.18
        with:
          tool: sccache
          checksum: true

      - name: Install cargo-hack
        uses: taiki-e/install-action@v2.42.18
        with:
          tool: cargo-hack
          checksum: true

      - name: Install just
        uses: taiki-e/install-action@v2.42.18
        with:
          tool: just
          checksum: true

      - name: Install jq
        shell: bash
        run: .github/scripts/install-jq.sh

      - name: Cargo hack
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: just ci_hack

  # cargo-deny:
  #   name: Run cargo-deny
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       checks:
  #         - advisories
  #         - bans licenses sources

  #   # Prevent sudden announcement of a new advisory from failing CI
  #   continue-on-error: ${{ matrix.checks == 'advisories' }}

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Run cargo-deny
  #       uses: EmbarkStudios/cargo-deny-action@v1.3.2
  #       with:
  #         command: check ${{ matrix.checks }}

  check-stable:
    name: Run tests on stable toolchain
    runs-on: ${{ matrix.runner }}

    env:
      # Use `sccache` for caching compilation artifacts
      RUSTC_WRAPPER: sccache
      RUSTFLAGS: "-D warnings"

    strategy:
      fail-fast: false
      matrix:
        runner:
          - ubuntu-latest
          - hyperswitch-runners

    steps:
      - name: Generate a token
        if: ${{ env.IS_PR_FROM_SAME_REPO == 'true' }}
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.HYPERSWITCH_BOT_APP_ID }}
          private-key: ${{ secrets.HYPERSWITCH_BOT_APP_PRIVATE_KEY }}

      - name: Checkout repository for fork
        if: ${{ env.IS_PR_FROM_SAME_REPO == 'false' }}
        uses: actions/checkout@v4

      - name: Checkout repository with token
        if: ${{ env.IS_PR_FROM_SAME_REPO == 'true' }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ steps.generate_token.outputs.token }}

      - name: Install mold linker
        uses: rui314/setup-mold@v1
        if: ${{ runner.os == 'Linux' }}
        with:
          make-default: true

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable 2 weeks ago
          components: clippy

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install sccache
        uses: taiki-e/install-action@v2.42.18
        with:
          tool: sccache
          checksum: true

      - name: Install cargo-hack
        uses: taiki-e/install-action@v2.42.18
        with:
          tool: cargo-hack
          checksum: true

      - name: Install just
        uses: taiki-e/install-action@v2.42.18
        with:
          tool: just
          checksum: true

      - name: Install jq
        shell: bash
        run: .github/scripts/install-jq.sh

      # - name: Install cargo-nextest
      #   uses: taiki-e/install-action@v2.42.18
      #   with:
      #     tool: cargo-nextest
      #     checksum: true

      - name: Run clippy
        shell: bash
        run: just clippy

      - name: Check Cargo.lock changed
        if: ${{ env.IS_PR_FROM_SAME_REPO == 'true' }}
        shell: bash
        run: |
          if ! git diff --quiet --exit-code -- Cargo.lock ; then
            git config --local user.name 'hyperswitch-bot[bot]'
            git config --local user.email '148525504+hyperswitch-bot[bot]@users.noreply.github.com'
            git add Cargo.lock
            git commit --message 'chore: update Cargo.lock'
            git push
          fi

      - name: Run cargo check
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: just ci_hack

  tests:
    name: Run unit and documentation tests
    runs-on: hyperswitch-runners

    services:
      redis:
        image: "public.ecr.aws/docker/library/redis:alpine"
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      postgres:
        image: "public.ecr.aws/docker/library/postgres:alpine"
        env:
          POSTGRES_USER: db_user
          POSTGRES_PASSWORD: db_pass
          POSTGRES_DB: hyperswitch_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install mold linker
        uses: rui314/setup-mold@v1
        if: ${{ runner.os == 'Linux' }}
        with:
          make-default: true

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable 2 weeks ago
          components: clippy

      - name: Install sccache
        uses: taiki-e/install-action@v2.42.18
        with:
          tool: sccache
          checksum: true

      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2.42.18
        with:
          tool: cargo-nextest
          checksum: true

      - name: Install just
        uses: taiki-e/install-action@v2.42.18
        with:
          tool: just
          checksum: true

      - name: Install Diesel CLI
        uses: baptiste0928/cargo-install@v3.1.1
        with:
          crate: diesel_cli
          features: postgres
          args: --no-default-features

      - name: Run database migrations
        shell: bash
        env:
          DATABASE_URL: postgres://db_user:db_pass@localhost:5432/hyperswitch_db
        run: just migrate run --locked-schema

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run unit and documentation tests
        shell: bash
        # `cargo` does not allow us to exclude specific features from all features,
        # so we're using `cargo metadata` to obtain all features from all workspace crates
        # and exclude specific features from the list.
        run: |
          FEATURES=$(cargo metadata --all-features --format-version 1 | \
            jq -r '
              [ ( .workspace_members | sort ) as $package_ids # Store workspace crate package IDs in `package_ids` array
              | .packages[] | select( IN(.id; $package_ids[]) ) | .features | keys[] ] | unique # Select all unique features from all workspace crates
              | del( .[] | select( any( . ; test("(([a-z_]+)_)?v2|vergen|aws_kms|aws_s3|release|keymanager_create|keymanager_mtls|encryption_service") ) ) ) # Exclude some features from features list
              | join(",") # Construct a comma-separated string of features for passing to `cargo`
            ')
          cargo nextest run --config-file .github/nextest.toml --profile ci -E 'kind(lib)' --build-jobs 4 --features "${FEATURES}"
          cargo test --doc --features "${FEATURES}"

  typos:
    name: Spell check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Spell check
        uses: crate-ci/typos@master

  check-v2:
    name: Check compilation for V2 features
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install mold linker
        uses: rui314/setup-mold@v1
        if: ${{ runner.os == 'Linux' }}
        with:
          make-default: true

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable 2 weeks ago
          components: clippy

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install rust cache
        uses: Swatinem/rust-cache@v2.7.3

      - name: Install just
        uses: taiki-e/install-action@v2.42.18
        with:
          tool: just
          checksum: true

      - name: Run cargo clippy with v2 features enabled
        shell: bash
        run: just clippy_v2

      - name: Run cargo check enabling only the release and v2 features
        shell: bash
        env:
          RUSTFLAGS: "-A warnings"
        run: cargo check --no-default-features --features "release,v2"
