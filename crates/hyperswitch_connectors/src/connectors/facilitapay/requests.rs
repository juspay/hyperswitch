use api_models::payments::CustomerIdentificationDocumentType;
use common_enums::CountryAlpha2;
use common_utils::{
    new_type::MaskedBankAccount,
    pii::{self, IpAddress},
    types::StringMajorUnit,
};
use masking::Secret;
use serde::Serialize;
use time::PrimitiveDateTime;

pub struct FacilitapayRouterData<T> {
    pub amount: StringMajorUnit,
    pub router_data: T,
}

#[derive(Debug, Serialize)]
pub struct FacilitapayAuthRequest {
    pub user: FacilitapayCredentials,
}

#[derive(Debug, Serialize)]
pub struct FacilitapayCredentials {
    pub username: Secret<String>, // email_id
    pub password: Secret<String>,
}

#[derive(Debug, Serialize)]
pub struct FacilitapayThreedsChallengeValidateRequest {
    /// Original order_number from /threeds/token
    pub code_threeds: Secret<String>,
    /// JWT from Cardinal after challenge
    pub validate_token: Secret<String>,
}

#[derive(Debug, Serialize, PartialEq)]
pub struct FacilitapayCardDetails {
    pub card_number: cards::CardNumber,
    #[serde(rename = "card_expiration_date")]
    pub expiry_date: Secret<String>, // Format: "MM/YYYY"
    #[serde(rename = "card_security_code")]
    pub cvc: Secret<String>,
    pub card_brand: String,
    pub fullname: Secret<String>,
}

#[derive(Debug, PartialEq, Clone)]
pub struct SoftDescriptor(pub String);

#[derive(Debug, Serialize, PartialEq, Clone, Copy)]
pub enum BrowserLanguageEnabled {
    #[serde(rename = "Y")]
    Yes,
    #[serde(rename = "N")]
    No,
}

#[derive(Debug, Serialize, PartialEq)]
pub struct FacilitapayCardThreeDsData {
    /// It is a short description of the merchant that will appear on the buyer's credit card statement. It has a limit of 17 characters.
    #[serde(rename = "softDescriptor")]
    pub soft_descriptor: SoftDescriptor,
    /// It is the URL of the merchant's website where the transaction is taking place without 'https://'.
    #[serde(rename = "urlSite3DS")]
    pub url_site_3ds: String,
    /// It is a unique code (order number) generated by the card issuer for the specific transaction.
    #[serde(rename = "code3DS")]
    pub code_3ds: String,
    /// It is a uniq UUID for the anti-fraud system used by the payment processor. You must genarate it for every trasnaction you create.
    #[serde(rename = "codeAntiFraud")]
    pub code_anti_fraud: Secret<String>,
    /// Value of the Accept Header of the client's browser.
    #[serde(rename = "httpAcceptBrowserValue")]
    pub http_accept_browser_value: String,
    /// Client's browser language according to https://www.techonthenet.com/js/language_tags.php
    #[serde(rename = "httpBrowserLanguage")]
    pub http_browser_language: String,
    ///	If JAVA enabled send Y value, otherwise N.
    #[serde(rename = "httpBrowserJavaEnabled")]
    pub http_browser_java_enabled: BrowserLanguageEnabled,
    /// If JAVA SCRIPT enabled send Y value, otherwise N.
    #[serde(rename = "httpBrowserJavaScriptEnabled")]
    pub http_browser_javascript_enabled: BrowserLanguageEnabled,
    /// Number of bits used to display images.
    #[serde(rename = "httpBrowserColorDepth")]
    pub http_browser_color_depth: String,
    /// Height of the client's screen resolution.
    #[serde(rename = "httpBrowserScreenHeight")]
    pub http_browser_screen_height: String,
    /// Width of the client screen resolution.
    #[serde(rename = "httpBrowserScreenWidth")]
    pub http_browser_screen_width: String,
    /// Difference in minutes between GMT time and that of the client's browser.
    #[serde(rename = "httpBrowserTimeDifference")]
    pub http_browser_time_difference: String,
    /// The exact value of the User Agent Header.
    #[serde(rename = "userAgentBrowserValue")]
    pub user_agent_browser_value: String,
    /// It is the IP address of the client's device.
    #[serde(rename = "ipAddress")]
    pub ip_address: Secret<String, IpAddress>,
}

#[derive(Debug, Serialize, PartialEq)]
pub struct FacilitapayCardTransactionRequest {
    pub currency: api_models::enums::Currency,
    pub exchange_currency: api_models::enums::Currency,
    pub value: StringMajorUnit,
    pub from_credit_card: FacilitapayCardDetails,
    pub to_bank_account_id: MaskedBankAccount, // UUID
    pub subject_id: Secret<String>,            // Customer ID (UUID)
    pub threeds: FacilitapayCardThreeDsData,
}

#[derive(Debug, Serialize, PartialEq)]
pub struct FacilitapayPixTransactionRequest {
    pub subject_id: Secret<String>,              // Customer ID (UUID)
    pub from_bank_account_id: MaskedBankAccount, // UUID
    pub to_bank_account_id: MaskedBankAccount,   // UUID
    pub currency: api_models::enums::Currency,
    pub exchange_currency: api_models::enums::Currency,
    pub value: StringMajorUnit,
    pub use_dynamic_pix: bool,
    #[serde(default, with = "common_utils::custom_serde::iso8601")]
    pub dynamic_pix_expires_at: PrimitiveDateTime,
}

#[derive(Debug, Serialize, PartialEq)]
#[serde(untagged)]
pub enum FacilitapayTransactionRequest {
    Card(Box<FacilitapayCardTransactionRequest>),
    Pix(Box<FacilitapayPixTransactionRequest>),
}

#[derive(Debug, Serialize, PartialEq)]
pub struct FacilitapayPaymentsRequest {
    pub transaction: FacilitapayTransactionRequest,
}

// Type definition for RefundRequest
#[derive(Default, Debug, Serialize)]
pub struct FacilitapayRefundRequest {
    pub amount: StringMajorUnit,
}

#[derive(Debug, Serialize, PartialEq)]
#[serde(rename_all = "snake_case")]
pub struct FacilitapayCustomerRequest {
    pub person: FacilitapayPerson,
}

#[derive(Debug, Serialize, PartialEq)]
#[serde(rename_all = "snake_case")]
pub struct FacilitapayPerson {
    pub document_number: Secret<String>,
    pub document_type: CustomerIdentificationDocumentType,
    pub social_name: Secret<String>,
    pub fiscal_country: CountryAlpha2,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub email: Option<pii::Email>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub birth_date: Option<time::Date>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub phone_country_code: Option<Secret<String>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub phone_area_code: Option<Secret<String>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub phone_number: Option<Secret<String>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub address_city: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub address_state: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub address_complement: Option<Secret<String>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub address_country: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub address_number: Option<Secret<String>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub address_postal_code: Option<Secret<String>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub address_street: Option<Secret<String>>,
    pub net_monthly_average_income: Option<StringMajorUnit>,
}
