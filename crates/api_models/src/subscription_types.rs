use common_utils::{
    errors::ValidationError,
    pii::{self},
    types::{MinorUnit},
};
use masking::{Secret};
use time::{PrimitiveDateTime};
use url::Url;
use utoipa::ToSchema;
use crate::{
    admin,
    enums as api_enums,
    mandates::RecurringDetails,
    payments::{Address, MandateData, ConnectorMetadata, FeatureMetadata, PaymentMethodDataRequest, ThreeDsCompletionIndicator, CtpServiceDetails, RequestSurchargeDetails},
};

#[derive(
    Default,
    Debug,
    serde::Deserialize,
    serde::Serialize,
    Clone,
    ToSchema,
)]
#[serde(deny_unknown_fields)]
pub struct PaymentsRequest {
    pub amount: Option<i64>,
    pub order_tax_amount: Option<MinorUnit>,
    pub currency: Option<api_enums::Currency>,
    pub amount_to_capture: Option<MinorUnit>,
    pub shipping_cost: Option<MinorUnit>,
    pub payment_id: Option<String>,
    pub merchant_id: Option<String>,
    pub routing: Option<serde_json::Value>,
    pub connector: Option<Vec<api_enums::Connector>>,
    pub capture_method: Option<api_enums::CaptureMethod>,
    pub authentication_type: Option<api_enums::AuthenticationType>,
    pub billing: Option<Address>,
    #[serde(default, with = "common_utils::custom_serde::iso8601::option")]
    pub capture_on: Option<PrimitiveDateTime>,
    pub confirm: Option<bool>,
    pub customer_id: Option<String>,
    pub email: Option<pii::Email>,
    pub name: Option<Secret<String>>,
    pub phone: Option<Secret<String>>,
    pub phone_country_code: Option<String>,
    pub off_session: Option<bool>,
    pub description: Option<String>,
    pub return_url: Option<Url>,
    pub setup_future_usage: Option<api_enums::FutureUsage>,
    pub payment_method_data: Option<PaymentMethodDataRequest>,
    pub payment_method: Option<api_enums::PaymentMethod>,
    pub payment_token: Option<String>,
    pub card_cvc: Option<Secret<String>>,
    pub shipping: Option<Address>,
    pub statement_descriptor_name: Option<String>,
    pub statement_descriptor_suffix: Option<String>,
    pub order_details: Option<Vec<crate::payments::OrderDetailsWithAmount>>,
    pub client_secret: Option<String>,
    pub mandate_data: Option<MandateData>,
    pub customer_acceptance: Option<common_types::payments::CustomerAcceptance>,
    pub mandate_id: Option<String>,
    pub browser_info: Option<serde_json::Value>,
    pub payment_experience: Option<api_enums::PaymentExperience>,
    pub payment_method_type: Option<api_enums::PaymentMethodType>,
    pub business_country: Option<api_enums::CountryAlpha2>,
    pub business_label: Option<String>,
    pub merchant_connector_details: Option<admin::MerchantConnectorDetailsWrap>,
    pub allowed_payment_method_types: Option<Vec<api_enums::PaymentMethodType>>,
    pub business_sub_label: Option<String>,
    pub retry_action: Option<api_enums::RetryAction>,
    pub metadata: Option<serde_json::Value>,
    pub connector_metadata: Option<ConnectorMetadata>,
    pub feature_metadata: Option<FeatureMetadata>,
    pub payment_link: Option<bool>,
    pub payment_link_config: Option<crate::payments::PaymentCreatePaymentLinkConfig>,
    pub payment_link_config_id: Option<String>,
    pub profile_id: Option<String>,
    pub surcharge_details: Option<RequestSurchargeDetails>,
    pub payment_type: Option<api_enums::PaymentType>,
    pub request_incremental_authorization: Option<bool>,
    pub session_expiry: Option<u32>,
    pub frm_metadata: Option<pii::SecretSerdeValue>,
    pub request_external_three_ds_authentication: Option<bool>,
    pub recurring_details: Option<RecurringDetails>,
    pub split_payments: Option<common_types::payments::SplitPaymentsRequest>,
    pub request_extended_authorization: Option<common_types::primitive_wrappers::RequestExtendedAuthorizationBool>,
    pub merchant_order_reference_id: Option<String>,
    pub skip_external_tax_calculation: Option<bool>,
    pub psd2_sca_exemption_type: Option<api_enums::ScaExemptionType>,
    pub ctp_service_details: Option<CtpServiceDetails>,
    pub force_3ds_challenge: Option<bool>,
    pub threeds_method_comp_ind: Option<ThreeDsCompletionIndicator>,
    pub is_iframe_redirection_enabled: Option<bool>,
    pub all_keys_required: Option<bool>,
    #[serde(skip_deserializing)]
