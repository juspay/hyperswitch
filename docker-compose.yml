version: "3.7"

volumes:
  cargo_cache:
  pg_data:
  cargo_build_cache:
  p_cargo_build_cache:
  c_cargo_build_cache:

networks:
  router_net:

services:

  promtail:
    image: grafana/promtail:latest
    volumes:
      - ./logs:/var/log/router
      - ./config:/etc/promtail
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/promtail.yaml
    profiles:
      - monitoring
    networks:
      - router_net

  loki:
    image: grafana/loki:latest
    ports:
      - "3100"
    command: -config.file=/etc/loki/loki.yaml
    networks:
      - router_net
    profiles:
      - monitoring
    volumes:
      - ./config:/etc/loki

  otel-collector:
    image: lsampras/otelcontribcol:latest
    command: --config=/etc/otel-collector.yaml
    networks:
      - router_net
    profiles:
      - monitoring
    volumes:
      - ./config/otel-collector.yaml:/etc/otel-collector.yaml
    ports:
      - "4317"
      - "8888"
      - "8889"

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    networks:
      - router_net
    profiles:
      - monitoring
    restart: unless-stopped
    volumes:
      - ./config/grafana.ini:/etc/grafana/grafana.ini
      - ./config/grafana-datasource.yaml:/etc/grafana/provisioning/datasources/datasource.yml

  pg:
    image: postgres:14.5
    ports:
      - "5432"
    networks:
      - router_net
    volumes:
      - pg_data:/VAR/LIB/POSTGRESQL/DATA
    environment:
      - POSTGRES_USER=db_user
      - POSTGRES_PASSWORD=db_pass
      - POSTGRES_DB=hyperswitch_db

  hyperswitch-server:
    image: rust:1.65
    command: cargo run -- -f ./config/docker_compose.toml
    working_dir: /app
    ports:
      - "8080:8080"
    networks:
      - router_net
    volumes:
      - ./:/app
      - cargo_cache:/cargo_cache
      - cargo_build_cache:/cargo_build_cache
    environment:
      - CARGO_TARGET_DIR=/cargo_build_cache
      - OTEL_EXPORTER_OTLP_ENDPOINT=https://otel-collector:4317
    labels:
      logs: "promtail"
    healthcheck:
      test: curl --fail http://localhost:8080/health || exit 1
      interval: 60s
      retries: 3
      start_period: 20s
      timeout: 10s

  orca-producer:
    image: rust:1.65
    command: cargo run --bin scheduler -- -f ./config/docker_compose.toml
    working_dir: /app
    networks:
      - router_net
    volumes:
      - ./:/app
      - cargo_cache:/cargo_cache
      - p_cargo_build_cache:/cargo_build_cache
    environment:
      - CARGO_TARGET_DIR=/cargo_build_cache
      - OTEL_EXPORTER_OTLP_ENDPOINT=https://otel-collector:4317
      - SCHEDULER_FLOW=producer
    labels:
      logs: "promtail"
    
  orca-consumer:
    image: rust:1.65
    command: cargo run --bin scheduler -- -f ./config/docker_compose.toml
    working_dir: /app
    networks:
      - router_net
    volumes:
      - ./:/app
      - cargo_cache:/cargo_cache
      - c_cargo_build_cache:/cargo_build_cache
    environment:
      - CARGO_TARGET_DIR=/cargo_build_cache
      - OTEL_EXPORTER_OTLP_ENDPOINT=https://otel-collector:4317
      - SCHEDULER_FLOW=consumer
    labels:
      logs: "promtail"
    

  redis-queue:
    image: redis:7    
    deploy:
      replicas: ${REDIS_CLUSTER_COUNT:-3}
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    labels:
      - redis
    networks:
      - router_net
    ports:
      - "6379"
      - "16379"

  redis-init:
    image: redis:7
    depends_on:
      - redis-queue
    networks:
      - router_net
    command: "bash -c 'export COUNT=${REDIS_CLUSTER_COUNT:-3}\n
      if [ $$COUNT -lt 3 ]\n
      then\n
      echo \"Minimum 3 nodes are needed for redis cluster\"\n
      exit 1\n
      fi\n
      HOSTS=\"\"\n
      for ((c=1; c<=$$COUNT;c++))\n
      do\n
      NODE=$COMPOSE_PROJECT_NAME-redis-queue-$$c:6379\n
      echo $$NODE\n
      HOSTS=\"$$HOSTS $$NODE\"\n
      done\n
      echo Creating a cluster with $$HOSTS\n
      redis-cli --cluster create $$HOSTS --cluster-yes\n
      '"
  
  prometheus:
    image: prom/prometheus:latest
    networks:
      - router_net
    profiles:
      - monitoring
    volumes:
      - ./config/prometheus.yaml:/etc/prometheus/prometheus.yml
    ports:
      - "9090"
    restart: unless-stopped
  
  tempo:
    image: grafana/tempo:latest
    command: -config.file=/etc/tempo.yaml
    volumes:
      - ./config/tempo.yaml:/etc/tempo.yaml
    networks:
      - router_net
    profiles:
      - monitoring
    ports:
      - "3200" # tempo
      - "4317" # otlp grpc
    restart: unless-stopped