{
  "openapi": "3.0.3",
  "info": {
    "title": "Hyperswitch - API Documentation",
    "description": "\n## Get started\n\nHyperswitch provides a collection of APIs that enable you to process and manage payments.\nOur APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.\n\nYou can consume the APIs directly using your favorite HTTP/REST library.\n\nWe have a testing environment referred to \"sandbox\", which you can setup to test API calls without\naffecting production data.\nCurrently, our sandbox environment is live while our production environment is under development\nand will be available soon.\nYou can sign up on our Dashboard to get API keys to access Hyperswitch API.\n\n### Environment\n\nUse the following base URLs when making requests to the APIs:\n\n| Environment   |  Base URL                          |\n|---------------|------------------------------------|\n| Sandbox       | <https://sandbox.hyperswitch.io>   |\n| Production    | <https://api.hyperswitch.io>       |\n\n## Authentication\n\nWhen you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant\naccount, you are given a secret key (also referred as api-key) and a publishable key.\nYou may authenticate all API requests with Hyperswitch server by providing the appropriate key in\nthe request Authorization header.\n\n| Key             |  Description                                                                                  |\n|-----------------|-----------------------------------------------------------------------------------------------|\n| api-key         | Private key. Used to authenticate all API requests from your merchant server                  |\n| publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |\n\nNever share your secret api keys. Keep them guarded and secure.\n",
    "contact": {
      "name": "Hyperswitch Support",
      "url": "https://hyperswitch.io",
      "email": "hyperswitch@juspay.in"
    },
    "license": {
      "name": "Apache-2.0"
    },
    "version": "0.1.0"
  },
  "servers": [
    {
      "url": "https://sandbox.hyperswitch.io",
      "description": "Sandbox Environment"
    }
  ],
  "paths": {
    "/organization": {
      "post": {
        "tags": [
          "Organization"
        ],
        "summary": "Organization - Create",
        "description": "Organization - Create\n\nCreate a new organization",
        "operationId": "Create an Organization",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationRequest"
              },
              "examples": {
                "Create an organization with organization_name": {
                  "value": {
                    "organization_name": "organization_abc"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Organization Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      }
    },
    "/organization/{organization_id}": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Organization - Retrieve",
        "description": "Organization - Retrieve\n\nRetrieve an existing organization",
        "operationId": "Retrieve an Organization",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "The unique identifier for the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      },
      "put": {
        "tags": [
          "Organization"
        ],
        "summary": "Organization - Update",
        "description": "Organization - Update\n\nCreate a new organization for .",
        "operationId": "Update an Organization",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "The unique identifier for the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationRequest"
              },
              "examples": {
                "Update organization_name of the organization": {
                  "value": {
                    "organization_name": "organization_abcd"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Organization Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      }
    },
    "/v2/connector_accounts": {
      "post": {
        "tags": [
          "Merchant Connector Account"
        ],
        "summary": "Merchant Connector - Create",
        "description": "Merchant Connector - Create\n\nCreates a new Merchant Connector for the merchant account. The connector could be a payment processor/facilitator/acquirer or a provider of specialized services like Fraud/Accounting etc.",
        "operationId": "Create a Merchant Connector",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantConnectorCreate"
              },
              "examples": {
                "Create a merchant account with custom connector label": {
                  "value": {
                    "connector_account_details": {
                      "api_key": "{{adyen-api-key}}",
                      "auth_type": "BodyKey",
                      "key1": "{{adyen_merchant_account}}"
                    },
                    "connector_label": "EU_adyen",
                    "connector_name": "adyen",
                    "connector_type": "payment_processor"
                  }
                },
                "Create a merchant connector account under a specific business profile": {
                  "value": {
                    "connector_account_details": {
                      "api_key": "{{adyen-api-key}}",
                      "auth_type": "BodyKey",
                      "key1": "{{adyen_merchant_account}}"
                    },
                    "connector_name": "adyen",
                    "connector_type": "payment_processor",
                    "profile_id": "{{profile_id}}"
                  }
                },
                "Create a merchant connector account with minimal fields": {
                  "value": {
                    "connector_account_details": {
                      "api_key": "{{adyen-api-key}}",
                      "auth_type": "BodyKey",
                      "key1": "{{adyen_merchant_account}}"
                    },
                    "connector_name": "adyen",
                    "connector_type": "payment_processor"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Merchant Connector Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantConnectorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing Mandatory fields"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      }
    },
    "/v2/connector_accounts/{id}": {
      "get": {
        "tags": [
          "Merchant Connector Account"
        ],
        "summary": "Merchant Connector - Retrieve",
        "description": "Merchant Connector - Retrieve\n\nRetrieves details of a Connector account",
        "operationId": "Retrieve a Merchant Connector",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the Merchant Connector",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Merchant Connector retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantConnectorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "404": {
            "description": "Merchant Connector does not exist in records"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      },
      "put": {
        "tags": [
          "Merchant Connector Account"
        ],
        "summary": "Merchant Connector - Update",
        "description": "Merchant Connector - Update\n\nTo update an existing Merchant Connector account. Helpful in enabling/disabling different payment methods and other settings for the connector",
        "operationId": "Update a Merchant Connector",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the Merchant Connector",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantConnectorUpdate"
              },
              "examples": {
                "Enable card payment method": {
                  "value": {
                    "connector_type": "payment_processor",
                    "payment_methods_enabled": [
                      {
                        "payment_method": "card"
                      }
                    ]
                  }
                },
                "Update webhook secret": {
                  "value": {
                    "connector_webhook_details": {
                      "merchant_secret": "{{webhook_secret}}"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Merchant Connector Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantConnectorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "404": {
            "description": "Merchant Connector does not exist in records"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Merchant Connector Account"
        ],
        "summary": "Merchant Connector - Delete",
        "description": "Merchant Connector - Delete\n\nDelete or Detach a Merchant Connector from Merchant Account",
        "operationId": "Delete a Merchant Connector",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the Merchant Connector",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Merchant Connector Deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantConnectorDeleteResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "404": {
            "description": "Merchant Connector does not exist in records"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      }
    },
    "/v2/accounts": {
      "post": {
        "tags": [
          "Merchant Account"
        ],
        "summary": "Merchant Account - Create",
        "description": "Merchant Account - Create\n\nCreate a new account for a *merchant* and the *merchant* could be a seller or retailer or client who likes to receive and send payments.\n\nBefore creating the merchant account, it is mandatory to create an organization.",
        "operationId": "Create a Merchant Account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantAccountCreate"
              },
              "examples": {
                "Create a merchant account with merchant details": {
                  "value": {
                    "merchant_details": {
                      "primary_contact_person": "John Doe",
                      "primary_email": "example@company.com"
                    },
                    "merchant_name": "Cloth Store",
                    "organization_id": "org_abcdefghijklmnop"
                  }
                },
                "Create a merchant account with metadata": {
                  "value": {
                    "merchant_name": "Cloth Store",
                    "metadata": {
                      "key_1": "John Doe",
                      "key_2": "Trends"
                    },
                    "organization_id": "org_abcdefghijklmnop"
                  }
                },
                "Create a merchant account with minimal fields": {
                  "value": {
                    "merchant_name": "Cloth Store",
                    "organization_id": "org_abcdefghijklmnop"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Merchant Account Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantAccountResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      }
    },
    "/v2/accounts/{id}": {
      "get": {
        "tags": [
          "Merchant Account"
        ],
        "summary": "Merchant Account - Retrieve",
        "description": "Merchant Account - Retrieve\n\nRetrieve a *merchant* account details.",
        "operationId": "Retrieve a Merchant Account",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the merchant account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Merchant Account Retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantAccountResponse"
                }
              }
            }
          },
          "404": {
            "description": "Merchant account not found"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      },
      "put": {
        "tags": [
          "Merchant Account"
        ],
        "summary": "Merchant Account - Update",
        "description": "Merchant Account - Update\n\nUpdates details of an existing merchant account. Helpful in updating merchant details such as email, contact details, or other configuration details like webhook, routing algorithm etc",
        "operationId": "Update a Merchant Account",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "The unique identifier for the merchant account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantAccountUpdate"
              },
              "examples": {
                "Update Merchant Details": {
                  "value": {
                    "merchant_details": {
                      "primary_contact_person": "John Doe",
                      "primary_email": "example@company.com"
                    }
                  }
                },
                "Update merchant name": {
                  "value": {
                    "merchant_id": "merchant_abc",
                    "merchant_name": "merchant_name"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Merchant Account Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantAccountResponse"
                }
              }
            }
          },
          "404": {
            "description": "Merchant account not found"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      }
    },
    "/v2/profiles": {
      "post": {
        "tags": [
          "Business Profile"
        ],
        "summary": "Business Profile - Create",
        "description": "Business Profile - Create\n\nCreates a new *business profile* for a merchant",
        "operationId": "Create A Business Profile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BusinessProfileCreate"
              },
              "examples": {
                "Create a business profile with profile name": {
                  "value": {
                    "profile_name": "shoe_business"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Business Account Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProfileResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      }
    },
    "/v2/profiles/{profile_id}": {
      "get": {
        "tags": [
          "Business Profile"
        ],
        "summary": "Business Profile - Retrieve",
        "description": "Business Profile - Retrieve\n\nRetrieve existing *business profile*",
        "operationId": "Retrieve a Business Profile",
        "parameters": [
          {
            "name": "profile_id",
            "in": "path",
            "description": "The unique identifier for the business profile",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Business Profile Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProfileResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      },
      "put": {
        "tags": [
          "Business Profile"
        ],
        "summary": "Business Profile - Update",
        "description": "Business Profile - Update\n\nUpdate the *business profile*",
        "operationId": "Update a Business Profile",
        "parameters": [
          {
            "name": "profile_id",
            "in": "path",
            "description": "The unique identifier for the business profile",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BusinessProfileCreate"
              },
              "examples": {
                "Update business profile with profile name fields": {
                  "value": {
                    "profile_name": "shoe_business"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Business Profile Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProfileResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AcceptanceType": {
        "type": "string",
        "description": "This is used to indicate if the mandate was accepted online or offline",
        "enum": [
          "online",
          "offline"
        ]
      },
      "AcceptedCountries": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "type",
              "list"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "enable_only"
                ]
              },
              "list": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CountryAlpha2"
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "list"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "disable_only"
                ]
              },
              "list": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CountryAlpha2"
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "all_accepted"
                ]
              }
            }
          }
        ],
        "description": "Object to filter the customer countries for which the payment method is displayed",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "AcceptedCurrencies": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "type",
              "list"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "enable_only"
                ]
              },
              "list": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Currency"
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "list"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "disable_only"
                ]
              },
              "list": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Currency"
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "all_accepted"
                ]
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "type"
        }
      },
      "AchBankTransfer": {
        "type": "object",
        "required": [
          "bank_account_number",
          "bank_routing_number"
        ],
        "properties": {
          "bank_name": {
            "type": "string",
            "description": "Bank name",
            "example": "Deutsche Bank",
            "nullable": true
          },
          "bank_country_code": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CountryAlpha2"
              }
            ],
            "nullable": true
          },
          "bank_city": {
            "type": "string",
            "description": "Bank city",
            "example": "California",
            "nullable": true
          },
          "bank_account_number": {
            "type": "string",
            "description": "Bank account number is an unique identifier assigned by a bank to a customer.",
            "example": "000123456"
          },
          "bank_routing_number": {
            "type": "string",
            "description": "[9 digits] Routing number - used in USA for identifying a specific bank.",
            "example": "110000000"
          }
        }
      },
      "AchBillingDetails": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The Email ID for ACH billing",
            "example": "example@me.com",
            "nullable": true
          }
        }
      },
      "AchTransfer": {
        "type": "object",
        "required": [
          "account_number",
          "bank_name",
          "routing_number",
          "swift_code"
        ],
        "properties": {
          "account_number": {
            "type": "string",
            "example": "122385736258"
          },
          "bank_name": {
            "type": "string"
          },
          "routing_number": {
            "type": "string",
            "example": "012"
          },
          "swift_code": {
            "type": "string",
            "example": "234"
          }
        }
      },
      "AdditionalMerchantData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "open_banking_recipient_data"
            ],
            "properties": {
              "open_banking_recipient_data": {
                "$ref": "#/components/schemas/MerchantRecipientData"
              }
            }
          }
        ]
      },
      "Address": {
        "type": "object",
        "properties": {
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressDetails"
              }
            ],
            "nullable": true
          },
          "phone": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneDetails"
              }
            ],
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddressDetails": {
        "type": "object",
        "description": "Address details",
        "properties": {
          "city": {
            "type": "string",
            "description": "The address city",
            "example": "New York",
            "nullable": true,
            "maxLength": 50
          },
          "country": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CountryAlpha2"
              }
            ],
            "nullable": true
          },
          "line1": {
            "type": "string",
            "description": "The first line of the address",
            "example": "123, King Street",
            "nullable": true,
            "maxLength": 200
          },
          "line2": {
            "type": "string",
            "description": "The second line of the address",
            "example": "Powelson Avenue",
            "nullable": true,
            "maxLength": 50
          },
          "line3": {
            "type": "string",
            "description": "The third line of the address",
            "example": "Bridgewater",
            "nullable": true,
            "maxLength": 50
          },
          "zip": {
            "type": "string",
            "description": "The zip/postal code for the address",
            "example": "08807",
            "nullable": true,
            "maxLength": 50
          },
          "state": {
            "type": "string",
            "description": "The address state",
            "example": "New York",
            "nullable": true
          },
          "first_name": {
            "type": "string",
            "description": "The first name for the address",
            "example": "John",
            "nullable": true,
            "maxLength": 255
          },
          "last_name": {
            "type": "string",
            "description": "The last name for the address",
            "example": "Doe",
            "nullable": true,
            "maxLength": 255
          }
        },
        "additionalProperties": false
      },
      "AirwallexData": {
        "type": "object",
        "properties": {
          "payload": {
            "type": "string",
            "description": "payload required by airwallex",
            "nullable": true
          }
        }
      },
      "AlfamartVoucherData": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "description": "The billing first name for Alfamart",
            "example": "Jane",
            "nullable": true
          },
          "last_name": {
            "type": "string",
            "description": "The billing second name for Alfamart",
            "example": "Doe",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "The Email ID for Alfamart",
            "example": "example@me.com",
            "nullable": true
          }
        }
      },
      "AliPayHkRedirection": {
        "type": "object"
      },
      "AliPayQr": {
        "type": "object"
      },
      "AliPayRedirection": {
        "type": "object"
      },
      "AmountFilter": {
        "type": "object",
        "properties": {
          "start_amount": {
            "type": "integer",
            "format": "int64",
            "description": "The start amount to filter list of transactions which are greater than or equal to the start amount",
            "nullable": true
          },
          "end_amount": {
            "type": "integer",
            "format": "int64",
            "description": "The end amount to filter list of transactions which are less than or equal to the end amount",
            "nullable": true
          }
        }
      },
      "AmountInfo": {
        "type": "object",
        "required": [
          "label",
          "amount"
        ],
        "properties": {
          "label": {
            "type": "string",
            "description": "The label must be the name of the merchant."
          },
          "type": {
            "type": "string",
            "description": "A value that indicates whether the line item(Ex: total, tax, discount, or grand total) is final or pending.",
            "nullable": true
          },
          "amount": {
            "type": "string",
            "description": "The total amount for the payment in majot unit string (Ex: 38.02)",
            "example": "38.02"
          }
        }
      },
      "ApiKeyExpiration": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "never"
            ]
          },
          {
            "type": "string",
            "format": "date-time"
          }
        ]
      },
      "ApplePayAddressParameters": {
        "type": "string",
        "enum": [
          "postalAddress",
          "phone",
          "email"
        ]
      },
      "ApplePayBillingContactFields": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ApplePayAddressParameters"
        }
      },
      "ApplePayPaymentRequest": {
        "type": "object",
        "required": [
          "country_code",
          "currency_code",
          "total"
        ],
        "properties": {
          "country_code": {
            "$ref": "#/components/schemas/CountryAlpha2"
          },
          "currency_code": {
            "$ref": "#/components/schemas/Currency"
          },
          "total": {
            "$ref": "#/components/schemas/AmountInfo"
          },
          "merchant_capabilities": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of merchant capabilities(ex: whether capable of 3ds or no-3ds)",
            "nullable": true
          },
          "supported_networks": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of supported networks",
            "nullable": true
          },
          "merchant_identifier": {
            "type": "string",
            "nullable": true
          },
          "required_billing_contact_fields": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApplePayBillingContactFields"
              }
            ],
            "nullable": true
          },
          "required_shipping_contact_fields": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApplePayShippingContactFields"
              }
            ],
            "nullable": true
          }
        }
      },
      "ApplePayRedirectData": {
        "type": "object"
      },
      "ApplePaySessionResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ThirdPartySdkSessionResponse"
          },
          {
            "$ref": "#/components/schemas/NoThirdPartySdkSessionResponse"
          },
          {
            "type": "object",
            "default": null,
            "nullable": true
          }
        ]
      },
      "ApplePayShippingContactFields": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ApplePayAddressParameters"
        }
      },
      "ApplePayThirdPartySdkData": {
        "type": "object"
      },
      "ApplePayWalletData": {
        "type": "object",
        "required": [
          "payment_data",
          "payment_method",
          "transaction_identifier"
        ],
        "properties": {
          "payment_data": {
            "type": "string",
            "description": "The payment data of Apple pay"
          },
          "payment_method": {
            "$ref": "#/components/schemas/ApplepayPaymentMethod"
          },
          "transaction_identifier": {
            "type": "string",
            "description": "The unique identifier for the transaction"
          }
        }
      },
      "ApplepayConnectorMetadataRequest": {
        "type": "object",
        "properties": {
          "session_token_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SessionTokenInfo"
              }
            ],
            "nullable": true
          }
        }
      },
      "ApplepayInitiative": {
        "type": "string",
        "enum": [
          "web",
          "ios"
        ]
      },
      "ApplepayPaymentMethod": {
        "type": "object",
        "required": [
          "display_name",
          "network",
          "type"
        ],
        "properties": {
          "display_name": {
            "type": "string",
            "description": "The name to be displayed on Apple Pay button"
          },
          "network": {
            "type": "string",
            "description": "The network of the Apple pay payment method"
          },
          "type": {
            "type": "string",
            "description": "The type of the payment method"
          }
        }
      },
      "ApplepaySessionTokenResponse": {
        "type": "object",
        "required": [
          "connector",
          "delayed_session_token",
          "sdk_next_action"
        ],
        "properties": {
          "session_token_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApplePaySessionResponse"
              }
            ],
            "nullable": true
          },
          "payment_request_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApplePayPaymentRequest"
              }
            ],
            "nullable": true
          },
          "connector": {
            "type": "string",
            "description": "The session token is w.r.t this connector"
          },
          "delayed_session_token": {
            "type": "boolean",
            "description": "Identifier for the delayed session response"
          },
          "sdk_next_action": {
            "$ref": "#/components/schemas/SdkNextAction"
          },
          "connector_reference_id": {
            "type": "string",
            "description": "The connector transaction id",
            "nullable": true
          },
          "connector_sdk_public_key": {
            "type": "string",
            "description": "The public key id is to invoke third party sdk",
            "nullable": true
          },
          "connector_merchant_id": {
            "type": "string",
            "description": "The connector merchant id",
            "nullable": true
          }
        }
      },
      "AttemptStatus": {
        "type": "string",
        "description": "The status of the attempt",
        "enum": [
          "started",
          "authentication_failed",
          "router_declined",
          "authentication_pending",
          "authentication_successful",
          "authorized",
          "authorization_failed",
          "charged",
          "authorizing",
          "cod_initiated",
          "voided",
          "void_initiated",
          "capture_initiated",
          "capture_failed",
          "void_failed",
          "auto_refunded",
          "partial_charged",
          "partial_charged_and_chargeable",
          "unresolved",
          "pending",
          "failure",
          "payment_method_awaited",
          "confirmation_awaited",
          "device_data_collection_pending"
        ]
      },
      "AuthenticationConnectorDetails": {
        "type": "object",
        "required": [
          "authentication_connectors",
          "three_ds_requestor_url"
        ],
        "properties": {
          "authentication_connectors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthenticationConnectors"
            },
            "description": "List of authentication connectors"
          },
          "three_ds_requestor_url": {
            "type": "string",
            "description": "URL of the (customer service) website that will be shown to the shopper in case of technical errors during the 3D Secure 2 process."
          }
        }
      },
      "AuthenticationConnectors": {
        "type": "string",
        "enum": [
          "threedsecureio",
          "netcetera",
          "gpayments"
        ]
      },
      "AuthenticationStatus": {
        "type": "string",
        "enum": [
          "started",
          "pending",
          "success",
          "failed"
        ]
      },
      "AuthenticationType": {
        "type": "string",
        "description": "Pass this parameter to force 3DS or non 3DS auth for this payment. Some connectors will still force 3DS auth even in case of passing 'no_three_ds' here and vice versa. Default value is 'no_three_ds' if not set",
        "enum": [
          "three_ds",
          "no_three_ds"
        ]
      },
      "AuthorizationStatus": {
        "type": "string",
        "enum": [
          "success",
          "failure",
          "processing",
          "unresolved"
        ]
      },
      "BacsBankTransfer": {
        "type": "object",
        "required": [
          "bank_account_number",
          "bank_sort_code"
        ],
        "properties": {
          "bank_name": {
            "type": "string",
            "description": "Bank name",
            "example": "Deutsche Bank",
            "nullable": true
          },
          "bank_country_code": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CountryAlpha2"
              }
            ],
            "nullable": true
          },
          "bank_city": {
            "type": "string",
            "description": "Bank city",
            "example": "California",
            "nullable": true
          },
          "bank_account_number": {
            "type": "string",
            "description": "Bank account number is an unique identifier assigned by a bank to a customer.",
            "example": "000123456"
          },
          "bank_sort_code": {
            "type": "string",
            "description": "[6 digits] Sort Code - used in UK and Ireland for identifying a bank and it's branches.",
            "example": "98-76-54"
          }
        }
      },
      "BacsBankTransferInstructions": {
        "type": "object",
        "required": [
          "account_holder_name",
          "account_number",
          "sort_code"
        ],
        "properties": {
          "account_holder_name": {
            "type": "string",
            "example": "Jane Doe"
          },
          "account_number": {
            "type": "string",
            "example": "10244123908"
          },
          "sort_code": {
            "type": "string",
            "example": "012"
          }
        }
      },
      "Bank": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/AchBankTransfer"
          },
          {
            "$ref": "#/components/schemas/BacsBankTransfer"
          },
          {
            "$ref": "#/components/schemas/SepaBankTransfer"
          },
          {
            "$ref": "#/components/schemas/PixBankTransfer"
          }
        ]
      },
      "BankDebitBilling": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The billing name for bank debits",
            "example": "John Doe",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "The billing email for bank debits",
            "example": "example@example.com",
            "nullable": true
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressDetails"
              }
            ],
            "nullable": true
          }
        }
      },
      "BankDebitData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "ach_bank_debit"
            ],
            "properties": {
              "ach_bank_debit": {
                "type": "object",
                "description": "Payment Method data for Ach bank debit",
                "required": [
                  "account_number",
                  "routing_number",
                  "card_holder_name",
                  "bank_account_holder_name",
                  "bank_name",
                  "bank_type",
                  "bank_holder_type"
                ],
                "properties": {
                  "billing_details": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BankDebitBilling"
                      }
                    ],
                    "nullable": true
                  },
                  "account_number": {
                    "type": "string",
                    "description": "Account number for ach bank debit payment",
                    "example": "000123456789"
                  },
                  "routing_number": {
                    "type": "string",
                    "description": "Routing number for ach bank debit payment",
                    "example": "110000000"
                  },
                  "card_holder_name": {
                    "type": "string",
                    "example": "John Test"
                  },
                  "bank_account_holder_name": {
                    "type": "string",
                    "example": "John Doe"
                  },
                  "bank_name": {
                    "type": "string",
                    "example": "ACH"
                  },
                  "bank_type": {
                    "type": "string",
                    "example": "Checking"
                  },
                  "bank_holder_type": {
                    "type": "string",
                    "example": "Personal"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "sepa_bank_debit"
            ],
            "properties": {
              "sepa_bank_debit": {
                "type": "object",
                "required": [
                  "iban",
                  "bank_account_holder_name"
                ],
                "properties": {
                  "billing_details": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BankDebitBilling"
                      }
                    ],
                    "nullable": true
                  },
                  "iban": {
                    "type": "string",
                    "description": "International bank account number (iban) for SEPA",
                    "example": "DE89370400440532013000"
                  },
                  "bank_account_holder_name": {
                    "type": "string",
                    "description": "Owner name for bank debit",
                    "example": "A. Schneider"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "becs_bank_debit"
            ],
            "properties": {
              "becs_bank_debit": {
                "type": "object",
                "required": [
                  "account_number",
                  "bsb_number"
                ],
                "properties": {
                  "billing_details": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BankDebitBilling"
                      }
                    ],
                    "nullable": true
                  },
                  "account_number": {
                    "type": "string",
                    "description": "Account number for Becs payment method",
                    "example": "000123456"
                  },
                  "bsb_number": {
                    "type": "string",
                    "description": "Bank-State-Branch (bsb) number",
                    "example": "000000"
                  },
                  "bank_account_holder_name": {
                    "type": "string",
                    "description": "Owner name for bank debit",
                    "example": "A. Schneider",
                    "nullable": true
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "bacs_bank_debit"
            ],
            "properties": {
              "bacs_bank_debit": {
                "type": "object",
                "required": [
                  "account_number",
                  "sort_code",
                  "bank_account_holder_name"
                ],
                "properties": {
                  "billing_details": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BankDebitBilling"
                      }
                    ],
                    "nullable": true
                  },
                  "account_number": {
                    "type": "string",
                    "description": "Account number for Bacs payment method",
                    "example": "00012345"
                  },
                  "sort_code": {
                    "type": "string",
                    "description": "Sort code for Bacs payment method",
                    "example": "108800"
                  },
                  "bank_account_holder_name": {
                    "type": "string",
                    "description": "holder name for bank debit",
                    "example": "A. Schneider"
                  }
                }
              }
            }
          }
        ]
      },
      "BankNames": {
        "type": "string",
        "description": "Name of banks supported by Hyperswitch",
        "enum": [
          "american_express",
          "affin_bank",
          "agro_bank",
          "alliance_bank",
          "am_bank",
          "bank_of_america",
          "bank_islam",
          "bank_muamalat",
          "bank_rakyat",
          "bank_simpanan_nasional",
          "barclays",
          "blik_p_s_p",
          "capital_one",
          "chase",
          "citi",
          "cimb_bank",
          "discover",
          "navy_federal_credit_union",
          "pentagon_federal_credit_union",
          "synchrony_bank",
          "wells_fargo",
          "abn_amro",
          "asn_bank",
          "bunq",
          "handelsbanken",
          "hong_leong_bank",
          "hsbc_bank",
          "ing",
          "knab",
          "kuwait_finance_house",
          "moneyou",
          "rabobank",
          "regiobank",
          "revolut",
          "sns_bank",
          "triodos_bank",
          "van_lanschot",
          "arzte_und_apotheker_bank",
          "austrian_anadi_bank_ag",
          "bank_austria",
          "bank99_ag",
          "bankhaus_carl_spangler",
          "bankhaus_schelhammer_und_schattera_ag",
          "bank_millennium",
          "bank_p_e_k_a_o_s_a",
          "bawag_psk_ag",
          "bks_bank_ag",
          "brull_kallmus_bank_ag",
          "btv_vier_lander_bank",
          "capital_bank_grawe_gruppe_ag",
          "ceska_sporitelna",
          "dolomitenbank",
          "easybank_ag",
          "e_platby_v_u_b",
          "erste_bank_und_sparkassen",
          "friesland_bank",
          "hypo_alpeadriabank_international_ag",
          "hypo_noe_lb_fur_niederosterreich_u_wien",
          "hypo_oberosterreich_salzburg_steiermark",
          "hypo_tirol_bank_ag",
          "hypo_vorarlberg_bank_ag",
          "hypo_bank_burgenland_aktiengesellschaft",
          "komercni_banka",
          "m_bank",
          "marchfelder_bank",
          "maybank",
          "oberbank_ag",
          "osterreichische_arzte_und_apothekerbank",
          "ocbc_bank",
          "pay_with_i_n_g",
          "place_z_i_p_k_o",
          "platnosc_online_karta_platnicza",
          "posojilnica_bank_e_gen",
          "postova_banka",
          "public_bank",
          "raiffeisen_bankengruppe_osterreich",
          "rhb_bank",
          "schelhammer_capital_bank_ag",
          "standard_chartered_bank",
          "schoellerbank_ag",
          "sparda_bank_wien",
          "sporo_pay",
          "santander_przelew24",
          "tatra_pay",
          "viamo",
          "volksbank_gruppe",
          "volkskreditbank_ag",
          "vr_bank_braunau",
          "uob_bank",
          "pay_with_alior_bank",
          "banki_spoldzielcze",
          "pay_with_inteligo",
          "b_n_p_paribas_poland",
          "bank_nowy_s_a",
          "credit_agricole",
          "pay_with_b_o_s",
          "pay_with_citi_handlowy",
          "pay_with_plus_bank",
          "toyota_bank",
          "velo_bank",
          "e_transfer_pocztowy24",
          "plus_bank",
          "etransfer_pocztowy24",
          "banki_spbdzielcze",
          "bank_nowy_bfg_sa",
          "getin_bank",
          "blik",
          "noble_pay",
          "idea_bank",
          "envelo_bank",
          "nest_przelew",
          "mbank_mtransfer",
          "inteligo",
          "pbac_z_ipko",
          "bnp_paribas",
          "bank_pekao_sa",
          "volkswagen_bank",
          "alior_bank",
          "boz",
          "bangkok_bank",
          "krungsri_bank",
          "krung_thai_bank",
          "the_siam_commercial_bank",
          "kasikorn_bank",
          "open_bank_success",
          "open_bank_failure",
          "open_bank_cancelled",
          "aib",
          "bank_of_scotland",
          "danske_bank",
          "first_direct",
          "first_trust",
          "halifax",
          "lloyds",
          "monzo",
          "nat_west",
          "nationwide_bank",
          "royal_bank_of_scotland",
          "starling",
          "tsb_bank",
          "tesco_bank",
          "ulster_bank",
          "yoursafe",
          "n26",
          "nationale_nederlanden"
        ]
      },
      "BankRedirectBilling": {
        "type": "object",
        "required": [
          "billing_name",
          "email"
        ],
        "properties": {
          "billing_name": {
            "type": "string",
            "description": "The name for which billing is issued",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "description": "The billing email for bank redirect",
            "example": "example@example.com"
          }
        }
      },
      "BankRedirectData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "bancontact_card"
            ],
            "properties": {
              "bancontact_card": {
                "type": "object",
                "required": [
                  "card_number",
                  "card_exp_month",
                  "card_exp_year",
                  "card_holder_name"
                ],
                "properties": {
                  "card_number": {
                    "type": "string",
                    "description": "The card number",
                    "example": "4242424242424242"
                  },
                  "card_exp_month": {
                    "type": "string",
                    "description": "The card's expiry month",
                    "example": "24"
                  },
                  "card_exp_year": {
                    "type": "string",
                    "description": "The card's expiry year",
                    "example": "24"
                  },
                  "card_holder_name": {
                    "type": "string",
                    "description": "The card holder's name",
                    "example": "John Test"
                  },
                  "billing_details": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BankRedirectBilling"
                      }
                    ],
                    "nullable": true
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "bizum"
            ],
            "properties": {
              "bizum": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "blik"
            ],
            "properties": {
              "blik": {
                "type": "object",
                "properties": {
                  "blik_code": {
                    "type": "string",
                    "nullable": true
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "eps"
            ],
            "properties": {
              "eps": {
                "type": "object",
                "required": [
                  "bank_name",
                  "country"
                ],
                "properties": {
                  "billing_details": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BankRedirectBilling"
                      }
                    ],
                    "nullable": true
                  },
                  "bank_name": {
                    "$ref": "#/components/schemas/BankNames"
                  },
                  "country": {
                    "$ref": "#/components/schemas/CountryAlpha2"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "giropay"
            ],
            "properties": {
              "giropay": {
                "type": "object",
                "required": [
                  "country"
                ],
                "properties": {
                  "billing_details": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BankRedirectBilling"
                      }
                    ],
                    "nullable": true
                  },
                  "bank_account_bic": {
                    "type": "string",
                    "description": "Bank account details for Giropay\nBank account bic code",
                    "nullable": true
                  },
                  "bank_account_iban": {
                    "type": "string",
                    "description": "Bank account iban",
                    "nullable": true
                  },
                  "country": {
                    "$ref": "#/components/schemas/CountryAlpha2"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "ideal"
            ],
            "properties": {
              "ideal": {
                "type": "object",
                "required": [
                  "bank_name",
                  "country"
                ],
                "properties": {
                  "billing_details": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BankRedirectBilling"
                      }
                    ],
                    "nullable": true
                  },
                  "bank_name": {
                    "$ref": "#/components/schemas/BankNames"
                  },
                  "country": {
                    "$ref": "#/components/schemas/CountryAlpha2"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "interac"
            ],
            "properties": {
              "interac": {
                "type": "object",
                "properties": {
                  "country": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CountryAlpha2"
                      }
                    ],
                    "nullable": true
                  },
                  "email": {
                    "type": "string",
                    "example": "john.doe@example.com",
                    "nullable": true
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "online_banking_czech_republic"
            ],
            "properties": {
              "online_banking_czech_republic": {
                "type": "object",
                "required": [
                  "issuer"
                ],
                "properties": {
                  "issuer": {
                    "$ref": "#/components/schemas/BankNames"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "online_banking_finland"
            ],
            "properties": {
              "online_banking_finland": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "nullable": true
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "online_banking_poland"
            ],
            "properties": {
              "online_banking_poland": {
                "type": "object",
                "required": [
                  "issuer"
                ],
                "properties": {
                  "issuer": {
                    "$ref": "#/components/schemas/BankNames"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "online_banking_slovakia"
            ],
            "properties": {
              "online_banking_slovakia": {
                "type": "object",
                "required": [
                  "issuer"
                ],
                "properties": {
                  "issuer": {
                    "$ref": "#/components/schemas/BankNames"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "open_banking_uk"
            ],
            "properties": {
              "open_banking_uk": {
                "type": "object",
                "required": [
                  "issuer",
                  "country"
                ],
                "properties": {
                  "issuer": {
                    "$ref": "#/components/schemas/BankNames"
                  },
                  "country": {
                    "$ref": "#/components/schemas/CountryAlpha2"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "przelewy24"
            ],
            "properties": {
              "przelewy24": {
                "type": "object",
                "properties": {
                  "bank_name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BankNames"
                      }
                    ],
                    "nullable": true
                  },
                  "billing_details": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BankRedirectBilling"
                      }
                    ],
                    "nullable": true
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "sofort"
            ],
            "properties": {
              "sofort": {
                "type": "object",
                "required": [
                  "country"
                ],
                "properties": {
                  "billing_details": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BankRedirectBilling"
                      }
                    ],
                    "nullable": true
                  },
                  "country": {
                    "$ref": "#/components/schemas/CountryAlpha2"
                  },
                  "preferred_language": {
                    "type": "string",
                    "description": "The preferred language",
                    "example": "en",
                    "nullable": true
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "trustly"
            ],
            "properties": {
              "trustly": {
                "type": "object",
                "required": [
                  "country"
                ],
                "properties": {
                  "country": {
                    "$ref": "#/components/schemas/CountryAlpha2"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "online_banking_fpx"
            ],
            "properties": {
              "online_banking_fpx": {
                "type": "object",
                "required": [
                  "issuer"
                ],
                "properties": {
                  "issuer": {
                    "$ref": "#/components/schemas/BankNames"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "online_banking_thailand"
            ],
            "properties": {
              "online_banking_thailand": {
                "type": "object",
                "required": [
                  "issuer"
                ],
                "properties": {
                  "issuer": {
                    "$ref": "#/components/schemas/BankNames"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "local_bank_redirect"
            ],
            "properties": {
              "local_bank_redirect": {
                "type": "object"
              }
            }
          }
        ]
      },
      "BankTransferData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "ach_bank_transfer"
            ],
            "properties": {
              "ach_bank_transfer": {
                "type": "object",
                "properties": {
                  "billing_details": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AchBillingDetails"
                      }
                    ],
                    "nullable": true
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "sepa_bank_transfer"
            ],
            "properties": {
              "sepa_bank_transfer": {
                "type": "object",
                "required": [
                  "country"
                ],
                "properties": {
                  "billing_details": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SepaAndBacsBillingDetails"
                      }
                    ],
                    "nullable": true
                  },
                  "country": {
                    "$ref": "#/components/schemas/CountryAlpha2"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "bacs_bank_transfer"
            ],
            "properties": {
              "bacs_bank_transfer": {
                "type": "object",
                "properties": {
                  "billing_details": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SepaAndBacsBillingDetails"
                      }
                    ],
                    "nullable": true
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "multibanco_bank_transfer"
            ],
            "properties": {
              "multibanco_bank_transfer": {
                "type": "object",
                "properties": {
                  "billing_details": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/MultibancoBillingDetails"
                      }
                    ],
                    "nullable": true
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "permata_bank_transfer"
            ],
            "properties": {
              "permata_bank_transfer": {
                "type": "object",
                "properties": {
                  "billing_details": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DokuBillingDetails"
                      }
                    ],
                    "nullable": true
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "bca_bank_transfer"
            ],
            "properties": {
              "bca_bank_transfer": {
                "type": "object",
                "properties": {
                  "billing_details": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DokuBillingDetails"
                      }
                    ],
                    "nullable": true
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "bni_va_bank_transfer"
            ],
            "properties": {
              "bni_va_bank_transfer": {
                "type": "object",
                "properties": {
                  "billing_details": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DokuBillingDetails"
                      }
                    ],
                    "nullable": true
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "bri_va_bank_transfer"
            ],
            "properties": {
              "bri_va_bank_transfer": {
                "type": "object",
                "properties": {
                  "billing_details": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DokuBillingDetails"
                      }
                    ],
                    "nullable": true
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "cimb_va_bank_transfer"
            ],
            "properties": {
              "cimb_va_bank_transfer": {
                "type": "object",
                "properties": {
                  "billing_details": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DokuBillingDetails"
                      }
                    ],
                    "nullable": true
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "danamon_va_bank_transfer"
            ],
            "properties": {
              "danamon_va_bank_transfer": {
                "type": "object",
                "properties": {
                  "billing_details": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DokuBillingDetails"
                      }
                    ],
                    "nullable": true
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "mandiri_va_bank_transfer"
            ],
            "properties": {
              "mandiri_va_bank_transfer": {
                "type": "object",
                "properties": {
                  "billing_details": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DokuBillingDetails"
                      }
                    ],
                    "nullable": true
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "pix"
            ],
            "properties": {
              "pix": {
                "type": "object",
                "properties": {
                  "pix_key": {
                    "type": "string",
                    "description": "Unique key for pix transfer",
                    "example": "a1f4102e-a446-4a57-bcce-6fa48899c1d1",
                    "nullable": true
                  },
                  "cpf": {
                    "type": "string",
                    "description": "CPF is a Brazilian tax identification number",
                    "example": "10599054689",
                    "nullable": true
                  },
                  "cnpj": {
                    "type": "string",
                    "description": "CNPJ is a Brazilian company tax identification number",
                    "example": "74469027417312",
                    "nullable": true
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "pse"
            ],
            "properties": {
              "pse": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "local_bank_transfer"
            ],
            "properties": {
              "local_bank_transfer": {
                "type": "object",
                "properties": {
                  "bank_code": {
                    "type": "string",
                    "nullable": true
                  }
                }
              }
            }
          }
        ]
      },
      "BankTransferInstructions": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "doku_bank_transfer_instructions"
            ],
            "properties": {
              "doku_bank_transfer_instructions": {
                "$ref": "#/components/schemas/DokuBankTransferInstructions"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "ach_credit_transfer"
            ],
            "properties": {
              "ach_credit_transfer": {
                "$ref": "#/components/schemas/AchTransfer"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "sepa_bank_instructions"
            ],
            "properties": {
              "sepa_bank_instructions": {
                "$ref": "#/components/schemas/SepaBankTransferInstructions"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "bacs_bank_instructions"
            ],
            "properties": {
              "bacs_bank_instructions": {
                "$ref": "#/components/schemas/BacsBankTransferInstructions"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "multibanco"
            ],
            "properties": {
              "multibanco": {
                "$ref": "#/components/schemas/MultibancoTransferInstructions"
              }
            }
          }
        ]
      },
      "BankTransferNextStepsData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BankTransferInstructions"
          },
          {
            "type": "object",
            "properties": {
              "receiver": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReceiverDetails"
                  }
                ],
                "nullable": true
              }
            }
          }
        ]
      },
      "BlocklistDataKind": {
        "type": "string",
        "enum": [
          "payment_method",
          "card_bin",
          "extended_card_bin"
        ]
      },
      "BlocklistRequest": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "type",
              "data"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "card_bin"
                ]
              },
              "data": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "data"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "fingerprint"
                ]
              },
              "data": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "data"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "extended_card_bin"
                ]
              },
              "data": {
                "type": "string"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "type"
        }
      },
      "BlocklistResponse": {
        "type": "object",
        "required": [
          "fingerprint_id",
          "data_kind",
          "created_at"
        ],
        "properties": {
          "fingerprint_id": {
            "type": "string"
          },
          "data_kind": {
            "$ref": "#/components/schemas/BlocklistDataKind"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "BoletoVoucherData": {
        "type": "object",
        "properties": {
          "social_security_number": {
            "type": "string",
            "description": "The shopper's social security number",
            "nullable": true
          }
        }
      },
      "BrowserInformation": {
        "type": "object",
        "description": "Browser information to be used for 3DS 2.0",
        "properties": {
          "color_depth": {
            "type": "integer",
            "format": "int32",
            "description": "Color depth supported by the browser",
            "nullable": true,
            "minimum": 0
          },
          "java_enabled": {
            "type": "boolean",
            "description": "Whether java is enabled in the browser",
            "nullable": true
          },
          "java_script_enabled": {
            "type": "boolean",
            "description": "Whether javascript is enabled in the browser",
            "nullable": true
          },
          "language": {
            "type": "string",
            "description": "Language supported",
            "nullable": true
          },
          "screen_height": {
            "type": "integer",
            "format": "int32",
            "description": "The screen height in pixels",
            "nullable": true,
            "minimum": 0
          },
          "screen_width": {
            "type": "integer",
            "format": "int32",
            "description": "The screen width in pixels",
            "nullable": true,
            "minimum": 0
          },
          "time_zone": {
            "type": "integer",
            "format": "int32",
            "description": "Time zone of the client",
            "nullable": true
          },
          "ip_address": {
            "type": "string",
            "description": "Ip address of the client",
            "nullable": true
          },
          "accept_header": {
            "type": "string",
            "description": "List of headers that are accepted",
            "example": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8",
            "nullable": true
          },
          "user_agent": {
            "type": "string",
            "description": "User-agent of the browser",
            "nullable": true
          }
        }
      },
      "BusinessCollectLinkConfig": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessGenericLinkConfig"
          },
          {
            "type": "object",
            "required": [
              "enabled_payment_methods"
            ],
            "properties": {
              "enabled_payment_methods": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EnabledPaymentMethod"
                },
                "description": "List of payment methods shown on collect UI",
                "example": "[{\"payment_method\": \"bank_transfer\", \"payment_method_types\": [\"ach\", \"bacs\", \"sepa\"]}]"
              }
            }
          }
        ]
      },
      "BusinessGenericLinkConfig": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GenericLinkUiConfig"
          },
          {
            "type": "object",
            "required": [
              "allowed_domains"
            ],
            "properties": {
              "domain_name": {
                "type": "string",
                "description": "Custom domain name to be used for hosting the link",
                "nullable": true
              },
              "allowed_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "A list of allowed domains (glob patterns) where this link can be embedded / opened from",
                "uniqueItems": true
              }
            }
          }
        ]
      },
      "BusinessPaymentLinkConfig": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentLinkConfigRequest"
          },
          {
            "type": "object",
            "properties": {
              "domain_name": {
                "type": "string",
                "description": "Custom domain name to be used for hosting the link in your own domain",
                "nullable": true
              },
              "business_specific_configs": {
                "type": "object",
                "description": "list of configs for multi theme setup",
                "additionalProperties": {
                  "$ref": "#/components/schemas/PaymentLinkConfigRequest"
                },
                "nullable": true
              },
              "allowed_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "A list of allowed domains (glob patterns) where this link can be embedded / opened from",
                "uniqueItems": true,
                "nullable": true
              }
            }
          }
        ]
      },
      "BusinessPayoutLinkConfig": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessGenericLinkConfig"
          },
          {
            "type": "object"
          }
        ]
      },
      "BusinessProfileCreate": {
        "type": "object",
        "required": [
          "profile_name"
        ],
        "properties": {
          "profile_name": {
            "type": "string",
            "description": "The name of business profile",
            "maxLength": 64
          },
          "return_url": {
            "type": "string",
            "description": "The URL to redirect after the completion of the operation",
            "example": "https://www.example.com/success",
            "nullable": true,
            "maxLength": 255
          },
          "enable_payment_response_hash": {
            "type": "boolean",
            "description": "A boolean value to indicate if payment response hash needs to be enabled",
            "default": true,
            "example": true,
            "nullable": true
          },
          "payment_response_hash_key": {
            "type": "string",
            "description": "Refers to the hash key used for calculating the signature for webhooks and redirect response. If the value is not provided, a value is automatically generated.",
            "nullable": true
          },
          "redirect_to_merchant_with_http_post": {
            "type": "boolean",
            "description": "A boolean value to indicate if redirect to merchant with http post needs to be enabled",
            "default": false,
            "example": true,
            "nullable": true
          },
          "webhook_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WebhookDetails"
              }
            ],
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "Metadata is useful for storing additional, unstructured information on an object.",
            "nullable": true
          },
          "order_fulfillment_time": {
            "type": "integer",
            "format": "int32",
            "description": "Will be used to determine the time till which your payment will be active once the payment session starts",
            "example": 900,
            "nullable": true,
            "minimum": 0
          },
          "order_fulfillment_time_origin": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderFulfillmentTimeOrigin"
              }
            ],
            "nullable": true
          },
          "applepay_verified_domains": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Verified Apple Pay domains for a particular profile",
            "nullable": true
          },
          "session_expiry": {
            "type": "integer",
            "format": "int32",
            "description": "Client Secret Default expiry for all payments created under this business profile",
            "example": 900,
            "nullable": true,
            "minimum": 0
          },
          "payment_link_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BusinessPaymentLinkConfig"
              }
            ],
            "nullable": true
          },
          "authentication_connector_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthenticationConnectorDetails"
              }
            ],
            "nullable": true
          },
          "use_billing_as_payment_method_billing": {
            "type": "boolean",
            "description": "Whether to use the billing details passed when creating the intent as payment method billing",
            "nullable": true
          },
          "collect_shipping_details_from_wallet_connector": {
            "type": "boolean",
            "description": "A boolean value to indicate if customer shipping details needs to be collected from wallet connector (Eg. Apple Pay, Google Pay, etc.)",
            "default": false,
            "example": false,
            "nullable": true
          },
          "collect_billing_details_from_wallet_connector": {
            "type": "boolean",
            "description": "A boolean value to indicate if customer billing details needs to be collected from wallet connector (Eg. Apple Pay, Google Pay, etc.)",
            "default": false,
            "example": false,
            "nullable": true
          },
          "is_connector_agnostic_mit_enabled": {
            "type": "boolean",
            "description": "Indicates if the MIT (merchant initiated transaction) payments can be made connector\nagnostic, i.e., MITs may be processed through different connector than CIT (customer\ninitiated transaction) based on the routing rules.\nIf set to `false`, MIT will go through the same connector as the CIT.",
            "nullable": true
          },
          "payout_link_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BusinessPayoutLinkConfig"
              }
            ],
            "nullable": true
          },
          "outgoing_webhook_custom_http_headers": {
            "type": "object",
            "description": "These key-value pairs are sent as additional custom headers in the outgoing webhook request. It is recommended not to use more than four key-value pairs.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BusinessProfileResponse": {
        "type": "object",
        "required": [
          "merchant_id",
          "id",
          "profile_name",
          "enable_payment_response_hash",
          "redirect_to_merchant_with_http_post"
        ],
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The identifier for Merchant Account",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 64
          },
          "id": {
            "type": "string",
            "description": "The identifier for business profile. This must be used for creating merchant accounts, payments and payouts",
            "example": "pro_abcdefghijklmnopqrstuvwxyz",
            "maxLength": 64
          },
          "profile_name": {
            "type": "string",
            "description": "Name of the business profile",
            "maxLength": 64
          },
          "return_url": {
            "type": "string",
            "description": "The URL to redirect after the completion of the operation",
            "example": "https://www.example.com/success",
            "nullable": true,
            "maxLength": 255
          },
          "enable_payment_response_hash": {
            "type": "boolean",
            "description": "A boolean value to indicate if payment response hash needs to be enabled",
            "default": true,
            "example": true
          },
          "payment_response_hash_key": {
            "type": "string",
            "description": "Refers to the hash key used for calculating the signature for webhooks and redirect response. If the value is not provided, a value is automatically generated.",
            "nullable": true
          },
          "redirect_to_merchant_with_http_post": {
            "type": "boolean",
            "description": "A boolean value to indicate if redirect to merchant with http post needs to be enabled",
            "default": false,
            "example": true
          },
          "webhook_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WebhookDetails"
              }
            ],
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "Metadata is useful for storing additional, unstructured information on an object.",
            "nullable": true
          },
          "applepay_verified_domains": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Verified Apple Pay domains for a particular profile",
            "nullable": true
          },
          "session_expiry": {
            "type": "integer",
            "format": "int64",
            "description": "Client Secret Default expiry for all payments created under this business profile",
            "example": 900,
            "nullable": true
          },
          "payment_link_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BusinessPaymentLinkConfig"
              }
            ],
            "nullable": true
          },
          "authentication_connector_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthenticationConnectorDetails"
              }
            ],
            "nullable": true
          },
          "use_billing_as_payment_method_billing": {
            "type": "boolean",
            "nullable": true
          },
          "extended_card_info_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExtendedCardInfoConfig"
              }
            ],
            "nullable": true
          },
          "collect_shipping_details_from_wallet_connector": {
            "type": "boolean",
            "description": "A boolean value to indicate if customer shipping details needs to be collected from wallet connector (Eg. Apple Pay, Google Pay, etc.)",
            "default": false,
            "example": false,
            "nullable": true
          },
          "collect_billing_details_from_wallet_connector": {
            "type": "boolean",
            "description": "A boolean value to indicate if customer billing details needs to be collected from wallet connector (Eg. Apple Pay, Google Pay, etc.)",
            "default": false,
            "example": false,
            "nullable": true
          },
          "is_connector_agnostic_mit_enabled": {
            "type": "boolean",
            "description": "Indicates if the MIT (merchant initiated transaction) payments can be made connector\nagnostic, i.e., MITs may be processed through different connector than CIT (customer\ninitiated transaction) based on the routing rules.\nIf set to `false`, MIT will go through the same connector as the CIT.",
            "nullable": true
          },
          "payout_link_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BusinessPayoutLinkConfig"
              }
            ],
            "nullable": true
          },
          "outgoing_webhook_custom_http_headers": {
            "type": "object",
            "description": "These key-value pairs are sent as additional custom headers in the outgoing webhook request.",
            "nullable": true
          },
          "order_fulfillment_time": {
            "type": "integer",
            "format": "int32",
            "description": "Will be used to determine the time till which your payment will be active once the payment session starts",
            "example": 900,
            "nullable": true,
            "minimum": 0
          },
          "order_fulfillment_time_origin": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderFulfillmentTimeOrigin"
              }
            ],
            "nullable": true
          }
        }
      },
      "CaptureMethod": {
        "type": "string",
        "description": "Default value if not passed is set to 'automatic' which results in Auth and Capture in one single API request. Pass 'manual' or 'manual_multiple' in case you want do a separate Auth and Capture by first authorizing and placing a hold on your customer's funds so that you can use the Payments/Capture endpoint later to capture the authorized amount. Pass 'manual' if you want to only capture the amount later once or 'manual_multiple' if you want to capture the funds multiple times later. Both 'manual' and 'manual_multiple' are only supported by a specific list of processors",
        "enum": [
          "automatic",
          "manual",
          "manual_multiple",
          "scheduled"
        ]
      },
      "CaptureResponse": {
        "type": "object",
        "required": [
          "capture_id",
          "status",
          "amount",
          "connector",
          "authorized_attempt_id",
          "capture_sequence"
        ],
        "properties": {
          "capture_id": {
            "type": "string",
            "description": "Unique identifier for the capture"
          },
          "status": {
            "$ref": "#/components/schemas/CaptureStatus"
          },
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "The capture amount. Amount for the payment in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc.,",
            "example": 6540
          },
          "currency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Currency"
              }
            ],
            "nullable": true
          },
          "connector": {
            "type": "string",
            "description": "The connector used for the payment"
          },
          "authorized_attempt_id": {
            "type": "string",
            "description": "Unique identifier for the parent attempt on which this capture is made"
          },
          "connector_capture_id": {
            "type": "string",
            "description": "A unique identifier for this capture provided by the connector",
            "nullable": true
          },
          "capture_sequence": {
            "type": "integer",
            "format": "int32",
            "description": "Sequence number of this capture, in the series of captures made for the parent attempt"
          },
          "error_message": {
            "type": "string",
            "description": "If there was an error while calling the connector the error message is received here",
            "nullable": true
          },
          "error_code": {
            "type": "string",
            "description": "If there was an error while calling the connectors the code is received here",
            "nullable": true
          },
          "error_reason": {
            "type": "string",
            "description": "If there was an error while calling the connectors the reason is received here",
            "nullable": true
          },
          "reference_id": {
            "type": "string",
            "description": "Reference to the capture at connector side",
            "nullable": true
          }
        }
      },
      "CaptureStatus": {
        "type": "string",
        "enum": [
          "started",
          "charged",
          "pending",
          "failed"
        ]
      },
      "Card": {
        "type": "object",
        "required": [
          "card_number",
          "card_exp_month",
          "card_exp_year",
          "card_holder_name",
          "card_cvc"
        ],
        "properties": {
          "card_number": {
            "type": "string",
            "description": "The card number",
            "example": "4242424242424242"
          },
          "card_exp_month": {
            "type": "string",
            "description": "The card's expiry month",
            "example": "24"
          },
          "card_exp_year": {
            "type": "string",
            "description": "The card's expiry year",
            "example": "24"
          },
          "card_holder_name": {
            "type": "string",
            "description": "The card holder's name",
            "example": "John Test"
          },
          "card_cvc": {
            "type": "string",
            "description": "The CVC number for the card",
            "example": "242"
          },
          "card_issuer": {
            "type": "string",
            "description": "The name of the issuer of card",
            "example": "chase",
            "nullable": true
          },
          "card_network": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardNetwork"
              }
            ],
            "nullable": true
          },
          "card_type": {
            "type": "string",
            "example": "CREDIT",
            "nullable": true
          },
          "card_issuing_country": {
            "type": "string",
            "example": "INDIA",
            "nullable": true
          },
          "bank_code": {
            "type": "string",
            "example": "JP_AMEX",
            "nullable": true
          },
          "nick_name": {
            "type": "string",
            "description": "The card holder's nick name",
            "example": "John Test",
            "nullable": true
          }
        }
      },
      "CardDetail": {
        "type": "object",
        "required": [
          "card_number",
          "card_exp_month",
          "card_exp_year",
          "card_holder_name"
        ],
        "properties": {
          "card_number": {
            "type": "string",
            "description": "Card Number",
            "example": "4111111145551142"
          },
          "card_exp_month": {
            "type": "string",
            "description": "Card Expiry Month",
            "example": "10"
          },
          "card_exp_year": {
            "type": "string",
            "description": "Card Expiry Year",
            "example": "25"
          },
          "card_holder_name": {
            "type": "string",
            "description": "Card Holder Name",
            "example": "John Doe"
          },
          "nick_name": {
            "type": "string",
            "description": "Card Holder's Nick Name",
            "example": "John Doe",
            "nullable": true
          },
          "card_issuing_country": {
            "type": "string",
            "description": "Card Issuing Country",
            "nullable": true
          },
          "card_network": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardNetwork"
              }
            ],
            "nullable": true
          },
          "card_issuer": {
            "type": "string",
            "description": "Issuer Bank for Card",
            "nullable": true
          },
          "card_type": {
            "type": "string",
            "description": "Card Type",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CardDetailFromLocker": {
        "type": "object",
        "required": [
          "saved_to_locker"
        ],
        "properties": {
          "scheme": {
            "type": "string",
            "nullable": true
          },
          "issuer_country": {
            "type": "string",
            "nullable": true
          },
          "last4_digits": {
            "type": "string",
            "nullable": true
          },
          "expiry_month": {
            "type": "string",
            "nullable": true
          },
          "expiry_year": {
            "type": "string",
            "nullable": true
          },
          "card_token": {
            "type": "string",
            "nullable": true
          },
          "card_holder_name": {
            "type": "string",
            "nullable": true
          },
          "card_fingerprint": {
            "type": "string",
            "nullable": true
          },
          "nick_name": {
            "type": "string",
            "nullable": true
          },
          "card_network": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardNetwork"
              }
            ],
            "nullable": true
          },
          "card_isin": {
            "type": "string",
            "nullable": true
          },
          "card_issuer": {
            "type": "string",
            "nullable": true
          },
          "card_type": {
            "type": "string",
            "nullable": true
          },
          "saved_to_locker": {
            "type": "boolean"
          }
        }
      },
      "CardDetailUpdate": {
        "type": "object",
        "required": [
          "card_exp_month",
          "card_exp_year",
          "card_holder_name"
        ],
        "properties": {
          "card_exp_month": {
            "type": "string",
            "description": "Card Expiry Month",
            "example": "10"
          },
          "card_exp_year": {
            "type": "string",
            "description": "Card Expiry Year",
            "example": "25"
          },
          "card_holder_name": {
            "type": "string",
            "description": "Card Holder Name",
            "example": "John Doe"
          },
          "nick_name": {
            "type": "string",
            "description": "Card Holder's Nick Name",
            "example": "John Doe",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CardNetwork": {
        "type": "string",
        "description": "Indicates the card network.",
        "enum": [
          "Visa",
          "Mastercard",
          "AmericanExpress",
          "JCB",
          "DinersClub",
          "Discover",
          "CartesBancaires",
          "UnionPay",
          "Interac",
          "RuPay",
          "Maestro"
        ]
      },
      "CardPayout": {
        "type": "object",
        "required": [
          "card_number",
          "expiry_month",
          "expiry_year",
          "card_holder_name"
        ],
        "properties": {
          "card_number": {
            "type": "string",
            "description": "The card number",
            "example": "4242424242424242"
          },
          "expiry_month": {
            "type": "string",
            "description": "The card's expiry month"
          },
          "expiry_year": {
            "type": "string",
            "description": "The card's expiry year"
          },
          "card_holder_name": {
            "type": "string",
            "description": "The card holder's name",
            "example": "John Doe"
          }
        }
      },
      "CardRedirectData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "knet"
            ],
            "properties": {
              "knet": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "benefit"
            ],
            "properties": {
              "benefit": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "momo_atm"
            ],
            "properties": {
              "momo_atm": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "card_redirect"
            ],
            "properties": {
              "card_redirect": {
                "type": "object"
              }
            }
          }
        ]
      },
      "CardResponse": {
        "type": "object",
        "properties": {
          "last4": {
            "type": "string",
            "nullable": true
          },
          "card_type": {
            "type": "string",
            "nullable": true
          },
          "card_network": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardNetwork"
              }
            ],
            "nullable": true
          },
          "card_issuer": {
            "type": "string",
            "nullable": true
          },
          "card_issuing_country": {
            "type": "string",
            "nullable": true
          },
          "card_isin": {
            "type": "string",
            "nullable": true
          },
          "card_extended_bin": {
            "type": "string",
            "nullable": true
          },
          "card_exp_month": {
            "type": "string",
            "nullable": true
          },
          "card_exp_year": {
            "type": "string",
            "nullable": true
          },
          "card_holder_name": {
            "type": "string",
            "nullable": true
          },
          "payment_checks": {
            "nullable": true
          },
          "authentication_data": {
            "nullable": true
          }
        }
      },
      "CardToken": {
        "type": "object",
        "required": [
          "card_holder_name"
        ],
        "properties": {
          "card_holder_name": {
            "type": "string",
            "description": "The card holder's name",
            "example": "John Test"
          },
          "card_cvc": {
            "type": "string",
            "description": "The CVC number for the card",
            "nullable": true
          }
        }
      },
      "CashappQr": {
        "type": "object"
      },
      "ChargeRefunds": {
        "type": "object",
        "description": "Charge specific fields for controlling the revert of funds from either platform or connected account. Check sub-fields for more details.",
        "required": [
          "charge_id"
        ],
        "properties": {
          "charge_id": {
            "type": "string",
            "description": "Identifier for charge created for the payment"
          },
          "revert_platform_fee": {
            "type": "boolean",
            "description": "Toggle for reverting the application fee that was collected for the payment.\nIf set to false, the funds are pulled from the destination account.",
            "nullable": true
          },
          "revert_transfer": {
            "type": "boolean",
            "description": "Toggle for reverting the transfer that was made during the charge.\nIf set to false, the funds are pulled from the main platform's account.",
            "nullable": true
          }
        }
      },
      "Comparison": {
        "type": "object",
        "description": "Represents a single comparison condition.",
        "required": [
          "lhs",
          "comparison",
          "value",
          "metadata"
        ],
        "properties": {
          "lhs": {
            "type": "string",
            "description": "The left hand side which will always be a domain input identifier like \"payment.method.cardtype\""
          },
          "comparison": {
            "$ref": "#/components/schemas/ComparisonType"
          },
          "value": {
            "$ref": "#/components/schemas/ValueType"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata that the Static Analyzer and Backend does not touch.\nThis can be used to store useful information for the frontend and is required for communication\nbetween the static analyzer and the frontend.",
            "additionalProperties": {}
          }
        }
      },
      "ComparisonType": {
        "type": "string",
        "description": "Conditional comparison type",
        "enum": [
          "equal",
          "not_equal",
          "less_than",
          "less_than_equal",
          "greater_than",
          "greater_than_equal"
        ]
      },
      "Connector": {
        "type": "string",
        "description": "A connector is an integration to fulfill payments",
        "enum": [
          "adyenplatform",
          "phonypay",
          "fauxpay",
          "pretendpay",
          "stripe_test",
          "adyen_test",
          "checkout_test",
          "paypal_test",
          "aci",
          "adyen",
          "airwallex",
          "authorizedotnet",
          "bambora",
          "bamboraapac",
          "bankofamerica",
          "billwerk",
          "bitpay",
          "bluesnap",
          "boku",
          "braintree",
          "cashtocode",
          "checkout",
          "coinbase",
          "cryptopay",
          "cybersource",
          "datatrans",
          "dlocal",
          "ebanx",
          "fiserv",
          "forte",
          "globalpay",
          "globepay",
          "gocardless",
          "gpayments",
          "helcim",
          "iatapay",
          "itaubank",
          "klarna",
          "mifinity",
          "mollie",
          "multisafepay",
          "netcetera",
          "nexinets",
          "nmi",
          "noon",
          "nuvei",
          "opennode",
          "paybox",
          "payme",
          "payone",
          "paypal",
          "payu",
          "placetopay",
          "powertranz",
          "prophetpay",
          "rapyd",
          "razorpay",
          "shift4",
          "square",
          "stax",
          "stripe",
          "threedsecureio",
          "trustpay",
          "tsys",
          "volt",
          "wellsfargo",
          "wise",
          "worldline",
          "worldpay",
          "signifyd",
          "plaid",
          "riskified",
          "zen",
          "zsl"
        ]
      },
      "ConnectorMetadata": {
        "type": "object",
        "description": "Some connectors like Apple Pay, Airwallex and Noon might require some additional information, find specific details in the child attributes below.",
        "properties": {
          "apple_pay": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApplepayConnectorMetadataRequest"
              }
            ],
            "nullable": true
          },
          "airwallex": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AirwallexData"
              }
            ],
            "nullable": true
          },
          "noon": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NoonData"
              }
            ],
            "nullable": true
          }
        }
      },
      "ConnectorSelection": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "type",
              "data"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "priority"
                ]
              },
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoutableConnectorChoice"
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "data"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "volume_split"
                ]
              },
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ConnectorVolumeSplit"
                }
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "type"
        }
      },
      "ConnectorStatus": {
        "type": "string",
        "enum": [
          "inactive",
          "active"
        ]
      },
      "ConnectorType": {
        "type": "string",
        "description": "Type of the Connector for the financial use case. Could range from Payments to Accounting to Banking.",
        "enum": [
          "payment_processor",
          "payment_vas",
          "fin_operations",
          "fiz_operations",
          "networks",
          "banking_entities",
          "non_banking_finance",
          "payout_processor",
          "payment_method_auth",
          "authentication_processor"
        ]
      },
      "ConnectorVolumeSplit": {
        "type": "object",
        "required": [
          "connector",
          "split"
        ],
        "properties": {
          "connector": {
            "$ref": "#/components/schemas/RoutableConnectorChoice"
          },
          "split": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        }
      },
      "CountryAlpha2": {
        "type": "string",
        "enum": [
          "AF",
          "AX",
          "AL",
          "DZ",
          "AS",
          "AD",
          "AO",
          "AI",
          "AQ",
          "AG",
          "AR",
          "AM",
          "AW",
          "AU",
          "AT",
          "AZ",
          "BS",
          "BH",
          "BD",
          "BB",
          "BY",
          "BE",
          "BZ",
          "BJ",
          "BM",
          "BT",
          "BO",
          "BQ",
          "BA",
          "BW",
          "BV",
          "BR",
          "IO",
          "BN",
          "BG",
          "BF",
          "BI",
          "KH",
          "CM",
          "CA",
          "CV",
          "KY",
          "CF",
          "TD",
          "CL",
          "CN",
          "CX",
          "CC",
          "CO",
          "KM",
          "CG",
          "CD",
          "CK",
          "CR",
          "CI",
          "HR",
          "CU",
          "CW",
          "CY",
          "CZ",
          "DK",
          "DJ",
          "DM",
          "DO",
          "EC",
          "EG",
          "SV",
          "GQ",
          "ER",
          "EE",
          "ET",
          "FK",
          "FO",
          "FJ",
          "FI",
          "FR",
          "GF",
          "PF",
          "TF",
          "GA",
          "GM",
          "GE",
          "DE",
          "GH",
          "GI",
          "GR",
          "GL",
          "GD",
          "GP",
          "GU",
          "GT",
          "GG",
          "GN",
          "GW",
          "GY",
          "HT",
          "HM",
          "VA",
          "HN",
          "HK",
          "HU",
          "IS",
          "IN",
          "ID",
          "IR",
          "IQ",
          "IE",
          "IM",
          "IL",
          "IT",
          "JM",
          "JP",
          "JE",
          "JO",
          "KZ",
          "KE",
          "KI",
          "KP",
          "KR",
          "KW",
          "KG",
          "LA",
          "LV",
          "LB",
          "LS",
          "LR",
          "LY",
          "LI",
          "LT",
          "LU",
          "MO",
          "MK",
          "MG",
          "MW",
          "MY",
          "MV",
          "ML",
          "MT",
          "MH",
          "MQ",
          "MR",
          "MU",
          "YT",
          "MX",
          "FM",
          "MD",
          "MC",
          "MN",
          "ME",
          "MS",
          "MA",
          "MZ",
          "MM",
          "NA",
          "NR",
          "NP",
          "NL",
          "NC",
          "NZ",
          "NI",
          "NE",
          "NG",
          "NU",
          "NF",
          "MP",
          "NO",
          "OM",
          "PK",
          "PW",
          "PS",
          "PA",
          "PG",
          "PY",
          "PE",
          "PH",
          "PN",
          "PL",
          "PT",
          "PR",
          "QA",
          "RE",
          "RO",
          "RU",
          "RW",
          "BL",
          "SH",
          "KN",
          "LC",
          "MF",
          "PM",
          "VC",
          "WS",
          "SM",
          "ST",
          "SA",
          "SN",
          "RS",
          "SC",
          "SL",
          "SG",
          "SX",
          "SK",
          "SI",
          "SB",
          "SO",
          "ZA",
          "GS",
          "SS",
          "ES",
          "LK",
          "SD",
          "SR",
          "SJ",
          "SZ",
          "SE",
          "CH",
          "SY",
          "TW",
          "TJ",
          "TZ",
          "TH",
          "TL",
          "TG",
          "TK",
          "TO",
          "TT",
          "TN",
          "TR",
          "TM",
          "TC",
          "TV",
          "UG",
          "UA",
          "AE",
          "GB",
          "UM",
          "UY",
          "UZ",
          "VU",
          "VE",
          "VN",
          "VG",
          "VI",
          "WF",
          "EH",
          "YE",
          "ZM",
          "ZW",
          "US"
        ]
      },
      "CreateApiKeyRequest": {
        "type": "object",
        "description": "The request body for creating an API Key.",
        "required": [
          "name",
          "expiration"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "A unique name for the API Key to help you identify it.",
            "example": "Sandbox integration key",
            "maxLength": 64
          },
          "description": {
            "type": "string",
            "description": "A description to provide more context about the API Key.",
            "example": "Key used by our developers to integrate with the sandbox environment",
            "nullable": true,
            "maxLength": 256
          },
          "expiration": {
            "$ref": "#/components/schemas/ApiKeyExpiration"
          }
        },
        "additionalProperties": false
      },
      "CreateApiKeyResponse": {
        "type": "object",
        "description": "The response body for creating an API Key.",
        "required": [
          "key_id",
          "merchant_id",
          "name",
          "api_key",
          "created",
          "expiration"
        ],
        "properties": {
          "key_id": {
            "type": "string",
            "description": "The identifier for the API Key.",
            "example": "5hEEqkgJUyuxgSKGArHA4mWSnX",
            "maxLength": 64
          },
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account.",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 64
          },
          "name": {
            "type": "string",
            "description": "The unique name for the API Key to help you identify it.",
            "example": "Sandbox integration key",
            "maxLength": 64
          },
          "description": {
            "type": "string",
            "description": "The description to provide more context about the API Key.",
            "example": "Key used by our developers to integrate with the sandbox environment",
            "nullable": true,
            "maxLength": 256
          },
          "api_key": {
            "type": "string",
            "description": "The plaintext API Key used for server-side API access. Ensure you store the API Key\nsecurely as you will not be able to see it again.",
            "maxLength": 128
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "The time at which the API Key was created.",
            "example": "2022-09-10T10:11:12Z"
          },
          "expiration": {
            "$ref": "#/components/schemas/ApiKeyExpiration"
          }
        }
      },
      "CryptoData": {
        "type": "object",
        "properties": {
          "pay_currency": {
            "type": "string",
            "nullable": true
          },
          "network": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "Currency": {
        "type": "string",
        "description": "The three letter ISO currency code in uppercase. Eg: 'USD' for the United States Dollar.",
        "enum": [
          "AED",
          "ALL",
          "AMD",
          "ANG",
          "AOA",
          "ARS",
          "AUD",
          "AWG",
          "AZN",
          "BAM",
          "BBD",
          "BDT",
          "BGN",
          "BHD",
          "BIF",
          "BMD",
          "BND",
          "BOB",
          "BRL",
          "BSD",
          "BWP",
          "BYN",
          "BZD",
          "CAD",
          "CHF",
          "CLP",
          "CNY",
          "COP",
          "CRC",
          "CUP",
          "CVE",
          "CZK",
          "DJF",
          "DKK",
          "DOP",
          "DZD",
          "EGP",
          "ETB",
          "EUR",
          "FJD",
          "FKP",
          "GBP",
          "GEL",
          "GHS",
          "GIP",
          "GMD",
          "GNF",
          "GTQ",
          "GYD",
          "HKD",
          "HNL",
          "HRK",
          "HTG",
          "HUF",
          "IDR",
          "ILS",
          "INR",
          "IQD",
          "JMD",
          "JOD",
          "JPY",
          "KES",
          "KGS",
          "KHR",
          "KMF",
          "KRW",
          "KWD",
          "KYD",
          "KZT",
          "LAK",
          "LBP",
          "LKR",
          "LRD",
          "LSL",
          "LYD",
          "MAD",
          "MDL",
          "MGA",
          "MKD",
          "MMK",
          "MNT",
          "MOP",
          "MRU",
          "MUR",
          "MVR",
          "MWK",
          "MXN",
          "MYR",
          "MZN",
          "NAD",
          "NGN",
          "NIO",
          "NOK",
          "NPR",
          "NZD",
          "OMR",
          "PAB",
          "PEN",
          "PGK",
          "PHP",
          "PKR",
          "PLN",
          "PYG",
          "QAR",
          "RON",
          "RSD",
          "RUB",
          "RWF",
          "SAR",
          "SBD",
          "SCR",
          "SEK",
          "SGD",
          "SHP",
          "SLE",
          "SLL",
          "SOS",
          "SRD",
          "SSP",
          "STN",
          "SVC",
          "SZL",
          "THB",
          "TND",
          "TOP",
          "TRY",
          "TTD",
          "TWD",
          "TZS",
          "UAH",
          "UGX",
          "USD",
          "UYU",
          "UZS",
          "VES",
          "VND",
          "VUV",
          "WST",
          "XAF",
          "XCD",
          "XOF",
          "XPF",
          "YER",
          "ZAR",
          "ZMW"
        ]
      },
      "CustomerAcceptance": {
        "type": "object",
        "description": "This \"CustomerAcceptance\" object is passed during Payments-Confirm request, it enlists the type, time, and mode of acceptance properties related to an acceptance done by the customer. The customer_acceptance sub object is usually passed by the SDK or client.",
        "required": [
          "acceptance_type"
        ],
        "properties": {
          "acceptance_type": {
            "$ref": "#/components/schemas/AcceptanceType"
          },
          "accepted_at": {
            "type": "string",
            "format": "date-time",
            "description": "Specifying when the customer acceptance was provided",
            "example": "2022-09-10T10:11:12Z",
            "nullable": true
          },
          "online": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OnlineMandate"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomerDefaultPaymentMethodResponse": {
        "type": "object",
        "required": [
          "customer_id",
          "payment_method"
        ],
        "properties": {
          "default_payment_method_id": {
            "type": "string",
            "description": "The unique identifier of the Payment method",
            "example": "card_rGK4Vi5iSW70MY7J2mIg",
            "nullable": true
          },
          "customer_id": {
            "type": "string",
            "description": "The unique identifier of the customer.",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 64,
            "minLength": 1
          },
          "payment_method": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "payment_method_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodType"
              }
            ],
            "nullable": true
          }
        }
      },
      "CustomerDeleteResponse": {
        "type": "object",
        "required": [
          "customer_id",
          "customer_deleted",
          "address_deleted",
          "payment_methods_deleted"
        ],
        "properties": {
          "customer_id": {
            "type": "string",
            "description": "The identifier for the customer object",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "customer_deleted": {
            "type": "boolean",
            "description": "Whether customer was deleted or not",
            "example": false
          },
          "address_deleted": {
            "type": "boolean",
            "description": "Whether address was deleted or not",
            "example": false
          },
          "payment_methods_deleted": {
            "type": "boolean",
            "description": "Whether payment methods deleted or not",
            "example": false
          }
        }
      },
      "CustomerDetails": {
        "type": "object",
        "description": "Passing this object creates a new customer or attaches an existing customer to the payment",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The identifier for the customer.",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 64,
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "The customer's name",
            "example": "John Doe",
            "nullable": true,
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "description": "The customer's email address",
            "example": "johntest@test.com",
            "nullable": true,
            "maxLength": 255
          },
          "phone": {
            "type": "string",
            "description": "The customer's phone number",
            "example": "9123456789",
            "nullable": true,
            "maxLength": 10
          },
          "phone_country_code": {
            "type": "string",
            "description": "The country code for the customer's phone number",
            "example": "+1",
            "nullable": true,
            "maxLength": 2
          }
        }
      },
      "CustomerDetailsResponse": {
        "type": "object",
        "description": "Details of customer attached to this payment",
        "properties": {
          "id": {
            "type": "string",
            "description": "The identifier for the customer.",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "nullable": true,
            "maxLength": 64,
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "The customer's name",
            "example": "John Doe",
            "nullable": true,
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "description": "The customer's email address",
            "example": "johntest@test.com",
            "nullable": true,
            "maxLength": 255
          },
          "phone": {
            "type": "string",
            "description": "The customer's phone number",
            "example": "9123456789",
            "nullable": true,
            "maxLength": 10
          },
          "phone_country_code": {
            "type": "string",
            "description": "The country code for the customer's phone number",
            "example": "+1",
            "nullable": true,
            "maxLength": 2
          }
        }
      },
      "CustomerPaymentMethod": {
        "type": "object",
        "required": [
          "payment_token",
          "payment_method_id",
          "customer_id",
          "payment_method",
          "recurring_enabled",
          "installment_payment_enabled",
          "requires_cvv",
          "default_payment_method_set"
        ],
        "properties": {
          "payment_token": {
            "type": "string",
            "description": "Token for payment method in temporary card locker which gets refreshed often",
            "example": "7ebf443f-a050-4067-84e5-e6f6d4800aef"
          },
          "payment_method_id": {
            "type": "string",
            "description": "The unique identifier of the customer.",
            "example": "pm_iouuy468iyuowqs"
          },
          "customer_id": {
            "type": "string",
            "description": "The unique identifier of the customer.",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 64,
            "minLength": 1
          },
          "payment_method": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "payment_method_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodType"
              }
            ],
            "nullable": true
          },
          "payment_method_issuer": {
            "type": "string",
            "description": "The name of the bank/ provider issuing the payment method to the end user",
            "example": "Citibank",
            "nullable": true
          },
          "payment_method_issuer_code": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodIssuerCode"
              }
            ],
            "nullable": true
          },
          "recurring_enabled": {
            "type": "boolean",
            "description": "Indicates whether the payment method is eligible for recurring payments",
            "example": true
          },
          "installment_payment_enabled": {
            "type": "boolean",
            "description": "Indicates whether the payment method is eligible for installment payments",
            "example": true
          },
          "payment_experience": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentExperience"
            },
            "description": "Type of payment experience enabled with the connector",
            "example": [
              "redirect_to_url"
            ],
            "nullable": true
          },
          "card": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardDetailFromLocker"
              }
            ],
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "A timestamp (ISO 8601 code) that determines when the customer was created",
            "example": "2023-01-18T11:04:09.922Z",
            "nullable": true
          },
          "bank_transfer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Bank"
              }
            ],
            "nullable": true
          },
          "bank": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MaskedBankDetails"
              }
            ],
            "nullable": true
          },
          "surcharge_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SurchargeDetailsResponse"
              }
            ],
            "nullable": true
          },
          "requires_cvv": {
            "type": "boolean",
            "description": "Whether this payment method requires CVV to be collected",
            "example": true
          },
          "last_used_at": {
            "type": "string",
            "format": "date-time",
            "description": "A timestamp (ISO 8601 code) that determines when the payment method was last used",
            "example": "2024-02-24T11:04:09.922Z",
            "nullable": true
          },
          "default_payment_method_set": {
            "type": "boolean",
            "description": "Indicates if the payment method has been set to default or not",
            "example": true
          },
          "billing": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "nullable": true
          }
        }
      },
      "CustomerPaymentMethodsListResponse": {
        "type": "object",
        "required": [
          "customer_payment_methods"
        ],
        "properties": {
          "customer_payment_methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerPaymentMethod"
            },
            "description": "List of payment methods for customer"
          },
          "is_guest_customer": {
            "type": "boolean",
            "description": "Returns whether a customer id is not tied to a payment intent (only when the request is made against a client secret)",
            "nullable": true
          }
        }
      },
      "CustomerRequest": {
        "type": "object",
        "description": "The customer details",
        "required": [
          "name",
          "email"
        ],
        "properties": {
          "merchant_reference_id": {
            "type": "string",
            "description": "The merchant identifier for the customer object.",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "nullable": true,
            "maxLength": 64,
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "The customer's name",
            "example": "Jon Test",
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "description": "The customer's email address",
            "example": "JonTest@test.com",
            "maxLength": 255
          },
          "phone": {
            "type": "string",
            "description": "The customer's phone number",
            "example": "9123456789",
            "nullable": true,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "description": "An arbitrary string that you can attach to a customer object.",
            "example": "First Customer",
            "nullable": true,
            "maxLength": 255
          },
          "phone_country_code": {
            "type": "string",
            "description": "The country code for the customer phone number",
            "example": "+65",
            "nullable": true,
            "maxLength": 255
          },
          "default_billing_address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressDetails"
              }
            ],
            "nullable": true
          },
          "default_shipping_address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressDetails"
              }
            ],
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500\ncharacters long. Metadata is useful for storing additional, structured information on an\nobject.",
            "nullable": true
          }
        }
      },
      "CustomerResponse": {
        "type": "object",
        "required": [
          "merchant_reference_id",
          "created_at"
        ],
        "properties": {
          "merchant_reference_id": {
            "type": "string",
            "description": "The identifier for the customer object",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 64,
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "The customer's name",
            "example": "Jon Test",
            "nullable": true,
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "description": "The customer's email address",
            "example": "JonTest@test.com",
            "nullable": true,
            "maxLength": 255
          },
          "phone": {
            "type": "string",
            "description": "The customer's phone number",
            "example": "9123456789",
            "nullable": true,
            "maxLength": 255
          },
          "phone_country_code": {
            "type": "string",
            "description": "The country code for the customer phone number",
            "example": "+65",
            "nullable": true,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "description": "An arbitrary string that you can attach to a customer object.",
            "example": "First Customer",
            "nullable": true,
            "maxLength": 255
          },
          "default_billing_address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressDetails"
              }
            ],
            "nullable": true
          },
          "default_shipping_address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressDetails"
              }
            ],
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "A timestamp (ISO 8601 code) that determines when the customer was created",
            "example": "2023-01-18T11:04:09.922Z"
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500\ncharacters long. Metadata is useful for storing additional, structured information on an\nobject.",
            "nullable": true
          },
          "default_payment_method_id": {
            "type": "string",
            "description": "The identifier for the default payment method.",
            "example": "pm_djh2837dwduh890123",
            "nullable": true,
            "maxLength": 64
          }
        }
      },
      "DecoupledAuthenticationType": {
        "type": "string",
        "enum": [
          "challenge",
          "frictionless"
        ]
      },
      "DefaultPaymentMethod": {
        "type": "object",
        "required": [
          "customer_id",
          "payment_method_id"
        ],
        "properties": {
          "customer_id": {
            "type": "string",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 64,
            "minLength": 1
          },
          "payment_method_id": {
            "type": "string"
          }
        }
      },
      "DeviceChannel": {
        "type": "string",
        "description": "Device Channel indicating whether request is coming from App or Browser",
        "enum": [
          "APP",
          "BRW"
        ]
      },
      "DisputeResponse": {
        "type": "object",
        "required": [
          "dispute_id",
          "payment_id",
          "attempt_id",
          "amount",
          "currency",
          "dispute_stage",
          "dispute_status",
          "connector",
          "connector_status",
          "connector_dispute_id",
          "created_at"
        ],
        "properties": {
          "dispute_id": {
            "type": "string",
            "description": "The identifier for dispute"
          },
          "payment_id": {
            "type": "string",
            "description": "The identifier for payment_intent"
          },
          "attempt_id": {
            "type": "string",
            "description": "The identifier for payment_attempt"
          },
          "amount": {
            "type": "string",
            "description": "The dispute amount"
          },
          "currency": {
            "type": "string",
            "description": "The three-letter ISO currency code"
          },
          "dispute_stage": {
            "$ref": "#/components/schemas/DisputeStage"
          },
          "dispute_status": {
            "$ref": "#/components/schemas/DisputeStatus"
          },
          "connector": {
            "type": "string",
            "description": "connector to which dispute is associated with"
          },
          "connector_status": {
            "type": "string",
            "description": "Status of the dispute sent by connector"
          },
          "connector_dispute_id": {
            "type": "string",
            "description": "Dispute id sent by connector"
          },
          "connector_reason": {
            "type": "string",
            "description": "Reason of dispute sent by connector",
            "nullable": true
          },
          "connector_reason_code": {
            "type": "string",
            "description": "Reason code of dispute sent by connector",
            "nullable": true
          },
          "challenge_required_by": {
            "type": "string",
            "format": "date-time",
            "description": "Evidence deadline of dispute sent by connector",
            "nullable": true
          },
          "connector_created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Dispute created time sent by connector",
            "nullable": true
          },
          "connector_updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Dispute updated time sent by connector",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which dispute is received"
          },
          "profile_id": {
            "type": "string",
            "description": "The `profile_id` associated with the dispute",
            "nullable": true
          },
          "merchant_connector_id": {
            "type": "string",
            "description": "The `merchant_connector_id` of the connector / processor through which the dispute was processed",
            "nullable": true
          }
        }
      },
      "DisputeResponsePaymentsRetrieve": {
        "type": "object",
        "required": [
          "dispute_id",
          "dispute_stage",
          "dispute_status",
          "connector_status",
          "connector_dispute_id",
          "created_at"
        ],
        "properties": {
          "dispute_id": {
            "type": "string",
            "description": "The identifier for dispute"
          },
          "dispute_stage": {
            "$ref": "#/components/schemas/DisputeStage"
          },
          "dispute_status": {
            "$ref": "#/components/schemas/DisputeStatus"
          },
          "connector_status": {
            "type": "string",
            "description": "Status of the dispute sent by connector"
          },
          "connector_dispute_id": {
            "type": "string",
            "description": "Dispute id sent by connector"
          },
          "connector_reason": {
            "type": "string",
            "description": "Reason of dispute sent by connector",
            "nullable": true
          },
          "connector_reason_code": {
            "type": "string",
            "description": "Reason code of dispute sent by connector",
            "nullable": true
          },
          "challenge_required_by": {
            "type": "string",
            "format": "date-time",
            "description": "Evidence deadline of dispute sent by connector",
            "nullable": true
          },
          "connector_created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Dispute created time sent by connector",
            "nullable": true
          },
          "connector_updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Dispute updated time sent by connector",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which dispute is received"
          }
        }
      },
      "DisputeStage": {
        "type": "string",
        "description": "Stage of the dispute",
        "enum": [
          "pre_dispute",
          "dispute",
          "pre_arbitration"
        ]
      },
      "DisputeStatus": {
        "type": "string",
        "description": "Status of the dispute",
        "enum": [
          "dispute_opened",
          "dispute_expired",
          "dispute_accepted",
          "dispute_cancelled",
          "dispute_challenged",
          "dispute_won",
          "dispute_lost"
        ]
      },
      "DokuBankTransferInstructions": {
        "type": "object",
        "required": [
          "expires_at",
          "reference",
          "instructions_url"
        ],
        "properties": {
          "expires_at": {
            "type": "string",
            "example": "1707091200000"
          },
          "reference": {
            "type": "string",
            "example": "122385736258"
          },
          "instructions_url": {
            "type": "string"
          }
        }
      },
      "DokuBillingDetails": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "description": "The billing first name for Doku",
            "example": "Jane",
            "nullable": true
          },
          "last_name": {
            "type": "string",
            "description": "The billing second name for Doku",
            "example": "Doe",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "The Email ID for Doku billing",
            "example": "example@me.com",
            "nullable": true
          }
        }
      },
      "EnabledPaymentMethod": {
        "type": "object",
        "description": "Object for EnabledPaymentMethod",
        "required": [
          "payment_method",
          "payment_method_types"
        ],
        "properties": {
          "payment_method": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "payment_method_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodType"
            },
            "description": "An array of associated payment method types",
            "uniqueItems": true
          }
        }
      },
      "EphemeralKeyCreateResponse": {
        "type": "object",
        "description": "ephemeral_key for the customer_id mentioned",
        "required": [
          "customer_id",
          "created_at",
          "expires",
          "secret"
        ],
        "properties": {
          "customer_id": {
            "type": "string",
            "description": "customer_id to which this ephemeral key belongs to",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 64,
            "minLength": 1
          },
          "created_at": {
            "type": "integer",
            "format": "int64",
            "description": "time at which this ephemeral key was created"
          },
          "expires": {
            "type": "integer",
            "format": "int64",
            "description": "time at which this ephemeral key would expire"
          },
          "secret": {
            "type": "string",
            "description": "ephemeral key"
          }
        }
      },
      "EventClass": {
        "type": "string",
        "enum": [
          "payments",
          "refunds",
          "disputes",
          "mandates",
          "payouts"
        ]
      },
      "EventListItemResponse": {
        "type": "object",
        "description": "The response body for each item when listing events.",
        "required": [
          "event_id",
          "merchant_id",
          "profile_id",
          "object_id",
          "event_type",
          "event_class",
          "is_delivery_successful",
          "initial_attempt_id",
          "created"
        ],
        "properties": {
          "event_id": {
            "type": "string",
            "description": "The identifier for the Event.",
            "example": "evt_018e31720d1b7a2b82677d3032cab959",
            "maxLength": 64
          },
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account.",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 64
          },
          "profile_id": {
            "type": "string",
            "description": "The identifier for the Business Profile.",
            "example": "SqB0zwDGR5wHppWf0bx7GKr1f2",
            "maxLength": 64
          },
          "object_id": {
            "type": "string",
            "description": "The identifier for the object (Payment Intent ID, Refund ID, etc.)",
            "example": "QHrfd5LUDdZaKtAjdJmMu0dMa1",
            "maxLength": 64
          },
          "event_type": {
            "$ref": "#/components/schemas/EventType"
          },
          "event_class": {
            "$ref": "#/components/schemas/EventClass"
          },
          "is_delivery_successful": {
            "type": "boolean",
            "description": "Indicates whether the webhook delivery attempt was successful."
          },
          "initial_attempt_id": {
            "type": "string",
            "description": "The identifier for the initial delivery attempt. This will be the same as `event_id` for\nthe initial delivery attempt.",
            "example": "evt_018e31720d1b7a2b82677d3032cab959",
            "maxLength": 64
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the event was created.",
            "example": "2022-09-10T10:11:12Z"
          }
        }
      },
      "EventRetrieveResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EventListItemResponse"
          },
          {
            "type": "object",
            "required": [
              "request",
              "response"
            ],
            "properties": {
              "request": {
                "$ref": "#/components/schemas/OutgoingWebhookRequestContent"
              },
              "response": {
                "$ref": "#/components/schemas/OutgoingWebhookResponseContent"
              },
              "delivery_attempt": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/WebhookDeliveryAttempt"
                  }
                ],
                "nullable": true
              }
            }
          }
        ],
        "description": "The response body for retrieving an event."
      },
      "EventType": {
        "type": "string",
        "enum": [
          "payment_succeeded",
          "payment_failed",
          "payment_processing",
          "payment_cancelled",
          "payment_authorized",
          "payment_captured",
          "action_required",
          "refund_succeeded",
          "refund_failed",
          "dispute_opened",
          "dispute_expired",
          "dispute_accepted",
          "dispute_cancelled",
          "dispute_challenged",
          "dispute_won",
          "dispute_lost",
          "mandate_active",
          "mandate_revoked",
          "payout_success",
          "payout_failed",
          "payout_initiated",
          "payout_processing",
          "payout_cancelled",
          "payout_expired",
          "payout_reversed"
        ]
      },
      "ExtendedCardInfo": {
        "type": "object",
        "required": [
          "card_number",
          "card_exp_month",
          "card_exp_year",
          "card_holder_name",
          "card_cvc"
        ],
        "properties": {
          "card_number": {
            "type": "string",
            "description": "The card number",
            "example": "4242424242424242"
          },
          "card_exp_month": {
            "type": "string",
            "description": "The card's expiry month",
            "example": "24"
          },
          "card_exp_year": {
            "type": "string",
            "description": "The card's expiry year",
            "example": "24"
          },
          "card_holder_name": {
            "type": "string",
            "description": "The card holder's name",
            "example": "John Test"
          },
          "card_cvc": {
            "type": "string",
            "description": "The CVC number for the card",
            "example": "242"
          },
          "card_issuer": {
            "type": "string",
            "description": "The name of the issuer of card",
            "example": "chase",
            "nullable": true
          },
          "card_network": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardNetwork"
              }
            ],
            "nullable": true
          },
          "card_type": {
            "type": "string",
            "example": "CREDIT",
            "nullable": true
          },
          "card_issuing_country": {
            "type": "string",
            "example": "INDIA",
            "nullable": true
          },
          "bank_code": {
            "type": "string",
            "example": "JP_AMEX",
            "nullable": true
          }
        }
      },
      "ExtendedCardInfoConfig": {
        "type": "object",
        "required": [
          "public_key"
        ],
        "properties": {
          "public_key": {
            "type": "string",
            "description": "Merchant public key"
          },
          "ttl_in_secs": {
            "type": "integer",
            "format": "int32",
            "description": "TTL for extended card info",
            "default": 900,
            "maximum": 7200,
            "minimum": 0
          }
        }
      },
      "ExtendedCardInfoResponse": {
        "type": "object",
        "required": [
          "payload"
        ],
        "properties": {
          "payload": {
            "type": "string"
          }
        }
      },
      "ExternalAuthenticationDetailsResponse": {
        "type": "object",
        "description": "Details of external authentication",
        "required": [
          "status"
        ],
        "properties": {
          "authentication_flow": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DecoupledAuthenticationType"
              }
            ],
            "nullable": true
          },
          "electronic_commerce_indicator": {
            "type": "string",
            "description": "Electronic Commerce Indicator (eci)",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/AuthenticationStatus"
          },
          "ds_transaction_id": {
            "type": "string",
            "description": "DS Transaction ID",
            "nullable": true
          },
          "version": {
            "type": "string",
            "description": "Message Version",
            "nullable": true
          },
          "error_code": {
            "type": "string",
            "description": "Error Code",
            "nullable": true
          },
          "error_message": {
            "type": "string",
            "description": "Error Message",
            "nullable": true
          }
        }
      },
      "FeatureMetadata": {
        "type": "object",
        "description": "additional data that might be required by hyperswitch",
        "properties": {
          "redirect_response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RedirectResponse"
              }
            ],
            "nullable": true
          },
          "search_tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Additional tags to be used for global search",
            "nullable": true
          }
        }
      },
      "FieldType": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "user_card_number"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_card_expiry_month"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_card_expiry_year"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_card_cvc"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_full_name"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_email_address"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_phone_number"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_phone_number_country_code"
            ]
          },
          {
            "type": "object",
            "required": [
              "user_country"
            ],
            "properties": {
              "user_country": {
                "type": "object",
                "required": [
                  "options"
                ],
                "properties": {
                  "options": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "user_currency"
            ],
            "properties": {
              "user_currency": {
                "type": "object",
                "required": [
                  "options"
                ],
                "properties": {
                  "options": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          {
            "type": "string",
            "enum": [
              "user_crypto_currency_network"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_billing_name"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_address_line1"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_address_line2"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_address_city"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_address_pincode"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_address_state"
            ]
          },
          {
            "type": "object",
            "required": [
              "user_address_country"
            ],
            "properties": {
              "user_address_country": {
                "type": "object",
                "required": [
                  "options"
                ],
                "properties": {
                  "options": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          {
            "type": "string",
            "enum": [
              "user_shipping_name"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_shipping_address_line1"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_shipping_address_line2"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_shipping_address_city"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_shipping_address_pincode"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_shipping_address_state"
            ]
          },
          {
            "type": "object",
            "required": [
              "user_shipping_address_country"
            ],
            "properties": {
              "user_shipping_address_country": {
                "type": "object",
                "required": [
                  "options"
                ],
                "properties": {
                  "options": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          {
            "type": "string",
            "enum": [
              "user_blik_code"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_bank"
            ]
          },
          {
            "type": "string",
            "enum": [
              "text"
            ]
          },
          {
            "type": "object",
            "required": [
              "drop_down"
            ],
            "properties": {
              "drop_down": {
                "type": "object",
                "required": [
                  "options"
                ],
                "properties": {
                  "options": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          {
            "type": "string",
            "enum": [
              "user_date_of_birth"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_vpa_id"
            ]
          },
          {
            "type": "object",
            "required": [
              "language_preference"
            ],
            "properties": {
              "language_preference": {
                "type": "object",
                "required": [
                  "options"
                ],
                "properties": {
                  "options": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          {
            "type": "string",
            "enum": [
              "user_pix_key"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_cpf"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_cnpj"
            ]
          }
        ],
        "description": "Possible field type of required fields in payment_method_data"
      },
      "FrmAction": {
        "type": "string",
        "enum": [
          "cancel_txn",
          "auto_refund",
          "manual_review"
        ]
      },
      "FrmConfigs": {
        "type": "object",
        "description": "Details of FrmConfigs are mentioned here... it should be passed in payment connector create api call, and stored in merchant_connector_table",
        "required": [
          "gateway",
          "payment_methods"
        ],
        "properties": {
          "gateway": {
            "$ref": "#/components/schemas/ConnectorType"
          },
          "payment_methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FrmPaymentMethod"
            },
            "description": "payment methods that can be used in the payment"
          }
        },
        "additionalProperties": false
      },
      "FrmMessage": {
        "type": "object",
        "description": "frm message is an object sent inside the payments response...when frm is invoked, its value is Some(...), else its None",
        "required": [
          "frm_name"
        ],
        "properties": {
          "frm_name": {
            "type": "string"
          },
          "frm_transaction_id": {
            "type": "string",
            "nullable": true
          },
          "frm_transaction_type": {
            "type": "string",
            "nullable": true
          },
          "frm_status": {
            "type": "string",
            "nullable": true
          },
          "frm_score": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "frm_reason": {
            "nullable": true
          },
          "frm_error": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "FrmPaymentMethod": {
        "type": "object",
        "description": "Details of FrmPaymentMethod are mentioned here... it should be passed in payment connector create api call, and stored in merchant_connector_table",
        "required": [
          "payment_method"
        ],
        "properties": {
          "payment_method": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "payment_method_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FrmPaymentMethodType"
            },
            "description": "payment method types(credit, debit) that can be used in the payment. This field is deprecated. It has not been removed to provide backward compatibility.",
            "nullable": true
          },
          "flow": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FrmPreferredFlowTypes"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FrmPaymentMethodType": {
        "type": "object",
        "description": "Details of FrmPaymentMethodType are mentioned here... it should be passed in payment connector create api call, and stored in merchant_connector_table",
        "required": [
          "payment_method_type",
          "card_networks",
          "flow",
          "action"
        ],
        "properties": {
          "payment_method_type": {
            "$ref": "#/components/schemas/PaymentMethodType"
          },
          "card_networks": {
            "$ref": "#/components/schemas/CardNetwork"
          },
          "flow": {
            "$ref": "#/components/schemas/FrmPreferredFlowTypes"
          },
          "action": {
            "$ref": "#/components/schemas/FrmAction"
          }
        },
        "additionalProperties": false
      },
      "FrmPreferredFlowTypes": {
        "type": "string",
        "enum": [
          "pre",
          "post"
        ]
      },
      "FutureUsage": {
        "type": "string",
        "description": "Indicates that you intend to make future payments with the payment methods used for this Payment. Providing this parameter will attach the payment method to the Customer, if present, after the Payment is confirmed and any required actions from the user are complete.",
        "enum": [
          "off_session",
          "on_session"
        ]
      },
      "GcashRedirection": {
        "type": "object"
      },
      "GenericLinkUiConfig": {
        "type": "object",
        "description": "Object for GenericLinkUiConfig",
        "properties": {
          "logo": {
            "type": "string",
            "description": "Merchant's display logo",
            "example": "https://hyperswitch.io/favicon.ico",
            "nullable": true,
            "maxLength": 255
          },
          "merchant_name": {
            "type": "string",
            "description": "Custom merchant name for the link",
            "example": "Hyperswitch",
            "nullable": true,
            "maxLength": 255
          },
          "theme": {
            "type": "string",
            "description": "Primary color to be used in the form represented in hex format",
            "example": "#4285F4",
            "nullable": true,
            "maxLength": 255
          }
        }
      },
      "GiftCardData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "givex"
            ],
            "properties": {
              "givex": {
                "$ref": "#/components/schemas/GiftCardDetails"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "pay_safe_card"
            ],
            "properties": {
              "pay_safe_card": {
                "type": "object"
              }
            }
          }
        ]
      },
      "GiftCardDetails": {
        "type": "object",
        "required": [
          "number",
          "cvc"
        ],
        "properties": {
          "number": {
            "type": "string",
            "description": "The gift card number"
          },
          "cvc": {
            "type": "string",
            "description": "The card verification code."
          }
        }
      },
      "GoPayRedirection": {
        "type": "object"
      },
      "GooglePayAssuranceDetails": {
        "type": "object",
        "required": [
          "card_holder_authenticated",
          "account_verified"
        ],
        "properties": {
          "card_holder_authenticated": {
            "type": "boolean",
            "description": "indicates that Cardholder possession validation has been performed"
          },
          "account_verified": {
            "type": "boolean",
            "description": "indicates that identification and verifications (ID&V) was performed"
          }
        }
      },
      "GooglePayPaymentMethodInfo": {
        "type": "object",
        "required": [
          "card_network",
          "card_details"
        ],
        "properties": {
          "card_network": {
            "type": "string",
            "description": "The name of the card network"
          },
          "card_details": {
            "type": "string",
            "description": "The details of the card"
          },
          "assurance_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GooglePayAssuranceDetails"
              }
            ],
            "nullable": true
          }
        }
      },
      "GooglePayRedirectData": {
        "type": "object"
      },
      "GooglePaySessionResponse": {
        "type": "object",
        "required": [
          "merchant_info",
          "shipping_address_required",
          "email_required",
          "shipping_address_parameters",
          "allowed_payment_methods",
          "transaction_info",
          "delayed_session_token",
          "connector",
          "sdk_next_action"
        ],
        "properties": {
          "merchant_info": {
            "$ref": "#/components/schemas/GpayMerchantInfo"
          },
          "shipping_address_required": {
            "type": "boolean",
            "description": "Is shipping address required"
          },
          "email_required": {
            "type": "boolean",
            "description": "Is email required"
          },
          "shipping_address_parameters": {
            "$ref": "#/components/schemas/GpayShippingAddressParameters"
          },
          "allowed_payment_methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GpayAllowedPaymentMethods"
            },
            "description": "List of the allowed payment meythods"
          },
          "transaction_info": {
            "$ref": "#/components/schemas/GpayTransactionInfo"
          },
          "delayed_session_token": {
            "type": "boolean",
            "description": "Identifier for the delayed session response"
          },
          "connector": {
            "type": "string",
            "description": "The name of the connector"
          },
          "sdk_next_action": {
            "$ref": "#/components/schemas/SdkNextAction"
          },
          "secrets": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SecretInfoToInitiateSdk"
              }
            ],
            "nullable": true
          }
        }
      },
      "GooglePayThirdPartySdk": {
        "type": "object",
        "required": [
          "delayed_session_token",
          "connector",
          "sdk_next_action"
        ],
        "properties": {
          "delayed_session_token": {
            "type": "boolean",
            "description": "Identifier for the delayed session response"
          },
          "connector": {
            "type": "string",
            "description": "The name of the connector"
          },
          "sdk_next_action": {
            "$ref": "#/components/schemas/SdkNextAction"
          }
        }
      },
      "GooglePayThirdPartySdkData": {
        "type": "object"
      },
      "GooglePayWalletData": {
        "type": "object",
        "required": [
          "type",
          "description",
          "info",
          "tokenization_data"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of payment method"
          },
          "description": {
            "type": "string",
            "description": "User-facing message to describe the payment method that funds this transaction."
          },
          "info": {
            "$ref": "#/components/schemas/GooglePayPaymentMethodInfo"
          },
          "tokenization_data": {
            "$ref": "#/components/schemas/GpayTokenizationData"
          }
        }
      },
      "GpayAllowedMethodsParameters": {
        "type": "object",
        "required": [
          "allowed_auth_methods",
          "allowed_card_networks"
        ],
        "properties": {
          "allowed_auth_methods": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of allowed auth methods (ex: 3DS, No3DS, PAN_ONLY etc)"
          },
          "allowed_card_networks": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of allowed card networks (ex: AMEX,JCB etc)"
          },
          "billing_address_required": {
            "type": "boolean",
            "description": "Is billing address required",
            "nullable": true
          },
          "billing_address_parameters": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GpayBillingAddressParameters"
              }
            ],
            "nullable": true
          },
          "assurance_details_required": {
            "type": "boolean",
            "description": "Whether assurance details are required",
            "nullable": true
          }
        }
      },
      "GpayAllowedPaymentMethods": {
        "type": "object",
        "required": [
          "type",
          "parameters",
          "tokenization_specification"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of payment method"
          },
          "parameters": {
            "$ref": "#/components/schemas/GpayAllowedMethodsParameters"
          },
          "tokenization_specification": {
            "$ref": "#/components/schemas/GpayTokenizationSpecification"
          }
        }
      },
      "GpayBillingAddressFormat": {
        "type": "string",
        "enum": [
          "FULL",
          "MIN"
        ]
      },
      "GpayBillingAddressParameters": {
        "type": "object",
        "required": [
          "phone_number_required",
          "format"
        ],
        "properties": {
          "phone_number_required": {
            "type": "boolean",
            "description": "Is billing phone number required"
          },
          "format": {
            "$ref": "#/components/schemas/GpayBillingAddressFormat"
          }
        }
      },
      "GpayMerchantInfo": {
        "type": "object",
        "required": [
          "merchant_name"
        ],
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The merchant Identifier that needs to be passed while invoking Gpay SDK",
            "nullable": true
          },
          "merchant_name": {
            "type": "string",
            "description": "The name of the merchant that needs to be displayed on Gpay PopUp"
          }
        }
      },
      "GpaySessionTokenResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/GooglePayThirdPartySdk"
          },
          {
            "$ref": "#/components/schemas/GooglePaySessionResponse"
          }
        ]
      },
      "GpayShippingAddressParameters": {
        "type": "object",
        "required": [
          "phone_number_required"
        ],
        "properties": {
          "phone_number_required": {
            "type": "boolean",
            "description": "Is shipping phone number required"
          }
        }
      },
      "GpayTokenParameters": {
        "type": "object",
        "required": [
          "gateway"
        ],
        "properties": {
          "gateway": {
            "type": "string",
            "description": "The name of the connector"
          },
          "gateway_merchant_id": {
            "type": "string",
            "description": "The merchant ID registered in the connector associated",
            "nullable": true
          },
          "stripe:version": {
            "type": "string",
            "nullable": true
          },
          "stripe:publishableKey": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "GpayTokenizationData": {
        "type": "object",
        "required": [
          "type",
          "token"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of the token"
          },
          "token": {
            "type": "string",
            "description": "Token generated for the wallet"
          }
        }
      },
      "GpayTokenizationSpecification": {
        "type": "object",
        "required": [
          "type",
          "parameters"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The token specification type(ex: PAYMENT_GATEWAY)"
          },
          "parameters": {
            "$ref": "#/components/schemas/GpayTokenParameters"
          }
        }
      },
      "GpayTransactionInfo": {
        "type": "object",
        "required": [
          "country_code",
          "currency_code",
          "total_price_status",
          "total_price"
        ],
        "properties": {
          "country_code": {
            "$ref": "#/components/schemas/CountryAlpha2"
          },
          "currency_code": {
            "$ref": "#/components/schemas/Currency"
          },
          "total_price_status": {
            "type": "string",
            "description": "The total price status (ex: 'FINAL')"
          },
          "total_price": {
            "type": "string",
            "description": "The total price",
            "example": "38.02"
          }
        }
      },
      "GsmCreateRequest": {
        "type": "object",
        "required": [
          "connector",
          "flow",
          "sub_flow",
          "code",
          "message",
          "status",
          "decision",
          "step_up_possible"
        ],
        "properties": {
          "connector": {
            "$ref": "#/components/schemas/Connector"
          },
          "flow": {
            "type": "string",
            "description": "The flow in which the code and message occurred for a connector"
          },
          "sub_flow": {
            "type": "string",
            "description": "The sub_flow in which the code and message occurred  for a connector"
          },
          "code": {
            "type": "string",
            "description": "code received from the connector"
          },
          "message": {
            "type": "string",
            "description": "message received from the connector"
          },
          "status": {
            "type": "string",
            "description": "status provided by the router"
          },
          "router_error": {
            "type": "string",
            "description": "optional error provided by the router",
            "nullable": true
          },
          "decision": {
            "$ref": "#/components/schemas/GsmDecision"
          },
          "step_up_possible": {
            "type": "boolean",
            "description": "indicates if step_up retry is possible"
          },
          "unified_code": {
            "type": "string",
            "description": "error code unified across the connectors",
            "nullable": true
          },
          "unified_message": {
            "type": "string",
            "description": "error message unified across the connectors",
            "nullable": true
          }
        }
      },
      "GsmDecision": {
        "type": "string",
        "enum": [
          "retry",
          "requeue",
          "do_default"
        ]
      },
      "GsmDeleteRequest": {
        "type": "object",
        "required": [
          "connector",
          "flow",
          "sub_flow",
          "code",
          "message"
        ],
        "properties": {
          "connector": {
            "type": "string",
            "description": "The connector through which payment has gone through"
          },
          "flow": {
            "type": "string",
            "description": "The flow in which the code and message occurred for a connector"
          },
          "sub_flow": {
            "type": "string",
            "description": "The sub_flow in which the code and message occurred  for a connector"
          },
          "code": {
            "type": "string",
            "description": "code received from the connector"
          },
          "message": {
            "type": "string",
            "description": "message received from the connector"
          }
        }
      },
      "GsmDeleteResponse": {
        "type": "object",
        "required": [
          "gsm_rule_delete",
          "connector",
          "flow",
          "sub_flow",
          "code"
        ],
        "properties": {
          "gsm_rule_delete": {
            "type": "boolean"
          },
          "connector": {
            "type": "string",
            "description": "The connector through which payment has gone through"
          },
          "flow": {
            "type": "string",
            "description": "The flow in which the code and message occurred for a connector"
          },
          "sub_flow": {
            "type": "string",
            "description": "The sub_flow in which the code and message occurred  for a connector"
          },
          "code": {
            "type": "string",
            "description": "code received from the connector"
          }
        }
      },
      "GsmResponse": {
        "type": "object",
        "required": [
          "connector",
          "flow",
          "sub_flow",
          "code",
          "message",
          "status",
          "decision",
          "step_up_possible"
        ],
        "properties": {
          "connector": {
            "type": "string",
            "description": "The connector through which payment has gone through"
          },
          "flow": {
            "type": "string",
            "description": "The flow in which the code and message occurred for a connector"
          },
          "sub_flow": {
            "type": "string",
            "description": "The sub_flow in which the code and message occurred  for a connector"
          },
          "code": {
            "type": "string",
            "description": "code received from the connector"
          },
          "message": {
            "type": "string",
            "description": "message received from the connector"
          },
          "status": {
            "type": "string",
            "description": "status provided by the router"
          },
          "router_error": {
            "type": "string",
            "description": "optional error provided by the router",
            "nullable": true
          },
          "decision": {
            "type": "string",
            "description": "decision to be taken for auto retries flow"
          },
          "step_up_possible": {
            "type": "boolean",
            "description": "indicates if step_up retry is possible"
          },
          "unified_code": {
            "type": "string",
            "description": "error code unified across the connectors",
            "nullable": true
          },
          "unified_message": {
            "type": "string",
            "description": "error message unified across the connectors",
            "nullable": true
          }
        }
      },
      "GsmRetrieveRequest": {
        "type": "object",
        "required": [
          "connector",
          "flow",
          "sub_flow",
          "code",
          "message"
        ],
        "properties": {
          "connector": {
            "$ref": "#/components/schemas/Connector"
          },
          "flow": {
            "type": "string",
            "description": "The flow in which the code and message occurred for a connector"
          },
          "sub_flow": {
            "type": "string",
            "description": "The sub_flow in which the code and message occurred  for a connector"
          },
          "code": {
            "type": "string",
            "description": "code received from the connector"
          },
          "message": {
            "type": "string",
            "description": "message received from the connector"
          }
        }
      },
      "GsmUpdateRequest": {
        "type": "object",
        "required": [
          "connector",
          "flow",
          "sub_flow",
          "code",
          "message"
        ],
        "properties": {
          "connector": {
            "type": "string",
            "description": "The connector through which payment has gone through"
          },
          "flow": {
            "type": "string",
            "description": "The flow in which the code and message occurred for a connector"
          },
          "sub_flow": {
            "type": "string",
            "description": "The sub_flow in which the code and message occurred  for a connector"
          },
          "code": {
            "type": "string",
            "description": "code received from the connector"
          },
          "message": {
            "type": "string",
            "description": "message received from the connector"
          },
          "status": {
            "type": "string",
            "description": "status provided by the router",
            "nullable": true
          },
          "router_error": {
            "type": "string",
            "description": "optional error provided by the router",
            "nullable": true
          },
          "decision": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GsmDecision"
              }
            ],
            "nullable": true
          },
          "step_up_possible": {
            "type": "boolean",
            "description": "indicates if step_up retry is possible",
            "nullable": true
          },
          "unified_code": {
            "type": "string",
            "description": "error code unified across the connectors",
            "nullable": true
          },
          "unified_message": {
            "type": "string",
            "description": "error message unified across the connectors",
            "nullable": true
          }
        }
      },
      "IfStatement": {
        "type": "object",
        "description": "Represents an IF statement with conditions and optional nested IF statements\n\n```text\npayment.method = card {\npayment.method.cardtype = (credit, debit) {\npayment.method.network = (amex, rupay, diners)\n}\n}\n```",
        "required": [
          "condition"
        ],
        "properties": {
          "condition": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comparison"
            }
          },
          "nested": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IfStatement"
            },
            "nullable": true
          }
        }
      },
      "IncrementalAuthorizationResponse": {
        "type": "object",
        "required": [
          "authorization_id",
          "amount",
          "status",
          "previously_authorized_amount"
        ],
        "properties": {
          "authorization_id": {
            "type": "string",
            "description": "The unique identifier of authorization"
          },
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "Amount the authorization has been made for",
            "example": 6540
          },
          "status": {
            "$ref": "#/components/schemas/AuthorizationStatus"
          },
          "error_code": {
            "type": "string",
            "description": "Error code sent by the connector for authorization",
            "nullable": true
          },
          "error_message": {
            "type": "string",
            "description": "Error message sent by the connector for authorization",
            "nullable": true
          },
          "previously_authorized_amount": {
            "$ref": "#/components/schemas/MinorUnit"
          }
        }
      },
      "IndomaretVoucherData": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "description": "The billing first name for Alfamart",
            "example": "Jane",
            "nullable": true
          },
          "last_name": {
            "type": "string",
            "description": "The billing second name for Alfamart",
            "example": "Doe",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "The Email ID for Alfamart",
            "example": "example@me.com",
            "nullable": true
          }
        }
      },
      "IntentStatus": {
        "type": "string",
        "description": "The status of the current payment that was made",
        "enum": [
          "succeeded",
          "failed",
          "cancelled",
          "processing",
          "requires_customer_action",
          "requires_merchant_action",
          "requires_payment_method",
          "requires_confirmation",
          "requires_capture",
          "partially_captured",
          "partially_captured_and_capturable"
        ]
      },
      "JCSVoucherData": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "description": "The billing first name for Japanese convenience stores",
            "example": "Jane",
            "nullable": true
          },
          "last_name": {
            "type": "string",
            "description": "The billing second name Japanese convenience stores",
            "example": "Doe",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "The Email ID for Japanese convenience stores",
            "example": "example@me.com",
            "nullable": true
          },
          "phone_number": {
            "type": "string",
            "description": "The telephone number for Japanese convenience stores",
            "example": "9123456789",
            "nullable": true
          }
        }
      },
      "KakaoPayRedirection": {
        "type": "object"
      },
      "KlarnaSdkPaymentMethodResponse": {
        "type": "object",
        "properties": {
          "payment_type": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "KlarnaSessionTokenResponse": {
        "type": "object",
        "required": [
          "session_token",
          "session_id"
        ],
        "properties": {
          "session_token": {
            "type": "string",
            "description": "The session token for Klarna"
          },
          "session_id": {
            "type": "string",
            "description": "The identifier for the session"
          }
        }
      },
      "LinkedRoutingConfigRetrieveResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/RoutingRetrieveResponse"
          },
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoutingDictionaryRecord"
            }
          }
        ]
      },
      "ListBlocklistQuery": {
        "type": "object",
        "required": [
          "data_kind"
        ],
        "properties": {
          "data_kind": {
            "$ref": "#/components/schemas/BlocklistDataKind"
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        }
      },
      "MandateAmountData": {
        "type": "object",
        "required": [
          "amount",
          "currency"
        ],
        "properties": {
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "The maximum amount to be debited for the mandate transaction",
            "example": 6540
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "description": "Specifying start date of the mandate",
            "example": "2022-09-10T00:00:00Z",
            "nullable": true
          },
          "end_date": {
            "type": "string",
            "format": "date-time",
            "description": "Specifying end date of the mandate",
            "example": "2023-09-10T23:59:59Z",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "Additional details required by mandate",
            "nullable": true
          }
        }
      },
      "MandateCardDetails": {
        "type": "object",
        "properties": {
          "last4_digits": {
            "type": "string",
            "description": "The last 4 digits of card",
            "nullable": true
          },
          "card_exp_month": {
            "type": "string",
            "description": "The expiry month of card",
            "nullable": true
          },
          "card_exp_year": {
            "type": "string",
            "description": "The expiry year of card",
            "nullable": true
          },
          "card_holder_name": {
            "type": "string",
            "description": "The card holder name",
            "nullable": true
          },
          "card_token": {
            "type": "string",
            "description": "The token from card locker",
            "nullable": true
          },
          "scheme": {
            "type": "string",
            "description": "The card scheme network for the particular card",
            "nullable": true
          },
          "issuer_country": {
            "type": "string",
            "description": "The country code in in which the card was issued",
            "nullable": true
          },
          "card_fingerprint": {
            "type": "string",
            "description": "A unique identifier alias to identify a particular card",
            "nullable": true
          },
          "card_isin": {
            "type": "string",
            "description": "The first 6 digits of card",
            "nullable": true
          },
          "card_issuer": {
            "type": "string",
            "description": "The bank that issued the card",
            "nullable": true
          },
          "card_network": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardNetwork"
              }
            ],
            "nullable": true
          },
          "card_type": {
            "type": "string",
            "description": "The type of the payment card",
            "nullable": true
          },
          "nick_name": {
            "type": "string",
            "description": "The nick_name of the card holder",
            "nullable": true
          }
        }
      },
      "MandateData": {
        "type": "object",
        "description": "Passing this object during payments creates a mandate. The mandate_type sub object is passed by the server.",
        "properties": {
          "update_mandate_id": {
            "type": "string",
            "description": "A way to update the mandate's payment method details",
            "nullable": true
          },
          "customer_acceptance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomerAcceptance"
              }
            ],
            "nullable": true
          },
          "mandate_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MandateType"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MandateResponse": {
        "type": "object",
        "required": [
          "mandate_id",
          "status",
          "payment_method_id",
          "payment_method"
        ],
        "properties": {
          "mandate_id": {
            "type": "string",
            "description": "The identifier for mandate"
          },
          "status": {
            "$ref": "#/components/schemas/MandateStatus"
          },
          "payment_method_id": {
            "type": "string",
            "description": "The identifier for payment method"
          },
          "payment_method": {
            "type": "string",
            "description": "The payment method"
          },
          "payment_method_type": {
            "type": "string",
            "description": "The payment method type",
            "nullable": true
          },
          "card": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MandateCardDetails"
              }
            ],
            "nullable": true
          },
          "customer_acceptance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomerAcceptance"
              }
            ],
            "nullable": true
          }
        }
      },
      "MandateRevokedResponse": {
        "type": "object",
        "required": [
          "mandate_id",
          "status"
        ],
        "properties": {
          "mandate_id": {
            "type": "string",
            "description": "The identifier for mandate"
          },
          "status": {
            "$ref": "#/components/schemas/MandateStatus"
          },
          "error_code": {
            "type": "string",
            "description": "If there was an error while calling the connectors the code is received here",
            "example": "E0001",
            "nullable": true
          },
          "error_message": {
            "type": "string",
            "description": "If there was an error while calling the connector the error message is received here",
            "example": "Failed while verifying the card",
            "nullable": true
          }
        }
      },
      "MandateStatus": {
        "type": "string",
        "description": "The status of the mandate, which indicates whether it can be used to initiate a payment.",
        "enum": [
          "active",
          "inactive",
          "pending",
          "revoked"
        ]
      },
      "MandateType": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "single_use"
            ],
            "properties": {
              "single_use": {
                "$ref": "#/components/schemas/MandateAmountData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "multi_use"
            ],
            "properties": {
              "multi_use": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MandateAmountData"
                  }
                ],
                "nullable": true
              }
            }
          }
        ]
      },
      "MaskedBankDetails": {
        "type": "object",
        "required": [
          "mask"
        ],
        "properties": {
          "mask": {
            "type": "string"
          }
        }
      },
      "MbWayRedirection": {
        "type": "object",
        "required": [
          "telephone_number"
        ],
        "properties": {
          "telephone_number": {
            "type": "string",
            "description": "Telephone number of the shopper. Should be Portuguese phone number."
          }
        }
      },
      "MerchantAccountCreate": {
        "type": "object",
        "required": [
          "merchant_name",
          "organization_id"
        ],
        "properties": {
          "merchant_name": {
            "type": "string",
            "description": "Name of the Merchant Account, This will be used as a prefix to generate the id",
            "example": "NewAge Retailer",
            "maxLength": 64
          },
          "merchant_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantDetails"
              }
            ],
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "Metadata is useful for storing additional, unstructured information about the merchant account.",
            "nullable": true
          },
          "organization_id": {
            "type": "string",
            "description": "The id of the organization to which the merchant belongs to. Please use the organization endpoint to create an organization",
            "example": "org_q98uSGAYbjEwqs0mJwnz",
            "maxLength": 64,
            "minLength": 1
          }
        },
        "additionalProperties": false
      },
      "MerchantAccountData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "iban"
            ],
            "properties": {
              "iban": {
                "type": "object",
                "required": [
                  "iban",
                  "name"
                ],
                "properties": {
                  "iban": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "connector_recipient_id": {
                    "type": "string",
                    "nullable": true
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "bacs"
            ],
            "properties": {
              "bacs": {
                "type": "object",
                "required": [
                  "account_number",
                  "sort_code",
                  "name"
                ],
                "properties": {
                  "account_number": {
                    "type": "string"
                  },
                  "sort_code": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "connector_recipient_id": {
                    "type": "string",
                    "nullable": true
                  }
                }
              }
            }
          }
        ]
      },
      "MerchantAccountDeleteResponse": {
        "type": "object",
        "required": [
          "merchant_id",
          "deleted"
        ],
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "deleted": {
            "type": "boolean",
            "description": "If the connector is deleted or not",
            "example": false
          }
        }
      },
      "MerchantAccountResponse": {
        "type": "object",
        "required": [
          "id",
          "merchant_name",
          "publishable_key",
          "organization_id",
          "recon_status"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The identifier for the Merchant Account",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 64
          },
          "merchant_name": {
            "type": "string",
            "description": "Name of the Merchant Account",
            "example": "NewAge Retailer"
          },
          "merchant_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantDetails"
              }
            ],
            "nullable": true
          },
          "publishable_key": {
            "type": "string",
            "description": "API key that will be used for server side API access",
            "example": "AH3423bkjbkjdsfbkj"
          },
          "metadata": {
            "type": "object",
            "description": "Metadata is useful for storing additional, unstructured information on an object.",
            "nullable": true
          },
          "organization_id": {
            "type": "string",
            "description": "The id of the organization which the merchant is associated with",
            "example": "org_q98uSGAYbjEwqs0mJwnz",
            "maxLength": 64,
            "minLength": 1
          },
          "recon_status": {
            "$ref": "#/components/schemas/ReconStatus"
          }
        }
      },
      "MerchantAccountUpdate": {
        "type": "object",
        "properties": {
          "merchant_name": {
            "type": "string",
            "description": "Name of the Merchant Account",
            "example": "NewAge Retailer",
            "nullable": true
          },
          "merchant_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantDetails"
              }
            ],
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "Metadata is useful for storing additional, unstructured information on an object.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantConnectorCreate": {
        "type": "object",
        "description": "Create a new Merchant Connector for the merchant account. The connector could be a payment processor / facilitator / acquirer or specialized services like Fraud / Accounting etc.\"",
        "required": [
          "connector_type",
          "connector_name",
          "profile_id",
          "merchant_id"
        ],
        "properties": {
          "connector_type": {
            "$ref": "#/components/schemas/ConnectorType"
          },
          "connector_name": {
            "$ref": "#/components/schemas/Connector"
          },
          "connector_label": {
            "type": "string",
            "description": "This is an unique label you can generate and pass in order to identify this connector account on your Hyperswitch dashboard and reports, If not passed then if will take `connector_name`_`profile_name`. Eg: if your profile label is `default`, connector label can be `stripe_default`",
            "example": "stripe_US_travel",
            "nullable": true
          },
          "profile_id": {
            "type": "string",
            "description": "Identifier for the business profile, if not provided default will be chosen from merchant account"
          },
          "connector_account_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantConnectorDetails"
              }
            ],
            "nullable": true
          },
          "payment_methods_enabled": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodsEnabled"
            },
            "description": "An object containing the details about the payment methods that need to be enabled under this merchant connector account",
            "example": [
              {
                "accepted_countries": {
                  "list": [
                    "FR",
                    "DE",
                    "IN"
                  ],
                  "type": "disable_only"
                },
                "accepted_currencies": {
                  "list": [
                    "USD",
                    "EUR"
                  ],
                  "type": "enable_only"
                },
                "installment_payment_enabled": true,
                "maximum_amount": 68607706,
                "minimum_amount": 1,
                "payment_method": "wallet",
                "payment_method_issuers": [
                  "labore magna ipsum",
                  "aute"
                ],
                "payment_method_types": [
                  "upi_collect",
                  "upi_intent"
                ],
                "payment_schemes": [
                  "Discover",
                  "Discover"
                ],
                "recurring_enabled": true
              }
            ],
            "nullable": true
          },
          "connector_webhook_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantConnectorWebhookDetails"
              }
            ],
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "Metadata is useful for storing additional, unstructured information on an object.",
            "nullable": true
          },
          "disabled": {
            "type": "boolean",
            "description": "A boolean value to indicate if the connector is disabled. By default, its value is false.",
            "default": false,
            "example": false,
            "nullable": true
          },
          "frm_configs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FrmConfigs"
            },
            "description": "Contains the frm configs for the merchant connector",
            "example": "\n[{\"gateway\":\"stripe\",\"payment_methods\":[{\"payment_method\":\"card\",\"payment_method_types\":[{\"payment_method_type\":\"credit\",\"card_networks\":[\"Visa\"],\"flow\":\"pre\",\"action\":\"cancel_txn\"},{\"payment_method_type\":\"debit\",\"card_networks\":[\"Visa\"],\"flow\":\"pre\"}]}]}]\n",
            "nullable": true
          },
          "merchant_connector_id": {
            "type": "string",
            "description": "Unique ID of the connector",
            "example": "mca_5apGeP94tMts6rg3U3kR",
            "nullable": true
          },
          "pm_auth_config": {
            "type": "object",
            "description": "pm_auth_config will relate MCA records to their respective chosen auth services, based on payment_method and pmt",
            "nullable": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConnectorStatus"
              }
            ],
            "nullable": true
          },
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 64,
            "minLength": 1
          },
          "additional_merchant_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AdditionalMerchantData"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantConnectorDeleteResponse": {
        "type": "object",
        "required": [
          "merchant_id",
          "id",
          "deleted"
        ],
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "id": {
            "type": "string",
            "description": "Unique ID of the connector",
            "example": "mca_5apGeP94tMts6rg3U3kR"
          },
          "deleted": {
            "type": "boolean",
            "description": "If the connector is deleted or not",
            "example": false
          }
        }
      },
      "MerchantConnectorDetails": {
        "type": "object",
        "properties": {
          "connector_account_details": {
            "type": "object",
            "description": "Account details of the Connector. You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "Metadata is useful for storing additional, unstructured information on an object.",
            "nullable": true
          }
        }
      },
      "MerchantConnectorDetailsWrap": {
        "type": "object",
        "description": "Merchant connector details used to make payments.",
        "required": [
          "creds_identifier"
        ],
        "properties": {
          "creds_identifier": {
            "type": "string",
            "description": "Creds Identifier is to uniquely identify the credentials. Do not send any sensitive info, like encoded_data in this field. And do not send the string \"null\"."
          },
          "encoded_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantConnectorDetails"
              }
            ],
            "nullable": true
          }
        }
      },
      "MerchantConnectorId": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string"
          }
        }
      },
      "MerchantConnectorListResponse": {
        "type": "object",
        "required": [
          "connector_type",
          "connector_name",
          "id",
          "profile_id",
          "status"
        ],
        "properties": {
          "connector_type": {
            "$ref": "#/components/schemas/ConnectorType"
          },
          "connector_name": {
            "$ref": "#/components/schemas/Connector"
          },
          "connector_label": {
            "type": "string",
            "description": "A unique label to identify the connector account created under a business profile",
            "example": "stripe_US_travel",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Unique ID of the merchant connector account",
            "example": "mca_5apGeP94tMts6rg3U3kR"
          },
          "profile_id": {
            "type": "string",
            "description": "Identifier for the business profile, if not provided default will be chosen from merchant account",
            "maxLength": 64
          },
          "payment_methods_enabled": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodsEnabled"
            },
            "description": "An object containing the details about the payment methods that need to be enabled under this merchant connector account",
            "example": [
              {
                "accepted_countries": {
                  "list": [
                    "FR",
                    "DE",
                    "IN"
                  ],
                  "type": "disable_only"
                },
                "accepted_currencies": {
                  "list": [
                    "USD",
                    "EUR"
                  ],
                  "type": "enable_only"
                },
                "installment_payment_enabled": true,
                "maximum_amount": 68607706,
                "minimum_amount": 1,
                "payment_method": "wallet",
                "payment_method_issuers": [
                  "labore magna ipsum",
                  "aute"
                ],
                "payment_method_types": [
                  "upi_collect",
                  "upi_intent"
                ],
                "payment_schemes": [
                  "Discover",
                  "Discover"
                ],
                "recurring_enabled": true
              }
            ],
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "Metadata is useful for storing additional, unstructured information on an object.",
            "nullable": true
          },
          "disabled": {
            "type": "boolean",
            "description": "A boolean value to indicate if the connector is disabled. By default, its value is false.",
            "default": false,
            "example": false,
            "nullable": true
          },
          "frm_configs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FrmConfigs"
            },
            "description": "Contains the frm configs for the merchant connector",
            "example": "\n[{\"gateway\":\"stripe\",\"payment_methods\":[{\"payment_method\":\"card\",\"payment_method_types\":[{\"payment_method_type\":\"credit\",\"card_networks\":[\"Visa\"],\"flow\":\"pre\",\"action\":\"cancel_txn\"},{\"payment_method_type\":\"debit\",\"card_networks\":[\"Visa\"],\"flow\":\"pre\"}]}]}]\n",
            "nullable": true
          },
          "applepay_verified_domains": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "identifier for the verified domains of a particular connector account",
            "nullable": true
          },
          "pm_auth_config": {
            "type": "object",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/ConnectorStatus"
          },
          "additional_merchant_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AdditionalMerchantData"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantConnectorResponse": {
        "type": "object",
        "description": "Response of creating a new Merchant Connector for the merchant account.\"",
        "required": [
          "connector_type",
          "connector_name",
          "id",
          "profile_id",
          "status"
        ],
        "properties": {
          "connector_type": {
            "$ref": "#/components/schemas/ConnectorType"
          },
          "connector_name": {
            "$ref": "#/components/schemas/Connector"
          },
          "connector_label": {
            "type": "string",
            "description": "A unique label to identify the connector account created under a business profile",
            "example": "stripe_US_travel",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Unique ID of the merchant connector account",
            "example": "mca_5apGeP94tMts6rg3U3kR"
          },
          "profile_id": {
            "type": "string",
            "description": "Identifier for the business profile, if not provided default will be chosen from merchant account",
            "maxLength": 64
          },
          "connector_account_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantConnectorDetails"
              }
            ],
            "nullable": true
          },
          "payment_methods_enabled": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodsEnabled"
            },
            "description": "An object containing the details about the payment methods that need to be enabled under this merchant connector account",
            "example": [
              {
                "accepted_countries": {
                  "list": [
                    "FR",
                    "DE",
                    "IN"
                  ],
                  "type": "disable_only"
                },
                "accepted_currencies": {
                  "list": [
                    "USD",
                    "EUR"
                  ],
                  "type": "enable_only"
                },
                "installment_payment_enabled": true,
                "maximum_amount": 68607706,
                "minimum_amount": 1,
                "payment_method": "wallet",
                "payment_method_issuers": [
                  "labore magna ipsum",
                  "aute"
                ],
                "payment_method_types": [
                  "upi_collect",
                  "upi_intent"
                ],
                "payment_schemes": [
                  "Discover",
                  "Discover"
                ],
                "recurring_enabled": true
              }
            ],
            "nullable": true
          },
          "connector_webhook_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantConnectorWebhookDetails"
              }
            ],
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "Metadata is useful for storing additional, unstructured information on an object.",
            "nullable": true
          },
          "disabled": {
            "type": "boolean",
            "description": "A boolean value to indicate if the connector is disabled. By default, its value is false.",
            "default": false,
            "example": false,
            "nullable": true
          },
          "frm_configs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FrmConfigs"
            },
            "description": "Contains the frm configs for the merchant connector",
            "example": "\n[{\"gateway\":\"stripe\",\"payment_methods\":[{\"payment_method\":\"card\",\"payment_method_types\":[{\"payment_method_type\":\"credit\",\"card_networks\":[\"Visa\"],\"flow\":\"pre\",\"action\":\"cancel_txn\"},{\"payment_method_type\":\"debit\",\"card_networks\":[\"Visa\"],\"flow\":\"pre\"}]}]}]\n",
            "nullable": true
          },
          "applepay_verified_domains": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "identifier for the verified domains of a particular connector account",
            "nullable": true
          },
          "pm_auth_config": {
            "type": "object",
            "description": "pm_auth_config will relate MCA records to their respective chosen auth services, based on payment_method and pmt",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/ConnectorStatus"
          },
          "additional_merchant_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AdditionalMerchantData"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantConnectorUpdate": {
        "type": "object",
        "description": "Create a new Merchant Connector for the merchant account. The connector could be a payment processor / facilitator / acquirer or specialized services like Fraud / Accounting etc.\"",
        "required": [
          "connector_type",
          "status",
          "merchant_id"
        ],
        "properties": {
          "connector_type": {
            "$ref": "#/components/schemas/ConnectorType"
          },
          "connector_label": {
            "type": "string",
            "description": "This is an unique label you can generate and pass in order to identify this connector account on your Hyperswitch dashboard and reports, If not passed then if will take `connector_name`_`profile_name`. Eg: if your profile label is `default`, connector label can be `stripe_default`",
            "example": "stripe_US_travel",
            "nullable": true
          },
          "connector_account_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantConnectorDetails"
              }
            ],
            "nullable": true
          },
          "payment_methods_enabled": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodsEnabled"
            },
            "description": "An object containing the details about the payment methods that need to be enabled under this merchant connector account",
            "example": [
              {
                "accepted_countries": {
                  "list": [
                    "FR",
                    "DE",
                    "IN"
                  ],
                  "type": "disable_only"
                },
                "accepted_currencies": {
                  "list": [
                    "USD",
                    "EUR"
                  ],
                  "type": "enable_only"
                },
                "installment_payment_enabled": true,
                "maximum_amount": 68607706,
                "minimum_amount": 1,
                "payment_method": "wallet",
                "payment_method_issuers": [
                  "labore magna ipsum",
                  "aute"
                ],
                "payment_method_types": [
                  "upi_collect",
                  "upi_intent"
                ],
                "payment_schemes": [
                  "Discover",
                  "Discover"
                ],
                "recurring_enabled": true
              }
            ],
            "nullable": true
          },
          "connector_webhook_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantConnectorWebhookDetails"
              }
            ],
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "disabled": {
            "type": "boolean",
            "description": "A boolean value to indicate if the connector is disabled. By default, its value is false.",
            "default": false,
            "example": false,
            "nullable": true
          },
          "frm_configs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FrmConfigs"
            },
            "description": "Contains the frm configs for the merchant connector",
            "example": "\n[{\"gateway\":\"stripe\",\"payment_methods\":[{\"payment_method\":\"card\",\"payment_method_types\":[{\"payment_method_type\":\"credit\",\"card_networks\":[\"Visa\"],\"flow\":\"pre\",\"action\":\"cancel_txn\"},{\"payment_method_type\":\"debit\",\"card_networks\":[\"Visa\"],\"flow\":\"pre\"}]}]}]\n",
            "nullable": true
          },
          "pm_auth_config": {
            "type": "object",
            "description": "pm_auth_config will relate MCA records to their respective chosen auth services, based on payment_method and pmt",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/ConnectorStatus"
          },
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 64,
            "minLength": 1
          }
        },
        "additionalProperties": false
      },
      "MerchantConnectorWebhookDetails": {
        "type": "object",
        "required": [
          "merchant_secret",
          "additional_secret"
        ],
        "properties": {
          "merchant_secret": {
            "type": "string",
            "example": "12345678900987654321"
          },
          "additional_secret": {
            "type": "string",
            "example": "12345678900987654321"
          }
        },
        "additionalProperties": false
      },
      "MerchantDetails": {
        "type": "object",
        "properties": {
          "primary_contact_person": {
            "type": "string",
            "description": "The merchant's primary contact name",
            "example": "John Doe",
            "nullable": true,
            "maxLength": 255
          },
          "primary_phone": {
            "type": "string",
            "description": "The merchant's primary phone number",
            "example": "999999999",
            "nullable": true,
            "maxLength": 255
          },
          "primary_email": {
            "type": "string",
            "description": "The merchant's primary email address",
            "example": "johndoe@test.com",
            "nullable": true,
            "maxLength": 255
          },
          "secondary_contact_person": {
            "type": "string",
            "description": "The merchant's secondary contact name",
            "example": "John Doe2",
            "nullable": true,
            "maxLength": 255
          },
          "secondary_phone": {
            "type": "string",
            "description": "The merchant's secondary phone number",
            "example": "999999988",
            "nullable": true,
            "maxLength": 255
          },
          "secondary_email": {
            "type": "string",
            "description": "The merchant's secondary email address",
            "example": "johndoe2@test.com",
            "nullable": true,
            "maxLength": 255
          },
          "website": {
            "type": "string",
            "description": "The business website of the merchant",
            "example": "www.example.com",
            "nullable": true,
            "maxLength": 255
          },
          "about_business": {
            "type": "string",
            "description": "A brief description about merchant's business",
            "example": "Online Retail with a wide selection of organic products for North America",
            "nullable": true,
            "maxLength": 255
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressDetails"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantRecipientData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "connector_recipient_id"
            ],
            "properties": {
              "connector_recipient_id": {
                "type": "string",
                "nullable": true
              }
            }
          },
          {
            "type": "object",
            "required": [
              "wallet_id"
            ],
            "properties": {
              "wallet_id": {
                "type": "string",
                "nullable": true
              }
            }
          },
          {
            "type": "object",
            "required": [
              "account_data"
            ],
            "properties": {
              "account_data": {
                "$ref": "#/components/schemas/MerchantAccountData"
              }
            }
          }
        ]
      },
      "MerchantRoutingAlgorithm": {
        "type": "object",
        "description": "Routing Algorithm specific to merchants",
        "required": [
          "id",
          "profile_id",
          "name",
          "description",
          "algorithm",
          "created_at",
          "modified_at",
          "algorithm_for"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "profile_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "algorithm": {
            "$ref": "#/components/schemas/RoutingAlgorithm"
          },
          "created_at": {
            "type": "integer",
            "format": "int64"
          },
          "modified_at": {
            "type": "integer",
            "format": "int64"
          },
          "algorithm_for": {
            "$ref": "#/components/schemas/TransactionType"
          }
        }
      },
      "MetadataValue": {
        "type": "object",
        "required": [
          "key",
          "value"
        ],
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "MifinityData": {
        "type": "object",
        "required": [
          "date_of_birth"
        ],
        "properties": {
          "date_of_birth": {
            "type": "string",
            "format": "date"
          },
          "language_preference": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "MinorUnit": {
        "type": "integer",
        "format": "int64",
        "description": "This Unit struct represents MinorUnit in which core amount works"
      },
      "MobilePayRedirection": {
        "type": "object"
      },
      "MomoRedirection": {
        "type": "object"
      },
      "MultibancoBillingDetails": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "example@me.com",
            "nullable": true
          }
        }
      },
      "MultibancoTransferInstructions": {
        "type": "object",
        "required": [
          "reference",
          "entity"
        ],
        "properties": {
          "reference": {
            "type": "string",
            "example": "122385736258"
          },
          "entity": {
            "type": "string",
            "example": "12345"
          }
        }
      },
      "NextActionCall": {
        "type": "string",
        "enum": [
          "confirm",
          "sync",
          "complete_authorize"
        ]
      },
      "NextActionData": {
        "oneOf": [
          {
            "type": "object",
            "description": "Contains the url for redirection flow",
            "required": [
              "redirect_to_url",
              "type"
            ],
            "properties": {
              "redirect_to_url": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "redirect_to_url"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "Informs the next steps for bank transfer and also contains the charges details (ex: amount received, amount charged etc)",
            "required": [
              "bank_transfer_steps_and_charges_details",
              "type"
            ],
            "properties": {
              "bank_transfer_steps_and_charges_details": {
                "$ref": "#/components/schemas/BankTransferNextStepsData"
              },
              "type": {
                "type": "string",
                "enum": [
                  "display_bank_transfer_information"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "Contains third party sdk session token response",
            "required": [
              "type"
            ],
            "properties": {
              "session_token": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SessionToken"
                  }
                ],
                "nullable": true
              },
              "type": {
                "type": "string",
                "enum": [
                  "third_party_sdk_session_token"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "Contains url for Qr code image, this qr code has to be shown in sdk",
            "required": [
              "image_data_url",
              "qr_code_url",
              "type"
            ],
            "properties": {
              "image_data_url": {
                "type": "string",
                "description": "Hyperswitch generated image data source url"
              },
              "display_to_timestamp": {
                "type": "integer",
                "format": "int64",
                "nullable": true
              },
              "qr_code_url": {
                "type": "string",
                "description": "The url for Qr code given by the connector"
              },
              "type": {
                "type": "string",
                "enum": [
                  "qr_code_information"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "Contains url to fetch Qr code data",
            "required": [
              "qr_code_fetch_url",
              "type"
            ],
            "properties": {
              "qr_code_fetch_url": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "fetch_qr_code_information"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "Contains the download url and the reference number for transaction",
            "required": [
              "voucher_details",
              "type"
            ],
            "properties": {
              "voucher_details": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "display_voucher_information"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "Contains duration for displaying a wait screen, wait screen with timer is displayed by sdk",
            "required": [
              "display_from_timestamp",
              "type"
            ],
            "properties": {
              "display_from_timestamp": {
                "type": "integer"
              },
              "display_to_timestamp": {
                "type": "integer",
                "nullable": true
              },
              "type": {
                "type": "string",
                "enum": [
                  "wait_screen_information"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "Contains the information regarding three_ds_method_data submission, three_ds authentication, and authorization flows",
            "required": [
              "three_ds_data",
              "type"
            ],
            "properties": {
              "three_ds_data": {
                "$ref": "#/components/schemas/ThreeDsData"
              },
              "type": {
                "type": "string",
                "enum": [
                  "three_ds_invoke"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "next_action_data",
              "type"
            ],
            "properties": {
              "next_action_data": {
                "$ref": "#/components/schemas/SdkNextActionData"
              },
              "type": {
                "type": "string",
                "enum": [
                  "invoke_sdk_client"
                ]
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "type"
        }
      },
      "NextActionType": {
        "type": "string",
        "enum": [
          "redirect_to_url",
          "display_qr_code",
          "invoke_sdk_client",
          "trigger_api",
          "display_bank_transfer_information",
          "display_wait_screen"
        ]
      },
      "NoThirdPartySdkSessionResponse": {
        "type": "object",
        "required": [
          "epoch_timestamp",
          "expires_at",
          "merchant_session_identifier",
          "nonce",
          "merchant_identifier",
          "domain_name",
          "display_name",
          "signature",
          "operational_analytics_identifier",
          "retries",
          "psp_id"
        ],
        "properties": {
          "epoch_timestamp": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp at which session is requested",
            "minimum": 0
          },
          "expires_at": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp at which session expires",
            "minimum": 0
          },
          "merchant_session_identifier": {
            "type": "string",
            "description": "The identifier for the merchant session"
          },
          "nonce": {
            "type": "string",
            "description": "Apple pay generated unique ID (UUID) value"
          },
          "merchant_identifier": {
            "type": "string",
            "description": "The identifier for the merchant"
          },
          "domain_name": {
            "type": "string",
            "description": "The domain name of the merchant which is registered in Apple Pay"
          },
          "display_name": {
            "type": "string",
            "description": "The name to be displayed on Apple Pay button"
          },
          "signature": {
            "type": "string",
            "description": "A string which represents the properties of a payment"
          },
          "operational_analytics_identifier": {
            "type": "string",
            "description": "The identifier for the operational analytics"
          },
          "retries": {
            "type": "integer",
            "format": "int32",
            "description": "The number of retries to get the session response",
            "minimum": 0
          },
          "psp_id": {
            "type": "string",
            "description": "The identifier for the connector transaction"
          }
        }
      },
      "NoonData": {
        "type": "object",
        "properties": {
          "order_category": {
            "type": "string",
            "description": "Information about the order category that merchant wants to specify at connector level. (e.g. In Noon Payments it can take values like \"pay\", \"food\", or any other custom string set by the merchant in Noon's Dashboard)",
            "nullable": true
          }
        }
      },
      "NumberComparison": {
        "type": "object",
        "description": "Represents a number comparison for \"NumberComparisonArrayValue\"",
        "required": [
          "comparisonType",
          "number"
        ],
        "properties": {
          "comparisonType": {
            "$ref": "#/components/schemas/ComparisonType"
          },
          "number": {
            "$ref": "#/components/schemas/MinorUnit"
          }
        }
      },
      "OnlineMandate": {
        "type": "object",
        "required": [
          "ip_address",
          "user_agent"
        ],
        "properties": {
          "ip_address": {
            "type": "string",
            "description": "Ip address of the customer machine from which the mandate was created",
            "example": "123.32.25.123"
          },
          "user_agent": {
            "type": "string",
            "description": "The user-agent of the customer's browser"
          }
        },
        "additionalProperties": false
      },
      "OpenBankingData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "open_banking_pis"
            ],
            "properties": {
              "open_banking_pis": {
                "type": "object"
              }
            }
          }
        ]
      },
      "OpenBankingSessionToken": {
        "type": "object",
        "required": [
          "open_banking_session_token"
        ],
        "properties": {
          "open_banking_session_token": {
            "type": "string",
            "description": "The session token for OpenBanking Connectors"
          }
        }
      },
      "OrderDetails": {
        "type": "object",
        "required": [
          "product_name",
          "quantity"
        ],
        "properties": {
          "product_name": {
            "type": "string",
            "description": "Name of the product that is being purchased",
            "example": "shirt",
            "maxLength": 255
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "description": "The quantity of the product to be purchased",
            "example": 1,
            "minimum": 0
          },
          "requires_shipping": {
            "type": "boolean",
            "nullable": true
          },
          "product_img_link": {
            "type": "string",
            "description": "The image URL of the product",
            "nullable": true
          },
          "product_id": {
            "type": "string",
            "description": "ID of the product that is being purchased",
            "nullable": true
          },
          "category": {
            "type": "string",
            "description": "Category of the product that is being purchased",
            "nullable": true
          },
          "sub_category": {
            "type": "string",
            "description": "Sub category of the product that is being purchased",
            "nullable": true
          },
          "brand": {
            "type": "string",
            "description": "Brand of the product that is being purchased",
            "nullable": true
          },
          "product_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductType"
              }
            ],
            "nullable": true
          }
        }
      },
      "OrderDetailsWithAmount": {
        "type": "object",
        "required": [
          "product_name",
          "quantity",
          "amount"
        ],
        "properties": {
          "product_name": {
            "type": "string",
            "description": "Name of the product that is being purchased",
            "example": "shirt",
            "maxLength": 255
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "description": "The quantity of the product to be purchased",
            "example": 1,
            "minimum": 0
          },
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "the amount per quantity of product"
          },
          "requires_shipping": {
            "type": "boolean",
            "nullable": true
          },
          "product_img_link": {
            "type": "string",
            "description": "The image URL of the product",
            "nullable": true
          },
          "product_id": {
            "type": "string",
            "description": "ID of the product that is being purchased",
            "nullable": true
          },
          "category": {
            "type": "string",
            "description": "Category of the product that is being purchased",
            "nullable": true
          },
          "sub_category": {
            "type": "string",
            "description": "Sub category of the product that is being purchased",
            "nullable": true
          },
          "brand": {
            "type": "string",
            "description": "Brand of the product that is being purchased",
            "nullable": true
          },
          "product_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductType"
              }
            ],
            "nullable": true
          }
        }
      },
      "OrderFulfillmentTimeOrigin": {
        "type": "string",
        "enum": [
          "create",
          "confirm"
        ]
      },
      "OrganizationRequest": {
        "type": "object",
        "properties": {
          "organization_name": {
            "type": "string",
            "nullable": true
          },
          "organization_details": {
            "type": "object",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "nullable": true
          }
        }
      },
      "OrganizationResponse": {
        "type": "object",
        "required": [
          "organization_id",
          "modified_at",
          "created_at"
        ],
        "properties": {
          "organization_id": {
            "type": "string",
            "example": "org_q98uSGAYbjEwqs0mJwnz",
            "maxLength": 64,
            "minLength": 1
          },
          "organization_name": {
            "type": "string",
            "nullable": true
          },
          "organization_details": {
            "type": "object",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "nullable": true
          },
          "modified_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "OutgoingWebhook": {
        "type": "object",
        "required": [
          "merchant_id",
          "event_id",
          "event_type",
          "content"
        ],
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The merchant id of the merchant"
          },
          "event_id": {
            "type": "string",
            "description": "The unique event id for each webhook"
          },
          "event_type": {
            "$ref": "#/components/schemas/EventType"
          },
          "content": {
            "$ref": "#/components/schemas/OutgoingWebhookContent"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The time at which webhook was sent"
          }
        }
      },
      "OutgoingWebhookContent": {
        "oneOf": [
          {
            "type": "object",
            "title": "PaymentsResponse",
            "required": [
              "type",
              "object"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "payment_details"
                ]
              },
              "object": {
                "$ref": "#/components/schemas/PaymentsResponse"
              }
            }
          },
          {
            "type": "object",
            "title": "RefundResponse",
            "required": [
              "type",
              "object"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "refund_details"
                ]
              },
              "object": {
                "$ref": "#/components/schemas/RefundResponse"
              }
            }
          },
          {
            "type": "object",
            "title": "DisputeResponse",
            "required": [
              "type",
              "object"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "dispute_details"
                ]
              },
              "object": {
                "$ref": "#/components/schemas/DisputeResponse"
              }
            }
          },
          {
            "type": "object",
            "title": "MandateResponse",
            "required": [
              "type",
              "object"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "mandate_details"
                ]
              },
              "object": {
                "$ref": "#/components/schemas/MandateResponse"
              }
            }
          },
          {
            "type": "object",
            "title": "PayoutCreateResponse",
            "required": [
              "type",
              "object"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "payout_details"
                ]
              },
              "object": {
                "$ref": "#/components/schemas/PayoutCreateResponse"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "type"
        }
      },
      "OutgoingWebhookRequestContent": {
        "type": "object",
        "description": "The request information (headers and body) sent in the webhook.",
        "required": [
          "body",
          "headers"
        ],
        "properties": {
          "body": {
            "type": "string",
            "description": "The request body sent in the webhook."
          },
          "headers": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            "description": "The request headers sent in the webhook.",
            "example": [
              [
                "content-type",
                "application/json"
              ],
              [
                "content-length",
                "1024"
              ]
            ]
          }
        }
      },
      "OutgoingWebhookResponseContent": {
        "type": "object",
        "description": "The response information (headers, body and status code) received for the webhook sent.",
        "properties": {
          "body": {
            "type": "string",
            "description": "The response body received for the webhook sent.",
            "nullable": true
          },
          "headers": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            "description": "The response headers received for the webhook sent.",
            "example": [
              [
                "content-type",
                "application/json"
              ],
              [
                "content-length",
                "1024"
              ]
            ],
            "nullable": true
          },
          "status_code": {
            "type": "integer",
            "format": "int32",
            "description": "The HTTP status code for the webhook sent.",
            "example": 200,
            "nullable": true,
            "minimum": 0
          },
          "error_message": {
            "type": "string",
            "description": "Error message in case any error occurred when trying to deliver the webhook.",
            "example": 200,
            "nullable": true
          }
        }
      },
      "PayLaterData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "klarna_redirect"
            ],
            "properties": {
              "klarna_redirect": {
                "type": "object",
                "description": "For KlarnaRedirect as PayLater Option",
                "properties": {
                  "billing_email": {
                    "type": "string",
                    "description": "The billing email",
                    "nullable": true
                  },
                  "billing_country": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CountryAlpha2"
                      }
                    ],
                    "nullable": true
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "klarna_sdk"
            ],
            "properties": {
              "klarna_sdk": {
                "type": "object",
                "description": "For Klarna Sdk as PayLater Option",
                "required": [
                  "token"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The token for the sdk workflow"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "affirm_redirect"
            ],
            "properties": {
              "affirm_redirect": {
                "type": "object",
                "description": "For Affirm redirect as PayLater Option"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "afterpay_clearpay_redirect"
            ],
            "properties": {
              "afterpay_clearpay_redirect": {
                "type": "object",
                "description": "For AfterpayClearpay redirect as PayLater Option",
                "properties": {
                  "billing_email": {
                    "type": "string",
                    "description": "The billing email",
                    "nullable": true
                  },
                  "billing_name": {
                    "type": "string",
                    "description": "The billing name",
                    "nullable": true
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "pay_bright_redirect"
            ],
            "properties": {
              "pay_bright_redirect": {
                "type": "object",
                "description": "For PayBright Redirect as PayLater Option"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "walley_redirect"
            ],
            "properties": {
              "walley_redirect": {
                "type": "object",
                "description": "For WalleyRedirect as PayLater Option"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "alma_redirect"
            ],
            "properties": {
              "alma_redirect": {
                "type": "object",
                "description": "For Alma Redirection as PayLater Option"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "atome_redirect"
            ],
            "properties": {
              "atome_redirect": {
                "type": "object"
              }
            }
          }
        ]
      },
      "PayPalWalletData": {
        "type": "object",
        "required": [
          "token"
        ],
        "properties": {
          "token": {
            "type": "string",
            "description": "Token generated for the Apple pay"
          }
        }
      },
      "PaylaterResponse": {
        "type": "object",
        "properties": {
          "klarna_sdk": {
            "allOf": [
              {
                "$ref": "#/components/schemas/KlarnaSdkPaymentMethodResponse"
              }
            ],
            "nullable": true
          }
        }
      },
      "PaymentAttemptResponse": {
        "type": "object",
        "required": [
          "attempt_id",
          "status",
          "amount",
          "created_at",
          "modified_at"
        ],
        "properties": {
          "attempt_id": {
            "type": "string",
            "description": "Unique identifier for the attempt"
          },
          "status": {
            "$ref": "#/components/schemas/AttemptStatus"
          },
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "The payment attempt amount. Amount for the payment in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc.,",
            "example": 6540
          },
          "currency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Currency"
              }
            ],
            "nullable": true
          },
          "connector": {
            "type": "string",
            "description": "The connector used for the payment",
            "nullable": true
          },
          "error_message": {
            "type": "string",
            "description": "If there was an error while calling the connector, the error message is received here",
            "nullable": true
          },
          "payment_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethod"
              }
            ],
            "nullable": true
          },
          "connector_transaction_id": {
            "type": "string",
            "description": "A unique identifier for a payment provided by the connector",
            "nullable": true
          },
          "capture_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CaptureMethod"
              }
            ],
            "nullable": true
          },
          "authentication_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthenticationType"
              }
            ],
            "default": "three_ds",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the payment attempt was created",
            "example": "2022-09-10T10:11:12Z"
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the payment attempt was last modified",
            "example": "2022-09-10T10:11:12Z"
          },
          "cancellation_reason": {
            "type": "string",
            "description": "If the payment was cancelled the reason will be provided here",
            "nullable": true
          },
          "mandate_id": {
            "type": "string",
            "description": "A unique identifier to link the payment to a mandate, can be use instead of payment_method_data",
            "nullable": true
          },
          "error_code": {
            "type": "string",
            "description": "If there was an error while calling the connectors the error code is received here",
            "nullable": true
          },
          "payment_token": {
            "type": "string",
            "description": "Provide a reference to a stored payment method",
            "nullable": true
          },
          "connector_metadata": {
            "description": "Additional data related to some connectors",
            "nullable": true
          },
          "payment_experience": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentExperience"
              }
            ],
            "nullable": true
          },
          "payment_method_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodType"
              }
            ],
            "nullable": true
          },
          "reference_id": {
            "type": "string",
            "description": "Reference to the payment at connector side",
            "example": "993672945374576J",
            "nullable": true
          },
          "unified_code": {
            "type": "string",
            "description": "(This field is not live yet)Error code unified across the connectors is received here if there was an error while calling connector",
            "nullable": true
          },
          "unified_message": {
            "type": "string",
            "description": "(This field is not live yet)Error message unified across the connectors is received here if there was an error while calling connector",
            "nullable": true
          },
          "client_source": {
            "type": "string",
            "description": "Value passed in X-CLIENT-SOURCE header during payments confirm request by the client",
            "nullable": true
          },
          "client_version": {
            "type": "string",
            "description": "Value passed in X-CLIENT-VERSION header during payments confirm request by the client",
            "nullable": true
          }
        }
      },
      "PaymentChargeRequest": {
        "type": "object",
        "description": "Fee information to be charged on the payment being collected",
        "required": [
          "charge_type",
          "fees",
          "transfer_account_id"
        ],
        "properties": {
          "charge_type": {
            "$ref": "#/components/schemas/PaymentChargeType"
          },
          "fees": {
            "type": "integer",
            "format": "int64",
            "description": "Platform fees to be collected on the payment",
            "example": 6540
          },
          "transfer_account_id": {
            "type": "string",
            "description": "Identifier for the reseller's account to send the funds to"
          }
        }
      },
      "PaymentChargeResponse": {
        "type": "object",
        "description": "Fee information to be charged on the payment being collected",
        "required": [
          "charge_type",
          "application_fees",
          "transfer_account_id"
        ],
        "properties": {
          "charge_id": {
            "type": "string",
            "description": "Identifier for charge created for the payment",
            "nullable": true
          },
          "charge_type": {
            "$ref": "#/components/schemas/PaymentChargeType"
          },
          "application_fees": {
            "type": "integer",
            "format": "int64",
            "description": "Platform fees collected on the payment",
            "example": 6540
          },
          "transfer_account_id": {
            "type": "string",
            "description": "Identifier for the reseller's account where the funds were transferred"
          }
        }
      },
      "PaymentChargeType": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "Stripe"
            ],
            "properties": {
              "Stripe": {
                "$ref": "#/components/schemas/StripeChargeType"
              }
            }
          }
        ]
      },
      "PaymentCreatePaymentLinkConfig": {
        "allOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentLinkConfigRequest"
              }
            ],
            "nullable": true
          },
          {
            "type": "object"
          }
        ],
        "description": "Configure a custom payment link for the particular payment"
      },
      "PaymentExperience": {
        "type": "string",
        "description": "To indicate the type of payment experience that the customer would go through",
        "enum": [
          "redirect_to_url",
          "invoke_sdk_client",
          "display_qr_code",
          "one_click",
          "link_wallet",
          "invoke_payment_app",
          "display_wait_screen"
        ]
      },
      "PaymentIdType": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "PaymentIntentId"
            ],
            "properties": {
              "PaymentIntentId": {
                "type": "string",
                "description": "The identifier for payment intent"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "ConnectorTransactionId"
            ],
            "properties": {
              "ConnectorTransactionId": {
                "type": "string",
                "description": "The identifier for connector transaction"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "PaymentAttemptId"
            ],
            "properties": {
              "PaymentAttemptId": {
                "type": "string",
                "description": "The identifier for payment attempt"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "PreprocessingId"
            ],
            "properties": {
              "PreprocessingId": {
                "type": "string",
                "description": "The identifier for preprocessing step"
              }
            }
          }
        ]
      },
      "PaymentLinkConfig": {
        "type": "object",
        "required": [
          "theme",
          "logo",
          "seller_name",
          "sdk_layout",
          "display_sdk_only",
          "enabled_saved_payment_method"
        ],
        "properties": {
          "theme": {
            "type": "string",
            "description": "custom theme for the payment link"
          },
          "logo": {
            "type": "string",
            "description": "merchant display logo"
          },
          "seller_name": {
            "type": "string",
            "description": "Custom merchant name for payment link"
          },
          "sdk_layout": {
            "type": "string",
            "description": "Custom layout for sdk"
          },
          "display_sdk_only": {
            "type": "boolean",
            "description": "Display only the sdk for payment link"
          },
          "enabled_saved_payment_method": {
            "type": "boolean",
            "description": "Enable saved payment method option for payment link"
          },
          "allowed_domains": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of allowed domains (glob patterns) where this link can be embedded / opened from",
            "uniqueItems": true,
            "nullable": true
          },
          "transaction_details": {
            "type": "string",
            "description": "Dynamic details related to merchant to be rendered in payment link",
            "nullable": true
          }
        }
      },
      "PaymentLinkConfigRequest": {
        "type": "object",
        "properties": {
          "theme": {
            "type": "string",
            "description": "custom theme for the payment link",
            "example": "#4E6ADD",
            "nullable": true,
            "maxLength": 255
          },
          "logo": {
            "type": "string",
            "description": "merchant display logo",
            "example": "https://i.pinimg.com/736x/4d/83/5c/4d835ca8aafbbb15f84d07d926fda473.jpg",
            "nullable": true,
            "maxLength": 255
          },
          "seller_name": {
            "type": "string",
            "description": "Custom merchant name for payment link",
            "example": "hyperswitch",
            "nullable": true,
            "maxLength": 255
          },
          "sdk_layout": {
            "type": "string",
            "description": "Custom layout for sdk",
            "example": "accordion",
            "nullable": true,
            "maxLength": 255
          },
          "display_sdk_only": {
            "type": "boolean",
            "description": "Display only the sdk for payment link",
            "default": false,
            "example": true,
            "nullable": true
          },
          "enabled_saved_payment_method": {
            "type": "boolean",
            "description": "Enable saved payment method option for payment link",
            "default": false,
            "example": true,
            "nullable": true
          },
          "transaction_details": {
            "type": "object",
            "description": "Dynamic details related to merchant to be rendered in payment link",
            "nullable": true
          }
        }
      },
      "PaymentLinkInitiateRequest": {
        "type": "object",
        "required": [
          "merchant_id",
          "payment_id"
        ],
        "properties": {
          "merchant_id": {
            "type": "string"
          },
          "payment_id": {
            "type": "string"
          }
        }
      },
      "PaymentLinkResponse": {
        "type": "object",
        "required": [
          "link",
          "payment_link_id"
        ],
        "properties": {
          "link": {
            "type": "string",
            "description": "URL for rendering the open payment link"
          },
          "secure_link": {
            "type": "string",
            "description": "URL for rendering the secure payment link",
            "nullable": true
          },
          "payment_link_id": {
            "type": "string",
            "description": "Identifier for the payment link"
          }
        }
      },
      "PaymentLinkStatus": {
        "type": "string",
        "description": "Status Of the Payment Link",
        "enum": [
          "active",
          "expired"
        ]
      },
      "PaymentListConstraints": {
        "type": "object",
        "properties": {
          "customer_id": {
            "type": "string",
            "description": "The identifier for customer",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "nullable": true,
            "maxLength": 64,
            "minLength": 1
          },
          "starting_after": {
            "type": "string",
            "description": "A cursor for use in pagination, fetch the next list after some object",
            "example": "pay_fafa124123",
            "nullable": true
          },
          "ending_before": {
            "type": "string",
            "description": "A cursor for use in pagination, fetch the previous list before some object",
            "example": "pay_fafa124123",
            "nullable": true
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "description": "limit on the number of objects to return",
            "default": 10,
            "maximum": 100,
            "minimum": 0
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "The time at which payment is created",
            "example": "2022-09-10T10:11:12Z",
            "nullable": true
          },
          "created.lt": {
            "type": "string",
            "format": "date-time",
            "description": "Time less than the payment created time",
            "example": "2022-09-10T10:11:12Z",
            "nullable": true
          },
          "created.gt": {
            "type": "string",
            "format": "date-time",
            "description": "Time greater than the payment created time",
            "example": "2022-09-10T10:11:12Z",
            "nullable": true
          },
          "created.lte": {
            "type": "string",
            "format": "date-time",
            "description": "Time less than or equals to the payment created time",
            "example": "2022-09-10T10:11:12Z",
            "nullable": true
          },
          "created.gte": {
            "type": "string",
            "format": "date-time",
            "description": "Time greater than or equals to the payment created time",
            "example": "2022-09-10T10:11:12Z",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentListResponse": {
        "type": "object",
        "required": [
          "size",
          "data"
        ],
        "properties": {
          "size": {
            "type": "integer",
            "description": "The number of payments included in the list",
            "minimum": 0
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentsResponse"
            }
          }
        }
      },
      "PaymentMethod": {
        "type": "string",
        "description": "Indicates the type of payment method. Eg: 'card', 'wallet', etc.",
        "enum": [
          "card",
          "card_redirect",
          "pay_later",
          "wallet",
          "bank_redirect",
          "bank_transfer",
          "crypto",
          "bank_debit",
          "reward",
          "real_time_payment",
          "upi",
          "voucher",
          "gift_card",
          "open_banking"
        ]
      },
      "PaymentMethodCollectLinkRequest": {
        "allOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/GenericLinkUiConfig"
              }
            ],
            "nullable": true
          },
          {
            "type": "object",
            "required": [
              "customer_id"
            ],
            "properties": {
              "pm_collect_link_id": {
                "type": "string",
                "description": "The unique identifier for the collect link.",
                "example": "pm_collect_link_2bdacf398vwzq5n422S1",
                "nullable": true
              },
              "customer_id": {
                "type": "string",
                "description": "The unique identifier of the customer.",
                "example": "cus_92dnwed8s32bV9D8Snbiasd8v"
              },
              "session_expiry": {
                "type": "integer",
                "format": "int32",
                "description": "Will be used to expire client secret after certain amount of time to be supplied in seconds\n(900) for 15 mins",
                "example": 900,
                "nullable": true,
                "minimum": 0
              },
              "return_url": {
                "type": "string",
                "description": "Redirect to this URL post completion",
                "example": "https://sandbox.hyperswitch.io/payment_method/collect/pm_collect_link_2bdacf398vwzq5n422S1/status",
                "nullable": true
              },
              "enabled_payment_methods": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EnabledPaymentMethod"
                },
                "description": "List of payment methods shown on collect UI",
                "example": "[{\"payment_method\": \"bank_transfer\", \"payment_method_types\": [\"ach\", \"bacs\"]}]",
                "nullable": true
              }
            }
          }
        ]
      },
      "PaymentMethodCollectLinkResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GenericLinkUiConfig"
          },
          {
            "type": "object",
            "required": [
              "pm_collect_link_id",
              "customer_id",
              "expiry",
              "link"
            ],
            "properties": {
              "pm_collect_link_id": {
                "type": "string",
                "description": "The unique identifier for the collect link.",
                "example": "pm_collect_link_2bdacf398vwzq5n422S1"
              },
              "customer_id": {
                "type": "string",
                "description": "The unique identifier of the customer.",
                "example": "cus_92dnwed8s32bV9D8Snbiasd8v"
              },
              "expiry": {
                "type": "string",
                "format": "date-time",
                "description": "Time when this link will be expired in ISO8601 format",
                "example": "2025-01-18T11:04:09.922Z"
              },
              "link": {
                "type": "string",
                "description": "URL to the form's link generated for collecting payment method details.",
                "example": "https://sandbox.hyperswitch.io/payment_method/collect/pm_collect_link_2bdacf398vwzq5n422S1"
              },
              "return_url": {
                "type": "string",
                "description": "Redirect to this URL post completion",
                "example": "https://sandbox.hyperswitch.io/payment_method/collect/pm_collect_link_2bdacf398vwzq5n422S1/status",
                "nullable": true
              },
              "enabled_payment_methods": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EnabledPaymentMethod"
                },
                "description": "List of payment methods shown on collect UI",
                "example": "[{\"payment_method\": \"bank_transfer\", \"payment_method_types\": [\"ach\", \"bacs\"]}]",
                "nullable": true
              }
            }
          }
        ]
      },
      "PaymentMethodCreate": {
        "type": "object",
        "required": [
          "payment_method"
        ],
        "properties": {
          "payment_method": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "payment_method_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodType"
              }
            ],
            "nullable": true
          },
          "payment_method_issuer": {
            "type": "string",
            "description": "The name of the bank/ provider issuing the payment method to the end user",
            "example": "Citibank",
            "nullable": true
          },
          "payment_method_issuer_code": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodIssuerCode"
              }
            ],
            "nullable": true
          },
          "card": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardDetail"
              }
            ],
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "customer_id": {
            "type": "string",
            "description": "The unique identifier of the customer.",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "nullable": true,
            "maxLength": 64,
            "minLength": 1
          },
          "card_network": {
            "type": "string",
            "description": "The card network",
            "example": "Visa",
            "nullable": true
          },
          "bank_transfer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Bank"
              }
            ],
            "nullable": true
          },
          "wallet": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Wallet"
              }
            ],
            "nullable": true
          },
          "client_secret": {
            "type": "string",
            "description": "For Client based calls, SDK will use the client_secret\nin order to call /payment_methods\nClient secret will be generated whenever a new\npayment method is created",
            "nullable": true
          },
          "payment_method_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodCreateData"
              }
            ],
            "nullable": true
          },
          "billing": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentMethodCreateData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "card"
            ],
            "properties": {
              "card": {
                "$ref": "#/components/schemas/CardDetail"
              }
            }
          }
        ]
      },
      "PaymentMethodData": {
        "oneOf": [
          {
            "type": "object",
            "title": "Card",
            "required": [
              "card"
            ],
            "properties": {
              "card": {
                "$ref": "#/components/schemas/Card"
              }
            }
          },
          {
            "type": "object",
            "title": "CardRedirect",
            "required": [
              "card_redirect"
            ],
            "properties": {
              "card_redirect": {
                "$ref": "#/components/schemas/CardRedirectData"
              }
            }
          },
          {
            "type": "object",
            "title": "Wallet",
            "required": [
              "wallet"
            ],
            "properties": {
              "wallet": {
                "$ref": "#/components/schemas/WalletData"
              }
            }
          },
          {
            "type": "object",
            "title": "PayLater",
            "required": [
              "pay_later"
            ],
            "properties": {
              "pay_later": {
                "$ref": "#/components/schemas/PayLaterData"
              }
            }
          },
          {
            "type": "object",
            "title": "BankRedirect",
            "required": [
              "bank_redirect"
            ],
            "properties": {
              "bank_redirect": {
                "$ref": "#/components/schemas/BankRedirectData"
              }
            }
          },
          {
            "type": "object",
            "title": "BankDebit",
            "required": [
              "bank_debit"
            ],
            "properties": {
              "bank_debit": {
                "$ref": "#/components/schemas/BankDebitData"
              }
            }
          },
          {
            "type": "object",
            "title": "BankTransfer",
            "required": [
              "bank_transfer"
            ],
            "properties": {
              "bank_transfer": {
                "$ref": "#/components/schemas/BankTransferData"
              }
            }
          },
          {
            "type": "object",
            "title": "RealTimePayment",
            "required": [
              "real_time_payment"
            ],
            "properties": {
              "real_time_payment": {
                "$ref": "#/components/schemas/RealTimePaymentData"
              }
            }
          },
          {
            "type": "object",
            "title": "Crypto",
            "required": [
              "crypto"
            ],
            "properties": {
              "crypto": {
                "$ref": "#/components/schemas/CryptoData"
              }
            }
          },
          {
            "type": "string",
            "title": "MandatePayment",
            "enum": [
              "mandate_payment"
            ]
          },
          {
            "type": "string",
            "title": "Reward",
            "enum": [
              "reward"
            ]
          },
          {
            "type": "object",
            "title": "Upi",
            "required": [
              "upi"
            ],
            "properties": {
              "upi": {
                "$ref": "#/components/schemas/UpiData"
              }
            }
          },
          {
            "type": "object",
            "title": "Voucher",
            "required": [
              "voucher"
            ],
            "properties": {
              "voucher": {
                "$ref": "#/components/schemas/VoucherData"
              }
            }
          },
          {
            "type": "object",
            "title": "GiftCard",
            "required": [
              "gift_card"
            ],
            "properties": {
              "gift_card": {
                "$ref": "#/components/schemas/GiftCardData"
              }
            }
          },
          {
            "type": "object",
            "title": "CardToken",
            "required": [
              "card_token"
            ],
            "properties": {
              "card_token": {
                "$ref": "#/components/schemas/CardToken"
              }
            }
          },
          {
            "type": "object",
            "title": "OpenBanking",
            "required": [
              "open_banking"
            ],
            "properties": {
              "open_banking": {
                "$ref": "#/components/schemas/OpenBankingData"
              }
            }
          }
        ]
      },
      "PaymentMethodDataRequest": {
        "allOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodData"
              }
            ],
            "nullable": true
          },
          {
            "type": "object",
            "properties": {
              "billing": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ],
                "nullable": true
              }
            }
          }
        ],
        "description": "The payment method information provided for making a payment"
      },
      "PaymentMethodDataResponse": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "card"
            ],
            "properties": {
              "card": {
                "$ref": "#/components/schemas/CardResponse"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "bank_transfer"
            ],
            "properties": {
              "bank_transfer": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "wallet"
            ],
            "properties": {
              "wallet": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "pay_later"
            ],
            "properties": {
              "pay_later": {
                "$ref": "#/components/schemas/PaylaterResponse"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "paypal"
            ],
            "properties": {
              "paypal": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "bank_redirect"
            ],
            "properties": {
              "bank_redirect": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "crypto"
            ],
            "properties": {
              "crypto": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "bank_debit"
            ],
            "properties": {
              "bank_debit": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "mandate_payment"
            ],
            "properties": {
              "mandate_payment": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "reward"
            ],
            "properties": {
              "reward": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "real_time_payment"
            ],
            "properties": {
              "real_time_payment": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "upi"
            ],
            "properties": {
              "upi": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "voucher"
            ],
            "properties": {
              "voucher": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "gift_card"
            ],
            "properties": {
              "gift_card": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "card_redirect"
            ],
            "properties": {
              "card_redirect": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "card_token"
            ],
            "properties": {
              "card_token": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "open_banking"
            ],
            "properties": {
              "open_banking": {
                "type": "object"
              }
            }
          }
        ]
      },
      "PaymentMethodDataResponseWithBilling": {
        "allOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodDataResponse"
              }
            ],
            "nullable": true
          },
          {
            "type": "object",
            "properties": {
              "billing": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ],
                "nullable": true
              }
            }
          }
        ]
      },
      "PaymentMethodDeleteResponse": {
        "type": "object",
        "required": [
          "payment_method_id",
          "deleted"
        ],
        "properties": {
          "payment_method_id": {
            "type": "string",
            "description": "The unique identifier of the Payment method",
            "example": "card_rGK4Vi5iSW70MY7J2mIg"
          },
          "deleted": {
            "type": "boolean",
            "description": "Whether payment method was deleted or not",
            "example": true
          }
        }
      },
      "PaymentMethodIssuerCode": {
        "type": "string",
        "enum": [
          "jp_hdfc",
          "jp_icici",
          "jp_googlepay",
          "jp_applepay",
          "jp_phonepay",
          "jp_wechat",
          "jp_sofort",
          "jp_giropay",
          "jp_sepa",
          "jp_bacs"
        ]
      },
      "PaymentMethodList": {
        "type": "object",
        "required": [
          "payment_method"
        ],
        "properties": {
          "payment_method": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "payment_method_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodType"
            },
            "description": "This is a sub-category of payment method.",
            "example": [
              "credit"
            ],
            "nullable": true
          }
        }
      },
      "PaymentMethodListResponse": {
        "type": "object",
        "required": [
          "currency",
          "payment_methods",
          "mandate_payment",
          "show_surcharge_breakup_screen",
          "request_external_three_ds_authentication"
        ],
        "properties": {
          "redirect_url": {
            "type": "string",
            "description": "Redirect URL of the merchant",
            "example": "https://www.google.com",
            "nullable": true
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "payment_methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodList"
            },
            "description": "Information about the payment method",
            "example": [
              {
                "payment_experience": null,
                "payment_method": "wallet",
                "payment_method_issuers": [
                  "labore magna ipsum",
                  "aute"
                ]
              }
            ]
          },
          "mandate_payment": {
            "$ref": "#/components/schemas/MandateType"
          },
          "merchant_name": {
            "type": "string",
            "nullable": true
          },
          "show_surcharge_breakup_screen": {
            "type": "boolean",
            "description": "flag to indicate if surcharge and tax breakup screen should be shown or not"
          },
          "payment_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentType"
              }
            ],
            "nullable": true
          },
          "request_external_three_ds_authentication": {
            "type": "boolean",
            "description": "flag to indicate whether to perform external 3ds authentication",
            "example": true
          },
          "collect_shipping_details_from_wallets": {
            "type": "boolean",
            "description": "flag that indicates whether to collect shipping details from wallets or from the customer",
            "nullable": true
          },
          "collect_billing_details_from_wallets": {
            "type": "boolean",
            "description": "flag that indicates whether to collect billing details from wallets or from the customer",
            "nullable": true
          }
        }
      },
      "PaymentMethodResponse": {
        "type": "object",
        "required": [
          "merchant_id",
          "payment_method_id",
          "payment_method",
          "recurring_enabled",
          "installment_payment_enabled"
        ],
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "Unique identifier for a merchant",
            "example": "merchant_1671528864"
          },
          "customer_id": {
            "type": "string",
            "description": "The unique identifier of the customer.",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "nullable": true,
            "maxLength": 64,
            "minLength": 1
          },
          "payment_method_id": {
            "type": "string",
            "description": "The unique identifier of the Payment method",
            "example": "card_rGK4Vi5iSW70MY7J2mIg"
          },
          "payment_method": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "payment_method_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodType"
              }
            ],
            "nullable": true
          },
          "card": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardDetailFromLocker"
              }
            ],
            "nullable": true
          },
          "recurring_enabled": {
            "type": "boolean",
            "description": "Indicates whether the payment method is eligible for recurring payments",
            "example": true
          },
          "installment_payment_enabled": {
            "type": "boolean",
            "description": "Indicates whether the payment method is eligible for installment payments",
            "example": true
          },
          "payment_experience": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentExperience"
            },
            "description": "Type of payment experience enabled with the connector",
            "example": [
              "redirect_to_url"
            ],
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "A timestamp (ISO 8601 code) that determines when the customer was created",
            "example": "2023-01-18T11:04:09.922Z",
            "nullable": true
          },
          "bank_transfer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Bank"
              }
            ],
            "nullable": true
          },
          "last_used_at": {
            "type": "string",
            "format": "date-time",
            "example": "2024-02-24T11:04:09.922Z",
            "nullable": true
          },
          "client_secret": {
            "type": "string",
            "description": "For Client based calls",
            "nullable": true
          }
        }
      },
      "PaymentMethodStatus": {
        "type": "string",
        "description": "Payment Method Status",
        "enum": [
          "active",
          "inactive",
          "processing",
          "awaiting_data"
        ]
      },
      "PaymentMethodType": {
        "type": "string",
        "description": "Indicates the sub type of payment method. Eg: 'google_pay' & 'apple_pay' for wallets.",
        "enum": [
          "ach",
          "affirm",
          "afterpay_clearpay",
          "alfamart",
          "ali_pay",
          "ali_pay_hk",
          "alma",
          "apple_pay",
          "atome",
          "bacs",
          "bancontact_card",
          "becs",
          "benefit",
          "bizum",
          "blik",
          "boleto",
          "bca_bank_transfer",
          "bni_va",
          "bri_va",
          "card_redirect",
          "cimb_va",
          "classic",
          "credit",
          "crypto_currency",
          "cashapp",
          "dana",
          "danamon_va",
          "debit",
          "duit_now",
          "efecty",
          "eps",
          "fps",
          "evoucher",
          "giropay",
          "givex",
          "google_pay",
          "go_pay",
          "gcash",
          "ideal",
          "interac",
          "indomaret",
          "klarna",
          "kakao_pay",
          "local_bank_redirect",
          "mandiri_va",
          "knet",
          "mb_way",
          "mobile_pay",
          "momo",
          "momo_atm",
          "multibanco",
          "online_banking_thailand",
          "online_banking_czech_republic",
          "online_banking_finland",
          "online_banking_fpx",
          "online_banking_poland",
          "online_banking_slovakia",
          "oxxo",
          "pago_efectivo",
          "permata_bank_transfer",
          "open_banking_uk",
          "pay_bright",
          "paypal",
          "pix",
          "pay_safe_card",
          "przelewy24",
          "prompt_pay",
          "pse",
          "red_compra",
          "red_pagos",
          "samsung_pay",
          "sepa",
          "sofort",
          "swish",
          "touch_n_go",
          "trustly",
          "twint",
          "upi_collect",
          "upi_intent",
          "vipps",
          "viet_qr",
          "venmo",
          "walley",
          "we_chat_pay",
          "seven_eleven",
          "lawson",
          "mini_stop",
          "family_mart",
          "seicomart",
          "pay_easy",
          "local_bank_transfer",
          "mifinity",
          "open_banking_pis"
        ]
      },
      "PaymentMethodUpdate": {
        "type": "object",
        "properties": {
          "card": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardDetailUpdate"
              }
            ],
            "nullable": true
          },
          "client_secret": {
            "type": "string",
            "description": "This is a 15 minute expiry token which shall be used from the client to authenticate and perform sessions from the SDK",
            "example": "secret_k2uj3he2893eiu2d",
            "nullable": true,
            "maxLength": 30,
            "minLength": 30
          }
        },
        "additionalProperties": false
      },
      "PaymentMethodsEnabled": {
        "type": "object",
        "description": "Details of all the payment methods enabled for the connector for the given merchant account",
        "required": [
          "payment_method"
        ],
        "properties": {
          "payment_method": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "payment_method_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestPaymentMethodTypes"
            },
            "description": "Subtype of payment method",
            "example": [
              "credit"
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentProcessingDetails": {
        "type": "object",
        "required": [
          "payment_processing_certificate",
          "payment_processing_certificate_key"
        ],
        "properties": {
          "payment_processing_certificate": {
            "type": "string"
          },
          "payment_processing_certificate_key": {
            "type": "string"
          }
        }
      },
      "PaymentProcessingDetailsAt": {
        "oneOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentProcessingDetails"
              },
              {
                "type": "object",
                "required": [
                  "payment_processing_details_at"
                ],
                "properties": {
                  "payment_processing_details_at": {
                    "type": "string",
                    "enum": [
                      "Hyperswitch"
                    ]
                  }
                }
              }
            ]
          },
          {
            "type": "object",
            "required": [
              "payment_processing_details_at"
            ],
            "properties": {
              "payment_processing_details_at": {
                "type": "string",
                "enum": [
                  "Connector"
                ]
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "payment_processing_details_at"
        }
      },
      "PaymentRetrieveBody": {
        "type": "object",
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account.",
            "nullable": true
          },
          "force_sync": {
            "type": "boolean",
            "description": "Decider to enable or disable the connector call for retrieve request",
            "nullable": true
          },
          "client_secret": {
            "type": "string",
            "description": "This is a token which expires after 15 minutes, used from the client to authenticate and create sessions from the SDK",
            "nullable": true
          },
          "expand_captures": {
            "type": "boolean",
            "description": "If enabled provides list of captures linked to latest attempt",
            "nullable": true
          },
          "expand_attempts": {
            "type": "boolean",
            "description": "If enabled provides list of attempts linked to payment intent",
            "nullable": true
          }
        }
      },
      "PaymentType": {
        "type": "string",
        "description": "The type of the payment that differentiates between normal and various types of mandate payments. Use 'setup_mandate' in case of zero auth flow.",
        "enum": [
          "normal",
          "new_mandate",
          "setup_mandate",
          "recurring_mandate"
        ]
      },
      "PaymentsCancelRequest": {
        "type": "object",
        "properties": {
          "cancellation_reason": {
            "type": "string",
            "description": "The reason for the payment cancel",
            "nullable": true
          },
          "merchant_connector_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantConnectorDetailsWrap"
              }
            ],
            "nullable": true
          }
        }
      },
      "PaymentsCaptureRequest": {
        "type": "object",
        "required": [
          "amount_to_capture"
        ],
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The unique identifier for the merchant",
            "nullable": true
          },
          "amount_to_capture": {
            "type": "integer",
            "format": "int64",
            "description": "The Amount to be captured/ debited from the user's payment method.",
            "example": 6540
          },
          "refund_uncaptured_amount": {
            "type": "boolean",
            "description": "Decider to refund the uncaptured amount",
            "nullable": true
          },
          "statement_descriptor_suffix": {
            "type": "string",
            "description": "Provides information about a card payment that customers see on their statements.",
            "nullable": true
          },
          "statement_descriptor_prefix": {
            "type": "string",
            "description": "Concatenated with the statement descriptor suffix that’s set on the account to form the complete statement descriptor.",
            "nullable": true
          },
          "merchant_connector_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantConnectorDetailsWrap"
              }
            ],
            "nullable": true
          }
        }
      },
      "PaymentsCompleteAuthorizeRequest": {
        "type": "object",
        "required": [
          "client_secret"
        ],
        "properties": {
          "shipping": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "nullable": true
          },
          "client_secret": {
            "type": "string",
            "description": "Client Secret"
          }
        }
      },
      "PaymentsConfirmRequest": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "The payment amount. Amount for the payment in the lowest denomination of the currency, (i.e) in cents for USD denomination, in yen for JPY denomination etc. E.g., Pass 100 to charge $1.00 and ¥100 since ¥ is a zero-decimal currency",
            "example": 6540,
            "nullable": true,
            "minimum": 0
          },
          "currency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Currency"
              }
            ],
            "nullable": true
          },
          "amount_to_capture": {
            "type": "integer",
            "format": "int64",
            "description": "The Amount to be captured / debited from the users payment method. It shall be in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc., If not provided, the default amount_to_capture will be the payment amount. Also, it must be less than or equal to the original payment account.",
            "example": 6540,
            "nullable": true
          },
          "payment_id": {
            "type": "string",
            "description": "Unique identifier for the payment. This ensures idempotency for multiple payments\nthat have been done by a single merchant. The value for this field can be specified in the request, it will be auto generated otherwise and returned in the API response.",
            "example": "pay_mbabizu24mvu3mela5njyhpit4",
            "nullable": true,
            "maxLength": 30,
            "minLength": 30
          },
          "routing": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StraightThroughAlgorithm"
              }
            ],
            "nullable": true
          },
          "connector": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Connector"
            },
            "description": "This allows to manually select a connector with which the payment can go through.",
            "example": [
              "stripe",
              "adyen"
            ],
            "nullable": true
          },
          "capture_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CaptureMethod"
              }
            ],
            "nullable": true
          },
          "authentication_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthenticationType"
              }
            ],
            "default": "three_ds",
            "nullable": true
          },
          "billing": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "nullable": true
          },
          "confirm": {
            "type": "boolean",
            "description": "Whether to confirm the payment (if applicable). It can be used to completely process a payment by attaching a payment method, setting `confirm=true` and `capture_method = automatic` in the *Payments/Create API* request itself.",
            "default": false,
            "example": true,
            "nullable": true
          },
          "customer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomerDetails"
              }
            ],
            "nullable": true
          },
          "customer_id": {
            "type": "string",
            "description": "The identifier for the customer",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "nullable": true,
            "maxLength": 64,
            "minLength": 1
          },
          "off_session": {
            "type": "boolean",
            "description": "Set to true to indicate that the customer is not in your checkout flow during this payment, and therefore is unable to authenticate. This parameter is intended for scenarios where you collect card details and charge them later. When making a recurring payment by passing a mandate_id, this parameter is mandatory",
            "example": true,
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "A description for the payment",
            "example": "It's my first payment request",
            "nullable": true
          },
          "return_url": {
            "type": "string",
            "description": "The URL to which you want the user to be redirected after the completion of the payment operation",
            "example": "https://hyperswitch.io",
            "nullable": true
          },
          "setup_future_usage": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FutureUsage"
              }
            ],
            "nullable": true
          },
          "payment_method_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodDataRequest"
              }
            ],
            "nullable": true
          },
          "payment_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethod"
              }
            ],
            "nullable": true
          },
          "payment_token": {
            "type": "string",
            "description": "As Hyperswitch tokenises the sensitive details about the payments method, it provides the payment_token as a reference to a stored payment method, ensuring that the sensitive details are not exposed in any manner.",
            "example": "187282ab-40ef-47a9-9206-5099ba31e432",
            "nullable": true
          },
          "shipping": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "nullable": true
          },
          "statement_descriptor_name": {
            "type": "string",
            "description": "For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters.",
            "example": "Hyperswitch Router",
            "nullable": true,
            "maxLength": 255
          },
          "statement_descriptor_suffix": {
            "type": "string",
            "description": "Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.",
            "example": "Payment for shoes purchase",
            "nullable": true,
            "maxLength": 255
          },
          "order_details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderDetailsWithAmount"
            },
            "description": "Use this object to capture the details about the different products for which the payment is being made. The sum of amount across different products here should be equal to the overall payment amount",
            "example": "[{\n        \"product_name\": \"Apple iPhone 16\",\n        \"quantity\": 1,\n        \"amount\" : 69000\n        \"product_img_link\" : \"https://dummy-img-link.com\"\n    }]",
            "nullable": true
          },
          "client_secret": {
            "type": "string",
            "description": "It's a token used for client side verification.",
            "example": "pay_U42c409qyHwOkWo3vK60_secret_el9ksDkiB8hi6j9N78yo",
            "nullable": true
          },
          "mandate_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MandateData"
              }
            ],
            "nullable": true
          },
          "customer_acceptance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomerAcceptance"
              }
            ],
            "nullable": true
          },
          "mandate_id": {
            "type": "string",
            "description": "A unique identifier to link the payment to a mandate. To do Recurring payments after a mandate has been created, pass the mandate_id instead of payment_method_data",
            "example": "mandate_iwer89rnjef349dni3",
            "nullable": true,
            "maxLength": 255
          },
          "browser_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrowserInformation"
              }
            ],
            "nullable": true
          },
          "payment_experience": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentExperience"
              }
            ],
            "nullable": true
          },
          "payment_method_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodType"
              }
            ],
            "nullable": true
          },
          "merchant_connector_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantConnectorDetailsWrap"
              }
            ],
            "nullable": true
          },
          "allowed_payment_method_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodType"
            },
            "description": "Use this parameter to restrict the Payment Method Types to show for a given PaymentIntent",
            "nullable": true
          },
          "retry_action": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RetryAction"
              }
            ],
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "connector_metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConnectorMetadata"
              }
            ],
            "nullable": true
          },
          "payment_link": {
            "type": "boolean",
            "description": "Whether to generate the payment link for this payment or not (if applicable)",
            "default": false,
            "example": true,
            "nullable": true
          },
          "payment_link_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentCreatePaymentLinkConfig"
              }
            ],
            "nullable": true
          },
          "payment_link_config_id": {
            "type": "string",
            "description": "Custom payment link config id set at business profile, send only if business_specific_configs is configured",
            "nullable": true
          },
          "payment_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentType"
              }
            ],
            "nullable": true
          },
          "request_incremental_authorization": {
            "type": "boolean",
            "description": "Request an incremental authorization, i.e., increase the authorized amount on a confirmed payment before you capture it.",
            "nullable": true
          },
          "session_expiry": {
            "type": "integer",
            "format": "int32",
            "description": "Will be used to expire client secret after certain amount of time to be supplied in seconds\n(900) for 15 mins",
            "example": 900,
            "nullable": true,
            "minimum": 0
          },
          "frm_metadata": {
            "type": "object",
            "description": "Additional data related to some frm(Fraud Risk Management) connectors",
            "nullable": true
          },
          "request_external_three_ds_authentication": {
            "type": "boolean",
            "description": "Whether to perform external authentication (if applicable)",
            "example": true,
            "nullable": true
          },
          "recurring_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RecurringDetails"
              }
            ],
            "nullable": true
          },
          "charges": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentChargeRequest"
              }
            ],
            "nullable": true
          },
          "merchant_order_reference_id": {
            "type": "string",
            "description": "Merchant's identifier for the payment/invoice. This will be sent to the connector\nif the connector provides support to accept multiple reference ids.\nIn case the connector supports only one reference id, Hyperswitch's Payment ID will be sent as reference.",
            "example": "Custom_Order_id_123",
            "nullable": true,
            "maxLength": 255
          }
        }
      },
      "PaymentsCreateRequest": {
        "type": "object",
        "required": [
          "amount",
          "currency"
        ],
        "properties": {
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "The payment amount. Amount for the payment in the lowest denomination of the currency, (i.e) in cents for USD denomination, in yen for JPY denomination etc. E.g., Pass 100 to charge $1.00 and ¥100 since ¥ is a zero-decimal currency",
            "minimum": 0
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "amount_to_capture": {
            "type": "integer",
            "format": "int64",
            "description": "The Amount to be captured / debited from the users payment method. It shall be in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc., If not provided, the default amount_to_capture will be the payment amount. Also, it must be less than or equal to the original payment account.",
            "example": 6540,
            "nullable": true
          },
          "payment_id": {
            "type": "string",
            "description": "Unique identifier for the payment. This ensures idempotency for multiple payments\nthat have been done by a single merchant. The value for this field can be specified in the request, it will be auto generated otherwise and returned in the API response.",
            "example": "pay_mbabizu24mvu3mela5njyhpit4",
            "nullable": true,
            "maxLength": 30,
            "minLength": 30
          },
          "routing": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StraightThroughAlgorithm"
              }
            ],
            "nullable": true
          },
          "connector": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Connector"
            },
            "description": "This allows to manually select a connector with which the payment can go through.",
            "example": [
              "stripe",
              "adyen"
            ],
            "nullable": true
          },
          "capture_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CaptureMethod"
              }
            ],
            "nullable": true
          },
          "authentication_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthenticationType"
              }
            ],
            "default": "three_ds",
            "nullable": true
          },
          "billing": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "nullable": true
          },
          "confirm": {
            "type": "boolean",
            "description": "Whether to confirm the payment (if applicable). It can be used to completely process a payment by attaching a payment method, setting `confirm=true` and `capture_method = automatic` in the *Payments/Create API* request itself.",
            "default": false,
            "example": true,
            "nullable": true
          },
          "customer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomerDetails"
              }
            ],
            "nullable": true
          },
          "customer_id": {
            "type": "string",
            "description": "The identifier for the customer",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "nullable": true,
            "maxLength": 64,
            "minLength": 1
          },
          "off_session": {
            "type": "boolean",
            "description": "Set to true to indicate that the customer is not in your checkout flow during this payment, and therefore is unable to authenticate. This parameter is intended for scenarios where you collect card details and charge them later. When making a recurring payment by passing a mandate_id, this parameter is mandatory",
            "example": true,
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "A description for the payment",
            "example": "It's my first payment request",
            "nullable": true
          },
          "return_url": {
            "type": "string",
            "description": "The URL to which you want the user to be redirected after the completion of the payment operation",
            "example": "https://hyperswitch.io",
            "nullable": true
          },
          "setup_future_usage": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FutureUsage"
              }
            ],
            "nullable": true
          },
          "payment_method_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodDataRequest"
              }
            ],
            "nullable": true
          },
          "payment_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethod"
              }
            ],
            "nullable": true
          },
          "payment_token": {
            "type": "string",
            "description": "As Hyperswitch tokenises the sensitive details about the payments method, it provides the payment_token as a reference to a stored payment method, ensuring that the sensitive details are not exposed in any manner.",
            "example": "187282ab-40ef-47a9-9206-5099ba31e432",
            "nullable": true
          },
          "shipping": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "nullable": true
          },
          "statement_descriptor_name": {
            "type": "string",
            "description": "For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters.",
            "example": "Hyperswitch Router",
            "nullable": true,
            "maxLength": 255
          },
          "statement_descriptor_suffix": {
            "type": "string",
            "description": "Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.",
            "example": "Payment for shoes purchase",
            "nullable": true,
            "maxLength": 255
          },
          "order_details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderDetailsWithAmount"
            },
            "description": "Use this object to capture the details about the different products for which the payment is being made. The sum of amount across different products here should be equal to the overall payment amount",
            "example": "[{\n        \"product_name\": \"Apple iPhone 16\",\n        \"quantity\": 1,\n        \"amount\" : 69000\n        \"product_img_link\" : \"https://dummy-img-link.com\"\n    }]",
            "nullable": true
          },
          "mandate_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MandateData"
              }
            ],
            "nullable": true
          },
          "customer_acceptance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomerAcceptance"
              }
            ],
            "nullable": true
          },
          "mandate_id": {
            "type": "string",
            "description": "A unique identifier to link the payment to a mandate. To do Recurring payments after a mandate has been created, pass the mandate_id instead of payment_method_data",
            "example": "mandate_iwer89rnjef349dni3",
            "nullable": true,
            "maxLength": 255
          },
          "browser_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrowserInformation"
              }
            ],
            "nullable": true
          },
          "payment_experience": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentExperience"
              }
            ],
            "nullable": true
          },
          "payment_method_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodType"
              }
            ],
            "nullable": true
          },
          "business_country": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CountryAlpha2"
              }
            ],
            "nullable": true
          },
          "business_label": {
            "type": "string",
            "description": "Business label of the merchant for this payment.\nTo be deprecated soon. Pass the profile_id instead",
            "example": "food",
            "nullable": true
          },
          "merchant_connector_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantConnectorDetailsWrap"
              }
            ],
            "nullable": true
          },
          "allowed_payment_method_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodType"
            },
            "description": "Use this parameter to restrict the Payment Method Types to show for a given PaymentIntent",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "connector_metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConnectorMetadata"
              }
            ],
            "nullable": true
          },
          "payment_link": {
            "type": "boolean",
            "description": "Whether to generate the payment link for this payment or not (if applicable)",
            "default": false,
            "example": true,
            "nullable": true
          },
          "payment_link_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentCreatePaymentLinkConfig"
              }
            ],
            "nullable": true
          },
          "payment_link_config_id": {
            "type": "string",
            "description": "Custom payment link config id set at business profile, send only if business_specific_configs is configured",
            "nullable": true
          },
          "profile_id": {
            "type": "string",
            "description": "The business profile to be used for this payment, if not passed the default business profile associated with the merchant account will be used. It is mandatory in case multiple business profiles have been set up.",
            "nullable": true
          },
          "surcharge_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RequestSurchargeDetails"
              }
            ],
            "nullable": true
          },
          "payment_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentType"
              }
            ],
            "nullable": true
          },
          "request_incremental_authorization": {
            "type": "boolean",
            "description": "Request an incremental authorization, i.e., increase the authorized amount on a confirmed payment before you capture it.",
            "nullable": true
          },
          "session_expiry": {
            "type": "integer",
            "format": "int32",
            "description": "Will be used to expire client secret after certain amount of time to be supplied in seconds\n(900) for 15 mins",
            "example": 900,
            "nullable": true,
            "minimum": 0
          },
          "frm_metadata": {
            "type": "object",
            "description": "Additional data related to some frm(Fraud Risk Management) connectors",
            "nullable": true
          },
          "request_external_three_ds_authentication": {
            "type": "boolean",
            "description": "Whether to perform external authentication (if applicable)",
            "example": true,
            "nullable": true
          },
          "recurring_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RecurringDetails"
              }
            ],
            "nullable": true
          },
          "charges": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentChargeRequest"
              }
            ],
            "nullable": true
          },
          "merchant_order_reference_id": {
            "type": "string",
            "description": "Merchant's identifier for the payment/invoice. This will be sent to the connector\nif the connector provides support to accept multiple reference ids.\nIn case the connector supports only one reference id, Hyperswitch's Payment ID will be sent as reference.",
            "example": "Custom_Order_id_123",
            "nullable": true,
            "maxLength": 255
          }
        }
      },
      "PaymentsCreateResponseOpenApi": {
        "type": "object",
        "required": [
          "status",
          "amount",
          "net_amount",
          "amount_capturable",
          "amount_received",
          "currency",
          "payment_method",
          "attempt_count"
        ],
        "properties": {
          "payment_id": {
            "type": "string",
            "description": "Unique identifier for the payment. This ensures idempotency for multiple payments\nthat have been done by a single merchant.",
            "example": "pay_mbabizu24mvu3mela5njyhpit4",
            "nullable": true,
            "maxLength": 30,
            "minLength": 30
          },
          "merchant_id": {
            "type": "string",
            "description": "This is an identifier for the merchant account. This is inferred from the API key\nprovided during the request",
            "example": "merchant_1668273825",
            "nullable": true,
            "maxLength": 255
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IntentStatus"
              }
            ],
            "default": "requires_confirmation"
          },
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "The payment amount. Amount for the payment in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc.,",
            "example": 6540
          },
          "net_amount": {
            "type": "integer",
            "format": "int64",
            "description": "The payment net amount. net_amount = amount + surcharge_details.surcharge_amount + surcharge_details.tax_amount,\nIf no surcharge_details, net_amount = amount",
            "example": 6540
          },
          "amount_capturable": {
            "type": "integer",
            "format": "int64",
            "description": "The maximum amount that could be captured from the payment",
            "example": 6540,
            "minimum": 100
          },
          "amount_received": {
            "type": "integer",
            "format": "int64",
            "description": "The amount which is already captured from the payment, this helps in the cases where merchants can't capture all capturable amount at once.",
            "example": 6540
          },
          "connector": {
            "type": "string",
            "description": "The connector used for the payment",
            "example": "stripe",
            "nullable": true
          },
          "client_secret": {
            "type": "string",
            "description": "It's a token used for client side verification.",
            "example": "pay_U42c409qyHwOkWo3vK60_secret_el9ksDkiB8hi6j9N78yo",
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the payment was created",
            "example": "2022-09-10T10:11:12Z",
            "nullable": true
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "customer_id": {
            "type": "string",
            "description": "The identifier for the customer object. If not provided the customer ID will be autogenerated.\nThis field will be deprecated soon. Please refer to `customer.id`",
            "deprecated": true,
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "nullable": true,
            "maxLength": 64,
            "minLength": 1
          },
          "description": {
            "type": "string",
            "description": "A description of the payment",
            "example": "It's my first payment request",
            "nullable": true
          },
          "refunds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RefundResponse"
            },
            "description": "List of refunds that happened on this intent, as same payment intent can have multiple refund requests depending on the nature of order",
            "nullable": true
          },
          "disputes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DisputeResponsePaymentsRetrieve"
            },
            "description": "List of disputes that happened on this intent",
            "nullable": true
          },
          "attempts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentAttemptResponse"
            },
            "description": "List of attempts that happened on this intent",
            "nullable": true
          },
          "captures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CaptureResponse"
            },
            "description": "List of captures done on latest attempt",
            "nullable": true
          },
          "mandate_id": {
            "type": "string",
            "description": "A unique identifier to link the payment to a mandate, can be used instead of payment_method_data, in case of setting up recurring payments",
            "example": "mandate_iwer89rnjef349dni3",
            "nullable": true,
            "maxLength": 255
          },
          "mandate_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MandateData"
              }
            ],
            "nullable": true
          },
          "setup_future_usage": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FutureUsage"
              }
            ],
            "nullable": true
          },
          "off_session": {
            "type": "boolean",
            "description": "Set to true to indicate that the customer is not in your checkout flow during this payment, and therefore is unable to authenticate. This parameter is intended for scenarios where you collect card details and charge them later. This parameter can only be used with confirm=true.",
            "example": true,
            "nullable": true
          },
          "capture_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CaptureMethod"
              }
            ],
            "nullable": true
          },
          "payment_method": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "payment_method_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodDataResponseWithBilling"
              }
            ],
            "nullable": true
          },
          "payment_token": {
            "type": "string",
            "description": "Provide a reference to a stored payment method",
            "example": "187282ab-40ef-47a9-9206-5099ba31e432",
            "nullable": true
          },
          "shipping": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "nullable": true
          },
          "billing": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "nullable": true
          },
          "order_details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderDetailsWithAmount"
            },
            "description": "Information about the product , quantity and amount for connectors. (e.g. Klarna)",
            "example": "[{\n        \"product_name\": \"gillete creme\",\n        \"quantity\": 15,\n        \"amount\" : 900\n    }]",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "description: The customer's email address\nThis field will be deprecated soon. Please refer to `customer.email` object",
            "deprecated": true,
            "example": "johntest@test.com",
            "nullable": true,
            "maxLength": 255
          },
          "name": {
            "type": "string",
            "description": "description: The customer's name\nThis field will be deprecated soon. Please refer to `customer.name` object",
            "deprecated": true,
            "example": "John Test",
            "nullable": true,
            "maxLength": 255
          },
          "phone": {
            "type": "string",
            "description": "The customer's phone number\nThis field will be deprecated soon. Please refer to `customer.phone` object",
            "deprecated": true,
            "example": "9123456789",
            "nullable": true,
            "maxLength": 255
          },
          "return_url": {
            "type": "string",
            "description": "The URL to redirect after the completion of the operation",
            "example": "https://hyperswitch.io",
            "nullable": true
          },
          "authentication_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthenticationType"
              }
            ],
            "default": "three_ds",
            "nullable": true
          },
          "statement_descriptor_name": {
            "type": "string",
            "description": "For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters.",
            "example": "Hyperswitch Router",
            "nullable": true,
            "maxLength": 255
          },
          "statement_descriptor_suffix": {
            "type": "string",
            "description": "Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 255 characters for the concatenated descriptor.",
            "example": "Payment for shoes purchase",
            "nullable": true,
            "maxLength": 255
          },
          "next_action": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NextActionData"
              }
            ],
            "nullable": true
          },
          "cancellation_reason": {
            "type": "string",
            "description": "If the payment was cancelled the reason will be provided here",
            "nullable": true
          },
          "error_code": {
            "type": "string",
            "description": "If there was an error while calling the connectors the code is received here",
            "example": "E0001",
            "nullable": true
          },
          "error_message": {
            "type": "string",
            "description": "If there was an error while calling the connector the error message is received here",
            "example": "Failed while verifying the card",
            "nullable": true
          },
          "payment_experience": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentExperience"
              }
            ],
            "nullable": true
          },
          "payment_method_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodType"
              }
            ],
            "nullable": true
          },
          "connector_label": {
            "type": "string",
            "description": "The connector used for this payment along with the country and business details",
            "example": "stripe_US_food",
            "nullable": true
          },
          "business_country": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CountryAlpha2"
              }
            ],
            "nullable": true
          },
          "business_label": {
            "type": "string",
            "description": "The business label of merchant for this payment",
            "nullable": true
          },
          "business_sub_label": {
            "type": "string",
            "description": "The business_sub_label for this payment",
            "nullable": true
          },
          "allowed_payment_method_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodType"
            },
            "description": "Allowed Payment Method Types for a given PaymentIntent",
            "nullable": true
          },
          "ephemeral_key": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EphemeralKeyCreateResponse"
              }
            ],
            "nullable": true
          },
          "manual_retry_allowed": {
            "type": "boolean",
            "description": "If true the payment can be retried with same or different payment method which means the confirm call can be made again.",
            "nullable": true
          },
          "connector_transaction_id": {
            "type": "string",
            "description": "A unique identifier for a payment provided by the connector",
            "example": "993672945374576J",
            "nullable": true
          },
          "frm_message": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FrmMessage"
              }
            ],
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "connector_metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConnectorMetadata"
              }
            ],
            "nullable": true
          },
          "feature_metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FeatureMetadata"
              }
            ],
            "nullable": true
          },
          "reference_id": {
            "type": "string",
            "description": "reference(Identifier) to the payment at connector side",
            "example": "993672945374576J",
            "nullable": true
          },
          "payment_link": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentLinkResponse"
              }
            ],
            "nullable": true
          },
          "profile_id": {
            "type": "string",
            "description": "The business profile that is associated with this payment",
            "nullable": true
          },
          "surcharge_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RequestSurchargeDetails"
              }
            ],
            "nullable": true
          },
          "attempt_count": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of attempts associated with this payment"
          },
          "merchant_decision": {
            "type": "string",
            "description": "Denotes the action(approve or reject) taken by merchant in case of manual review. Manual review can occur when the transaction is marked as risky by the frm_processor, payment processor or when there is underpayment/over payment incase of crypto payment",
            "nullable": true
          },
          "merchant_connector_id": {
            "type": "string",
            "description": "Identifier of the connector ( merchant connector account ) which was chosen to make the payment",
            "nullable": true
          },
          "incremental_authorization_allowed": {
            "type": "boolean",
            "description": "If true, incremental authorization can be performed on this payment, in case the funds authorized initially fall short.",
            "nullable": true
          },
          "authorization_count": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of authorizations happened in an incremental_authorization payment",
            "nullable": true
          },
          "incremental_authorizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IncrementalAuthorizationResponse"
            },
            "description": "List of incremental authorizations happened to the payment",
            "nullable": true
          },
          "external_authentication_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalAuthenticationDetailsResponse"
              }
            ],
            "nullable": true
          },
          "external_3ds_authentication_attempted": {
            "type": "boolean",
            "description": "Flag indicating if external 3ds authentication is made or not",
            "nullable": true
          },
          "expires_on": {
            "type": "string",
            "format": "date-time",
            "description": "Date Time for expiry of the payment",
            "example": "2022-09-10T10:11:12Z",
            "nullable": true
          },
          "fingerprint": {
            "type": "string",
            "description": "Payment Fingerprint, to identify a particular card.\nIt is a 20 character long alphanumeric code.",
            "nullable": true
          },
          "browser_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrowserInformation"
              }
            ],
            "nullable": true
          },
          "payment_method_id": {
            "type": "string",
            "description": "Identifier for Payment Method used for the payment",
            "nullable": true
          },
          "payment_method_status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodStatus"
              }
            ],
            "nullable": true
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "description": "Date time at which payment was updated",
            "example": "2022-09-10T10:11:12Z",
            "nullable": true
          },
          "charges": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentChargeResponse"
              }
            ],
            "nullable": true
          },
          "frm_metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. FRM Metadata is useful for storing additional, structured information on an object related to FRM.",
            "nullable": true
          },
          "merchant_order_reference_id": {
            "type": "string",
            "description": "Merchant's identifier for the payment/invoice. This will be sent to the connector\nif the connector provides support to accept multiple reference ids.\nIn case the connector supports only one reference id, Hyperswitch's Payment ID will be sent as reference.",
            "example": "Custom_Order_id_123",
            "nullable": true,
            "maxLength": 255
          }
        }
      },
      "PaymentsExternalAuthenticationRequest": {
        "type": "object",
        "required": [
          "client_secret",
          "device_channel",
          "threeds_method_comp_ind"
        ],
        "properties": {
          "client_secret": {
            "type": "string",
            "description": "Client Secret"
          },
          "sdk_information": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SdkInformation"
              }
            ],
            "nullable": true
          },
          "device_channel": {
            "$ref": "#/components/schemas/DeviceChannel"
          },
          "threeds_method_comp_ind": {
            "$ref": "#/components/schemas/ThreeDsCompletionIndicator"
          }
        }
      },
      "PaymentsExternalAuthenticationResponse": {
        "type": "object",
        "required": [
          "trans_status",
          "three_ds_requestor_url"
        ],
        "properties": {
          "trans_status": {
            "$ref": "#/components/schemas/TransactionStatus"
          },
          "acs_url": {
            "type": "string",
            "description": "Access Server URL to be used for challenge submission",
            "nullable": true
          },
          "challenge_request": {
            "type": "string",
            "description": "Challenge request which should be sent to acs_url",
            "nullable": true
          },
          "acs_reference_number": {
            "type": "string",
            "description": "Unique identifier assigned by the EMVCo(Europay, Mastercard and Visa)",
            "nullable": true
          },
          "acs_trans_id": {
            "type": "string",
            "description": "Unique identifier assigned by the ACS to identify a single transaction",
            "nullable": true
          },
          "three_dsserver_trans_id": {
            "type": "string",
            "description": "Unique identifier assigned by the 3DS Server to identify a single transaction",
            "nullable": true
          },
          "acs_signed_content": {
            "type": "string",
            "description": "Contains the JWS object created by the ACS for the ARes(Authentication Response) message",
            "nullable": true
          },
          "three_ds_requestor_url": {
            "type": "string",
            "description": "Three DS Requestor URL"
          }
        }
      },
      "PaymentsIncrementalAuthorizationRequest": {
        "type": "object",
        "required": [
          "amount"
        ],
        "properties": {
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "The total amount including previously authorized amount and additional amount",
            "example": 6540
          },
          "reason": {
            "type": "string",
            "description": "Reason for incremental authorization",
            "nullable": true
          }
        }
      },
      "PaymentsRequest": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "The payment amount. Amount for the payment in the lowest denomination of the currency, (i.e) in cents for USD denomination, in yen for JPY denomination etc. E.g., Pass 100 to charge $1.00 and ¥100 since ¥ is a zero-decimal currency",
            "example": 6540,
            "nullable": true,
            "minimum": 0
          },
          "currency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Currency"
              }
            ],
            "nullable": true
          },
          "amount_to_capture": {
            "type": "integer",
            "format": "int64",
            "description": "The Amount to be captured / debited from the users payment method. It shall be in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc., If not provided, the default amount_to_capture will be the payment amount. Also, it must be less than or equal to the original payment account.",
            "example": 6540,
            "nullable": true
          },
          "payment_id": {
            "type": "string",
            "description": "Unique identifier for the payment. This ensures idempotency for multiple payments\nthat have been done by a single merchant. The value for this field can be specified in the request, it will be auto generated otherwise and returned in the API response.",
            "example": "pay_mbabizu24mvu3mela5njyhpit4",
            "nullable": true,
            "maxLength": 30,
            "minLength": 30
          },
          "merchant_id": {
            "type": "string",
            "description": "This is an identifier for the merchant account. This is inferred from the API key\nprovided during the request",
            "example": "merchant_1668273825",
            "nullable": true,
            "maxLength": 255
          },
          "routing": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StraightThroughAlgorithm"
              }
            ],
            "nullable": true
          },
          "connector": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Connector"
            },
            "description": "This allows to manually select a connector with which the payment can go through.",
            "example": [
              "stripe",
              "adyen"
            ],
            "nullable": true
          },
          "capture_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CaptureMethod"
              }
            ],
            "nullable": true
          },
          "authentication_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthenticationType"
              }
            ],
            "default": "three_ds",
            "nullable": true
          },
          "billing": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "nullable": true
          },
          "capture_on": {
            "type": "string",
            "format": "date-time",
            "description": "A timestamp (ISO 8601 code) that determines when the payment should be captured.\nProviding this field will automatically set `capture` to true",
            "example": "2022-09-10T10:11:12Z",
            "nullable": true
          },
          "confirm": {
            "type": "boolean",
            "description": "Whether to confirm the payment (if applicable). It can be used to completely process a payment by attaching a payment method, setting `confirm=true` and `capture_method = automatic` in the *Payments/Create API* request itself.",
            "default": false,
            "example": true,
            "nullable": true
          },
          "customer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomerDetails"
              }
            ],
            "nullable": true
          },
          "customer_id": {
            "type": "string",
            "description": "The identifier for the customer",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "nullable": true,
            "maxLength": 64,
            "minLength": 1
          },
          "email": {
            "type": "string",
            "description": "The customer's email address.\nThis field will be deprecated soon, use the customer object instead",
            "deprecated": true,
            "example": "johntest@test.com",
            "nullable": true,
            "maxLength": 255
          },
          "name": {
            "type": "string",
            "description": "The customer's name.\nThis field will be deprecated soon, use the customer object instead.",
            "deprecated": true,
            "example": "John Test",
            "nullable": true,
            "maxLength": 255
          },
          "phone": {
            "type": "string",
            "description": "The customer's phone number\nThis field will be deprecated soon, use the customer object instead",
            "deprecated": true,
            "example": "9123456789",
            "nullable": true,
            "maxLength": 255
          },
          "phone_country_code": {
            "type": "string",
            "description": "The country code for the customer phone number\nThis field will be deprecated soon, use the customer object instead",
            "deprecated": true,
            "example": "+1",
            "nullable": true,
            "maxLength": 255
          },
          "off_session": {
            "type": "boolean",
            "description": "Set to true to indicate that the customer is not in your checkout flow during this payment, and therefore is unable to authenticate. This parameter is intended for scenarios where you collect card details and charge them later. When making a recurring payment by passing a mandate_id, this parameter is mandatory",
            "example": true,
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "A description for the payment",
            "example": "It's my first payment request",
            "nullable": true
          },
          "return_url": {
            "type": "string",
            "description": "The URL to which you want the user to be redirected after the completion of the payment operation",
            "example": "https://hyperswitch.io",
            "nullable": true
          },
          "setup_future_usage": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FutureUsage"
              }
            ],
            "nullable": true
          },
          "payment_method_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodDataRequest"
              }
            ],
            "nullable": true
          },
          "payment_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethod"
              }
            ],
            "nullable": true
          },
          "payment_token": {
            "type": "string",
            "description": "As Hyperswitch tokenises the sensitive details about the payments method, it provides the payment_token as a reference to a stored payment method, ensuring that the sensitive details are not exposed in any manner.",
            "example": "187282ab-40ef-47a9-9206-5099ba31e432",
            "nullable": true
          },
          "card_cvc": {
            "type": "string",
            "description": "This is used along with the payment_token field while collecting during saved card payments. This field will be deprecated soon, use the payment_method_data.card_token object instead",
            "deprecated": true,
            "nullable": true
          },
          "shipping": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "nullable": true
          },
          "statement_descriptor_name": {
            "type": "string",
            "description": "For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters.",
            "example": "Hyperswitch Router",
            "nullable": true,
            "maxLength": 255
          },
          "statement_descriptor_suffix": {
            "type": "string",
            "description": "Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.",
            "example": "Payment for shoes purchase",
            "nullable": true,
            "maxLength": 255
          },
          "order_details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderDetailsWithAmount"
            },
            "description": "Use this object to capture the details about the different products for which the payment is being made. The sum of amount across different products here should be equal to the overall payment amount",
            "example": "[{\n        \"product_name\": \"Apple iPhone 16\",\n        \"quantity\": 1,\n        \"amount\" : 69000\n        \"product_img_link\" : \"https://dummy-img-link.com\"\n    }]",
            "nullable": true
          },
          "client_secret": {
            "type": "string",
            "description": "It's a token used for client side verification.",
            "example": "pay_U42c409qyHwOkWo3vK60_secret_el9ksDkiB8hi6j9N78yo",
            "nullable": true
          },
          "mandate_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MandateData"
              }
            ],
            "nullable": true
          },
          "customer_acceptance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomerAcceptance"
              }
            ],
            "nullable": true
          },
          "mandate_id": {
            "type": "string",
            "description": "A unique identifier to link the payment to a mandate. To do Recurring payments after a mandate has been created, pass the mandate_id instead of payment_method_data",
            "example": "mandate_iwer89rnjef349dni3",
            "nullable": true,
            "maxLength": 255
          },
          "browser_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrowserInformation"
              }
            ],
            "nullable": true
          },
          "payment_experience": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentExperience"
              }
            ],
            "nullable": true
          },
          "payment_method_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodType"
              }
            ],
            "nullable": true
          },
          "business_country": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CountryAlpha2"
              }
            ],
            "nullable": true
          },
          "business_label": {
            "type": "string",
            "description": "Business label of the merchant for this payment.\nTo be deprecated soon. Pass the profile_id instead",
            "example": "food",
            "nullable": true
          },
          "merchant_connector_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantConnectorDetailsWrap"
              }
            ],
            "nullable": true
          },
          "allowed_payment_method_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodType"
            },
            "description": "Use this parameter to restrict the Payment Method Types to show for a given PaymentIntent",
            "nullable": true
          },
          "business_sub_label": {
            "type": "string",
            "description": "Business sub label for the payment",
            "nullable": true
          },
          "retry_action": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RetryAction"
              }
            ],
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "connector_metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConnectorMetadata"
              }
            ],
            "nullable": true
          },
          "feature_metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FeatureMetadata"
              }
            ],
            "nullable": true
          },
          "payment_link": {
            "type": "boolean",
            "description": "Whether to generate the payment link for this payment or not (if applicable)",
            "default": false,
            "example": true,
            "nullable": true
          },
          "payment_link_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentCreatePaymentLinkConfig"
              }
            ],
            "nullable": true
          },
          "payment_link_config_id": {
            "type": "string",
            "description": "Custom payment link config id set at business profile, send only if business_specific_configs is configured",
            "nullable": true
          },
          "profile_id": {
            "type": "string",
            "description": "The business profile to be used for this payment, if not passed the default business profile associated with the merchant account will be used. It is mandatory in case multiple business profiles have been set up.",
            "nullable": true
          },
          "surcharge_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RequestSurchargeDetails"
              }
            ],
            "nullable": true
          },
          "payment_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentType"
              }
            ],
            "nullable": true
          },
          "request_incremental_authorization": {
            "type": "boolean",
            "description": "Request an incremental authorization, i.e., increase the authorized amount on a confirmed payment before you capture it.",
            "nullable": true
          },
          "session_expiry": {
            "type": "integer",
            "format": "int32",
            "description": "Will be used to expire client secret after certain amount of time to be supplied in seconds\n(900) for 15 mins",
            "example": 900,
            "nullable": true,
            "minimum": 0
          },
          "frm_metadata": {
            "type": "object",
            "description": "Additional data related to some frm(Fraud Risk Management) connectors",
            "nullable": true
          },
          "request_external_three_ds_authentication": {
            "type": "boolean",
            "description": "Whether to perform external authentication (if applicable)",
            "example": true,
            "nullable": true
          },
          "recurring_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RecurringDetails"
              }
            ],
            "nullable": true
          },
          "charges": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentChargeRequest"
              }
            ],
            "nullable": true
          },
          "merchant_order_reference_id": {
            "type": "string",
            "description": "Merchant's identifier for the payment/invoice. This will be sent to the connector\nif the connector provides support to accept multiple reference ids.\nIn case the connector supports only one reference id, Hyperswitch's Payment ID will be sent as reference.",
            "example": "Custom_Order_id_123",
            "nullable": true,
            "maxLength": 255
          }
        },
        "additionalProperties": false
      },
      "PaymentsResponse": {
        "type": "object",
        "required": [
          "status",
          "amount",
          "net_amount",
          "amount_capturable",
          "amount_received",
          "currency",
          "payment_method",
          "attempt_count"
        ],
        "properties": {
          "payment_id": {
            "type": "string",
            "description": "Unique identifier for the payment. This ensures idempotency for multiple payments\nthat have been done by a single merchant.",
            "example": "pay_mbabizu24mvu3mela5njyhpit4",
            "nullable": true,
            "maxLength": 30,
            "minLength": 30
          },
          "merchant_id": {
            "type": "string",
            "description": "This is an identifier for the merchant account. This is inferred from the API key\nprovided during the request",
            "example": "merchant_1668273825",
            "nullable": true,
            "maxLength": 255
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IntentStatus"
              }
            ],
            "default": "requires_confirmation"
          },
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "The payment amount. Amount for the payment in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc.,",
            "example": 6540
          },
          "net_amount": {
            "type": "integer",
            "format": "int64",
            "description": "The payment net amount. net_amount = amount + surcharge_details.surcharge_amount + surcharge_details.tax_amount,\nIf no surcharge_details, net_amount = amount",
            "example": 6540
          },
          "amount_capturable": {
            "type": "integer",
            "format": "int64",
            "description": "The maximum amount that could be captured from the payment",
            "example": 6540,
            "minimum": 100
          },
          "amount_received": {
            "type": "integer",
            "format": "int64",
            "description": "The amount which is already captured from the payment, this helps in the cases where merchants can't capture all capturable amount at once.",
            "example": 6540
          },
          "connector": {
            "type": "string",
            "description": "The connector used for the payment",
            "example": "stripe",
            "nullable": true
          },
          "client_secret": {
            "type": "string",
            "description": "It's a token used for client side verification.",
            "example": "pay_U42c409qyHwOkWo3vK60_secret_el9ksDkiB8hi6j9N78yo",
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the payment was created",
            "example": "2022-09-10T10:11:12Z",
            "nullable": true
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "customer_id": {
            "type": "string",
            "description": "The identifier for the customer object. If not provided the customer ID will be autogenerated.\nThis field will be deprecated soon. Please refer to `customer.id`",
            "deprecated": true,
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "nullable": true,
            "maxLength": 64,
            "minLength": 1
          },
          "customer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomerDetailsResponse"
              }
            ],
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "A description of the payment",
            "example": "It's my first payment request",
            "nullable": true
          },
          "refunds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RefundResponse"
            },
            "description": "List of refunds that happened on this intent, as same payment intent can have multiple refund requests depending on the nature of order",
            "nullable": true
          },
          "disputes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DisputeResponsePaymentsRetrieve"
            },
            "description": "List of disputes that happened on this intent",
            "nullable": true
          },
          "attempts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentAttemptResponse"
            },
            "description": "List of attempts that happened on this intent",
            "nullable": true
          },
          "captures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CaptureResponse"
            },
            "description": "List of captures done on latest attempt",
            "nullable": true
          },
          "mandate_id": {
            "type": "string",
            "description": "A unique identifier to link the payment to a mandate, can be used instead of payment_method_data, in case of setting up recurring payments",
            "example": "mandate_iwer89rnjef349dni3",
            "nullable": true,
            "maxLength": 255
          },
          "mandate_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MandateData"
              }
            ],
            "nullable": true
          },
          "setup_future_usage": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FutureUsage"
              }
            ],
            "nullable": true
          },
          "off_session": {
            "type": "boolean",
            "description": "Set to true to indicate that the customer is not in your checkout flow during this payment, and therefore is unable to authenticate. This parameter is intended for scenarios where you collect card details and charge them later. This parameter can only be used with confirm=true.",
            "example": true,
            "nullable": true
          },
          "capture_on": {
            "type": "string",
            "format": "date-time",
            "description": "A timestamp (ISO 8601 code) that determines when the payment should be captured.\nProviding this field will automatically set `capture` to true",
            "example": "2022-09-10T10:11:12Z",
            "nullable": true
          },
          "capture_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CaptureMethod"
              }
            ],
            "nullable": true
          },
          "payment_method": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "payment_method_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodDataResponseWithBilling"
              }
            ],
            "nullable": true
          },
          "payment_token": {
            "type": "string",
            "description": "Provide a reference to a stored payment method",
            "example": "187282ab-40ef-47a9-9206-5099ba31e432",
            "nullable": true
          },
          "shipping": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "nullable": true
          },
          "billing": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "nullable": true
          },
          "order_details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderDetailsWithAmount"
            },
            "description": "Information about the product , quantity and amount for connectors. (e.g. Klarna)",
            "example": "[{\n        \"product_name\": \"gillete creme\",\n        \"quantity\": 15,\n        \"amount\" : 900\n    }]",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "description: The customer's email address\nThis field will be deprecated soon. Please refer to `customer.email` object",
            "deprecated": true,
            "example": "johntest@test.com",
            "nullable": true,
            "maxLength": 255
          },
          "name": {
            "type": "string",
            "description": "description: The customer's name\nThis field will be deprecated soon. Please refer to `customer.name` object",
            "deprecated": true,
            "example": "John Test",
            "nullable": true,
            "maxLength": 255
          },
          "phone": {
            "type": "string",
            "description": "The customer's phone number\nThis field will be deprecated soon. Please refer to `customer.phone` object",
            "deprecated": true,
            "example": "9123456789",
            "nullable": true,
            "maxLength": 255
          },
          "return_url": {
            "type": "string",
            "description": "The URL to redirect after the completion of the operation",
            "example": "https://hyperswitch.io",
            "nullable": true
          },
          "authentication_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthenticationType"
              }
            ],
            "default": "three_ds",
            "nullable": true
          },
          "statement_descriptor_name": {
            "type": "string",
            "description": "For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters.",
            "example": "Hyperswitch Router",
            "nullable": true,
            "maxLength": 255
          },
          "statement_descriptor_suffix": {
            "type": "string",
            "description": "Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 255 characters for the concatenated descriptor.",
            "example": "Payment for shoes purchase",
            "nullable": true,
            "maxLength": 255
          },
          "next_action": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NextActionData"
              }
            ],
            "nullable": true
          },
          "cancellation_reason": {
            "type": "string",
            "description": "If the payment was cancelled the reason will be provided here",
            "nullable": true
          },
          "error_code": {
            "type": "string",
            "description": "If there was an error while calling the connectors the code is received here",
            "example": "E0001",
            "nullable": true
          },
          "error_message": {
            "type": "string",
            "description": "If there was an error while calling the connector the error message is received here",
            "example": "Failed while verifying the card",
            "nullable": true
          },
          "unified_code": {
            "type": "string",
            "description": "error code unified across the connectors is received here if there was an error while calling connector",
            "nullable": true
          },
          "unified_message": {
            "type": "string",
            "description": "error message unified across the connectors is received here if there was an error while calling connector",
            "nullable": true
          },
          "payment_experience": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentExperience"
              }
            ],
            "nullable": true
          },
          "payment_method_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodType"
              }
            ],
            "nullable": true
          },
          "connector_label": {
            "type": "string",
            "description": "The connector used for this payment along with the country and business details",
            "example": "stripe_US_food",
            "nullable": true
          },
          "business_country": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CountryAlpha2"
              }
            ],
            "nullable": true
          },
          "business_label": {
            "type": "string",
            "description": "The business label of merchant for this payment",
            "nullable": true
          },
          "business_sub_label": {
            "type": "string",
            "description": "The business_sub_label for this payment",
            "nullable": true
          },
          "allowed_payment_method_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodType"
            },
            "description": "Allowed Payment Method Types for a given PaymentIntent",
            "nullable": true
          },
          "ephemeral_key": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EphemeralKeyCreateResponse"
              }
            ],
            "nullable": true
          },
          "manual_retry_allowed": {
            "type": "boolean",
            "description": "If true the payment can be retried with same or different payment method which means the confirm call can be made again.",
            "nullable": true
          },
          "connector_transaction_id": {
            "type": "string",
            "description": "A unique identifier for a payment provided by the connector",
            "example": "993672945374576J",
            "nullable": true
          },
          "frm_message": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FrmMessage"
              }
            ],
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "connector_metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConnectorMetadata"
              }
            ],
            "nullable": true
          },
          "feature_metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FeatureMetadata"
              }
            ],
            "nullable": true
          },
          "reference_id": {
            "type": "string",
            "description": "reference(Identifier) to the payment at connector side",
            "example": "993672945374576J",
            "nullable": true
          },
          "payment_link": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentLinkResponse"
              }
            ],
            "nullable": true
          },
          "profile_id": {
            "type": "string",
            "description": "The business profile that is associated with this payment",
            "nullable": true
          },
          "surcharge_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RequestSurchargeDetails"
              }
            ],
            "nullable": true
          },
          "attempt_count": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of attempts associated with this payment"
          },
          "merchant_decision": {
            "type": "string",
            "description": "Denotes the action(approve or reject) taken by merchant in case of manual review. Manual review can occur when the transaction is marked as risky by the frm_processor, payment processor or when there is underpayment/over payment incase of crypto payment",
            "nullable": true
          },
          "merchant_connector_id": {
            "type": "string",
            "description": "Identifier of the connector ( merchant connector account ) which was chosen to make the payment",
            "nullable": true
          },
          "incremental_authorization_allowed": {
            "type": "boolean",
            "description": "If true, incremental authorization can be performed on this payment, in case the funds authorized initially fall short.",
            "nullable": true
          },
          "authorization_count": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of authorizations happened in an incremental_authorization payment",
            "nullable": true
          },
          "incremental_authorizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IncrementalAuthorizationResponse"
            },
            "description": "List of incremental authorizations happened to the payment",
            "nullable": true
          },
          "external_authentication_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalAuthenticationDetailsResponse"
              }
            ],
            "nullable": true
          },
          "external_3ds_authentication_attempted": {
            "type": "boolean",
            "description": "Flag indicating if external 3ds authentication is made or not",
            "nullable": true
          },
          "expires_on": {
            "type": "string",
            "format": "date-time",
            "description": "Date Time for expiry of the payment",
            "example": "2022-09-10T10:11:12Z",
            "nullable": true
          },
          "fingerprint": {
            "type": "string",
            "description": "Payment Fingerprint, to identify a particular card.\nIt is a 20 character long alphanumeric code.",
            "nullable": true
          },
          "browser_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrowserInformation"
              }
            ],
            "nullable": true
          },
          "payment_method_id": {
            "type": "string",
            "description": "Identifier for Payment Method used for the payment",
            "nullable": true
          },
          "payment_method_status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodStatus"
              }
            ],
            "nullable": true
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "description": "Date time at which payment was updated",
            "example": "2022-09-10T10:11:12Z",
            "nullable": true
          },
          "charges": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentChargeResponse"
              }
            ],
            "nullable": true
          },
          "frm_metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. FRM Metadata is useful for storing additional, structured information on an object related to FRM.",
            "nullable": true
          },
          "merchant_order_reference_id": {
            "type": "string",
            "description": "Merchant's identifier for the payment/invoice. This will be sent to the connector\nif the connector provides support to accept multiple reference ids.\nIn case the connector supports only one reference id, Hyperswitch's Payment ID will be sent as reference.",
            "example": "Custom_Order_id_123",
            "nullable": true,
            "maxLength": 255
          }
        }
      },
      "PaymentsRetrieveRequest": {
        "type": "object",
        "required": [
          "resource_id",
          "force_sync"
        ],
        "properties": {
          "resource_id": {
            "$ref": "#/components/schemas/PaymentIdType"
          },
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account.",
            "nullable": true
          },
          "force_sync": {
            "type": "boolean",
            "description": "Decider to enable or disable the connector call for retrieve request"
          },
          "param": {
            "type": "string",
            "description": "The parameters passed to a retrieve request",
            "nullable": true
          },
          "connector": {
            "type": "string",
            "description": "The name of the connector",
            "nullable": true
          },
          "merchant_connector_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantConnectorDetailsWrap"
              }
            ],
            "nullable": true
          },
          "client_secret": {
            "type": "string",
            "description": "This is a token which expires after 15 minutes, used from the client to authenticate and create sessions from the SDK",
            "nullable": true
          },
          "expand_captures": {
            "type": "boolean",
            "description": "If enabled provides list of captures linked to latest attempt",
            "nullable": true
          },
          "expand_attempts": {
            "type": "boolean",
            "description": "If enabled provides list of attempts linked to payment intent",
            "nullable": true
          }
        }
      },
      "PaymentsSessionRequest": {
        "type": "object",
        "required": [
          "payment_id",
          "client_secret",
          "wallets"
        ],
        "properties": {
          "payment_id": {
            "type": "string",
            "description": "The identifier for the payment"
          },
          "client_secret": {
            "type": "string",
            "description": "This is a token which expires after 15 minutes, used from the client to authenticate and create sessions from the SDK"
          },
          "wallets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodType"
            },
            "description": "The list of the supported wallets"
          },
          "merchant_connector_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantConnectorDetailsWrap"
              }
            ],
            "nullable": true
          }
        }
      },
      "PaymentsSessionResponse": {
        "type": "object",
        "required": [
          "payment_id",
          "client_secret",
          "session_token"
        ],
        "properties": {
          "payment_id": {
            "type": "string",
            "description": "The identifier for the payment"
          },
          "client_secret": {
            "type": "string",
            "description": "This is a token which expires after 15 minutes, used from the client to authenticate and create sessions from the SDK"
          },
          "session_token": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SessionToken"
            },
            "description": "The list of session token object"
          }
        }
      },
      "PaymentsStartRequest": {
        "type": "object",
        "required": [
          "payment_id",
          "merchant_id",
          "attempt_id"
        ],
        "properties": {
          "payment_id": {
            "type": "string",
            "description": "Unique identifier for the payment. This ensures idempotency for multiple payments\nthat have been done by a single merchant. This field is auto generated and is returned in the API response."
          },
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account."
          },
          "attempt_id": {
            "type": "string",
            "description": "The identifier for the payment transaction"
          }
        }
      },
      "PaymentsUpdateRequest": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "The payment amount. Amount for the payment in the lowest denomination of the currency, (i.e) in cents for USD denomination, in yen for JPY denomination etc. E.g., Pass 100 to charge $1.00 and ¥100 since ¥ is a zero-decimal currency",
            "example": 6540,
            "nullable": true,
            "minimum": 0
          },
          "currency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Currency"
              }
            ],
            "nullable": true
          },
          "amount_to_capture": {
            "type": "integer",
            "format": "int64",
            "description": "The Amount to be captured / debited from the users payment method. It shall be in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc., If not provided, the default amount_to_capture will be the payment amount. Also, it must be less than or equal to the original payment account.",
            "example": 6540,
            "nullable": true
          },
          "payment_id": {
            "type": "string",
            "description": "Unique identifier for the payment. This ensures idempotency for multiple payments\nthat have been done by a single merchant. The value for this field can be specified in the request, it will be auto generated otherwise and returned in the API response.",
            "example": "pay_mbabizu24mvu3mela5njyhpit4",
            "nullable": true,
            "maxLength": 30,
            "minLength": 30
          },
          "routing": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StraightThroughAlgorithm"
              }
            ],
            "nullable": true
          },
          "connector": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Connector"
            },
            "description": "This allows to manually select a connector with which the payment can go through.",
            "example": [
              "stripe",
              "adyen"
            ],
            "nullable": true
          },
          "capture_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CaptureMethod"
              }
            ],
            "nullable": true
          },
          "authentication_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthenticationType"
              }
            ],
            "default": "three_ds",
            "nullable": true
          },
          "billing": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "nullable": true
          },
          "confirm": {
            "type": "boolean",
            "description": "Whether to confirm the payment (if applicable). It can be used to completely process a payment by attaching a payment method, setting `confirm=true` and `capture_method = automatic` in the *Payments/Create API* request itself.",
            "default": false,
            "example": true,
            "nullable": true
          },
          "customer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomerDetails"
              }
            ],
            "nullable": true
          },
          "customer_id": {
            "type": "string",
            "description": "The identifier for the customer",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "nullable": true,
            "maxLength": 64,
            "minLength": 1
          },
          "off_session": {
            "type": "boolean",
            "description": "Set to true to indicate that the customer is not in your checkout flow during this payment, and therefore is unable to authenticate. This parameter is intended for scenarios where you collect card details and charge them later. When making a recurring payment by passing a mandate_id, this parameter is mandatory",
            "example": true,
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "A description for the payment",
            "example": "It's my first payment request",
            "nullable": true
          },
          "return_url": {
            "type": "string",
            "description": "The URL to which you want the user to be redirected after the completion of the payment operation",
            "example": "https://hyperswitch.io",
            "nullable": true
          },
          "setup_future_usage": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FutureUsage"
              }
            ],
            "nullable": true
          },
          "payment_method_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodDataRequest"
              }
            ],
            "nullable": true
          },
          "payment_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethod"
              }
            ],
            "nullable": true
          },
          "payment_token": {
            "type": "string",
            "description": "As Hyperswitch tokenises the sensitive details about the payments method, it provides the payment_token as a reference to a stored payment method, ensuring that the sensitive details are not exposed in any manner.",
            "example": "187282ab-40ef-47a9-9206-5099ba31e432",
            "nullable": true
          },
          "shipping": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "nullable": true
          },
          "statement_descriptor_name": {
            "type": "string",
            "description": "For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters.",
            "example": "Hyperswitch Router",
            "nullable": true,
            "maxLength": 255
          },
          "statement_descriptor_suffix": {
            "type": "string",
            "description": "Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.",
            "example": "Payment for shoes purchase",
            "nullable": true,
            "maxLength": 255
          },
          "order_details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderDetailsWithAmount"
            },
            "description": "Use this object to capture the details about the different products for which the payment is being made. The sum of amount across different products here should be equal to the overall payment amount",
            "example": "[{\n        \"product_name\": \"Apple iPhone 16\",\n        \"quantity\": 1,\n        \"amount\" : 69000\n        \"product_img_link\" : \"https://dummy-img-link.com\"\n    }]",
            "nullable": true
          },
          "mandate_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MandateData"
              }
            ],
            "nullable": true
          },
          "customer_acceptance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomerAcceptance"
              }
            ],
            "nullable": true
          },
          "browser_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrowserInformation"
              }
            ],
            "nullable": true
          },
          "payment_experience": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentExperience"
              }
            ],
            "nullable": true
          },
          "payment_method_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodType"
              }
            ],
            "nullable": true
          },
          "merchant_connector_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantConnectorDetailsWrap"
              }
            ],
            "nullable": true
          },
          "allowed_payment_method_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodType"
            },
            "description": "Use this parameter to restrict the Payment Method Types to show for a given PaymentIntent",
            "nullable": true
          },
          "retry_action": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RetryAction"
              }
            ],
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "connector_metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConnectorMetadata"
              }
            ],
            "nullable": true
          },
          "payment_link": {
            "type": "boolean",
            "description": "Whether to generate the payment link for this payment or not (if applicable)",
            "default": false,
            "example": true,
            "nullable": true
          },
          "payment_link_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentCreatePaymentLinkConfig"
              }
            ],
            "nullable": true
          },
          "payment_link_config_id": {
            "type": "string",
            "description": "Custom payment link config id set at business profile, send only if business_specific_configs is configured",
            "nullable": true
          },
          "surcharge_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RequestSurchargeDetails"
              }
            ],
            "nullable": true
          },
          "payment_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentType"
              }
            ],
            "nullable": true
          },
          "request_incremental_authorization": {
            "type": "boolean",
            "description": "Request an incremental authorization, i.e., increase the authorized amount on a confirmed payment before you capture it.",
            "nullable": true
          },
          "session_expiry": {
            "type": "integer",
            "format": "int32",
            "description": "Will be used to expire client secret after certain amount of time to be supplied in seconds\n(900) for 15 mins",
            "example": 900,
            "nullable": true,
            "minimum": 0
          },
          "frm_metadata": {
            "type": "object",
            "description": "Additional data related to some frm(Fraud Risk Management) connectors",
            "nullable": true
          },
          "request_external_three_ds_authentication": {
            "type": "boolean",
            "description": "Whether to perform external authentication (if applicable)",
            "example": true,
            "nullable": true
          },
          "recurring_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RecurringDetails"
              }
            ],
            "nullable": true
          },
          "charges": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentChargeRequest"
              }
            ],
            "nullable": true
          },
          "merchant_order_reference_id": {
            "type": "string",
            "description": "Merchant's identifier for the payment/invoice. This will be sent to the connector\nif the connector provides support to accept multiple reference ids.\nIn case the connector supports only one reference id, Hyperswitch's Payment ID will be sent as reference.",
            "example": "Custom_Order_id_123",
            "nullable": true,
            "maxLength": 255
          }
        }
      },
      "PayoutActionRequest": {
        "type": "object"
      },
      "PayoutAttemptResponse": {
        "type": "object",
        "required": [
          "attempt_id",
          "status",
          "amount"
        ],
        "properties": {
          "attempt_id": {
            "type": "string",
            "description": "Unique identifier for the attempt"
          },
          "status": {
            "$ref": "#/components/schemas/PayoutStatus"
          },
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "The payout attempt amount. Amount for the payout in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc.,",
            "example": 6583
          },
          "currency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Currency"
              }
            ],
            "nullable": true
          },
          "connector": {
            "type": "string",
            "description": "The connector used for the payout",
            "nullable": true
          },
          "error_code": {
            "type": "string",
            "description": "Connector's error code in case of failures",
            "nullable": true
          },
          "error_message": {
            "type": "string",
            "description": "Connector's error message in case of failures",
            "nullable": true
          },
          "payment_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutType"
              }
            ],
            "nullable": true
          },
          "payout_method_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodType"
              }
            ],
            "nullable": true
          },
          "connector_transaction_id": {
            "type": "string",
            "description": "A unique identifier for a payout provided by the connector",
            "nullable": true
          },
          "cancellation_reason": {
            "type": "string",
            "description": "If the payout was cancelled the reason provided here",
            "nullable": true
          },
          "unified_code": {
            "type": "string",
            "description": "error code unified across the connectors is received here if there was an error while calling connector",
            "nullable": true
          },
          "unified_message": {
            "type": "string",
            "description": "error message unified across the connectors is received here if there was an error while calling connector",
            "nullable": true
          }
        }
      },
      "PayoutConnectors": {
        "type": "string",
        "enum": [
          "adyen",
          "adyenplatform",
          "cybersource",
          "ebanx",
          "payone",
          "paypal",
          "stripe",
          "wise"
        ]
      },
      "PayoutCreatePayoutLinkConfig": {
        "allOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/GenericLinkUiConfig"
              }
            ],
            "nullable": true
          },
          {
            "type": "object",
            "properties": {
              "payout_link_id": {
                "type": "string",
                "description": "The unique identifier for the collect link.",
                "example": "pm_collect_link_2bdacf398vwzq5n422S1",
                "nullable": true
              },
              "enabled_payment_methods": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EnabledPaymentMethod"
                },
                "description": "List of payout methods shown on collect UI",
                "example": "[{\"payment_method\": \"bank_transfer\", \"payment_method_types\": [\"ach\", \"bacs\"]}]",
                "nullable": true
              }
            }
          }
        ],
        "description": "Custom payout link config for the particular payout, if payout link is to be generated."
      },
      "PayoutCreateRequest": {
        "type": "object",
        "properties": {
          "payout_id": {
            "type": "string",
            "description": "Unique identifier for the payout. This ensures idempotency for multiple payouts that have been done by a single merchant. This field is auto generated and is returned in the API response, **not required to be included in the Payout Create/Update Request.**",
            "example": "187282ab-40ef-47a9-9206-5099ba31e432",
            "nullable": true,
            "maxLength": 30,
            "minLength": 30
          },
          "merchant_id": {
            "type": "string",
            "description": "This is an identifier for the merchant account. This is inferred from the API key provided during the request, **not required to be included in the Payout Create/Update Request.**",
            "example": "merchant_1668273825",
            "nullable": true,
            "maxLength": 255
          },
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "The payout amount. Amount for the payout in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc.,",
            "example": 1000,
            "nullable": true,
            "minimum": 0
          },
          "currency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Currency"
              }
            ],
            "nullable": true
          },
          "routing": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RoutingAlgorithm"
              }
            ],
            "nullable": true
          },
          "connector": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayoutConnectors"
            },
            "description": "This field allows the merchant to manually select a connector with which the payout can go through.",
            "example": [
              "wise",
              "adyen"
            ],
            "nullable": true
          },
          "confirm": {
            "type": "boolean",
            "description": "This field is used when merchant wants to confirm the payout, thus useful for the payout _Confirm_ request. Ideally merchants should _Create_ a payout, _Update_ it (if required), then _Confirm_ it.",
            "default": false,
            "example": true,
            "nullable": true
          },
          "payout_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutType"
              }
            ],
            "nullable": true
          },
          "payout_method_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutMethodData"
              }
            ],
            "nullable": true
          },
          "billing": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "nullable": true
          },
          "auto_fulfill": {
            "type": "boolean",
            "description": "Set to true to confirm the payout without review, no further action required",
            "default": false,
            "example": true,
            "nullable": true
          },
          "customer_id": {
            "type": "string",
            "description": "The identifier for the customer object. If not provided the customer ID will be autogenerated. _Deprecated: Use customer_id instead._",
            "deprecated": true,
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "nullable": true,
            "maxLength": 255
          },
          "customer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomerDetails"
              }
            ],
            "nullable": true
          },
          "client_secret": {
            "type": "string",
            "description": "It's a token used for client side verification.",
            "example": "pay_U42c409qyHwOkWo3vK60_secret_el9ksDkiB8hi6j9N78yo",
            "nullable": true
          },
          "return_url": {
            "type": "string",
            "description": "The URL to redirect after the completion of the operation",
            "example": "https://hyperswitch.io",
            "nullable": true
          },
          "business_country": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CountryAlpha2"
              }
            ],
            "nullable": true
          },
          "business_label": {
            "type": "string",
            "description": "Business label of the merchant for this payout. _Deprecated: Use profile_id instead._",
            "deprecated": true,
            "example": "food",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "A description of the payout",
            "example": "It's my first payout request",
            "nullable": true
          },
          "entity_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutEntityType"
              }
            ],
            "nullable": true
          },
          "recurring": {
            "type": "boolean",
            "description": "Specifies whether or not the payout request is recurring",
            "default": false,
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "payout_token": {
            "type": "string",
            "description": "Provide a reference to a stored payout method, used to process the payout.",
            "example": "187282ab-40ef-47a9-9206-5099ba31e432",
            "nullable": true
          },
          "profile_id": {
            "type": "string",
            "description": "The business profile to use for this payout, especially if there are multiple business profiles associated with the account, otherwise default business profile associated with the merchant account will be used.",
            "nullable": true
          },
          "priority": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutSendPriority"
              }
            ],
            "nullable": true
          },
          "payout_link": {
            "type": "boolean",
            "description": "Whether to get the payout link (if applicable). Merchant need to specify this during the Payout _Create_, this field can not be updated during Payout _Update_.",
            "default": false,
            "example": true,
            "nullable": true
          },
          "payout_link_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutCreatePayoutLinkConfig"
              }
            ],
            "nullable": true
          },
          "session_expiry": {
            "type": "integer",
            "format": "int32",
            "description": "Will be used to expire client secret after certain amount of time to be supplied in seconds\n(900) for 15 mins",
            "example": 900,
            "nullable": true,
            "minimum": 0
          },
          "email": {
            "type": "string",
            "description": "Customer's email. _Deprecated: Use customer object instead._",
            "deprecated": true,
            "example": "johntest@test.com",
            "nullable": true,
            "maxLength": 255
          },
          "name": {
            "type": "string",
            "description": "Customer's name. _Deprecated: Use customer object instead._",
            "deprecated": true,
            "example": "John Test",
            "nullable": true,
            "maxLength": 255
          },
          "phone": {
            "type": "string",
            "description": "Customer's phone. _Deprecated: Use customer object instead._",
            "deprecated": true,
            "example": "9123456789",
            "nullable": true,
            "maxLength": 255
          },
          "phone_country_code": {
            "type": "string",
            "description": "Customer's phone country code. _Deprecated: Use customer object instead._",
            "deprecated": true,
            "example": "+1",
            "nullable": true,
            "maxLength": 255
          }
        },
        "additionalProperties": false
      },
      "PayoutCreateResponse": {
        "type": "object",
        "required": [
          "payout_id",
          "merchant_id",
          "amount",
          "currency",
          "auto_fulfill",
          "customer_id",
          "client_secret",
          "return_url",
          "business_country",
          "entity_type",
          "recurring",
          "status",
          "profile_id"
        ],
        "properties": {
          "payout_id": {
            "type": "string",
            "description": "Unique identifier for the payout. This ensures idempotency for multiple payouts\nthat have been done by a single merchant. This field is auto generated and is returned in the API response.",
            "example": "187282ab-40ef-47a9-9206-5099ba31e432",
            "maxLength": 30,
            "minLength": 30
          },
          "merchant_id": {
            "type": "string",
            "description": "This is an identifier for the merchant account. This is inferred from the API key\nprovided during the request",
            "example": "merchant_1668273825",
            "maxLength": 255
          },
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "The payout amount. Amount for the payout in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc.,",
            "example": 1000
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "connector": {
            "type": "string",
            "description": "The connector used for the payout",
            "example": "wise",
            "nullable": true
          },
          "payout_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutType"
              }
            ],
            "nullable": true
          },
          "billing": {
            "type": "object",
            "description": "The billing address for the payout",
            "nullable": true
          },
          "auto_fulfill": {
            "type": "boolean",
            "description": "Set to true to confirm the payout without review, no further action required",
            "default": false,
            "example": true
          },
          "customer_id": {
            "type": "string",
            "description": "The identifier for the customer object. If not provided the customer ID will be autogenerated.",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "customer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomerDetailsResponse"
              }
            ],
            "nullable": true
          },
          "client_secret": {
            "type": "string",
            "description": "It's a token used for client side verification.",
            "example": "pay_U42c409qyHwOkWo3vK60_secret_el9ksDkiB8hi6j9N78yo"
          },
          "return_url": {
            "type": "string",
            "description": "The URL to redirect after the completion of the operation",
            "example": "https://hyperswitch.io"
          },
          "business_country": {
            "$ref": "#/components/schemas/CountryAlpha2"
          },
          "business_label": {
            "type": "string",
            "description": "Business label of the merchant for this payout",
            "example": "food",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "A description of the payout",
            "example": "It's my first payout request",
            "nullable": true
          },
          "entity_type": {
            "$ref": "#/components/schemas/PayoutEntityType"
          },
          "recurring": {
            "type": "boolean",
            "description": "Specifies whether or not the payout request is recurring",
            "default": false
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "merchant_connector_id": {
            "type": "string",
            "description": "Unique identifier of the merchant connector account",
            "example": "mca_sAD3OZLATetvjLOYhUSy",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/PayoutStatus"
          },
          "error_message": {
            "type": "string",
            "description": "If there was an error while calling the connector the error message is received here",
            "example": "Failed while verifying the card",
            "nullable": true
          },
          "error_code": {
            "type": "string",
            "description": "If there was an error while calling the connectors the code is received here",
            "example": "E0001",
            "nullable": true
          },
          "profile_id": {
            "type": "string",
            "description": "The business profile that is associated with this payout"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the payout was created",
            "example": "2022-09-10T10:11:12Z",
            "nullable": true
          },
          "connector_transaction_id": {
            "type": "string",
            "description": "Underlying processor's payout resource ID",
            "example": "S3FC9G9M2MVFDXT5",
            "nullable": true
          },
          "priority": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutSendPriority"
              }
            ],
            "nullable": true
          },
          "attempts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayoutAttemptResponse"
            },
            "description": "List of attempts",
            "nullable": true
          },
          "payout_link": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutLinkResponse"
              }
            ],
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Customer's email. _Deprecated: Use customer object instead._",
            "deprecated": true,
            "example": "johntest@test.com",
            "nullable": true,
            "maxLength": 255
          },
          "name": {
            "type": "string",
            "description": "Customer's name. _Deprecated: Use customer object instead._",
            "deprecated": true,
            "example": "John Test",
            "nullable": true,
            "maxLength": 255
          },
          "phone": {
            "type": "string",
            "description": "Customer's phone. _Deprecated: Use customer object instead._",
            "deprecated": true,
            "example": "9123456789",
            "nullable": true,
            "maxLength": 255
          },
          "phone_country_code": {
            "type": "string",
            "description": "Customer's phone country code. _Deprecated: Use customer object instead._",
            "deprecated": true,
            "example": "+1",
            "nullable": true,
            "maxLength": 255
          }
        },
        "additionalProperties": false
      },
      "PayoutEntityType": {
        "type": "string",
        "description": "Type of entity to whom the payout is being carried out to, select from the given list of options",
        "enum": [
          "Individual",
          "Company",
          "NonProfit",
          "PublicSector",
          "NaturalPerson",
          "lowercase",
          "Personal"
        ]
      },
      "PayoutLinkInitiateRequest": {
        "type": "object",
        "required": [
          "merchant_id",
          "payout_id"
        ],
        "properties": {
          "merchant_id": {
            "type": "string"
          },
          "payout_id": {
            "type": "string"
          }
        }
      },
      "PayoutLinkResponse": {
        "type": "object",
        "required": [
          "payout_link_id",
          "link"
        ],
        "properties": {
          "payout_link_id": {
            "type": "string"
          },
          "link": {
            "type": "string"
          }
        }
      },
      "PayoutListConstraints": {
        "allOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/TimeRange"
              }
            ],
            "nullable": true
          },
          {
            "type": "object",
            "properties": {
              "customer_id": {
                "type": "string",
                "description": "The identifier for customer",
                "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
                "nullable": true
              },
              "starting_after": {
                "type": "string",
                "description": "A cursor for use in pagination, fetch the next list after some object",
                "example": "pay_fafa124123",
                "nullable": true
              },
              "ending_before": {
                "type": "string",
                "description": "A cursor for use in pagination, fetch the previous list before some object",
                "example": "pay_fafa124123",
                "nullable": true
              },
              "limit": {
                "type": "integer",
                "format": "int32",
                "description": "limit on the number of objects to return",
                "default": 10,
                "maximum": 100,
                "minimum": 0
              },
              "created": {
                "type": "string",
                "format": "date-time",
                "description": "The time at which payout is created",
                "example": "2022-09-10T10:11:12Z",
                "nullable": true
              }
            }
          }
        ]
      },
      "PayoutListFilterConstraints": {
        "allOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/TimeRange"
              }
            ],
            "nullable": true
          },
          {
            "type": "object",
            "required": [
              "currency",
              "entity_type"
            ],
            "properties": {
              "payout_id": {
                "type": "string",
                "description": "The identifier for payout",
                "example": "187282ab-40ef-47a9-9206-5099ba31e432",
                "nullable": true,
                "maxLength": 30,
                "minLength": 30
              },
              "profile_id": {
                "type": "string",
                "description": "The identifier for business profile",
                "nullable": true
              },
              "customer_id": {
                "type": "string",
                "description": "The identifier for customer",
                "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
                "nullable": true
              },
              "limit": {
                "type": "integer",
                "format": "int32",
                "description": "The limit on the number of objects. The default limit is 10 and max limit is 20",
                "minimum": 0
              },
              "offset": {
                "type": "integer",
                "format": "int32",
                "description": "The starting point within a list of objects",
                "nullable": true,
                "minimum": 0
              },
              "connector": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PayoutConnectors"
                },
                "description": "The list of connectors to filter payouts list",
                "example": [
                  "wise",
                  "adyen"
                ],
                "nullable": true
              },
              "currency": {
                "$ref": "#/components/schemas/Currency"
              },
              "status": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PayoutStatus"
                },
                "description": "The list of payout status to filter payouts list",
                "example": [
                  "pending",
                  "failed"
                ],
                "nullable": true
              },
              "payout_method": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PayoutType"
                },
                "description": "The list of payout methods to filter payouts list",
                "example": [
                  "bank",
                  "card"
                ],
                "nullable": true
              },
              "entity_type": {
                "$ref": "#/components/schemas/PayoutEntityType"
              }
            }
          }
        ]
      },
      "PayoutListResponse": {
        "type": "object",
        "required": [
          "size",
          "data"
        ],
        "properties": {
          "size": {
            "type": "integer",
            "description": "The number of payouts included in the list",
            "minimum": 0
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayoutCreateResponse"
            },
            "description": "The list of payouts response objects"
          },
          "total_count": {
            "type": "integer",
            "format": "int64",
            "description": "The total number of available payouts for given constraints",
            "nullable": true
          }
        }
      },
      "PayoutMethodData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "card"
            ],
            "properties": {
              "card": {
                "$ref": "#/components/schemas/CardPayout"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "bank"
            ],
            "properties": {
              "bank": {
                "$ref": "#/components/schemas/Bank"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "wallet"
            ],
            "properties": {
              "wallet": {
                "$ref": "#/components/schemas/Wallet"
              }
            }
          }
        ],
        "description": "The payout method information required for carrying out a payout"
      },
      "PayoutRequest": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "PayoutActionRequest"
            ],
            "properties": {
              "PayoutActionRequest": {
                "$ref": "#/components/schemas/PayoutActionRequest"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "PayoutCreateRequest"
            ],
            "properties": {
              "PayoutCreateRequest": {
                "$ref": "#/components/schemas/PayoutCreateRequest"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "PayoutRetrieveRequest"
            ],
            "properties": {
              "PayoutRetrieveRequest": {
                "$ref": "#/components/schemas/PayoutRetrieveRequest"
              }
            }
          }
        ]
      },
      "PayoutRetrieveBody": {
        "type": "object",
        "properties": {
          "force_sync": {
            "type": "boolean",
            "nullable": true
          },
          "merchant_id": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "PayoutRetrieveRequest": {
        "type": "object",
        "required": [
          "payout_id"
        ],
        "properties": {
          "payout_id": {
            "type": "string",
            "description": "Unique identifier for the payout. This ensures idempotency for multiple payouts\nthat have been done by a single merchant. This field is auto generated and is returned in the API response.",
            "example": "187282ab-40ef-47a9-9206-5099ba31e432",
            "maxLength": 30,
            "minLength": 30
          },
          "force_sync": {
            "type": "boolean",
            "description": "`force_sync` with the connector to get payout details\n(defaults to false)",
            "default": false,
            "example": true,
            "nullable": true
          },
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account.",
            "nullable": true
          }
        }
      },
      "PayoutSendPriority": {
        "type": "string",
        "description": "The send method which will be required for processing payouts, check options for better understanding.",
        "enum": [
          "instant",
          "fast",
          "regular",
          "wire",
          "cross_border",
          "internal"
        ]
      },
      "PayoutStatus": {
        "type": "string",
        "enum": [
          "success",
          "failed",
          "cancelled",
          "initiated",
          "expired",
          "reversed",
          "pending",
          "ineligible",
          "requires_creation",
          "requires_confirmation",
          "requires_payout_method_data",
          "requires_fulfillment",
          "requires_vendor_account_creation"
        ]
      },
      "PayoutType": {
        "type": "string",
        "description": "The payout_type of the payout request is a mandatory field for confirming the payouts. It should be specified in the Create request. If not provided, it must be updated in the Payout Update request before it can be confirmed.",
        "enum": [
          "card",
          "bank",
          "wallet"
        ]
      },
      "Paypal": {
        "type": "object",
        "required": [
          "email",
          "telephone_number",
          "paypal_id"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "Email linked with paypal account",
            "example": "john.doe@example.com"
          },
          "telephone_number": {
            "type": "string",
            "description": "mobile number linked to paypal account",
            "example": "16608213349"
          },
          "paypal_id": {
            "type": "string",
            "description": "id of the paypal account",
            "example": "G83KXTJ5EHCQ2"
          }
        }
      },
      "PaypalRedirection": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "paypal's email address",
            "example": "johntest@test.com",
            "nullable": true,
            "maxLength": 255
          }
        }
      },
      "PaypalSessionTokenResponse": {
        "type": "object",
        "required": [
          "connector",
          "session_token",
          "sdk_next_action"
        ],
        "properties": {
          "connector": {
            "type": "string",
            "description": "Name of the connector"
          },
          "session_token": {
            "type": "string",
            "description": "The session token for PayPal"
          },
          "sdk_next_action": {
            "$ref": "#/components/schemas/SdkNextAction"
          }
        }
      },
      "PhoneDetails": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "The contact number",
            "example": "9123456789",
            "nullable": true
          },
          "country_code": {
            "type": "string",
            "description": "The country code attached to the number",
            "example": "+1",
            "nullable": true
          }
        }
      },
      "PixBankTransfer": {
        "type": "object",
        "required": [
          "bank_account_number",
          "pix_key"
        ],
        "properties": {
          "bank_name": {
            "type": "string",
            "description": "Bank name",
            "example": "Deutsche Bank",
            "nullable": true
          },
          "bank_branch": {
            "type": "string",
            "description": "Bank branch",
            "example": "3707",
            "nullable": true
          },
          "bank_account_number": {
            "type": "string",
            "description": "Bank account number is an unique identifier assigned by a bank to a customer.",
            "example": "000123456"
          },
          "pix_key": {
            "type": "string",
            "description": "Unique key for pix customer",
            "example": "000123456"
          },
          "tax_id": {
            "type": "string",
            "description": "Individual taxpayer identification number",
            "example": "000123456",
            "nullable": true
          }
        }
      },
      "PollConfigResponse": {
        "type": "object",
        "required": [
          "poll_id",
          "delay_in_secs",
          "frequency"
        ],
        "properties": {
          "poll_id": {
            "type": "string",
            "description": "Poll Id"
          },
          "delay_in_secs": {
            "type": "integer",
            "format": "int32",
            "description": "Interval of the poll"
          },
          "frequency": {
            "type": "integer",
            "format": "int32",
            "description": "Frequency of the poll"
          }
        }
      },
      "PollResponse": {
        "type": "object",
        "required": [
          "poll_id",
          "status"
        ],
        "properties": {
          "poll_id": {
            "type": "string",
            "description": "The poll id"
          },
          "status": {
            "$ref": "#/components/schemas/PollStatus"
          }
        }
      },
      "PollStatus": {
        "type": "string",
        "enum": [
          "pending",
          "completed",
          "not_found"
        ]
      },
      "PrimaryBusinessDetails": {
        "type": "object",
        "required": [
          "country",
          "business"
        ],
        "properties": {
          "country": {
            "$ref": "#/components/schemas/CountryAlpha2"
          },
          "business": {
            "type": "string",
            "example": "food"
          }
        },
        "additionalProperties": false
      },
      "ProcessorPaymentToken": {
        "type": "object",
        "description": "Processor payment token for MIT payments where payment_method_data is not available",
        "required": [
          "processor_payment_token",
          "connector",
          "merchant_connector_id"
        ],
        "properties": {
          "processor_payment_token": {
            "type": "string"
          },
          "connector": {
            "$ref": "#/components/schemas/Connector"
          },
          "merchant_connector_id": {
            "type": "string"
          }
        }
      },
      "ProductType": {
        "type": "string",
        "enum": [
          "physical",
          "digital",
          "travel",
          "ride",
          "event",
          "accommodation"
        ]
      },
      "ProfileDefaultRoutingConfig": {
        "type": "object",
        "required": [
          "profile_id",
          "connectors"
        ],
        "properties": {
          "profile_id": {
            "type": "string"
          },
          "connectors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoutableConnectorChoice"
            }
          }
        }
      },
      "ProgramConnectorSelection": {
        "type": "object",
        "description": "The program, having a default connector selection and\na bunch of rules. Also can hold arbitrary metadata.",
        "required": [
          "defaultSelection",
          "rules",
          "metadata"
        ],
        "properties": {
          "defaultSelection": {
            "$ref": "#/components/schemas/ConnectorSelection"
          },
          "rules": {
            "$ref": "#/components/schemas/RuleConnectorSelection"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {}
          }
        }
      },
      "RealTimePaymentData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "fps"
            ],
            "properties": {
              "fps": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "duit_now"
            ],
            "properties": {
              "duit_now": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "prompt_pay"
            ],
            "properties": {
              "prompt_pay": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "viet_qr"
            ],
            "properties": {
              "viet_qr": {
                "type": "object"
              }
            }
          }
        ]
      },
      "ReceiverDetails": {
        "type": "object",
        "required": [
          "amount_received"
        ],
        "properties": {
          "amount_received": {
            "type": "integer",
            "format": "int64",
            "description": "The amount received by receiver"
          },
          "amount_charged": {
            "type": "integer",
            "format": "int64",
            "description": "The amount charged by ACH",
            "nullable": true
          },
          "amount_remaining": {
            "type": "integer",
            "format": "int64",
            "description": "The amount remaining to be sent via ACH",
            "nullable": true
          }
        }
      },
      "ReconStatus": {
        "type": "string",
        "enum": [
          "not_requested",
          "requested",
          "active",
          "disabled"
        ]
      },
      "RecurringDetails": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "type",
              "data"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "mandate_id"
                ]
              },
              "data": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "data"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "payment_method_id"
                ]
              },
              "data": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "data"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "processor_payment_token"
                ]
              },
              "data": {
                "$ref": "#/components/schemas/ProcessorPaymentToken"
              }
            }
          }
        ],
        "description": "Details required for recurring payment",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "RedirectResponse": {
        "type": "object",
        "properties": {
          "param": {
            "type": "string",
            "nullable": true
          },
          "json_payload": {
            "type": "object",
            "nullable": true
          }
        }
      },
      "RefundListRequest": {
        "allOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/TimeRange"
              }
            ],
            "nullable": true
          },
          {
            "type": "object",
            "properties": {
              "payment_id": {
                "type": "string",
                "description": "The identifier for the payment",
                "nullable": true
              },
              "refund_id": {
                "type": "string",
                "description": "The identifier for the refund",
                "nullable": true
              },
              "profile_id": {
                "type": "string",
                "description": "The identifier for business profile",
                "nullable": true
              },
              "limit": {
                "type": "integer",
                "format": "int64",
                "description": "Limit on the number of objects to return",
                "nullable": true
              },
              "offset": {
                "type": "integer",
                "format": "int64",
                "description": "The starting point within a list of objects",
                "nullable": true
              },
              "amount_filter": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AmountFilter"
                  }
                ],
                "nullable": true
              },
              "connector": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "The list of connectors to filter refunds list",
                "nullable": true
              },
              "merchant_connector_id": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "The list of merchant connector ids to filter the refunds list for selected label",
                "nullable": true
              },
              "currency": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Currency"
                },
                "description": "The list of currencies to filter refunds list",
                "nullable": true
              },
              "refund_status": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RefundStatus"
                },
                "description": "The list of refund statuses to filter refunds list",
                "nullable": true
              }
            }
          }
        ]
      },
      "RefundListResponse": {
        "type": "object",
        "required": [
          "count",
          "total_count",
          "data"
        ],
        "properties": {
          "count": {
            "type": "integer",
            "description": "The number of refunds included in the list",
            "minimum": 0
          },
          "total_count": {
            "type": "integer",
            "format": "int64",
            "description": "The total number of refunds in the list"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RefundResponse"
            },
            "description": "The List of refund response object"
          }
        }
      },
      "RefundRequest": {
        "type": "object",
        "required": [
          "payment_id"
        ],
        "properties": {
          "payment_id": {
            "type": "string",
            "description": "The payment id against which refund is to be initiated",
            "example": "pay_mbabizu24mvu3mela5njyhpit4",
            "maxLength": 30,
            "minLength": 30
          },
          "refund_id": {
            "type": "string",
            "description": "Unique Identifier for the Refund. This is to ensure idempotency for multiple partial refunds initiated against the same payment. If this is not passed by the merchant, this field shall be auto generated and provided in the API response. It is recommended to generate uuid(v4) as the refund_id.",
            "example": "ref_mbabizu24mvu3mela5njyhpit4",
            "nullable": true,
            "maxLength": 30,
            "minLength": 30
          },
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "nullable": true,
            "maxLength": 255
          },
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "Total amount for which the refund is to be initiated. Amount for the payment in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc., If not provided, this will default to the full payment amount",
            "example": 6540,
            "nullable": true,
            "minimum": 100
          },
          "reason": {
            "type": "string",
            "description": "Reason for the refund. Often useful for displaying to users and your customer support executive. In case the payment went through Stripe, this field needs to be passed with one of these enums: `duplicate`, `fraudulent`, or `requested_by_customer`",
            "example": "Customer returned the product",
            "nullable": true,
            "maxLength": 255
          },
          "refund_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RefundType"
              }
            ],
            "default": "Instant",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "merchant_connector_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantConnectorDetailsWrap"
              }
            ],
            "nullable": true
          },
          "charges": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChargeRefunds"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RefundResponse": {
        "type": "object",
        "required": [
          "refund_id",
          "payment_id",
          "amount",
          "currency",
          "status",
          "connector"
        ],
        "properties": {
          "refund_id": {
            "type": "string",
            "description": "Unique Identifier for the refund"
          },
          "payment_id": {
            "type": "string",
            "description": "The payment id against which refund is initiated"
          },
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "The refund amount, which should be less than or equal to the total payment amount. Amount for the payment in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc",
            "example": 6540,
            "minimum": 100
          },
          "currency": {
            "type": "string",
            "description": "The three-letter ISO currency code"
          },
          "status": {
            "$ref": "#/components/schemas/RefundStatus"
          },
          "reason": {
            "type": "string",
            "description": "An arbitrary string attached to the object. Often useful for displaying to users and your customer support executive",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object",
            "nullable": true
          },
          "error_message": {
            "type": "string",
            "description": "The error message",
            "nullable": true
          },
          "error_code": {
            "type": "string",
            "description": "The code for the error",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp at which refund is created",
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp at which refund is updated",
            "nullable": true
          },
          "connector": {
            "type": "string",
            "description": "The connector used for the refund and the corresponding payment",
            "example": "stripe"
          },
          "profile_id": {
            "type": "string",
            "description": "The id of business profile for this refund",
            "nullable": true
          },
          "merchant_connector_id": {
            "type": "string",
            "description": "The merchant_connector_id of the processor through which this payment went through",
            "nullable": true
          },
          "charges": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChargeRefunds"
              }
            ],
            "nullable": true
          }
        }
      },
      "RefundStatus": {
        "type": "string",
        "description": "The status for refunds",
        "enum": [
          "succeeded",
          "failed",
          "pending",
          "review"
        ]
      },
      "RefundType": {
        "type": "string",
        "description": "To indicate whether to refund needs to be instant or scheduled",
        "enum": [
          "scheduled",
          "instant"
        ]
      },
      "RefundUpdateRequest": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "An arbitrary string attached to the object. Often useful for displaying to users and your customer support executive",
            "example": "Customer returned the product",
            "nullable": true,
            "maxLength": 255
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RequestPaymentMethodTypes": {
        "type": "object",
        "required": [
          "payment_method_type",
          "recurring_enabled",
          "installment_payment_enabled"
        ],
        "properties": {
          "payment_method_type": {
            "$ref": "#/components/schemas/PaymentMethodType"
          },
          "payment_experience": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentExperience"
              }
            ],
            "nullable": true
          },
          "card_networks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CardNetwork"
            },
            "nullable": true
          },
          "accepted_currencies": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AcceptedCurrencies"
              }
            ],
            "nullable": true
          },
          "accepted_countries": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AcceptedCountries"
              }
            ],
            "nullable": true
          },
          "minimum_amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MinorUnit"
              }
            ],
            "nullable": true
          },
          "maximum_amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MinorUnit"
              }
            ],
            "nullable": true
          },
          "recurring_enabled": {
            "type": "boolean",
            "description": "Boolean to enable recurring payments / mandates. Default is true.",
            "default": true,
            "example": false
          },
          "installment_payment_enabled": {
            "type": "boolean",
            "description": "Boolean to enable installment / EMI / BNPL payments. Default is true.",
            "default": true,
            "example": false
          }
        }
      },
      "RequestSurchargeDetails": {
        "type": "object",
        "description": "Details of surcharge applied on this payment, if applicable",
        "required": [
          "surcharge_amount"
        ],
        "properties": {
          "surcharge_amount": {
            "type": "integer",
            "format": "int64",
            "example": 6540
          },
          "tax_amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MinorUnit"
              }
            ],
            "nullable": true
          }
        }
      },
      "RequiredFieldInfo": {
        "type": "object",
        "description": "Required fields info used while listing the payment_method_data",
        "required": [
          "required_field",
          "display_name",
          "field_type"
        ],
        "properties": {
          "required_field": {
            "type": "string",
            "description": "Required field for a payment_method through a payment_method_type"
          },
          "display_name": {
            "type": "string",
            "description": "Display name of the required field in the front-end"
          },
          "field_type": {
            "$ref": "#/components/schemas/FieldType"
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "RetrieveApiKeyResponse": {
        "type": "object",
        "description": "The response body for retrieving an API Key.",
        "required": [
          "key_id",
          "merchant_id",
          "name",
          "prefix",
          "created",
          "expiration"
        ],
        "properties": {
          "key_id": {
            "type": "string",
            "description": "The identifier for the API Key.",
            "example": "5hEEqkgJUyuxgSKGArHA4mWSnX",
            "maxLength": 64
          },
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account.",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 64
          },
          "name": {
            "type": "string",
            "description": "The unique name for the API Key to help you identify it.",
            "example": "Sandbox integration key",
            "maxLength": 64
          },
          "description": {
            "type": "string",
            "description": "The description to provide more context about the API Key.",
            "example": "Key used by our developers to integrate with the sandbox environment",
            "nullable": true,
            "maxLength": 256
          },
          "prefix": {
            "type": "string",
            "description": "The first few characters of the plaintext API Key to help you identify it.",
            "maxLength": 64
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "The time at which the API Key was created.",
            "example": "2022-09-10T10:11:12Z"
          },
          "expiration": {
            "$ref": "#/components/schemas/ApiKeyExpiration"
          }
        }
      },
      "RetrievePaymentLinkRequest": {
        "type": "object",
        "properties": {
          "client_secret": {
            "type": "string",
            "description": "It's a token used for client side verification.",
            "nullable": true
          }
        }
      },
      "RetrievePaymentLinkResponse": {
        "type": "object",
        "required": [
          "payment_link_id",
          "merchant_id",
          "link_to_pay",
          "amount",
          "created_at",
          "status"
        ],
        "properties": {
          "payment_link_id": {
            "type": "string",
            "description": "Identifier for Payment Link"
          },
          "merchant_id": {
            "type": "string",
            "description": "Identifier for Merchant"
          },
          "link_to_pay": {
            "type": "string",
            "description": "Open payment link (without any security checks and listing SPMs)"
          },
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "The payment amount. Amount for the payment in the lowest denomination of the currency",
            "example": 6540
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time of Payment Link creation"
          },
          "expiry": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time of Expiration for Payment Link",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description for Payment Link",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/PaymentLinkStatus"
          },
          "currency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Currency"
              }
            ],
            "nullable": true
          },
          "secure_link": {
            "type": "string",
            "description": "Secure payment link (with security checks and listing saved payment methods)",
            "nullable": true
          }
        }
      },
      "RetryAction": {
        "type": "string",
        "description": "Denotes the retry action",
        "enum": [
          "manual_retry",
          "requeue"
        ]
      },
      "RevokeApiKeyResponse": {
        "type": "object",
        "description": "The response body for revoking an API Key.",
        "required": [
          "merchant_id",
          "key_id",
          "revoked"
        ],
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account.",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 64
          },
          "key_id": {
            "type": "string",
            "description": "The identifier for the API Key.",
            "example": "5hEEqkgJUyuxgSKGArHA4mWSnX",
            "maxLength": 64
          },
          "revoked": {
            "type": "boolean",
            "description": "Indicates whether the API key was revoked or not.",
            "example": "true"
          }
        }
      },
      "RewardData": {
        "type": "object",
        "required": [
          "merchant_id"
        ],
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The merchant ID with which we have to call the connector"
          }
        }
      },
      "RoutableChoiceKind": {
        "type": "string",
        "enum": [
          "OnlyConnector",
          "FullStruct"
        ]
      },
      "RoutableConnectorChoice": {
        "type": "object",
        "description": "Routable Connector chosen for a payment",
        "required": [
          "connector"
        ],
        "properties": {
          "connector": {
            "$ref": "#/components/schemas/RoutableConnectors"
          },
          "merchant_connector_id": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "RoutableConnectors": {
        "type": "string",
        "description": "Connectors eligible for payments routing",
        "enum": [
          "adyenplatform",
          "phonypay",
          "fauxpay",
          "pretendpay",
          "stripe_test",
          "adyen_test",
          "checkout_test",
          "paypal_test",
          "aci",
          "adyen",
          "airwallex",
          "authorizedotnet",
          "bankofamerica",
          "billwerk",
          "bitpay",
          "bambora",
          "bamboraapac",
          "bluesnap",
          "boku",
          "braintree",
          "cashtocode",
          "checkout",
          "coinbase",
          "cryptopay",
          "cybersource",
          "datatrans",
          "dlocal",
          "ebanx",
          "fiserv",
          "forte",
          "globalpay",
          "globepay",
          "gocardless",
          "helcim",
          "iatapay",
          "itaubank",
          "klarna",
          "mifinity",
          "mollie",
          "multisafepay",
          "nexinets",
          "nmi",
          "noon",
          "nuvei",
          "opennode",
          "paybox",
          "payme",
          "payone",
          "paypal",
          "payu",
          "placetopay",
          "powertranz",
          "prophetpay",
          "rapyd",
          "razorpay",
          "riskified",
          "shift4",
          "signifyd",
          "square",
          "stax",
          "stripe",
          "trustpay",
          "tsys",
          "volt",
          "wellsfargo",
          "wise",
          "worldline",
          "worldpay",
          "zen",
          "plaid",
          "zsl"
        ]
      },
      "RoutingAlgorithm": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "type",
              "data"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "single"
                ]
              },
              "data": {
                "$ref": "#/components/schemas/RoutableConnectorChoice"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "data"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "priority"
                ]
              },
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoutableConnectorChoice"
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "data"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "volume_split"
                ]
              },
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ConnectorVolumeSplit"
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "data"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "advanced"
                ]
              },
              "data": {
                "$ref": "#/components/schemas/ProgramConnectorSelection"
              }
            }
          }
        ],
        "description": "Routing Algorithm kind",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "RoutingAlgorithmKind": {
        "type": "string",
        "enum": [
          "single",
          "priority",
          "volume_split",
          "advanced"
        ]
      },
      "RoutingConfigRequest": {
        "type": "object",
        "required": [
          "name",
          "description",
          "algorithm",
          "profile_id"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "algorithm": {
            "$ref": "#/components/schemas/RoutingAlgorithm"
          },
          "profile_id": {
            "type": "string"
          }
        }
      },
      "RoutingDictionary": {
        "type": "object",
        "required": [
          "merchant_id",
          "records"
        ],
        "properties": {
          "merchant_id": {
            "type": "string"
          },
          "active_id": {
            "type": "string",
            "nullable": true
          },
          "records": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoutingDictionaryRecord"
            }
          }
        }
      },
      "RoutingDictionaryRecord": {
        "type": "object",
        "required": [
          "id",
          "profile_id",
          "name",
          "kind",
          "description",
          "created_at",
          "modified_at"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "profile_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "kind": {
            "$ref": "#/components/schemas/RoutingAlgorithmKind"
          },
          "description": {
            "type": "string"
          },
          "created_at": {
            "type": "integer",
            "format": "int64"
          },
          "modified_at": {
            "type": "integer",
            "format": "int64"
          },
          "algorithm_for": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionType"
              }
            ],
            "nullable": true
          }
        }
      },
      "RoutingKind": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/RoutingDictionary"
          },
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoutingDictionaryRecord"
            }
          }
        ]
      },
      "RoutingRetrieveResponse": {
        "type": "object",
        "description": "Response of the retrieved routing configs for a merchant account",
        "properties": {
          "algorithm": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantRoutingAlgorithm"
              }
            ],
            "nullable": true
          }
        }
      },
      "RuleConnectorSelection": {
        "type": "object",
        "description": "Represents a rule\n\n```text\nrule_name: [stripe, adyen, checkout]\n{\npayment.method = card {\npayment.method.cardtype = (credit, debit) {\npayment.method.network = (amex, rupay, diners)\n}\n\npayment.method.cardtype = credit\n}\n}\n```",
        "required": [
          "name",
          "connectorSelection",
          "statements"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "connectorSelection": {
            "$ref": "#/components/schemas/ConnectorSelection"
          },
          "statements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IfStatement"
            }
          }
        }
      },
      "SamsungPayWalletData": {
        "type": "object",
        "required": [
          "token"
        ],
        "properties": {
          "token": {
            "type": "string",
            "description": "The encrypted payment token from Samsung"
          }
        }
      },
      "SdkInformation": {
        "type": "object",
        "description": "SDK Information if request is from SDK",
        "required": [
          "sdk_app_id",
          "sdk_enc_data",
          "sdk_ephem_pub_key",
          "sdk_trans_id",
          "sdk_reference_number",
          "sdk_max_timeout"
        ],
        "properties": {
          "sdk_app_id": {
            "type": "string",
            "description": "Unique ID created on installations of the 3DS Requestor App on a Consumer Device"
          },
          "sdk_enc_data": {
            "type": "string",
            "description": "JWE Object containing data encrypted by the SDK for the DS to decrypt"
          },
          "sdk_ephem_pub_key": {
            "type": "object",
            "description": "Public key component of the ephemeral key pair generated by the 3DS SDK",
            "additionalProperties": {
              "type": "string"
            }
          },
          "sdk_trans_id": {
            "type": "string",
            "description": "Unique transaction identifier assigned by the 3DS SDK"
          },
          "sdk_reference_number": {
            "type": "string",
            "description": "Identifies the vendor and version for the 3DS SDK that is integrated in a 3DS Requestor App"
          },
          "sdk_max_timeout": {
            "type": "integer",
            "format": "int32",
            "description": "Indicates maximum amount of time in minutes",
            "minimum": 0
          }
        }
      },
      "SdkNextAction": {
        "type": "object",
        "required": [
          "next_action"
        ],
        "properties": {
          "next_action": {
            "$ref": "#/components/schemas/NextActionCall"
          }
        }
      },
      "SdkNextActionData": {
        "type": "object",
        "required": [
          "next_action"
        ],
        "properties": {
          "next_action": {
            "$ref": "#/components/schemas/NextActionCall"
          }
        }
      },
      "SecretInfoToInitiateSdk": {
        "type": "object",
        "required": [
          "display",
          "payment"
        ],
        "properties": {
          "display": {
            "type": "string"
          },
          "payment": {
            "type": "string"
          }
        }
      },
      "SepaAndBacsBillingDetails": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The Email ID for SEPA and BACS billing",
            "example": "example@me.com",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The billing name for SEPA and BACS billing",
            "example": "Jane Doe",
            "nullable": true
          }
        }
      },
      "SepaBankTransfer": {
        "type": "object",
        "required": [
          "iban",
          "bic"
        ],
        "properties": {
          "bank_name": {
            "type": "string",
            "description": "Bank name",
            "example": "Deutsche Bank",
            "nullable": true
          },
          "bank_country_code": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CountryAlpha2"
              }
            ],
            "nullable": true
          },
          "bank_city": {
            "type": "string",
            "description": "Bank city",
            "example": "California",
            "nullable": true
          },
          "iban": {
            "type": "string",
            "description": "International Bank Account Number (iban) - used in many countries for identifying a bank along with it's customer.",
            "example": "DE89370400440532013000"
          },
          "bic": {
            "type": "string",
            "description": "[8 / 11 digits] Bank Identifier Code (bic) / Swift Code - used in many countries for identifying a bank and it's branches",
            "example": "HSBCGB2LXXX"
          }
        }
      },
      "SepaBankTransferInstructions": {
        "type": "object",
        "required": [
          "account_holder_name",
          "bic",
          "country",
          "iban"
        ],
        "properties": {
          "account_holder_name": {
            "type": "string",
            "example": "Jane Doe"
          },
          "bic": {
            "type": "string",
            "example": "9123456789"
          },
          "country": {
            "type": "string"
          },
          "iban": {
            "type": "string",
            "example": "123456789"
          }
        }
      },
      "SessionToken": {
        "oneOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/GpaySessionTokenResponse"
              },
              {
                "type": "object",
                "required": [
                  "wallet_name"
                ],
                "properties": {
                  "wallet_name": {
                    "type": "string",
                    "enum": [
                      "google_pay"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/KlarnaSessionTokenResponse"
              },
              {
                "type": "object",
                "required": [
                  "wallet_name"
                ],
                "properties": {
                  "wallet_name": {
                    "type": "string",
                    "enum": [
                      "klarna"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaypalSessionTokenResponse"
              },
              {
                "type": "object",
                "required": [
                  "wallet_name"
                ],
                "properties": {
                  "wallet_name": {
                    "type": "string",
                    "enum": [
                      "paypal"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApplepaySessionTokenResponse"
              },
              {
                "type": "object",
                "required": [
                  "wallet_name"
                ],
                "properties": {
                  "wallet_name": {
                    "type": "string",
                    "enum": [
                      "apple_pay"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenBankingSessionToken"
              },
              {
                "type": "object",
                "required": [
                  "wallet_name"
                ],
                "properties": {
                  "wallet_name": {
                    "type": "string",
                    "enum": [
                      "open_banking"
                    ]
                  }
                }
              }
            ]
          },
          {
            "type": "object",
            "required": [
              "wallet_name"
            ],
            "properties": {
              "wallet_name": {
                "type": "string",
                "enum": [
                  "no_session_token_received"
                ]
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "wallet_name"
        }
      },
      "SessionTokenInfo": {
        "allOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentProcessingDetailsAt"
              }
            ],
            "nullable": true
          },
          {
            "type": "object",
            "required": [
              "certificate",
              "certificate_keys",
              "merchant_identifier",
              "display_name",
              "initiative"
            ],
            "properties": {
              "certificate": {
                "type": "string"
              },
              "certificate_keys": {
                "type": "string"
              },
              "merchant_identifier": {
                "type": "string"
              },
              "display_name": {
                "type": "string"
              },
              "initiative": {
                "$ref": "#/components/schemas/ApplepayInitiative"
              },
              "initiative_context": {
                "type": "string",
                "nullable": true
              },
              "merchant_business_country": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CountryAlpha2"
                  }
                ],
                "nullable": true
              }
            }
          }
        ]
      },
      "StraightThroughAlgorithm": {
        "oneOf": [
          {
            "type": "object",
            "title": "Single",
            "required": [
              "type",
              "data"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "single"
                ]
              },
              "data": {
                "$ref": "#/components/schemas/RoutableConnectorChoice"
              }
            }
          },
          {
            "type": "object",
            "title": "Priority",
            "required": [
              "type",
              "data"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "priority"
                ]
              },
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoutableConnectorChoice"
                }
              }
            }
          },
          {
            "type": "object",
            "title": "VolumeSplit",
            "required": [
              "type",
              "data"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "volume_split"
                ]
              },
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ConnectorVolumeSplit"
                }
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "type"
        }
      },
      "StripeChargeType": {
        "type": "string",
        "enum": [
          "direct",
          "destination"
        ]
      },
      "SurchargeDetailsResponse": {
        "type": "object",
        "required": [
          "surcharge",
          "display_surcharge_amount",
          "display_tax_on_surcharge_amount",
          "display_total_surcharge_amount",
          "display_final_amount"
        ],
        "properties": {
          "surcharge": {
            "$ref": "#/components/schemas/SurchargeResponse"
          },
          "tax_on_surcharge": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SurchargePercentage"
              }
            ],
            "nullable": true
          },
          "display_surcharge_amount": {
            "type": "number",
            "format": "double",
            "description": "surcharge amount for this payment"
          },
          "display_tax_on_surcharge_amount": {
            "type": "number",
            "format": "double",
            "description": "tax on surcharge amount for this payment"
          },
          "display_total_surcharge_amount": {
            "type": "number",
            "format": "double",
            "description": "sum of display_surcharge_amount and display_tax_on_surcharge_amount"
          },
          "display_final_amount": {
            "type": "number",
            "format": "double",
            "description": "sum of original amount,"
          }
        }
      },
      "SurchargePercentage": {
        "type": "object",
        "required": [
          "percentage"
        ],
        "properties": {
          "percentage": {
            "type": "number",
            "format": "float"
          }
        }
      },
      "SurchargeResponse": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "type",
              "value"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "fixed"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/MinorUnit"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "value"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "rate"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/SurchargePercentage"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "type"
        }
      },
      "SwishQrData": {
        "type": "object"
      },
      "ThirdPartySdkSessionResponse": {
        "type": "object",
        "required": [
          "secrets"
        ],
        "properties": {
          "secrets": {
            "$ref": "#/components/schemas/SecretInfoToInitiateSdk"
          }
        }
      },
      "ThreeDsCompletionIndicator": {
        "type": "string",
        "enum": [
          "Y",
          "N",
          "U"
        ]
      },
      "ThreeDsData": {
        "type": "object",
        "required": [
          "three_ds_authentication_url",
          "three_ds_authorize_url",
          "three_ds_method_details",
          "poll_config"
        ],
        "properties": {
          "three_ds_authentication_url": {
            "type": "string",
            "description": "ThreeDS authentication url - to initiate authentication"
          },
          "three_ds_authorize_url": {
            "type": "string",
            "description": "ThreeDS authorize url - to complete the payment authorization after authentication"
          },
          "three_ds_method_details": {
            "$ref": "#/components/schemas/ThreeDsMethodData"
          },
          "poll_config": {
            "$ref": "#/components/schemas/PollConfigResponse"
          },
          "message_version": {
            "type": "string",
            "description": "Message Version",
            "nullable": true
          },
          "directory_server_id": {
            "type": "string",
            "description": "Directory Server ID",
            "nullable": true
          }
        }
      },
      "ThreeDsMethodData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "three_ds_method_data_submission",
              "three_ds_method_key"
            ],
            "properties": {
              "three_ds_method_data_submission": {
                "type": "boolean",
                "description": "Whether ThreeDS method data submission is required"
              },
              "three_ds_method_data": {
                "type": "string",
                "description": "ThreeDS method data",
                "nullable": true
              },
              "three_ds_method_url": {
                "type": "string",
                "description": "ThreeDS method url",
                "nullable": true
              },
              "three_ds_method_key": {
                "type": "string",
                "enum": [
                  "threeDSMethodData"
                ]
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "three_ds_method_key"
        }
      },
      "TimeRange": {
        "type": "object",
        "required": [
          "start_time"
        ],
        "properties": {
          "start_time": {
            "type": "string",
            "format": "date-time",
            "description": "The start time to filter payments list or to get list of filters. To get list of filters start time is needed to be passed"
          },
          "end_time": {
            "type": "string",
            "format": "date-time",
            "description": "The end time to filter payments list or to get list of filters. If not passed the default time is now",
            "nullable": true
          }
        }
      },
      "ToggleBlocklistResponse": {
        "type": "object",
        "required": [
          "blocklist_guard_status"
        ],
        "properties": {
          "blocklist_guard_status": {
            "type": "string"
          }
        }
      },
      "ToggleKVRequest": {
        "type": "object",
        "required": [
          "kv_enabled"
        ],
        "properties": {
          "kv_enabled": {
            "type": "boolean",
            "description": "Status of KV for the specific merchant",
            "example": true
          }
        }
      },
      "ToggleKVResponse": {
        "type": "object",
        "required": [
          "merchant_id",
          "kv_enabled"
        ],
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "kv_enabled": {
            "type": "boolean",
            "description": "Status of KV for the specific merchant",
            "example": true
          }
        }
      },
      "TouchNGoRedirection": {
        "type": "object"
      },
      "TransactionStatus": {
        "type": "string",
        "description": "Indicates the transaction status",
        "enum": [
          "Y",
          "N",
          "U",
          "A",
          "R",
          "C",
          "D",
          "I"
        ]
      },
      "TransactionType": {
        "type": "string",
        "enum": [
          "payment",
          "payout"
        ]
      },
      "UpdateApiKeyRequest": {
        "type": "object",
        "description": "The request body for updating an API Key.",
        "properties": {
          "name": {
            "type": "string",
            "description": "A unique name for the API Key to help you identify it.",
            "example": "Sandbox integration key",
            "nullable": true,
            "maxLength": 64
          },
          "description": {
            "type": "string",
            "description": "A description to provide more context about the API Key.",
            "example": "Key used by our developers to integrate with the sandbox environment",
            "nullable": true,
            "maxLength": 256
          },
          "expiration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiKeyExpiration"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpiCollectData": {
        "type": "object",
        "properties": {
          "vpa_id": {
            "type": "string",
            "example": "successtest@iata",
            "nullable": true
          }
        }
      },
      "UpiData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "upi_collect"
            ],
            "properties": {
              "upi_collect": {
                "$ref": "#/components/schemas/UpiCollectData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "upi_intent"
            ],
            "properties": {
              "upi_intent": {
                "$ref": "#/components/schemas/UpiIntentData"
              }
            }
          }
        ]
      },
      "UpiIntentData": {
        "type": "object"
      },
      "ValueType": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "type",
              "value"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "number"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/MinorUnit"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "value"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "enum_variant"
                ]
              },
              "value": {
                "type": "string",
                "description": "Represents an enum variant"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "value"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "metadata_variant"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/MetadataValue"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "value"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "str_value"
                ]
              },
              "value": {
                "type": "string",
                "description": "Represents a arbitrary String value"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "value"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "number_array"
                ]
              },
              "value": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MinorUnit"
                },
                "description": "Represents an array of numbers. This is basically used for\n\"one of the given numbers\" operations\neg: payment.method.amount = (1, 2, 3)"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "value"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "enum_variant_array"
                ]
              },
              "value": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Similar to NumberArray but for enum variants\neg: payment.method.cardtype = (debit, credit)"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "value"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "number_comparison_array"
                ]
              },
              "value": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NumberComparison"
                },
                "description": "Like a number array but can include comparisons. Useful for\nconditions like \"500 < amount < 1000\"\neg: payment.amount = (> 500, < 1000)"
              }
            }
          }
        ],
        "description": "Represents a value in the DSL",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Venmo": {
        "type": "object",
        "required": [
          "telephone_number"
        ],
        "properties": {
          "telephone_number": {
            "type": "string",
            "description": "mobile number linked to venmo account",
            "example": "16608213349"
          }
        }
      },
      "VoucherData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "boleto"
            ],
            "properties": {
              "boleto": {
                "$ref": "#/components/schemas/BoletoVoucherData"
              }
            }
          },
          {
            "type": "string",
            "enum": [
              "efecty"
            ]
          },
          {
            "type": "string",
            "enum": [
              "pago_efectivo"
            ]
          },
          {
            "type": "string",
            "enum": [
              "red_compra"
            ]
          },
          {
            "type": "string",
            "enum": [
              "red_pagos"
            ]
          },
          {
            "type": "object",
            "required": [
              "alfamart"
            ],
            "properties": {
              "alfamart": {
                "$ref": "#/components/schemas/AlfamartVoucherData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "indomaret"
            ],
            "properties": {
              "indomaret": {
                "$ref": "#/components/schemas/IndomaretVoucherData"
              }
            }
          },
          {
            "type": "string",
            "enum": [
              "oxxo"
            ]
          },
          {
            "type": "object",
            "required": [
              "seven_eleven"
            ],
            "properties": {
              "seven_eleven": {
                "$ref": "#/components/schemas/JCSVoucherData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "lawson"
            ],
            "properties": {
              "lawson": {
                "$ref": "#/components/schemas/JCSVoucherData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "mini_stop"
            ],
            "properties": {
              "mini_stop": {
                "$ref": "#/components/schemas/JCSVoucherData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "family_mart"
            ],
            "properties": {
              "family_mart": {
                "$ref": "#/components/schemas/JCSVoucherData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "seicomart"
            ],
            "properties": {
              "seicomart": {
                "$ref": "#/components/schemas/JCSVoucherData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "pay_easy"
            ],
            "properties": {
              "pay_easy": {
                "$ref": "#/components/schemas/JCSVoucherData"
              }
            }
          }
        ]
      },
      "Wallet": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "paypal"
            ],
            "properties": {
              "paypal": {
                "$ref": "#/components/schemas/Paypal"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "venmo"
            ],
            "properties": {
              "venmo": {
                "$ref": "#/components/schemas/Venmo"
              }
            }
          }
        ]
      },
      "WalletData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "ali_pay_qr"
            ],
            "properties": {
              "ali_pay_qr": {
                "$ref": "#/components/schemas/AliPayQr"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "ali_pay_redirect"
            ],
            "properties": {
              "ali_pay_redirect": {
                "$ref": "#/components/schemas/AliPayRedirection"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "ali_pay_hk_redirect"
            ],
            "properties": {
              "ali_pay_hk_redirect": {
                "$ref": "#/components/schemas/AliPayHkRedirection"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "momo_redirect"
            ],
            "properties": {
              "momo_redirect": {
                "$ref": "#/components/schemas/MomoRedirection"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "kakao_pay_redirect"
            ],
            "properties": {
              "kakao_pay_redirect": {
                "$ref": "#/components/schemas/KakaoPayRedirection"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "go_pay_redirect"
            ],
            "properties": {
              "go_pay_redirect": {
                "$ref": "#/components/schemas/GoPayRedirection"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "gcash_redirect"
            ],
            "properties": {
              "gcash_redirect": {
                "$ref": "#/components/schemas/GcashRedirection"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "apple_pay"
            ],
            "properties": {
              "apple_pay": {
                "$ref": "#/components/schemas/ApplePayWalletData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "apple_pay_redirect"
            ],
            "properties": {
              "apple_pay_redirect": {
                "$ref": "#/components/schemas/ApplePayRedirectData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "apple_pay_third_party_sdk"
            ],
            "properties": {
              "apple_pay_third_party_sdk": {
                "$ref": "#/components/schemas/ApplePayThirdPartySdkData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "dana_redirect"
            ],
            "properties": {
              "dana_redirect": {
                "type": "object",
                "description": "Wallet data for DANA redirect flow"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "google_pay"
            ],
            "properties": {
              "google_pay": {
                "$ref": "#/components/schemas/GooglePayWalletData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "google_pay_redirect"
            ],
            "properties": {
              "google_pay_redirect": {
                "$ref": "#/components/schemas/GooglePayRedirectData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "google_pay_third_party_sdk"
            ],
            "properties": {
              "google_pay_third_party_sdk": {
                "$ref": "#/components/schemas/GooglePayThirdPartySdkData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "mb_way_redirect"
            ],
            "properties": {
              "mb_way_redirect": {
                "$ref": "#/components/schemas/MbWayRedirection"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "mobile_pay_redirect"
            ],
            "properties": {
              "mobile_pay_redirect": {
                "$ref": "#/components/schemas/MobilePayRedirection"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "paypal_redirect"
            ],
            "properties": {
              "paypal_redirect": {
                "$ref": "#/components/schemas/PaypalRedirection"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "paypal_sdk"
            ],
            "properties": {
              "paypal_sdk": {
                "$ref": "#/components/schemas/PayPalWalletData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "samsung_pay"
            ],
            "properties": {
              "samsung_pay": {
                "$ref": "#/components/schemas/SamsungPayWalletData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "twint_redirect"
            ],
            "properties": {
              "twint_redirect": {
                "type": "object",
                "description": "Wallet data for Twint Redirection"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "vipps_redirect"
            ],
            "properties": {
              "vipps_redirect": {
                "type": "object",
                "description": "Wallet data for Vipps Redirection"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "touch_n_go_redirect"
            ],
            "properties": {
              "touch_n_go_redirect": {
                "$ref": "#/components/schemas/TouchNGoRedirection"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "we_chat_pay_redirect"
            ],
            "properties": {
              "we_chat_pay_redirect": {
                "$ref": "#/components/schemas/WeChatPayRedirection"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "we_chat_pay_qr"
            ],
            "properties": {
              "we_chat_pay_qr": {
                "$ref": "#/components/schemas/WeChatPayQr"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "cashapp_qr"
            ],
            "properties": {
              "cashapp_qr": {
                "$ref": "#/components/schemas/CashappQr"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "swish_qr"
            ],
            "properties": {
              "swish_qr": {
                "$ref": "#/components/schemas/SwishQrData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "mifinity"
            ],
            "properties": {
              "mifinity": {
                "$ref": "#/components/schemas/MifinityData"
              }
            }
          }
        ]
      },
      "WeChatPay": {
        "type": "object"
      },
      "WeChatPayQr": {
        "type": "object"
      },
      "WeChatPayRedirection": {
        "type": "object"
      },
      "WebhookDeliveryAttempt": {
        "type": "string",
        "enum": [
          "initial_attempt",
          "automatic_retry",
          "manual_retry"
        ]
      },
      "WebhookDetails": {
        "type": "object",
        "properties": {
          "webhook_version": {
            "type": "string",
            "description": "The version for Webhook",
            "example": "1.0.2",
            "nullable": true,
            "maxLength": 255
          },
          "webhook_username": {
            "type": "string",
            "description": "The user name for Webhook login",
            "example": "ekart_retail",
            "nullable": true,
            "maxLength": 255
          },
          "webhook_password": {
            "type": "string",
            "description": "The password for Webhook login",
            "example": "ekart@123",
            "nullable": true,
            "maxLength": 255
          },
          "webhook_url": {
            "type": "string",
            "description": "The url for the webhook endpoint",
            "example": "www.ekart.com/webhooks",
            "nullable": true
          },
          "payment_created_enabled": {
            "type": "boolean",
            "description": "If this property is true, a webhook message is posted whenever a new payment is created",
            "example": true,
            "nullable": true
          },
          "payment_succeeded_enabled": {
            "type": "boolean",
            "description": "If this property is true, a webhook message is posted whenever a payment is successful",
            "example": true,
            "nullable": true
          },
          "payment_failed_enabled": {
            "type": "boolean",
            "description": "If this property is true, a webhook message is posted whenever a payment fails",
            "example": true,
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "admin_api_key": {
        "type": "apiKey",
        "in": "header",
        "name": "api-key",
        "description": "Admin API keys allow you to perform some privileged actions such as creating a merchant account and Merchant Connector account."
      },
      "api_key": {
        "type": "apiKey",
        "in": "header",
        "name": "api-key",
        "description": "Use the API key created under your merchant account from the HyperSwitch dashboard. API key is used to authenticate API requests from your merchant server only. Don't expose this key on a website or embed it in a mobile application."
      },
      "ephemeral_key": {
        "type": "apiKey",
        "in": "header",
        "name": "api-key",
        "description": "Ephemeral keys provide temporary access to singular data, such as access to a single customer object for a short period of time."
      },
      "publishable_key": {
        "type": "apiKey",
        "in": "header",
        "name": "api-key",
        "description": "Publishable keys are a type of keys that can be public and have limited scope of usage."
      }
    }
  },
  "tags": [
    {
      "name": "Merchant Account",
      "description": "Create and manage merchant accounts"
    },
    {
      "name": "Business Profile",
      "description": "Create and manage business profiles"
    },
    {
      "name": "Merchant Connector Account",
      "description": "Create and manage merchant connector accounts"
    },
    {
      "name": "Payments",
      "description": "Create and manage one-time payments, recurring payments and mandates"
    },
    {
      "name": "Refunds",
      "description": "Create and manage refunds for successful payments"
    },
    {
      "name": "Mandates",
      "description": "Manage mandates"
    },
    {
      "name": "Customers",
      "description": "Create and manage customers"
    },
    {
      "name": "Payment Methods",
      "description": "Create and manage payment methods of customers"
    },
    {
      "name": "Disputes",
      "description": "Manage disputes"
    },
    {
      "name": "API Key",
      "description": "Create and manage API Keys"
    },
    {
      "name": "Payouts",
      "description": "Create and manage payouts"
    },
    {
      "name": "payment link",
      "description": "Create payment link"
    },
    {
      "name": "Routing",
      "description": "Create and manage routing configurations"
    },
    {
      "name": "Event",
      "description": "Manage events"
    }
  ]
}