{
  "openapi": "3.1.0",
  "info": {
    "title": "Hyperswitch - API Documentation",
    "description": "\n## Get started\n\nHyperswitch provides a collection of APIs that enable you to process and manage payments.\nOur APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.\n\nYou can consume the APIs directly using your favorite HTTP/REST library.\n\nWe have a testing environment referred to \"sandbox\", which you can setup to test API calls without\naffecting production data.\nCurrently, our sandbox environment is live while our production environment is under development\nand will be available soon.\nYou can sign up on our Dashboard to get API keys to access Hyperswitch API.\n\n### Environment\n\nUse the following base URLs when making requests to the APIs:\n\n| Environment   |  Base URL                          |\n|---------------|------------------------------------|\n| Sandbox       | <https://sandbox.hyperswitch.io>   |\n| Production    | <https://api.hyperswitch.io>       |\n\n## Authentication\n\nWhen you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant\naccount, you are given a secret key (also referred as api-key) and a publishable key.\nYou may authenticate all API requests with Hyperswitch server by providing the appropriate key in\nthe request Authorization header.\n\n| Key             |  Description                                                                                  |\n|-----------------|-----------------------------------------------------------------------------------------------|\n| api-key         | Private key. Used to authenticate all API requests from your merchant server                  |\n| publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |\n\nNever share your secret api keys. Keep them guarded and secure.\n",
    "contact": {
      "name": "Hyperswitch Support",
      "url": "https://hyperswitch.io",
      "email": "hyperswitch@juspay.in"
    },
    "license": {
      "name": "Apache-2.0",
      "identifier": "Apache-2.0"
    },
    "version": "0.1.0"
  },
  "servers": [
    {
      "url": "https://sandbox.hyperswitch.io",
      "description": "Sandbox Environment"
    }
  ],
  "paths": {
    "/v2/organization": {
      "post": {
        "tags": [
          "Organization"
        ],
        "summary": "Organization - Create",
        "description": "Create a new organization",
        "operationId": "Create an Organization",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationCreateRequest"
              },
              "examples": {
                "Create an organization with organization_name": {
                  "value": {
                    "organization_name": "organization_abc"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Organization Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      }
    },
    "/v2/organization/{id}": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Organization - Retrieve",
        "description": "Retrieve an existing organization",
        "operationId": "Retrieve an Organization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      },
      "put": {
        "tags": [
          "Organization"
        ],
        "summary": "Organization - Update",
        "description": "Create a new organization for .",
        "operationId": "Update an Organization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationUpdateRequest"
              },
              "examples": {
                "Update organization_name of the organization": {
                  "value": {
                    "organization_name": "organization_abcd"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Organization Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      }
    },
    "/v2/organization/{id}/merchant-accounts": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Organization - Merchant Account - List",
        "description": "List merchant accounts for an Organization",
        "operationId": "List Merchant Accounts",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Merchant Account list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MerchantAccountResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid data"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      }
    },
    "/v2/connector-accounts": {
      "post": {
        "tags": [
          "Merchant Connector Account"
        ],
        "summary": "Connector Account - Create",
        "description": "Creates a new Connector Account for the merchant account. The connector could be a payment processor/facilitator/acquirer or a provider of specialized services like Fraud/Accounting etc.",
        "operationId": "Create a Merchant Connector",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantConnectorCreate"
              },
              "examples": {
                "Create a merchant account with custom connector label": {
                  "value": {
                    "connector_account_details": {
                      "api_key": "{{adyen-api-key}}",
                      "auth_type": "BodyKey",
                      "key1": "{{adyen_merchant_account}}"
                    },
                    "connector_label": "EU_adyen",
                    "connector_name": "adyen",
                    "connector_type": "payment_processor"
                  }
                },
                "Create a merchant connector account under a specific profile": {
                  "value": {
                    "connector_account_details": {
                      "api_key": "{{adyen-api-key}}",
                      "auth_type": "BodyKey",
                      "key1": "{{adyen_merchant_account}}"
                    },
                    "connector_name": "adyen",
                    "connector_type": "payment_processor",
                    "profile_id": "{{profile_id}}"
                  }
                },
                "Create a merchant connector account with minimal fields": {
                  "value": {
                    "connector_account_details": {
                      "api_key": "{{adyen-api-key}}",
                      "auth_type": "BodyKey",
                      "key1": "{{adyen_merchant_account}}"
                    },
                    "connector_name": "adyen",
                    "connector_type": "payment_processor"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Merchant Connector Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantConnectorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing Mandatory fields"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      }
    },
    "/v2/connector-accounts/{id}": {
      "get": {
        "tags": [
          "Merchant Connector Account"
        ],
        "summary": "Connector Account - Retrieve",
        "description": "Retrieves details of a Connector account",
        "operationId": "Retrieve a Merchant Connector",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the Merchant Connector",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Merchant Connector retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantConnectorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "404": {
            "description": "Merchant Connector does not exist in records"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      },
      "put": {
        "tags": [
          "Merchant Connector Account"
        ],
        "summary": "Connector Account - Update",
        "description": "To update an existing Connector account. Helpful in enabling/disabling different payment methods and other settings for the connector",
        "operationId": "Update a Merchant Connector",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the Merchant Connector",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantConnectorUpdate"
              },
              "examples": {
                "Enable card payment method": {
                  "value": {
                    "connector_type": "payment_processor",
                    "payment_methods_enabled": [
                      {
                        "payment_method": "card"
                      }
                    ]
                  }
                },
                "Update webhook secret": {
                  "value": {
                    "connector_webhook_details": {
                      "merchant_secret": "{{webhook_secret}}"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Merchant Connector Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantConnectorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "404": {
            "description": "Merchant Connector does not exist in records"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Merchant Connector Account"
        ],
        "summary": "Merchant Connector - Delete",
        "description": "Delete or Detach a Merchant Connector from Merchant Account",
        "operationId": "Delete a Merchant Connector",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the Merchant Connector",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Merchant Connector Deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantConnectorDeleteResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "404": {
            "description": "Merchant Connector does not exist in records"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      }
    },
    "/v2/merchant-accounts": {
      "post": {
        "tags": [
          "Merchant Account"
        ],
        "summary": "Merchant Account - Create",
        "description": "Create a new account for a *merchant* and the *merchant* could be a seller or retailer or client who likes to receive and send payments.\n\nBefore creating the merchant account, it is mandatory to create an organization.",
        "operationId": "Create a Merchant Account",
        "parameters": [
          {
            "name": "X-Organization-Id",
            "in": "header",
            "description": "Organization ID for which the merchant account has to be created.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": {
              "X-Organization-Id": "org_abcdefghijklmnop"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantAccountCreate"
              },
              "examples": {
                "Create a merchant account with merchant details": {
                  "value": {
                    "merchant_details": {
                      "primary_contact_person": "John Doe",
                      "primary_email": "example@company.com"
                    },
                    "merchant_name": "Cloth Store"
                  }
                },
                "Create a merchant account with metadata": {
                  "value": {
                    "merchant_name": "Cloth Store",
                    "metadata": {
                      "key_1": "John Doe",
                      "key_2": "Trends"
                    }
                  }
                },
                "Create a merchant account with minimal fields": {
                  "value": {
                    "merchant_name": "Cloth Store"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Merchant Account Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantAccountResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      }
    },
    "/v2/merchant-accounts/{id}": {
      "get": {
        "tags": [
          "Merchant Account"
        ],
        "summary": "Merchant Account - Retrieve",
        "description": "Retrieve a *merchant* account details.",
        "operationId": "Retrieve a Merchant Account",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the merchant account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Merchant Account Retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantAccountResponse"
                }
              }
            }
          },
          "404": {
            "description": "Merchant account not found"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      },
      "put": {
        "tags": [
          "Merchant Account"
        ],
        "summary": "Merchant Account - Update",
        "description": "Updates details of an existing merchant account. Helpful in updating merchant details such as email, contact details, or other configuration details like webhook, routing algorithm etc",
        "operationId": "Update a Merchant Account",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the merchant account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantAccountUpdate"
              },
              "examples": {
                "Update Merchant Details": {
                  "value": {
                    "merchant_details": {
                      "primary_contact_person": "John Doe",
                      "primary_email": "example@company.com"
                    }
                  }
                },
                "Update merchant name": {
                  "value": {
                    "merchant_id": "merchant_abc",
                    "merchant_name": "merchant_name"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Merchant Account Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantAccountResponse"
                }
              }
            }
          },
          "404": {
            "description": "Merchant account not found"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      }
    },
    "/v2/merchant-accounts/{id}/profiles": {
      "get": {
        "tags": [
          "Merchant Account"
        ],
        "summary": "Merchant Account - Profile List",
        "description": "List profiles for an Merchant",
        "operationId": "List Profiles",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the Merchant",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "profile list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProfileResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid data"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      }
    },
    "/v2/profiles": {
      "post": {
        "tags": [
          "Profile"
        ],
        "summary": "Profile - Create",
        "description": "Creates a new *profile* for a merchant",
        "operationId": "Create A Profile",
        "parameters": [
          {
            "name": "X-Merchant-Id",
            "in": "header",
            "description": "Merchant ID of the profile.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": {
              "X-Merchant-Id": "abc_iG5VNjsN9xuCg7Xx0uWh"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfileCreate"
              },
              "examples": {
                "Create a profile with profile name": {
                  "value": {
                    "profile_name": "shoe_business"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Account Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      }
    },
    "/v2/profiles/{id}": {
      "get": {
        "tags": [
          "Profile"
        ],
        "summary": "Profile - Retrieve",
        "description": "Retrieve existing *profile*",
        "operationId": "Retrieve a Profile",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the profile",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Merchant-Id",
            "in": "header",
            "description": "Merchant ID of the profile.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": {
              "X-Merchant-Id": "abc_iG5VNjsN9xuCg7Xx0uWh"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Profile Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      },
      "put": {
        "tags": [
          "Profile"
        ],
        "summary": "Profile - Update",
        "description": "Update the *profile*",
        "operationId": "Update a Profile",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the profile",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Merchant-Id",
            "in": "header",
            "description": "Merchant ID of the profile.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": {
              "X-Merchant-Id": "abc_iG5VNjsN9xuCg7Xx0uWh"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfileCreate"
              },
              "examples": {
                "Update profile with profile name fields": {
                  "value": {
                    "profile_name": "shoe_business"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Profile Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      }
    },
    "/v2/profiles/{id}/connector-accounts": {
      "get": {
        "tags": [
          "Business Profile"
        ],
        "summary": "Profile - Connector Accounts List",
        "description": "List Connector Accounts for the profile",
        "operationId": "List all Merchant Connectors for Profile",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the business profile",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Merchant-Id",
            "in": "header",
            "description": "Merchant ID of the profile.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": {
              "X-Merchant-Id": "abc_iG5VNjsN9xuCg7Xx0uWh"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Merchant Connector list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MerchantConnectorResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "404": {
            "description": "Merchant Connector does not exist in records"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      }
    },
    "/v2/profiles/{id}/activate-routing-algorithm": {
      "patch": {
        "tags": [
          "Profile"
        ],
        "summary": "Profile - Activate routing algorithm",
        "description": "Activates a routing algorithm under a profile",
        "operationId": "Activates a routing algorithm under a profile",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the profile",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoutingAlgorithmId"
              },
              "examples": {
                "Activate a routing algorithm": {
                  "value": {
                    "routing_algorithm_id": "routing_algorithm_123"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Routing Algorithm is activated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoutingDictionaryRecord"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Resource missing"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "jwt_key": []
          }
        ]
      }
    },
    "/v2/profiles/{id}/deactivate-routing-algorithm": {
      "patch": {
        "tags": [
          "Profile"
        ],
        "summary": "Profile - Deactivate routing algorithm",
        "description": "Deactivates a routing algorithm under a profile",
        "operationId": " Deactivates a routing algorithm under a profile",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the profile",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deactivated routing config",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoutingDictionaryRecord"
                }
              }
            }
          },
          "400": {
            "description": "Malformed request"
          },
          "403": {
            "description": "Malformed request"
          },
          "422": {
            "description": "Unprocessable request"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "jwt_key": []
          }
        ]
      }
    },
    "/v2/profiles/{id}/fallback-routing": {
      "get": {
        "tags": [
          "Profile"
        ],
        "summary": "Profile - Retrieve Default Fallback Routing Algorithm",
        "description": "Retrieve the default fallback routing algorithm for the profile",
        "operationId": "Retrieve the default fallback routing algorithm for the profile",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the profile",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved default fallback routing algorithm",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoutableConnectorChoice"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "jwt_key": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Profile"
        ],
        "summary": "Profile - Update Default Fallback Routing Algorithm",
        "description": "Update the default fallback routing algorithm for the profile",
        "operationId": "Update the default fallback routing algorithm for the profile",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the profile",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoutableConnectorChoice"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated the default fallback routing algorithm",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoutableConnectorChoice"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Malformed request"
          },
          "422": {
            "description": "Unprocessable request"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "jwt_key": []
          }
        ]
      }
    },
    "/v2/profiles/{id}/routing-algorithm": {
      "get": {
        "tags": [
          "Profile"
        ],
        "summary": " Profile - Retrieve Active Routing Algorithm\n_\n Retrieve active routing algorithm under the profile",
        "operationId": "Retrieve the active routing algorithm under the profile",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the profile",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of records of the algorithms to be returned",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The record offset of the algorithm from which to start gathering the results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved active config",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkedRoutingConfigRetrieveResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource missing"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "jwt_key": []
          }
        ]
      }
    },
    "/v2/routing-algorithm": {
      "post": {
        "tags": [
          "Routing"
        ],
        "summary": "Routing - Create",
        "description": "Create a routing algorithm",
        "operationId": "Create a routing algorithm",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoutingConfigRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Routing Algorithm created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoutingDictionaryRecord"
                }
              }
            }
          },
          "400": {
            "description": "Request body is malformed"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource missing"
          },
          "422": {
            "description": "Unprocessable request"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "jwt_key": []
          }
        ]
      }
    },
    "/v2/routing-algorithm/{id}": {
      "get": {
        "tags": [
          "Routing"
        ],
        "summary": "Routing - Retrieve",
        "description": "Retrieve a routing algorithm with its algorithm id",
        "operationId": "Retrieve a routing algorithm with its algorithm id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for a routing algorithm",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched routing algorithm",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantRoutingAlgorithm"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource missing"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "jwt_key": []
          }
        ]
      }
    },
    "/v2/api-keys": {
      "post": {
        "tags": [
          "API Key"
        ],
        "summary": "API Key - Create",
        "description": "Create a new API Key for accessing our APIs from your servers. The plaintext API Key will be\ndisplayed only once on creation, so ensure you store it securely.",
        "operationId": "Create an API Key",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateApiKeyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API Key created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateApiKeyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      }
    },
    "/v2/api-keys/{id}": {
      "get": {
        "tags": [
          "API Key"
        ],
        "summary": "API Key - Retrieve",
        "description": "Retrieve information about the specified API Key.",
        "operationId": "Retrieve an API Key",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the API Key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API Key retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RetrieveApiKeyResponse"
                }
              }
            }
          },
          "404": {
            "description": "API Key not found"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      },
      "put": {
        "tags": [
          "API Key"
        ],
        "summary": "API Key - Update",
        "description": "Update information for the specified API Key.",
        "operationId": "Update an API Key",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the API Key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateApiKeyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API Key updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RetrieveApiKeyResponse"
                }
              }
            }
          },
          "404": {
            "description": "API Key not found"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "API Key"
        ],
        "summary": "API Key - Revoke",
        "description": "Revoke the specified API Key. Once revoked, the API Key can no longer be used for\nauthenticating with our APIs.",
        "operationId": "Revoke an API Key",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the API Key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API Key revoked",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RevokeApiKeyResponse"
                }
              }
            }
          },
          "404": {
            "description": "API Key not found"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      }
    },
    "/v2/api-keys/list": {
      "get": {
        "tags": [
          "API Key"
        ],
        "summary": "API Key - List",
        "description": "List all the API Keys associated to a merchant account.",
        "operationId": "List all API Keys associated with a merchant account",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of API Keys to include in the response",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of API Keys to skip when retrieving the list of API keys.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of API Keys retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RetrieveApiKeyResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      }
    },
    "/v2/customers": {
      "post": {
        "tags": [
          "Customers"
        ],
        "summary": "Customers - Create",
        "description": "Creates a customer object and stores the customer details to be reused for future payments.\nIncase the customer already exists in the system, this API will respond with the customer details.",
        "operationId": "Create a Customer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerRequest"
              },
              "examples": {
                "Create a customer with name and email": {
                  "value": {
                    "email": "guest@example.com",
                    "name": "John Doe"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Customer Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/v2/customers/{id}": {
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Customers - Retrieve",
        "description": "Retrieves a customer's details.",
        "operationId": "Retrieve a Customer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the Customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer Retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResponse"
                }
              }
            }
          },
          "404": {
            "description": "Customer was not found"
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "ephemeral_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Customers"
        ],
        "summary": "Customers - Update",
        "description": "Updates the customer's details in a customer object.",
        "operationId": "Update a Customer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the Customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerUpdateRequest"
              },
              "examples": {
                "Update name and email of a customer": {
                  "value": {
                    "email": "guest@example.com",
                    "name": "John Doe"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Customer was Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResponse"
                }
              }
            }
          },
          "404": {
            "description": "Customer was not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Customers"
        ],
        "summary": "Customers - Delete",
        "description": "Delete a customer record.",
        "operationId": "Delete a Customer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the Customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer was Deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerDeleteResponse"
                }
              }
            }
          },
          "404": {
            "description": "Customer was not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/v2/customers/list": {
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Customers - List",
        "description": "Lists all the customers for a particular merchant id.",
        "operationId": "List all Customers for a Merchant",
        "responses": {
          "200": {
            "description": "Customers retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid Data"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/v2/payments/create-intent": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Payments - Create Intent",
        "description": "**Creates a payment intent object when amount_details are passed.**\n\nYou will require the 'API - Key' from the Hyperswitch dashboard to make the first call, and use the 'client secret' returned in this API along with your 'publishable key' to make subsequent API calls from your client.",
        "operationId": "Create a Payment Intent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentsCreateIntentRequest"
              },
              "examples": {
                "Create a payment intent with minimal fields": {
                  "value": {
                    "amount_details": {
                      "currency": "USD",
                      "order_amount": 6540
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payment created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsIntentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing Mandatory fields"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/v2/payments/{id}/get-intent": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Payments - Get Intent",
        "description": "**Get a payment intent object when id is passed in path**\n\nYou will require the 'API - Key' from the Hyperswitch dashboard to make the call.",
        "operationId": "Get the Payment Intent details",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the Payment Intent",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment Intent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsIntentResponse"
                }
              }
            }
          },
          "404": {
            "description": "Payment Intent not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/v2/payments/{id}/update-intent": {
      "put": {
        "tags": [
          "Payments"
        ],
        "summary": "Payments - Update Intent",
        "description": "**Update a payment intent object**\n\nYou will require the 'API - Key' from the Hyperswitch dashboard to make the call.",
        "operationId": "Update a Payment Intent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the Payment Intent",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Profile-Id",
            "in": "header",
            "description": "Profile ID associated to the payment intent",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "pro_abcdefghijklmnop"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentsUpdateIntentRequest"
              },
              "examples": {
                "Update a payment intent with minimal fields": {
                  "value": {
                    "amount_details": {
                      "currency": "USD",
                      "order_amount": 6540
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payment Intent Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsIntentResponse"
                }
              }
            }
          },
          "404": {
            "description": "Payment Intent Not Found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/v2/payments/{id}/confirm-intent": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Payments - Confirm Intent",
        "description": "**Confirms a payment intent object with the payment method data**\n\n.",
        "operationId": "Confirm Payment Intent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the Payment Intent",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Profile-Id",
            "in": "header",
            "description": "Profile ID associated to the payment intent",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "pro_abcdefghijklmnop"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentsConfirmIntentRequest"
              },
              "examples": {
                "Confirm the payment intent with card details": {
                  "value": {
                    "payment_method_data": {
                      "card": {
                        "card_cvc": "123",
                        "card_exp_month": "10",
                        "card_exp_year": "25",
                        "card_holder_name": "joseph Doe",
                        "card_number": "4242424242424242"
                      }
                    },
                    "payment_method_subtype": "credit",
                    "payment_method_type": "card"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payment created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing Mandatory fields"
          }
        },
        "security": [
          {
            "publishable_key": []
          }
        ]
      }
    },
    "/v2/payments/{id}": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Payments - Get",
        "description": "Retrieves a Payment. This API can also be used to get the status of a previously initiated payment or next action for an ongoing payment",
        "operationId": "Retrieve a Payment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The global payment id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force_sync",
            "in": "query",
            "description": "A boolean to indicate whether to force sync the payment status. Value can be true or false",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ForceSync"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Gets the payment with final status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsResponse"
                }
              }
            }
          },
          "404": {
            "description": "No payment found with the given id"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/v2/payments": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Payments - Create and Confirm Intent",
        "description": "**Creates and confirms a payment intent object when the amount and payment method information are passed.**\n\nYou will require the 'API - Key' from the Hyperswitch dashboard to make the call.",
        "operationId": "Create and Confirm Payment Intent",
        "parameters": [
          {
            "name": "X-Profile-Id",
            "in": "header",
            "description": "Profile ID associated to the payment intent",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "pro_abcdefghijklmnop"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentsRequest"
              },
              "examples": {
                "Create and confirm the payment intent with amount and card details": {
                  "value": {
                    "amount_details": {
                      "currency": "USD",
                      "order_amount": 6540
                    },
                    "payment_method_data": {
                      "card": {
                        "card_cvc": "123",
                        "card_exp_month": "10",
                        "card_exp_year": "25",
                        "card_holder_name": "joseph Doe",
                        "card_number": "4242424242424242"
                      }
                    },
                    "payment_method_subtype": "credit",
                    "payment_method_type": "card"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payment created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing Mandatory fields"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/v2/payments/{payment_id}/create-external-sdk-tokens": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Payments - Session token",
        "description": "Creates a session object or a session token for wallets like Apple Pay, Google Pay, etc. These tokens are used by Hyperswitch's SDK to initiate these wallets' SDK.",
        "operationId": "Create V2 Session tokens for a Payment",
        "parameters": [
          {
            "name": "payment_id",
            "in": "path",
            "description": "The identifier for payment",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentsSessionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payment session object created or session token was retrieved from wallets",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsSessionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing mandatory fields"
          }
        },
        "security": [
          {
            "publishable_key": []
          }
        ]
      }
    },
    "/v2/payments/{id}/payment-methods": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Payments - Payment Methods List",
        "description": "List the payment methods eligible for a payment. This endpoint also returns the saved payment methods for the customer when the customer_id is passed when creating the payment",
        "operationId": "Retrieve Payment methods for a Payment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The global payment id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Profile-Id",
            "in": "header",
            "description": "Profile ID associated to the payment intent",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "pro_abcdefghijklmnop"
          }
        ],
        "responses": {
          "200": {
            "description": "Get the payment methods",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodListResponseForPayments"
                }
              }
            }
          },
          "404": {
            "description": "No payment found with the given id"
          }
        },
        "security": [
          {
            "publishable_key": []
          }
        ]
      }
    },
    "/v2/payments/list": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Payments - List",
        "description": "To list the *payments*",
        "operationId": "List all Payments",
        "parameters": [
          {
            "name": "payment_id",
            "in": "path",
            "description": "The identifier for payment",
            "required": true,
            "schema": {
              "type": [
                "string",
                "null"
              ]
            },
            "example": "pay_fafa124123"
          },
          {
            "name": "profile_id",
            "in": "path",
            "description": "The identifier for business profile",
            "required": true,
            "schema": {
              "type": [
                "string",
                "null"
              ]
            },
            "example": "pay_fafa124123"
          },
          {
            "name": "customer_id",
            "in": "path",
            "description": "The identifier for customer",
            "required": true,
            "schema": {
              "type": [
                "string",
                "null"
              ],
              "maxLength": 64,
              "minLength": 1
            },
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44"
          },
          {
            "name": "starting_after",
            "in": "path",
            "description": "A cursor for use in pagination, fetch the next list after some object",
            "required": true,
            "schema": {
              "type": [
                "string",
                "null"
              ]
            },
            "example": "pay_fafa124123"
          },
          {
            "name": "ending_before",
            "in": "path",
            "description": "A cursor for use in pagination, fetch the previous list before some object",
            "required": true,
            "schema": {
              "type": [
                "string",
                "null"
              ]
            },
            "example": "pay_fafa124123"
          },
          {
            "name": "limit",
            "in": "path",
            "description": "limit on the number of objects to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10,
              "maximum": 100,
              "minimum": 0
            }
          },
          {
            "name": "offset",
            "in": "path",
            "description": "The starting point within a list of objects",
            "required": true,
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "created",
            "in": "path",
            "description": "The time at which payment is created",
            "required": true,
            "schema": {
              "type": [
                "string",
                "null"
              ],
              "format": "date-time"
            },
            "example": "2022-09-10T10:11:12Z"
          },
          {
            "name": "created.lt",
            "in": "path",
            "description": "Time less than the payment created time",
            "required": true,
            "schema": {
              "type": [
                "string",
                "null"
              ],
              "format": "date-time"
            },
            "example": "2022-09-10T10:11:12Z"
          },
          {
            "name": "created.gt",
            "in": "path",
            "description": "Time greater than the payment created time",
            "required": true,
            "schema": {
              "type": [
                "string",
                "null"
              ],
              "format": "date-time"
            },
            "example": "2022-09-10T10:11:12Z"
          },
          {
            "name": "created.lte",
            "in": "path",
            "description": "Time less than or equals to the payment created time",
            "required": true,
            "schema": {
              "type": [
                "string",
                "null"
              ],
              "format": "date-time"
            },
            "example": "2022-09-10T10:11:12Z"
          },
          {
            "name": "created.gte",
            "in": "path",
            "description": "Time greater than or equals to the payment created time",
            "required": true,
            "schema": {
              "type": [
                "string",
                "null"
              ],
              "format": "date-time"
            },
            "example": "2022-09-10T10:11:12Z"
          },
          {
            "name": "start_amount",
            "in": "path",
            "description": "The start amount to filter list of transactions which are greater than or equal to the start amount",
            "required": true,
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int64"
            }
          },
          {
            "name": "end_amount",
            "in": "path",
            "description": "The end amount to filter list of transactions which are less than or equal to the end amount",
            "required": true,
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int64"
            }
          },
          {
            "name": "connector",
            "in": "path",
            "description": "The connector to filter payments list",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "$ref": "#/components/schemas/Connector"
                }
              ]
            }
          },
          {
            "name": "currency",
            "in": "path",
            "description": "The currency to filter payments list",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "$ref": "#/components/schemas/Currency"
                }
              ]
            }
          },
          {
            "name": "status",
            "in": "path",
            "description": "The payment status to filter payments list",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "$ref": "#/components/schemas/IntentStatus"
                }
              ]
            }
          },
          {
            "name": "payment_method_type",
            "in": "path",
            "description": "The payment method type to filter payments list",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "$ref": "#/components/schemas/PaymentMethod"
                }
              ]
            }
          },
          {
            "name": "payment_method_subtype",
            "in": "path",
            "description": "The payment method subtype to filter payments list",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "$ref": "#/components/schemas/PaymentMethodType"
                }
              ]
            }
          },
          {
            "name": "authentication_type",
            "in": "path",
            "description": "The authentication type to filter payments list",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "$ref": "#/components/schemas/AuthenticationType"
                }
              ]
            }
          },
          {
            "name": "merchant_connector_id",
            "in": "path",
            "description": "The merchant connector id to filter payments list",
            "required": true,
            "schema": {
              "type": [
                "string",
                "null"
              ]
            }
          },
          {
            "name": "order_on",
            "in": "path",
            "description": "The field on which the payments list should be sorted",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SortOn"
            }
          },
          {
            "name": "order_by",
            "in": "path",
            "description": "The order in which payments list should be sorted",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SortBy"
            }
          },
          {
            "name": "card_network",
            "in": "path",
            "description": "The card networks to filter payments list",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "$ref": "#/components/schemas/CardNetwork"
                }
              ]
            }
          },
          {
            "name": "merchant_order_reference_id",
            "in": "path",
            "description": "The identifier for merchant order reference id",
            "required": true,
            "schema": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a payment list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentListResponse"
                }
              }
            }
          },
          "404": {
            "description": "No payments found"
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "jwt_key": []
          }
        ]
      }
    },
    "/v2/payment-methods": {
      "post": {
        "tags": [
          "Payment Methods"
        ],
        "summary": "Payment Method - Create",
        "description": "Creates and stores a payment method against a customer. In case of cards, this API should be used only by PCI compliant merchants.",
        "operationId": "Create Payment Method",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentMethodCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payment Method Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Data"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/v2/payment-methods/create-intent": {
      "post": {
        "tags": [
          "Payment Methods"
        ],
        "summary": "Payment Method - Create Intent",
        "description": "Creates a payment method for customer with billing information and other metadata.",
        "operationId": "Create Payment Method Intent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentMethodIntentCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payment Method Intent Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Data"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/v2/payment-methods/{id}/confirm-intent": {
      "post": {
        "tags": [
          "Payment Methods"
        ],
        "summary": "Payment Method - Confirm Intent",
        "description": "Update a payment method with customer's payment method related information.",
        "operationId": "Confirm Payment Method Intent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentMethodIntentConfirm"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payment Method Intent Confirmed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Data"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/v2/payment-methods/{id}/update-saved-payment-method": {
      "patch": {
        "tags": [
          "Payment Methods"
        ],
        "summary": "Payment Method - Update",
        "description": "Update an existing payment method of a customer.",
        "operationId": "Update Payment Method",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentMethodUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payment Method Update",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Data"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/v2/payment-methods/{id}": {
      "get": {
        "tags": [
          "Payment Methods"
        ],
        "summary": "Payment Method - Retrieve",
        "description": "Retrieves a payment method of a customer.",
        "operationId": "Retrieve Payment Method",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the Payment Method",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment Method Retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodResponse"
                }
              }
            }
          },
          "404": {
            "description": "Payment Method Not Found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Payment Methods"
        ],
        "summary": "Payment Method - Delete",
        "description": "Deletes a payment method of a customer.",
        "operationId": "Delete Payment Method",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the Payment Method",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment Method Retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodDeleteResponse"
                }
              }
            }
          },
          "404": {
            "description": "Payment Method Not Found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/v2/customers/{id}/saved-payment-methods": {
      "get": {
        "tags": [
          "Payment Methods"
        ],
        "summary": "Payment Method - List Customer Saved Payment Methods",
        "description": "List the payment methods saved for a customer",
        "operationId": "List Customer Saved Payment Methods",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment Methods Retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerPaymentMethodsListResponse"
                }
              }
            }
          },
          "404": {
            "description": "Customer Not Found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/v2/payment-method-session": {
      "post": {
        "tags": [
          "Payment Method Session"
        ],
        "summary": "Payment Method Session - Create",
        "description": "Create a payment method session for a customer\nThis is used to list the saved payment methods for the customer\nThe customer can also add a new payment method using this session",
        "operationId": "Create a payment method session",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentMethodSessionRequest"
              },
              "examples": {
                "Create a payment method session with customer_id": {
                  "value": {
                    "customer_id": "12345_cus_abcdefghijklmnopqrstuvwxyz"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Create the payment method session",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodSessionResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/v2/payment-method-session/{id}": {
      "get": {
        "tags": [
          "Payment Method Session"
        ],
        "summary": "Payment Method Session - Retrieve",
        "description": "Retrieve the payment method session",
        "operationId": "Retrieve the payment method session",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the Payment Method Session",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The payment method session is retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodSessionResponse"
                }
              }
            }
          },
          "404": {
            "description": "The request is invalid"
          }
        },
        "security": [
          {
            "ephemeral_key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Payment Method Session"
        ],
        "summary": "Payment Method Session - Delete a saved payment method",
        "description": "Delete a saved payment method from the given payment method session.",
        "operationId": "Delete a saved payment method",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the Payment Method Session",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentMethodSessionDeleteSavedPaymentMethod"
              },
              "examples": {
                "Update the card holder name": {
                  "value": {
                    "payment_method_id": "12345_pm_0194b1ecabc172e28aeb71f70a4daba3"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The payment method has been updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodDeleteResponse"
                }
              }
            }
          },
          "404": {
            "description": "The request is invalid"
          }
        },
        "security": [
          {
            "ephemeral_key": []
          }
        ]
      }
    },
    "/v2/payment-method-session/{id}/list-payment-methods": {
      "get": {
        "tags": [
          "Payment Method Session"
        ],
        "summary": "Payment Method Session - List Payment Methods",
        "description": "List payment methods for the given payment method session.\nThis endpoint lists the enabled payment methods for the profile and the saved payment methods of the customer.",
        "operationId": "List Payment methods for a Payment Method Session",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the Payment Method Session",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The payment method session is retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodListResponseForSession"
                }
              }
            }
          },
          "404": {
            "description": "The request is invalid"
          }
        },
        "security": [
          {
            "ephemeral_key": []
          }
        ]
      }
    },
    "/v2/payment-method-session/{id}/update-saved-payment-method": {
      "put": {
        "tags": [
          "Payment Method Session"
        ],
        "summary": "Payment Method Session - Update a saved payment method",
        "description": "Update a saved payment method from the given payment method session.",
        "operationId": "Update a saved payment method",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the Payment Method Session",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentMethodSessionUpdateSavedPaymentMethod"
              },
              "examples": {
                "Update the card holder name": {
                  "value": {
                    "payment_method_data": {
                      "card": {
                        "card_holder_name": "Narayan Bhat"
                      }
                    },
                    "payment_method_id": "12345_pm_0194b1ecabc172e28aeb71f70a4daba3"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The payment method has been updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodResponse"
                }
              }
            }
          },
          "404": {
            "description": "The request is invalid"
          }
        },
        "security": [
          {
            "ephemeral_key": []
          }
        ]
      }
    },
    "/v2/payment-method-session/{id}/confirm": {
      "post": {
        "tags": [
          "Payment Method Session"
        ],
        "summary": "Payment Method Session - Confirm a payment method session",
        "description": "**Confirms a payment method session object with the payment method data**",
        "operationId": "Confirm the payment method session",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the Payment Method Session",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Profile-Id",
            "in": "header",
            "description": "Profile ID associated to the payment intent",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "pro_abcdefghijklmnop"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentMethodSessionConfirmRequest"
              },
              "examples": {
                "Confirm the payment method session with card details": {
                  "value": {
                    "payment_method_data": {
                      "card": {
                        "card_cvc": "123",
                        "card_exp_month": "10",
                        "card_exp_year": "25",
                        "card_number": "4242424242424242"
                      }
                    },
                    "payment_method_subtype": "credit",
                    "payment_method_type": "card"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payment Method created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing Mandatory fields"
          }
        },
        "security": [
          {
            "publishable_key": []
          }
        ]
      }
    },
    "/v2/refunds": {
      "post": {
        "tags": [
          "Refunds"
        ],
        "summary": "Refunds - Create",
        "description": "Creates a refund against an already processed payment. In case of some processors, you can even opt to refund only a partial amount multiple times until the original charge amount has been refunded",
        "operationId": "Create a Refund",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundsCreateRequest"
              },
              "examples": {
                "Create an instant refund to refund partial amount": {
                  "value": {
                    "amount": 654,
                    "merchant_reference_id": "ref_123",
                    "payment_id": "{{payment_id}}",
                    "refund_type": "instant"
                  }
                },
                "Create an instant refund to refund the whole amount": {
                  "value": {
                    "merchant_reference_id": "ref_123",
                    "payment_id": "{{payment_id}}",
                    "refund_type": "instant"
                  }
                },
                "Create an instant refund with reason": {
                  "value": {
                    "amount": 6540,
                    "merchant_reference_id": "ref_123",
                    "payment_id": "{{payment_id}}",
                    "reason": "Customer returned product",
                    "refund_type": "instant"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Refund created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing Mandatory fields"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/v2/refunds/{id}/update_metadata": {
      "put": {
        "tags": [
          "Refunds"
        ],
        "summary": "Refunds - Metadata Update",
        "description": "Updates the properties of a Refund object. This API can be used to attach a reason for the refund or metadata fields",
        "operationId": "Update Refund Metadata and Reason",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier for refund",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundMetadataUpdateRequest"
              },
              "examples": {
                "Update refund reason": {
                  "value": {
                    "reason": "Paid by mistake"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Refund updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing Mandatory fields"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/v2/refunds/{id}": {
      "get": {
        "tags": [
          "Refunds"
        ],
        "summary": "Refunds - Retrieve",
        "description": "Retrieves a Refund. This may be used to get the status of a previously initiated refund",
        "operationId": "Retrieve a Refund",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier for refund",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Refund retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundResponse"
                }
              }
            }
          },
          "404": {
            "description": "Refund does not exist in our records"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/v2/refunds/list": {
      "post": {
        "tags": [
          "Refunds"
        ],
        "summary": "Refunds - List",
        "description": "To list the refunds associated with a payment_id or with the merchant, if payment_id is not provided",
        "operationId": "List all Refunds",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundListRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of refunds",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/v2/process_tracker/revenue_recovery_workflow/{revenue_recovery_id}": {
      "get": {
        "tags": [
          "Revenue Recovery"
        ],
        "summary": "Revenue Recovery - Retrieve",
        "description": "Retrieve the Revenue Recovery Payment Info",
        "operationId": "Retrieve Revenue Recovery Info",
        "parameters": [
          {
            "name": "recovery_recovery_id",
            "in": "path",
            "description": "The payment intent id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Revenue Recovery Info Retrieved Successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RevenueRecoveryResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource missing"
          },
          "422": {
            "description": "Unprocessable request"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "jwt_key": []
          }
        ]
      }
    },
    "/proxy": {
      "post": {
        "tags": [
          "Proxy"
        ],
        "summary": "Proxy",
        "description": " Create a proxy request",
        "operationId": "Proxy Request",
        "parameters": [
          {
            "name": "X-Profile-Id",
            "in": "header",
            "description": "Profile ID for authentication",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProxyRequest"
              },
              "examples": {
                "Create a proxy request": {
                  "value": {
                    "destination_url": "https://api.example.com/payments",
                    "headers": {
                      "Authorization": "Bearer sk_test_example",
                      "Content-Type": "application/json"
                    },
                    "method": "POST",
                    "request_body": {
                      "amount": 6540,
                      "capture": true,
                      "currency": "USD",
                      "reference": "ORD-5023-4E89",
                      "source": {
                        "billing_address": {
                          "address_line1": "123 High St.",
                          "city": "London",
                          "country": "GB"
                        },
                        "expiry_month": "{{$card_exp_month}}",
                        "expiry_year": "{{$card_exp_year}}",
                        "number": "{{$card_number}}",
                        "type": "card"
                      }
                    },
                    "token": "pm_0196ea5a42a67583863d5b1253d62931",
                    "token_type": "PaymentMethodId"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Proxy request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/v2/tokenize": {
      "post": {
        "tags": [
          "Tokenization"
        ],
        "summary": "Tokenization - Create",
        "description": "Create a token with customer_id",
        "operationId": "create_token_vault_api",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenericTokenizationRequest"
              },
              "examples": {
                "Create a token with customer_id": {
                  "value": {
                    "customer_id": "12345_cus_0196d94b9c207333a297cbcf31f2e8c8",
                    "token_request": {
                      "payment_method_data": {
                        "card": {
                          "card_holder_name": "test name"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Token created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericTokenizationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "ephemeral_key": []
          },
          {
            "api_key": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AcceptanceType": {
        "type": "string",
        "description": "This is used to indicate if the mandate was accepted online or offline",
        "enum": [
          "online",
          "offline"
        ]
      },
      "AcceptedCountries": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "list",
              "type"
            ],
            "properties": {
              "list": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CountryAlpha2"
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "enable_only"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "list",
              "type"
            ],
            "properties": {
              "list": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CountryAlpha2"
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "disable_only"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "all_accepted"
                ]
              }
            }
          }
        ],
        "description": "Object to filter the customer countries for which the payment method is displayed"
      },
      "AcceptedCurrencies": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "list",
              "type"
            ],
            "properties": {
              "list": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Currency"
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "enable_only"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "list",
              "type"
            ],
            "properties": {
              "list": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Currency"
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "disable_only"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "all_accepted"
                ]
              }
            }
          }
        ]
      },
      "AchBankDebitAdditionalData": {
        "type": "object",
        "required": [
          "account_number",
          "routing_number"
        ],
        "properties": {
          "account_number": {
            "type": "string",
            "description": "Partially masked account number for ach bank debit payment",
            "example": "0001****3456"
          },
          "routing_number": {
            "type": "string",
            "description": "Partially masked routing number for ach bank debit payment",
            "example": "110***000"
          },
          "card_holder_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Card holder's name",
            "example": "John Doe"
          },
          "bank_account_holder_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Bank account's owner name",
            "example": "John Doe"
          },
          "bank_name": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/BankNames",
                "description": "Name of the bank"
              }
            ]
          },
          "bank_type": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/BankType",
                "description": "Bank account type"
              }
            ]
          },
          "bank_holder_type": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/BankHolderType",
                "description": "Bank holder entity type"
              }
            ]
          }
        }
      },
      "AchBankTransfer": {
        "type": "object",
        "required": [
          "bank_account_number",
          "bank_routing_number"
        ],
        "properties": {
          "bank_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Bank name",
            "example": "Deutsche Bank"
          },
          "bank_country_code": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CountryAlpha2",
                "description": "Bank country code"
              }
            ]
          },
          "bank_city": {
            "type": [
              "string",
              "null"
            ],
            "description": "Bank city",
            "example": "California"
          },
          "bank_account_number": {
            "type": "string",
            "description": "Bank account number is an unique identifier assigned by a bank to a customer.",
            "example": "000123456"
          },
          "bank_routing_number": {
            "type": "string",
            "description": "[9 digits] Routing number - used in USA for identifying a specific bank.",
            "example": "110000000"
          }
        }
      },
      "AchBankTransferAdditionalData": {
        "type": "object",
        "description": "Masked payout method details for ach bank transfer payout method",
        "required": [
          "bank_account_number",
          "bank_routing_number"
        ],
        "properties": {
          "bank_account_number": {
            "type": "string",
            "description": "Partially masked account number for ach bank debit payment",
            "example": "0001****3456"
          },
          "bank_routing_number": {
            "type": "string",
            "description": "Partially masked routing number for ach bank debit payment",
            "example": "110***000"
          },
          "bank_name": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/BankNames",
                "description": "Name of the bank"
              }
            ]
          },
          "bank_country_code": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CountryAlpha2",
                "description": "Bank country code"
              }
            ]
          },
          "bank_city": {
            "type": [
              "string",
              "null"
            ],
            "description": "Bank city",
            "example": "California"
          }
        }
      },
      "AchBillingDetails": {
        "type": "object",
        "properties": {
          "email": {
            "type": [
              "string",
              "null"
            ],
            "description": "The Email ID for ACH billing",
            "example": "example@me.com"
          }
        }
      },
      "AchTransfer": {
        "type": "object",
        "required": [
          "account_number",
          "bank_name",
          "routing_number",
          "swift_code"
        ],
        "properties": {
          "account_number": {
            "type": "string",
            "example": "122385736258"
          },
          "bank_name": {
            "type": "string"
          },
          "routing_number": {
            "type": "string",
            "example": "012"
          },
          "swift_code": {
            "type": "string",
            "example": "234"
          }
        }
      },
      "AdditionalMerchantData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "open_banking_recipient_data"
            ],
            "properties": {
              "open_banking_recipient_data": {
                "$ref": "#/components/schemas/MerchantRecipientData"
              }
            }
          }
        ]
      },
      "AdditionalPayoutMethodData": {
        "oneOf": [
          {
            "type": "object",
            "description": "Additional data for card payout method",
            "required": [
              "Card"
            ],
            "properties": {
              "Card": {
                "$ref": "#/components/schemas/CardAdditionalData",
                "description": "Additional data for card payout method"
              }
            }
          },
          {
            "type": "object",
            "description": "Additional data for bank payout method",
            "required": [
              "Bank"
            ],
            "properties": {
              "Bank": {
                "$ref": "#/components/schemas/BankAdditionalData",
                "description": "Additional data for bank payout method"
              }
            }
          },
          {
            "type": "object",
            "description": "Additional data for wallet payout method",
            "required": [
              "Wallet"
            ],
            "properties": {
              "Wallet": {
                "$ref": "#/components/schemas/WalletAdditionalData",
                "description": "Additional data for wallet payout method"
              }
            }
          }
        ],
        "description": "Masked payout method details for storing in db"
      },
      "Address": {
        "type": "object",
        "properties": {
          "address": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/AddressDetails",
                "description": "Provide the address details"
              }
            ]
          },
          "phone": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PhoneDetails"
              }
            ]
          },
          "email": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "additionalProperties": false
      },
      "AddressDetails": {
        "type": "object",
        "description": "Address details",
        "properties": {
          "city": {
            "type": [
              "string",
              "null"
            ],
            "description": "The city, district, suburb, town, or village of the address.",
            "example": "New York",
            "maxLength": 50
          },
          "country": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CountryAlpha2",
                "description": "The two-letter ISO 3166-1 alpha-2 country code (e.g., US, GB)."
              }
            ]
          },
          "line1": {
            "type": [
              "string",
              "null"
            ],
            "description": "The first line of the street address or P.O. Box.",
            "example": "123, King Street",
            "maxLength": 200
          },
          "line2": {
            "type": [
              "string",
              "null"
            ],
            "description": "The second line of the street address or P.O. Box (e.g., apartment, suite, unit, or building).",
            "example": "Powelson Avenue",
            "maxLength": 50
          },
          "line3": {
            "type": [
              "string",
              "null"
            ],
            "description": "The third line of the street address, if applicable.",
            "example": "Bridgewater",
            "maxLength": 50
          },
          "zip": {
            "type": [
              "string",
              "null"
            ],
            "description": "The zip/postal code for the address",
            "example": "08807",
            "maxLength": 50
          },
          "state": {
            "type": [
              "string",
              "null"
            ],
            "description": "The address state",
            "example": "New York"
          },
          "first_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "The first name for the address",
            "example": "John",
            "maxLength": 255
          },
          "last_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "The last name for the address",
            "example": "Doe",
            "maxLength": 255
          }
        },
        "additionalProperties": false
      },
      "AdyenConnectorMetadata": {
        "type": "object",
        "required": [
          "testing"
        ],
        "properties": {
          "testing": {
            "$ref": "#/components/schemas/AdyenTestingData"
          }
        }
      },
      "AdyenSplitData": {
        "type": "object",
        "description": "Fee information for Split Payments to be charged on the payment being collected for Adyen",
        "required": [
          "split_items"
        ],
        "properties": {
          "store": {
            "type": [
              "string",
              "null"
            ],
            "description": "The store identifier"
          },
          "split_items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdyenSplitItem"
            },
            "description": "Data for the split items"
          }
        },
        "additionalProperties": false
      },
      "AdyenSplitItem": {
        "type": "object",
        "description": "Data for the split items",
        "required": [
          "amount",
          "split_type",
          "reference"
        ],
        "properties": {
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "The amount of the split item",
            "example": 6540
          },
          "split_type": {
            "$ref": "#/components/schemas/AdyenSplitType",
            "description": "Defines type of split item"
          },
          "account": {
            "type": [
              "string",
              "null"
            ],
            "description": "The unique identifier of the account to which the split amount is allocated."
          },
          "reference": {
            "type": "string",
            "description": "Unique Identifier for the split item"
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "description": "Description for the part of the payment that will be allocated to the specified account."
          }
        },
        "additionalProperties": false
      },
      "AdyenSplitType": {
        "type": "string",
        "enum": [
          "BalanceAccount",
          "AcquiringFees",
          "PaymentFee",
          "AdyenFees",
          "AdyenCommission",
          "AdyenMarkup",
          "Interchange",
          "SchemeFee",
          "Commission",
          "TopUp",
          "Vat"
        ]
      },
      "AdyenTestingData": {
        "type": "object",
        "required": [
          "holder_name"
        ],
        "properties": {
          "holder_name": {
            "type": "string",
            "description": "Holder name to be sent to Adyen for a card payment(CIT) or a generic payment(MIT). This value overrides the values for card.card_holder_name and applies during both CIT and MIT payment transactions."
          }
        }
      },
      "AirwallexData": {
        "type": "object",
        "properties": {
          "payload": {
            "type": [
              "string",
              "null"
            ],
            "description": "payload required by airwallex"
          }
        }
      },
      "AlfamartVoucherData": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "The billing first name for Alfamart",
            "example": "Jane"
          },
          "last_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "The billing second name for Alfamart",
            "example": "Doe"
          },
          "email": {
            "type": [
              "string",
              "null"
            ],
            "description": "The Email ID for Alfamart",
            "example": "example@me.com"
          }
        }
      },
      "AliPayHkRedirection": {
        "type": "object"
      },
      "AliPayQr": {
        "type": "object"
      },
      "AliPayRedirection": {
        "type": "object"
      },
      "AmazonPayRedirectData": {
        "type": "object"
      },
      "AmountDetails": {
        "type": "object",
        "required": [
          "currency"
        ],
        "properties": {
          "order_amount": {
            "type": "integer",
            "format": "int64",
            "description": "The payment amount. Amount for the payment in the lowest denomination of the currency, (i.e) in cents for USD denomination, in yen for JPY denomination etc. E.g., Pass 100 to charge $1.00 and 1 for 1¥ since ¥ is a zero-decimal currency. Read more about [the Decimal and Non-Decimal Currencies](https://github.com/juspay/hyperswitch/wiki/Decimal-and-Non%E2%80%90Decimal-Currencies)",
            "example": 6540,
            "minimum": 0
          },
          "currency": {
            "$ref": "#/components/schemas/Currency",
            "description": "The currency of the order"
          },
          "shipping_cost": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MinorUnit",
                "description": "The shipping cost of the order. This has to be collected from the merchant"
              }
            ]
          },
          "order_tax_amount": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MinorUnit",
                "description": "Tax amount related to the order. This will be calculated by the external tax provider"
              }
            ]
          },
          "skip_external_tax_calculation": {
            "$ref": "#/components/schemas/TaxCalculationOverride",
            "description": "The action to whether calculate tax by calling external tax provider or not"
          },
          "skip_surcharge_calculation": {
            "$ref": "#/components/schemas/SurchargeCalculationOverride",
            "description": "The action to whether calculate surcharge or not"
          },
          "surcharge_amount": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MinorUnit",
                "description": "The surcharge amount to be added to the order, collected from the merchant"
              }
            ]
          },
          "tax_on_surcharge": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MinorUnit",
                "description": "tax on surcharge amount"
              }
            ]
          }
        }
      },
      "AmountDetailsResponse": {
        "type": "object",
        "required": [
          "order_amount",
          "currency",
          "external_tax_calculation",
          "surcharge_calculation"
        ],
        "properties": {
          "order_amount": {
            "$ref": "#/components/schemas/MinorUnit",
            "description": "The payment amount. Amount for the payment in the lowest denomination of the currency, (i.e) in cents for USD denomination, in yen for JPY denomination etc. E.g., Pass 100 to charge $1.00 and 1 for 1¥ since ¥ is a zero-decimal currency. Read more about [the Decimal and Non-Decimal Currencies](https://github.com/juspay/hyperswitch/wiki/Decimal-and-Non%E2%80%90Decimal-Currencies)"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency",
            "description": "The currency of the order"
          },
          "shipping_cost": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MinorUnit",
                "description": "The shipping cost of the order. This has to be collected from the merchant"
              }
            ]
          },
          "order_tax_amount": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MinorUnit",
                "description": "Tax amount related to the order. This will be calculated by the external tax provider"
              }
            ]
          },
          "external_tax_calculation": {
            "$ref": "#/components/schemas/TaxCalculationOverride",
            "description": "The action to whether calculate tax by calling external tax provider or not"
          },
          "surcharge_calculation": {
            "$ref": "#/components/schemas/SurchargeCalculationOverride",
            "description": "The action to whether calculate surcharge or not"
          },
          "surcharge_amount": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MinorUnit",
                "description": "The surcharge amount to be added to the order, collected from the merchant"
              }
            ]
          },
          "tax_on_surcharge": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MinorUnit",
                "description": "tax on surcharge amount"
              }
            ]
          }
        }
      },
      "AmountDetailsUpdate": {
        "type": "object",
        "properties": {
          "order_amount": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "description": "The payment amount. Amount for the payment in the lowest denomination of the currency, (i.e) in cents for USD denomination, in yen for JPY denomination etc. E.g., Pass 100 to charge $1.00 and 1 for 1¥ since ¥ is a zero-decimal currency. Read more about [the Decimal and Non-Decimal Currencies](https://github.com/juspay/hyperswitch/wiki/Decimal-and-Non%E2%80%90Decimal-Currencies)",
            "example": 6540,
            "minimum": 0
          },
          "currency": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Currency",
                "description": "The currency of the order"
              }
            ]
          },
          "shipping_cost": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MinorUnit",
                "description": "The shipping cost of the order. This has to be collected from the merchant"
              }
            ]
          },
          "order_tax_amount": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MinorUnit",
                "description": "Tax amount related to the order. This will be calculated by the external tax provider"
              }
            ]
          },
          "skip_external_tax_calculation": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/TaxCalculationOverride",
                "description": "The action to whether calculate tax by calling external tax provider or not"
              }
            ]
          },
          "skip_surcharge_calculation": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/SurchargeCalculationOverride",
                "description": "The action to whether calculate surcharge or not"
              }
            ]
          },
          "surcharge_amount": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MinorUnit",
                "description": "The surcharge amount to be added to the order, collected from the merchant"
              }
            ]
          },
          "tax_on_surcharge": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MinorUnit",
                "description": "tax on surcharge amount"
              }
            ]
          }
        }
      },
      "AmountFilter": {
        "type": "object",
        "properties": {
          "start_amount": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "description": "The start amount to filter list of transactions which are greater than or equal to the start amount"
          },
          "end_amount": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "description": "The end amount to filter list of transactions which are less than or equal to the end amount"
          }
        }
      },
      "AmountInfo": {
        "type": "object",
        "required": [
          "label",
          "amount"
        ],
        "properties": {
          "label": {
            "type": "string",
            "description": "The label must be the name of the merchant."
          },
          "type": {
            "type": [
              "string",
              "null"
            ],
            "description": "A value that indicates whether the line item(Ex: total, tax, discount, or grand total) is final or pending."
          },
          "amount": {
            "type": "string",
            "description": "The total amount for the payment in majot unit string (Ex: 38.02)",
            "example": "38.02"
          }
        }
      },
      "ApiKeyExpiration": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "never"
            ]
          },
          {
            "type": "string",
            "format": "date-time"
          }
        ]
      },
      "ApplePayAddressParameters": {
        "type": "string",
        "enum": [
          "postalAddress",
          "phone",
          "email"
        ]
      },
      "ApplePayBillingContactFields": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ApplePayAddressParameters"
        }
      },
      "ApplePayPaymentRequest": {
        "type": "object",
        "required": [
          "country_code",
          "currency_code",
          "total"
        ],
        "properties": {
          "country_code": {
            "$ref": "#/components/schemas/CountryAlpha2",
            "description": "The code for country"
          },
          "currency_code": {
            "$ref": "#/components/schemas/Currency",
            "description": "The code for currency"
          },
          "total": {
            "$ref": "#/components/schemas/AmountInfo",
            "description": "Represents the total for the payment."
          },
          "merchant_capabilities": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            },
            "description": "The list of merchant capabilities(ex: whether capable of 3ds or no-3ds)"
          },
          "supported_networks": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            },
            "description": "The list of supported networks"
          },
          "merchant_identifier": {
            "type": [
              "string",
              "null"
            ]
          },
          "required_billing_contact_fields": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ApplePayBillingContactFields",
                "description": "The required billing contact fields for connector"
              }
            ]
          },
          "required_shipping_contact_fields": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ApplePayShippingContactFields",
                "description": "The required shipping contacht fields for connector"
              }
            ]
          },
          "recurring_payment_request": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ApplePayRecurringPaymentRequest",
                "description": "Recurring payment request for apple pay Merchant Token"
              }
            ]
          }
        }
      },
      "ApplePayPaymentTiming": {
        "type": "string",
        "enum": [
          "immediate",
          "recurring"
        ]
      },
      "ApplePayRecurringDetails": {
        "type": "object",
        "required": [
          "payment_description",
          "regular_billing",
          "management_url"
        ],
        "properties": {
          "payment_description": {
            "type": "string",
            "description": "A description of the recurring payment that Apple Pay displays to the user in the payment sheet"
          },
          "regular_billing": {
            "$ref": "#/components/schemas/ApplePayRegularBillingDetails",
            "description": "The regular billing cycle for the recurring payment, including start and end dates, an interval, and an interval count"
          },
          "billing_agreement": {
            "type": [
              "string",
              "null"
            ],
            "description": "A localized billing agreement that the payment sheet displays to the user before the user authorizes the payment"
          },
          "management_url": {
            "type": "string",
            "description": "A URL to a web page where the user can update or delete the payment method for the recurring payment",
            "example": "https://hyperswitch.io"
          }
        }
      },
      "ApplePayRecurringPaymentRequest": {
        "type": "object",
        "required": [
          "payment_description",
          "regular_billing",
          "management_u_r_l"
        ],
        "properties": {
          "payment_description": {
            "type": "string",
            "description": "A description of the recurring payment that Apple Pay displays to the user in the payment sheet"
          },
          "regular_billing": {
            "$ref": "#/components/schemas/ApplePayRegularBillingRequest",
            "description": "The regular billing cycle for the recurring payment, including start and end dates, an interval, and an interval count"
          },
          "billing_agreement": {
            "type": [
              "string",
              "null"
            ],
            "description": "A localized billing agreement that the payment sheet displays to the user before the user authorizes the payment"
          },
          "management_u_r_l": {
            "type": "string",
            "description": "A URL to a web page where the user can update or delete the payment method for the recurring payment",
            "example": "https://hyperswitch.io"
          }
        }
      },
      "ApplePayRedirectData": {
        "type": "object"
      },
      "ApplePayRegularBillingDetails": {
        "type": "object",
        "required": [
          "label"
        ],
        "properties": {
          "label": {
            "type": "string",
            "description": "The label that Apple Pay displays to the user in the payment sheet with the recurring details"
          },
          "recurring_payment_start_date": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time",
            "description": "The date of the first payment",
            "example": "2023-09-10T23:59:59Z"
          },
          "recurring_payment_end_date": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time",
            "description": "The date of the final payment",
            "example": "2023-09-10T23:59:59Z"
          },
          "recurring_payment_interval_unit": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/RecurringPaymentIntervalUnit",
                "description": "The amount of time — in calendar units, such as day, month, or year — that represents a fraction of the total payment interval"
              }
            ]
          },
          "recurring_payment_interval_count": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "description": "The number of interval units that make up the total payment interval"
          }
        }
      },
      "ApplePayRegularBillingRequest": {
        "type": "object",
        "required": [
          "amount",
          "label",
          "payment_timing"
        ],
        "properties": {
          "amount": {
            "type": "string",
            "description": "The amount of the recurring payment",
            "example": "38.02"
          },
          "label": {
            "type": "string",
            "description": "The label that Apple Pay displays to the user in the payment sheet with the recurring details"
          },
          "payment_timing": {
            "$ref": "#/components/schemas/ApplePayPaymentTiming",
            "description": "The time that the payment occurs as part of a successful transaction"
          },
          "recurring_payment_start_date": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time",
            "description": "The date of the first payment"
          },
          "recurring_payment_end_date": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time",
            "description": "The date of the final payment"
          },
          "recurring_payment_interval_unit": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/RecurringPaymentIntervalUnit",
                "description": "The amount of time — in calendar units, such as day, month, or year — that represents a fraction of the total payment interval"
              }
            ]
          },
          "recurring_payment_interval_count": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "description": "The number of interval units that make up the total payment interval"
          }
        }
      },
      "ApplePaySessionResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ThirdPartySdkSessionResponse",
            "description": "We get this session response, when third party sdk is involved"
          },
          {
            "$ref": "#/components/schemas/NoThirdPartySdkSessionResponse",
            "description": " We get this session response, when there is no involvement of third party sdk\nThis is the common response most of the times"
          },
          {
            "$ref": "#/components/schemas/NullObject",
            "description": "This is for the empty session response"
          }
        ]
      },
      "ApplePayShippingContactFields": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ApplePayAddressParameters"
        }
      },
      "ApplePayThirdPartySdkData": {
        "type": "object"
      },
      "ApplePayWalletData": {
        "type": "object",
        "required": [
          "payment_data",
          "payment_method",
          "transaction_identifier"
        ],
        "properties": {
          "payment_data": {
            "type": "string",
            "description": "The payment data of Apple pay"
          },
          "payment_method": {
            "$ref": "#/components/schemas/ApplepayPaymentMethod",
            "description": "The payment method of Apple pay"
          },
          "transaction_identifier": {
            "type": "string",
            "description": "The unique identifier for the transaction"
          }
        }
      },
      "ApplepayConnectorMetadataRequest": {
        "type": "object",
        "properties": {
          "session_token_data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/SessionTokenInfo"
              }
            ]
          }
        }
      },
      "ApplepayInitiative": {
        "type": "string",
        "enum": [
          "web",
          "ios"
        ]
      },
      "ApplepayPaymentMethod": {
        "type": "object",
        "required": [
          "display_name",
          "network",
          "type"
        ],
        "properties": {
          "display_name": {
            "type": "string",
            "description": "The name to be displayed on Apple Pay button"
          },
          "network": {
            "type": "string",
            "description": "The network of the Apple pay payment method"
          },
          "type": {
            "type": "string",
            "description": "The type of the payment method"
          }
        }
      },
      "ApplepaySessionTokenResponse": {
        "type": "object",
        "required": [
          "connector",
          "delayed_session_token",
          "sdk_next_action"
        ],
        "properties": {
          "session_token_data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ApplePaySessionResponse",
                "description": "Session object for Apple Pay\nThe session_token_data will be null for iOS devices because the Apple Pay session call is skipped, as there is no web domain involved"
              }
            ]
          },
          "payment_request_data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ApplePayPaymentRequest",
                "description": "Payment request object for Apple Pay"
              }
            ]
          },
          "connector": {
            "type": "string",
            "description": "The session token is w.r.t this connector"
          },
          "delayed_session_token": {
            "type": "boolean",
            "description": "Identifier for the delayed session response"
          },
          "sdk_next_action": {
            "$ref": "#/components/schemas/SdkNextAction",
            "description": "The next action for the sdk (ex: calling confirm or sync call)"
          },
          "connector_reference_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "The connector transaction id"
          },
          "connector_sdk_public_key": {
            "type": [
              "string",
              "null"
            ],
            "description": "The public key id is to invoke third party sdk"
          },
          "connector_merchant_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "The connector merchant id"
          }
        }
      },
      "AttemptStatus": {
        "type": "string",
        "description": "The status of the attempt",
        "enum": [
          "started",
          "authentication_failed",
          "router_declined",
          "authentication_pending",
          "authentication_successful",
          "authorized",
          "authorization_failed",
          "charged",
          "authorizing",
          "cod_initiated",
          "voided",
          "void_initiated",
          "capture_initiated",
          "capture_failed",
          "void_failed",
          "auto_refunded",
          "partial_charged",
          "partial_charged_and_chargeable",
          "unresolved",
          "pending",
          "failure",
          "payment_method_awaited",
          "confirmation_awaited",
          "device_data_collection_pending",
          "integrity_failure"
        ]
      },
      "AuthenticationConnectorDetails": {
        "type": "object",
        "required": [
          "authentication_connectors",
          "three_ds_requestor_url"
        ],
        "properties": {
          "authentication_connectors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthenticationConnectors"
            },
            "description": "List of authentication connectors"
          },
          "three_ds_requestor_url": {
            "type": "string",
            "description": "URL of the (customer service) website that will be shown to the shopper in case of technical errors during the 3D Secure 2 process."
          },
          "three_ds_requestor_app_url": {
            "type": [
              "string",
              "null"
            ],
            "description": "Merchant app declaring their URL within the CReq message so that the Authentication app can call the Merchant app after OOB authentication has occurred."
          }
        }
      },
      "AuthenticationConnectors": {
        "type": "string",
        "enum": [
          "threedsecureio",
          "netcetera",
          "gpayments",
          "ctp_mastercard",
          "unified_authentication_service",
          "juspaythreedsserver",
          "ctp_visa"
        ]
      },
      "AuthenticationDetails": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "status": {
            "$ref": "#/components/schemas/IntentStatus",
            "description": "The status of authentication for the payment method"
          },
          "error": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ErrorDetails",
                "description": "Error details of the authentication"
              }
            ]
          }
        }
      },
      "AuthenticationStatus": {
        "type": "string",
        "enum": [
          "started",
          "pending",
          "success",
          "failed"
        ]
      },
      "AuthenticationType": {
        "type": "string",
        "description": "Specifies the type of cardholder authentication to be applied for a payment.\n\n- `ThreeDs`: Requests 3D Secure (3DS) authentication. If the card is enrolled, 3DS authentication will be activated, potentially shifting chargeback liability to the issuer.\n- `NoThreeDs`: Indicates that 3D Secure authentication should not be performed. The liability for chargebacks typically remains with the merchant. This is often the default if not specified.\n\nNote: The actual authentication behavior can also be influenced by merchant configuration and specific connector defaults. Some connectors might still enforce 3DS or bypass it regardless of this parameter.",
        "enum": [
          "three_ds",
          "no_three_ds"
        ]
      },
      "AuthorizationStatus": {
        "type": "string",
        "enum": [
          "success",
          "failure",
          "processing",
          "unresolved"
        ]
      },
      "BacsBankDebitAdditionalData": {
        "type": "object",
        "required": [
          "account_number",
          "sort_code"
        ],
        "properties": {
          "account_number": {
            "type": "string",
            "description": "Partially masked account number for Bacs payment method",
            "example": "0001****3456"
          },
          "sort_code": {
            "type": "string",
            "description": "Partially masked sort code for Bacs payment method",
            "example": "108800"
          },
          "bank_account_holder_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Bank account's owner name",
            "example": "John Doe"
          }
        }
      },
      "BacsBankTransfer": {
        "type": "object",
        "required": [
          "bank_account_number",
          "bank_sort_code"
        ],
        "properties": {
          "bank_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Bank name",
            "example": "Deutsche Bank"
          },
          "bank_country_code": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CountryAlpha2",
                "description": "Bank country code"
              }
            ]
          },
          "bank_city": {
            "type": [
              "string",
              "null"
            ],
            "description": "Bank city",
            "example": "California"
          },
          "bank_account_number": {
            "type": "string",
            "description": "Bank account number is an unique identifier assigned by a bank to a customer.",
            "example": "000123456"
          },
          "bank_sort_code": {
            "type": "string",
            "description": "[6 digits] Sort Code - used in UK and Ireland for identifying a bank and it's branches.",
            "example": "98-76-54"
          }
        }
      },
      "BacsBankTransferAdditionalData": {
        "type": "object",
        "description": "Masked payout method details for bacs bank transfer payout method",
        "required": [
          "bank_sort_code",
          "bank_account_number"
        ],
        "properties": {
          "bank_sort_code": {
            "type": "string",
            "description": "Partially masked sort code for Bacs payment method",
            "example": "108800"
          },
          "bank_account_number": {
            "type": "string",
            "description": "Bank account's owner name",
            "example": "0001****3456"
          },
          "bank_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Bank name",
            "example": "Deutsche Bank"
          },
          "bank_country_code": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CountryAlpha2",
                "description": "Bank country code"
              }
            ]
          },
          "bank_city": {
            "type": [
              "string",
              "null"
            ],
            "description": "Bank city",
            "example": "California"
          }
        }
      },
      "BacsBankTransferInstructions": {
        "type": "object",
        "required": [
          "account_holder_name",
          "account_number",
          "sort_code"
        ],
        "properties": {
          "account_holder_name": {
            "type": "string",
            "example": "Jane Doe"
          },
          "account_number": {
            "type": "string",
            "example": "10244123908"
          },
          "sort_code": {
            "type": "string",
            "example": "012"
          }
        }
      },
      "BancontactBankRedirectAdditionalData": {
        "type": "object",
        "properties": {
          "last4": {
            "type": [
              "string",
              "null"
            ],
            "description": "Last 4 digits of the card number",
            "example": "4242"
          },
          "card_exp_month": {
            "type": [
              "string",
              "null"
            ],
            "description": "The card's expiry month",
            "example": "12"
          },
          "card_exp_year": {
            "type": [
              "string",
              "null"
            ],
            "description": "The card's expiry year",
            "example": "24"
          },
          "card_holder_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "The card holder's name",
            "example": "John Test"
          }
        }
      },
      "Bank": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/AchBankTransfer"
          },
          {
            "$ref": "#/components/schemas/BacsBankTransfer"
          },
          {
            "$ref": "#/components/schemas/SepaBankTransfer"
          },
          {
            "$ref": "#/components/schemas/PixBankTransfer"
          }
        ]
      },
      "BankAdditionalData": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/AchBankTransferAdditionalData",
            "description": "Additional data for ach bank transfer payout method"
          },
          {
            "$ref": "#/components/schemas/BacsBankTransferAdditionalData",
            "description": "Additional data for bacs bank transfer payout method"
          },
          {
            "$ref": "#/components/schemas/SepaBankTransferAdditionalData",
            "description": "Additional data for sepa bank transfer payout method"
          },
          {
            "$ref": "#/components/schemas/PixBankTransferAdditionalData",
            "description": "Additional data for pix bank transfer payout method"
          }
        ],
        "description": "Masked payout method details for bank payout method"
      },
      "BankCodeResponse": {
        "type": "object",
        "required": [
          "bank_name",
          "eligible_connectors"
        ],
        "properties": {
          "bank_name": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BankNames"
            }
          },
          "eligible_connectors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "BankDebitAdditionalData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "ach"
            ],
            "properties": {
              "ach": {
                "$ref": "#/components/schemas/AchBankDebitAdditionalData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "bacs"
            ],
            "properties": {
              "bacs": {
                "$ref": "#/components/schemas/BacsBankDebitAdditionalData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "becs"
            ],
            "properties": {
              "becs": {
                "$ref": "#/components/schemas/BecsBankDebitAdditionalData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "sepa"
            ],
            "properties": {
              "sepa": {
                "$ref": "#/components/schemas/SepaBankDebitAdditionalData"
              }
            }
          }
        ]
      },
      "BankDebitBilling": {
        "type": "object",
        "properties": {
          "name": {
            "type": [
              "string",
              "null"
            ],
            "description": "The billing name for bank debits",
            "example": "John Doe"
          },
          "email": {
            "type": [
              "string",
              "null"
            ],
            "description": "The billing email for bank debits",
            "example": "example@example.com"
          },
          "address": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/AddressDetails",
                "description": "The billing address for bank debits"
              }
            ]
          }
        }
      },
      "BankDebitData": {
        "oneOf": [
          {
            "type": "object",
            "description": "Payment Method data for Ach bank debit",
            "required": [
              "ach_bank_debit"
            ],
            "properties": {
              "ach_bank_debit": {
                "type": "object",
                "description": "Payment Method data for Ach bank debit",
                "required": [
                  "account_number",
                  "routing_number",
                  "card_holder_name",
                  "bank_account_holder_name",
                  "bank_name",
                  "bank_type",
                  "bank_holder_type"
                ],
                "properties": {
                  "billing_details": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "$ref": "#/components/schemas/BankDebitBilling",
                        "description": "Billing details for bank debit"
                      }
                    ]
                  },
                  "account_number": {
                    "type": "string",
                    "description": "Account number for ach bank debit payment",
                    "example": "000123456789"
                  },
                  "routing_number": {
                    "type": "string",
                    "description": "Routing number for ach bank debit payment",
                    "example": "110000000"
                  },
                  "card_holder_name": {
                    "type": "string",
                    "example": "John Test"
                  },
                  "bank_account_holder_name": {
                    "type": "string",
                    "example": "John Doe"
                  },
                  "bank_name": {
                    "type": "string",
                    "example": "ACH"
                  },
                  "bank_type": {
                    "type": "string",
                    "example": "Checking"
                  },
                  "bank_holder_type": {
                    "type": "string",
                    "example": "Personal"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "sepa_bank_debit"
            ],
            "properties": {
              "sepa_bank_debit": {
                "type": "object",
                "required": [
                  "iban",
                  "bank_account_holder_name"
                ],
                "properties": {
                  "billing_details": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "$ref": "#/components/schemas/BankDebitBilling",
                        "description": "Billing details for bank debit"
                      }
                    ]
                  },
                  "iban": {
                    "type": "string",
                    "description": "International bank account number (iban) for SEPA",
                    "example": "DE89370400440532013000"
                  },
                  "bank_account_holder_name": {
                    "type": "string",
                    "description": "Owner name for bank debit",
                    "example": "A. Schneider"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "becs_bank_debit"
            ],
            "properties": {
              "becs_bank_debit": {
                "type": "object",
                "required": [
                  "account_number",
                  "bsb_number"
                ],
                "properties": {
                  "billing_details": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "$ref": "#/components/schemas/BankDebitBilling",
                        "description": "Billing details for bank debit"
                      }
                    ]
                  },
                  "account_number": {
                    "type": "string",
                    "description": "Account number for Becs payment method",
                    "example": "000123456"
                  },
                  "bsb_number": {
                    "type": "string",
                    "description": "Bank-State-Branch (bsb) number",
                    "example": "000000"
                  },
                  "bank_account_holder_name": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "Owner name for bank debit",
                    "example": "A. Schneider"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "bacs_bank_debit"
            ],
            "properties": {
              "bacs_bank_debit": {
                "type": "object",
                "required": [
                  "account_number",
                  "sort_code",
                  "bank_account_holder_name"
                ],
                "properties": {
                  "billing_details": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "$ref": "#/components/schemas/BankDebitBilling",
                        "description": "Billing details for bank debit"
                      }
                    ]
                  },
                  "account_number": {
                    "type": "string",
                    "description": "Account number for Bacs payment method",
                    "example": "00012345"
                  },
                  "sort_code": {
                    "type": "string",
                    "description": "Sort code for Bacs payment method",
                    "example": "108800"
                  },
                  "bank_account_holder_name": {
                    "type": "string",
                    "description": "holder name for bank debit",
                    "example": "A. Schneider"
                  }
                }
              }
            }
          }
        ]
      },
      "BankDebitResponse": {
        "allOf": [
          {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/BankDebitAdditionalData"
              }
            ]
          }
        ]
      },
      "BankDebitTypes": {
        "type": "object",
        "required": [
          "eligible_connectors"
        ],
        "properties": {
          "eligible_connectors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "BankHolderType": {
        "type": "string",
        "enum": [
          "personal",
          "business"
        ]
      },
      "BankNames": {
        "type": "string",
        "description": "Name of banks supported by Hyperswitch",
        "enum": [
          "american_express",
          "affin_bank",
          "agro_bank",
          "alliance_bank",
          "am_bank",
          "bank_of_america",
          "bank_of_china",
          "bank_islam",
          "bank_muamalat",
          "bank_rakyat",
          "bank_simpanan_nasional",
          "barclays",
          "blik_p_s_p",
          "capital_one",
          "chase",
          "citi",
          "cimb_bank",
          "discover",
          "navy_federal_credit_union",
          "pentagon_federal_credit_union",
          "synchrony_bank",
          "wells_fargo",
          "abn_amro",
          "asn_bank",
          "bunq",
          "handelsbanken",
          "hong_leong_bank",
          "hsbc_bank",
          "ing",
          "knab",
          "kuwait_finance_house",
          "moneyou",
          "rabobank",
          "regiobank",
          "revolut",
          "sns_bank",
          "triodos_bank",
          "van_lanschot",
          "arzte_und_apotheker_bank",
          "austrian_anadi_bank_ag",
          "bank_austria",
          "bank99_ag",
          "bankhaus_carl_spangler",
          "bankhaus_schelhammer_und_schattera_ag",
          "bank_millennium",
          "bank_p_e_k_a_o_s_a",
          "bawag_psk_ag",
          "bks_bank_ag",
          "brull_kallmus_bank_ag",
          "btv_vier_lander_bank",
          "capital_bank_grawe_gruppe_ag",
          "ceska_sporitelna",
          "dolomitenbank",
          "easybank_ag",
          "e_platby_v_u_b",
          "erste_bank_und_sparkassen",
          "friesland_bank",
          "hypo_alpeadriabank_international_ag",
          "hypo_noe_lb_fur_niederosterreich_u_wien",
          "hypo_oberosterreich_salzburg_steiermark",
          "hypo_tirol_bank_ag",
          "hypo_vorarlberg_bank_ag",
          "hypo_bank_burgenland_aktiengesellschaft",
          "komercni_banka",
          "m_bank",
          "marchfelder_bank",
          "maybank",
          "oberbank_ag",
          "osterreichische_arzte_und_apothekerbank",
          "ocbc_bank",
          "pay_with_i_n_g",
          "place_z_i_p_k_o",
          "platnosc_online_karta_platnicza",
          "posojilnica_bank_e_gen",
          "postova_banka",
          "public_bank",
          "raiffeisen_bankengruppe_osterreich",
          "rhb_bank",
          "schelhammer_capital_bank_ag",
          "standard_chartered_bank",
          "schoellerbank_ag",
          "sparda_bank_wien",
          "sporo_pay",
          "santander_przelew24",
          "tatra_pay",
          "viamo",
          "volksbank_gruppe",
          "volkskreditbank_ag",
          "vr_bank_braunau",
          "uob_bank",
          "pay_with_alior_bank",
          "banki_spoldzielcze",
          "pay_with_inteligo",
          "b_n_p_paribas_poland",
          "bank_nowy_s_a",
          "credit_agricole",
          "pay_with_b_o_s",
          "pay_with_citi_handlowy",
          "pay_with_plus_bank",
          "toyota_bank",
          "velo_bank",
          "e_transfer_pocztowy24",
          "plus_bank",
          "etransfer_pocztowy24",
          "banki_spbdzielcze",
          "bank_nowy_bfg_sa",
          "getin_bank",
          "blik",
          "noble_pay",
          "idea_bank",
          "envelo_bank",
          "nest_przelew",
          "mbank_mtransfer",
          "inteligo",
          "pbac_z_ipko",
          "bnp_paribas",
          "bank_pekao_sa",
          "volkswagen_bank",
          "alior_bank",
          "boz",
          "bangkok_bank",
          "krungsri_bank",
          "krung_thai_bank",
          "the_siam_commercial_bank",
          "kasikorn_bank",
          "open_bank_success",
          "open_bank_failure",
          "open_bank_cancelled",
          "aib",
          "bank_of_scotland",
          "danske_bank",
          "first_direct",
          "first_trust",
          "halifax",
          "lloyds",
          "monzo",
          "nat_west",
          "nationwide_bank",
          "royal_bank_of_scotland",
          "starling",
          "tsb_bank",
          "tesco_bank",
          "ulster_bank",
          "yoursafe",
          "n26",
          "nationale_nederlanden"
        ]
      },
      "BankRedirectBilling": {
        "type": "object",
        "required": [
          "billing_name",
          "email"
        ],
        "properties": {
          "billing_name": {
            "type": "string",
            "description": "The name for which billing is issued",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "description": "The billing email for bank redirect",
            "example": "example@example.com"
          }
        }
      },
      "BankRedirectData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "bancontact_card"
            ],
            "properties": {
              "bancontact_card": {
                "type": "object",
                "required": [
                  "card_number",
                  "card_exp_month",
                  "card_exp_year",
                  "card_holder_name"
                ],
                "properties": {
                  "card_number": {
                    "type": "string",
                    "description": "The card number",
                    "example": "4242424242424242"
                  },
                  "card_exp_month": {
                    "type": "string",
                    "description": "The card's expiry month",
                    "example": "24"
                  },
                  "card_exp_year": {
                    "type": "string",
                    "description": "The card's expiry year",
                    "example": "24"
                  },
                  "card_holder_name": {
                    "type": "string",
                    "description": "The card holder's name",
                    "example": "John Test"
                  },
                  "billing_details": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "$ref": "#/components/schemas/BankRedirectBilling"
                      }
                    ]
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "bizum"
            ],
            "properties": {
              "bizum": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "blik"
            ],
            "properties": {
              "blik": {
                "type": "object",
                "properties": {
                  "blik_code": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "eps"
            ],
            "properties": {
              "eps": {
                "type": "object",
                "properties": {
                  "billing_details": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "$ref": "#/components/schemas/BankRedirectBilling",
                        "description": "The billing details for bank redirection"
                      }
                    ]
                  },
                  "bank_name": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "$ref": "#/components/schemas/BankNames",
                        "description": "The hyperswitch bank code for eps"
                      }
                    ]
                  },
                  "country": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "$ref": "#/components/schemas/CountryAlpha2",
                        "description": "The country for bank payment"
                      }
                    ]
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "giropay"
            ],
            "properties": {
              "giropay": {
                "type": "object",
                "properties": {
                  "billing_details": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "$ref": "#/components/schemas/BankRedirectBilling",
                        "description": "The billing details for bank redirection"
                      }
                    ]
                  },
                  "bank_account_bic": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "Bank account bic code"
                  },
                  "bank_account_iban": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "Bank account iban"
                  },
                  "country": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "$ref": "#/components/schemas/CountryAlpha2",
                        "description": "The country for bank payment"
                      }
                    ]
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "ideal"
            ],
            "properties": {
              "ideal": {
                "type": "object",
                "properties": {
                  "billing_details": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "$ref": "#/components/schemas/BankRedirectBilling",
                        "description": "The billing details for bank redirection"
                      }
                    ]
                  },
                  "bank_name": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "$ref": "#/components/schemas/BankNames",
                        "description": "The hyperswitch bank code for ideal"
                      }
                    ]
                  },
                  "country": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "$ref": "#/components/schemas/CountryAlpha2",
                        "description": "The country for bank payment"
                      }
                    ]
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "interac"
            ],
            "properties": {
              "interac": {
                "type": "object",
                "properties": {
                  "country": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "$ref": "#/components/schemas/CountryAlpha2",
                        "description": "The country for bank payment"
                      }
                    ]
                  },
                  "email": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "example": "john.doe@example.com"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "online_banking_czech_republic"
            ],
            "properties": {
              "online_banking_czech_republic": {
                "type": "object",
                "required": [
                  "issuer"
                ],
                "properties": {
                  "issuer": {
                    "$ref": "#/components/schemas/BankNames"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "online_banking_finland"
            ],
            "properties": {
              "online_banking_finland": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "online_banking_poland"
            ],
            "properties": {
              "online_banking_poland": {
                "type": "object",
                "required": [
                  "issuer"
                ],
                "properties": {
                  "issuer": {
                    "$ref": "#/components/schemas/BankNames"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "online_banking_slovakia"
            ],
            "properties": {
              "online_banking_slovakia": {
                "type": "object",
                "required": [
                  "issuer"
                ],
                "properties": {
                  "issuer": {
                    "$ref": "#/components/schemas/BankNames"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "open_banking_uk"
            ],
            "properties": {
              "open_banking_uk": {
                "type": "object",
                "properties": {
                  "issuer": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "$ref": "#/components/schemas/BankNames"
                      }
                    ]
                  },
                  "country": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "$ref": "#/components/schemas/CountryAlpha2",
                        "description": "The country for bank payment"
                      }
                    ]
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "przelewy24"
            ],
            "properties": {
              "przelewy24": {
                "type": "object",
                "properties": {
                  "bank_name": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "$ref": "#/components/schemas/BankNames"
                      }
                    ]
                  },
                  "billing_details": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "$ref": "#/components/schemas/BankRedirectBilling"
                      }
                    ]
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "sofort"
            ],
            "properties": {
              "sofort": {
                "type": "object",
                "properties": {
                  "billing_details": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "$ref": "#/components/schemas/BankRedirectBilling",
                        "description": "The billing details for bank redirection"
                      }
                    ]
                  },
                  "country": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "$ref": "#/components/schemas/CountryAlpha2",
                        "description": "The country for bank payment"
                      }
                    ]
                  },
                  "preferred_language": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "The preferred language",
                    "example": "en"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "trustly"
            ],
            "properties": {
              "trustly": {
                "type": "object",
                "required": [
                  "country"
                ],
                "properties": {
                  "country": {
                    "$ref": "#/components/schemas/CountryAlpha2",
                    "description": "The country for bank payment"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "online_banking_fpx"
            ],
            "properties": {
              "online_banking_fpx": {
                "type": "object",
                "required": [
                  "issuer"
                ],
                "properties": {
                  "issuer": {
                    "$ref": "#/components/schemas/BankNames"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "online_banking_thailand"
            ],
            "properties": {
              "online_banking_thailand": {
                "type": "object",
                "required": [
                  "issuer"
                ],
                "properties": {
                  "issuer": {
                    "$ref": "#/components/schemas/BankNames"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "local_bank_redirect"
            ],
            "properties": {
              "local_bank_redirect": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "eft"
            ],
            "properties": {
              "eft": {
                "type": "object",
                "required": [
                  "provider"
                ],
                "properties": {
                  "provider": {
                    "type": "string",
                    "description": "The preferred eft provider",
                    "example": "ozow"
                  }
                }
              }
            }
          }
        ]
      },
      "BankRedirectDetails": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "BancontactCard"
            ],
            "properties": {
              "BancontactCard": {
                "$ref": "#/components/schemas/BancontactBankRedirectAdditionalData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "Blik"
            ],
            "properties": {
              "Blik": {
                "$ref": "#/components/schemas/BlikBankRedirectAdditionalData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "Giropay"
            ],
            "properties": {
              "Giropay": {
                "$ref": "#/components/schemas/GiropayBankRedirectAdditionalData"
              }
            }
          }
        ]
      },
      "BankRedirectResponse": {
        "allOf": [
          {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/BankRedirectDetails"
              }
            ]
          },
          {
            "type": "object",
            "properties": {
              "bank_name": {
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/components/schemas/BankNames",
                    "description": "Name of the bank"
                  }
                ]
              }
            }
          }
        ]
      },
      "BankTransferAdditionalData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "ach"
            ],
            "properties": {
              "ach": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "sepa"
            ],
            "properties": {
              "sepa": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "bacs"
            ],
            "properties": {
              "bacs": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "multibanco"
            ],
            "properties": {
              "multibanco": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "permata"
            ],
            "properties": {
              "permata": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "bca"
            ],
            "properties": {
              "bca": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "bni_va"
            ],
            "properties": {
              "bni_va": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "bri_va"
            ],
            "properties": {
              "bri_va": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "cimb_va"
            ],
            "properties": {
              "cimb_va": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "danamon_va"
            ],
            "properties": {
              "danamon_va": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "mandiri_va"
            ],
            "properties": {
              "mandiri_va": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "pix"
            ],
            "properties": {
              "pix": {
                "$ref": "#/components/schemas/PixBankTransferAdditionalData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "pse"
            ],
            "properties": {
              "pse": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "local_bank_transfer"
            ],
            "properties": {
              "local_bank_transfer": {
                "$ref": "#/components/schemas/LocalBankTransferAdditionalData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "instant_bank_transfer"
            ],
            "properties": {
              "instant_bank_transfer": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "instant_bank_transfer_finland"
            ],
            "properties": {
              "instant_bank_transfer_finland": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "instant_bank_transfer_poland"
            ],
            "properties": {
              "instant_bank_transfer_poland": {
                "type": "object"
              }
            }
          }
        ]
      },
      "BankTransferData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "ach_bank_transfer"
            ],
            "properties": {
              "ach_bank_transfer": {
                "type": "object",
                "properties": {
                  "billing_details": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "$ref": "#/components/schemas/AchBillingDetails",
                        "description": "The billing details for ACH Bank Transfer"
                      }
                    ]
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "sepa_bank_transfer"
            ],
            "properties": {
              "sepa_bank_transfer": {
                "type": "object",
                "properties": {
                  "billing_details": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "$ref": "#/components/schemas/SepaAndBacsBillingDetails",
                        "description": "The billing details for SEPA"
                      }
                    ]
                  },
                  "country": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "$ref": "#/components/schemas/CountryAlpha2",
                        "description": "The two-letter ISO country code for SEPA and BACS"
                      }
                    ]
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "bacs_bank_transfer"
            ],
            "properties": {
              "bacs_bank_transfer": {
                "type": "object",
                "properties": {
                  "billing_details": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "$ref": "#/components/schemas/SepaAndBacsBillingDetails",
                        "description": "The billing details for SEPA"
                      }
                    ]
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "multibanco_bank_transfer"
            ],
            "properties": {
              "multibanco_bank_transfer": {
                "type": "object",
                "properties": {
                  "billing_details": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "$ref": "#/components/schemas/MultibancoBillingDetails",
                        "description": "The billing details for Multibanco"
                      }
                    ]
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "permata_bank_transfer"
            ],
            "properties": {
              "permata_bank_transfer": {
                "type": "object",
                "properties": {
                  "billing_details": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "$ref": "#/components/schemas/DokuBillingDetails",
                        "description": "The billing details for Permata Bank Transfer"
                      }
                    ]
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "bca_bank_transfer"
            ],
            "properties": {
              "bca_bank_transfer": {
                "type": "object",
                "properties": {
                  "billing_details": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "$ref": "#/components/schemas/DokuBillingDetails",
                        "description": "The billing details for BCA Bank Transfer"
                      }
                    ]
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "bni_va_bank_transfer"
            ],
            "properties": {
              "bni_va_bank_transfer": {
                "type": "object",
                "properties": {
                  "billing_details": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "$ref": "#/components/schemas/DokuBillingDetails",
                        "description": "The billing details for BniVa Bank Transfer"
                      }
                    ]
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "bri_va_bank_transfer"
            ],
            "properties": {
              "bri_va_bank_transfer": {
                "type": "object",
                "properties": {
                  "billing_details": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "$ref": "#/components/schemas/DokuBillingDetails",
                        "description": "The billing details for BniVa Bank Transfer"
                      }
                    ]
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "cimb_va_bank_transfer"
            ],
            "properties": {
              "cimb_va_bank_transfer": {
                "type": "object",
                "properties": {
                  "billing_details": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "$ref": "#/components/schemas/DokuBillingDetails",
                        "description": "The billing details for BniVa Bank Transfer"
                      }
                    ]
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "danamon_va_bank_transfer"
            ],
            "properties": {
              "danamon_va_bank_transfer": {
                "type": "object",
                "properties": {
                  "billing_details": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "$ref": "#/components/schemas/DokuBillingDetails",
                        "description": "The billing details for BniVa Bank Transfer"
                      }
                    ]
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "mandiri_va_bank_transfer"
            ],
            "properties": {
              "mandiri_va_bank_transfer": {
                "type": "object",
                "properties": {
                  "billing_details": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "$ref": "#/components/schemas/DokuBillingDetails",
                        "description": "The billing details for BniVa Bank Transfer"
                      }
                    ]
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "pix"
            ],
            "properties": {
              "pix": {
                "type": "object",
                "properties": {
                  "pix_key": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "Unique key for pix transfer",
                    "example": "a1f4102e-a446-4a57-bcce-6fa48899c1d1"
                  },
                  "cpf": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "CPF is a Brazilian tax identification number",
                    "example": "10599054689"
                  },
                  "cnpj": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "CNPJ is a Brazilian company tax identification number",
                    "example": "74469027417312"
                  },
                  "source_bank_account_id": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "Source bank account number",
                    "example": "8b2812f0-d6c8-4073-97bb-9fa964d08bc5"
                  },
                  "destination_bank_account_id": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "Destination bank account number",
                    "example": "9b95f84e-de61-460b-a14b-f23b4e71c97b"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "pse"
            ],
            "properties": {
              "pse": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "local_bank_transfer"
            ],
            "properties": {
              "local_bank_transfer": {
                "type": "object",
                "properties": {
                  "bank_code": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "instant_bank_transfer"
            ],
            "properties": {
              "instant_bank_transfer": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "instant_bank_transfer_finland"
            ],
            "properties": {
              "instant_bank_transfer_finland": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "instant_bank_transfer_poland"
            ],
            "properties": {
              "instant_bank_transfer_poland": {
                "type": "object"
              }
            }
          }
        ]
      },
      "BankTransferInstructions": {
        "oneOf": [
          {
            "type": "object",
            "description": "The instructions for Doku bank transactions",
            "required": [
              "doku_bank_transfer_instructions"
            ],
            "properties": {
              "doku_bank_transfer_instructions": {
                "$ref": "#/components/schemas/DokuBankTransferInstructions",
                "description": "The instructions for Doku bank transactions"
              }
            }
          },
          {
            "type": "object",
            "description": "The credit transfer for ACH transactions",
            "required": [
              "ach_credit_transfer"
            ],
            "properties": {
              "ach_credit_transfer": {
                "$ref": "#/components/schemas/AchTransfer",
                "description": "The credit transfer for ACH transactions"
              }
            }
          },
          {
            "type": "object",
            "description": "The instructions for SEPA bank transactions",
            "required": [
              "sepa_bank_instructions"
            ],
            "properties": {
              "sepa_bank_instructions": {
                "$ref": "#/components/schemas/SepaBankTransferInstructions",
                "description": "The instructions for SEPA bank transactions"
              }
            }
          },
          {
            "type": "object",
            "description": "The instructions for BACS bank transactions",
            "required": [
              "bacs_bank_instructions"
            ],
            "properties": {
              "bacs_bank_instructions": {
                "$ref": "#/components/schemas/BacsBankTransferInstructions",
                "description": "The instructions for BACS bank transactions"
              }
            }
          },
          {
            "type": "object",
            "description": "The instructions for Multibanco bank transactions",
            "required": [
              "multibanco"
            ],
            "properties": {
              "multibanco": {
                "$ref": "#/components/schemas/MultibancoTransferInstructions",
                "description": "The instructions for Multibanco bank transactions"
              }
            }
          }
        ]
      },
      "BankTransferNextStepsData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BankTransferInstructions",
            "description": "The instructions for performing a bank transfer"
          },
          {
            "type": "object",
            "properties": {
              "receiver": {
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/components/schemas/ReceiverDetails",
                    "description": "The details received by the receiver"
                  }
                ]
              }
            }
          }
        ]
      },
      "BankTransferResponse": {
        "allOf": [
          {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/BankTransferAdditionalData"
              }
            ]
          }
        ]
      },
      "BankTransferTypes": {
        "type": "object",
        "required": [
          "eligible_connectors"
        ],
        "properties": {
          "eligible_connectors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of eligible connectors for a given payment experience",
            "example": [
              "stripe",
              "adyen"
            ]
          }
        }
      },
      "BankType": {
        "type": "string",
        "enum": [
          "checking",
          "savings"
        ]
      },
      "BecsBankDebitAdditionalData": {
        "type": "object",
        "required": [
          "account_number",
          "bsb_number"
        ],
        "properties": {
          "account_number": {
            "type": "string",
            "description": "Partially masked account number for Becs payment method",
            "example": "0001****3456"
          },
          "bsb_number": {
            "type": "string",
            "description": "Bank-State-Branch (bsb) number",
            "example": "000000"
          },
          "bank_account_holder_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Bank account's owner name",
            "example": "John Doe"
          }
        }
      },
      "BillingConnectorAdditionalCardInfo": {
        "type": "object",
        "properties": {
          "card_network": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CardNetwork",
                "description": "Card Network"
              }
            ]
          },
          "card_issuer": {
            "type": [
              "string",
              "null"
            ],
            "description": "Card Issuer",
            "example": "JP MORGAN CHASE"
          }
        }
      },
      "BillingConnectorPaymentDetails": {
        "type": "object",
        "required": [
          "payment_processor_token",
          "connector_customer_id"
        ],
        "properties": {
          "payment_processor_token": {
            "type": "string",
            "description": "Payment Processor Token to process the Revenue Recovery Payment"
          },
          "connector_customer_id": {
            "type": "string",
            "description": "Billing Connector's Customer Id"
          }
        }
      },
      "BillingConnectorPaymentMethodDetails": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "value",
              "type"
            ],
            "properties": {
              "value": {
                "$ref": "#/components/schemas/BillingConnectorAdditionalCardInfo"
              },
              "type": {
                "type": "string",
                "enum": [
                  "card"
                ]
              }
            }
          }
        ]
      },
      "BlikBankRedirectAdditionalData": {
        "type": "object",
        "properties": {
          "blik_code": {
            "type": [
              "string",
              "null"
            ],
            "example": "3GD9MO"
          }
        }
      },
      "BlocklistDataKind": {
        "type": "string",
        "enum": [
          "payment_method",
          "card_bin",
          "extended_card_bin"
        ]
      },
      "BlocklistRequest": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "data",
              "type"
            ],
            "properties": {
              "data": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "card_bin"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "data",
              "type"
            ],
            "properties": {
              "data": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "fingerprint"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "data",
              "type"
            ],
            "properties": {
              "data": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "extended_card_bin"
                ]
              }
            }
          }
        ]
      },
      "BlocklistResponse": {
        "type": "object",
        "required": [
          "fingerprint_id",
          "data_kind",
          "created_at"
        ],
        "properties": {
          "fingerprint_id": {
            "type": "string"
          },
          "data_kind": {
            "$ref": "#/components/schemas/BlocklistDataKind"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "BoletoVoucherData": {
        "type": "object",
        "properties": {
          "social_security_number": {
            "type": [
              "string",
              "null"
            ],
            "description": "The shopper's social security number"
          }
        }
      },
      "BraintreeData": {
        "type": "object",
        "required": [
          "merchant_account_id",
          "merchant_config_currency"
        ],
        "properties": {
          "merchant_account_id": {
            "type": "string",
            "description": "Information about the merchant_account_id that merchant wants to specify at connector level."
          },
          "merchant_config_currency": {
            "type": "string",
            "description": "Information about the merchant_config_currency that merchant wants to specify at connector level."
          }
        }
      },
      "BrowserInformation": {
        "type": "object",
        "description": "Browser information to be used for 3DS 2.0",
        "properties": {
          "color_depth": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "description": "Color depth supported by the browser",
            "minimum": 0
          },
          "java_enabled": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Whether java is enabled in the browser"
          },
          "java_script_enabled": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Whether javascript is enabled in the browser"
          },
          "language": {
            "type": [
              "string",
              "null"
            ],
            "description": "Language supported"
          },
          "screen_height": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "description": "The screen height in pixels",
            "minimum": 0
          },
          "screen_width": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "description": "The screen width in pixels",
            "minimum": 0
          },
          "time_zone": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "description": "Time zone of the client"
          },
          "ip_address": {
            "type": [
              "string",
              "null"
            ],
            "description": "Ip address of the client"
          },
          "accept_header": {
            "type": [
              "string",
              "null"
            ],
            "description": "List of headers that are accepted",
            "example": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8"
          },
          "user_agent": {
            "type": [
              "string",
              "null"
            ],
            "description": "User-agent of the browser"
          },
          "os_type": {
            "type": [
              "string",
              "null"
            ],
            "description": "The os type of the client device"
          },
          "os_version": {
            "type": [
              "string",
              "null"
            ],
            "description": "The os version of the client device"
          },
          "device_model": {
            "type": [
              "string",
              "null"
            ],
            "description": "The device model of the client"
          },
          "accept_language": {
            "type": [
              "string",
              "null"
            ],
            "description": "Accept-language of the browser"
          }
        }
      },
      "BusinessCollectLinkConfig": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessGenericLinkConfig"
          },
          {
            "type": "object",
            "required": [
              "enabled_payment_methods"
            ],
            "properties": {
              "enabled_payment_methods": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EnabledPaymentMethod"
                },
                "description": "List of payment methods shown on collect UI",
                "example": "[{\"payment_method\": \"bank_transfer\", \"payment_method_types\": [\"ach\", \"bacs\", \"sepa\"]}]"
              }
            }
          }
        ]
      },
      "BusinessGenericLinkConfig": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GenericLinkUiConfig"
          },
          {
            "type": "object",
            "required": [
              "allowed_domains"
            ],
            "properties": {
              "domain_name": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "Custom domain name to be used for hosting the link"
              },
              "allowed_domains": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "A list of allowed domains (glob patterns) where this link can be embedded / opened from",
                "uniqueItems": true
              }
            }
          }
        ]
      },
      "BusinessPaymentLinkConfig": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentLinkConfigRequest",
            "description": "Default payment link config for all future payment link"
          },
          {
            "type": "object",
            "properties": {
              "domain_name": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "Custom domain name to be used for hosting the link in your own domain"
              },
              "business_specific_configs": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "list of configs for multi theme setup",
                "additionalProperties": {
                  "$ref": "#/components/schemas/PaymentLinkConfigRequest"
                },
                "propertyNames": {
                  "type": "string"
                }
              },
              "allowed_domains": {
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "type": "string"
                },
                "description": "A list of allowed domains (glob patterns) where this link can be embedded / opened from",
                "uniqueItems": true
              },
              "branding_visibility": {
                "type": [
                  "boolean",
                  "null"
                ],
                "description": "Toggle for HyperSwitch branding visibility"
              }
            }
          }
        ]
      },
      "BusinessPayoutLinkConfig": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessGenericLinkConfig"
          },
          {
            "type": "object",
            "properties": {
              "form_layout": {
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/components/schemas/UIWidgetFormLayout",
                    "description": "Form layout of the payout link"
                  }
                ]
              },
              "payout_test_mode": {
                "type": [
                  "boolean",
                  "null"
                ],
                "description": "Allows for removing any validations / pre-requisites which are necessary in a production environment",
                "default": false
              }
            }
          }
        ]
      },
      "CaptureMethod": {
        "type": "string",
        "description": "Specifies how the payment is captured.\n- `automatic`: Funds are captured immediately after successful authorization. This is the default behavior if the field is omitted.\n- `manual`: Funds are authorized but not captured. A separate request to the `/payments/{payment_id}/capture` endpoint is required to capture the funds.",
        "enum": [
          "automatic",
          "manual",
          "manual_multiple",
          "scheduled",
          "sequential_automatic"
        ]
      },
      "CaptureResponse": {
        "type": "object",
        "required": [
          "capture_id",
          "status",
          "amount",
          "connector",
          "authorized_attempt_id",
          "capture_sequence"
        ],
        "properties": {
          "capture_id": {
            "type": "string",
            "description": "A unique identifier for this specific capture operation."
          },
          "status": {
            "$ref": "#/components/schemas/CaptureStatus",
            "description": "The status of the capture"
          },
          "amount": {
            "$ref": "#/components/schemas/MinorUnit",
            "description": "The capture amount. Amount for the payment in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc.,"
          },
          "currency": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Currency",
                "description": "The currency of the amount of the capture"
              }
            ]
          },
          "connector": {
            "type": "string",
            "description": "The name of the payment connector that processed this capture."
          },
          "authorized_attempt_id": {
            "type": "string",
            "description": "The ID of the payment attempt that was successfully authorized and subsequently captured by this operation."
          },
          "connector_capture_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "A unique identifier for this capture provided by the connector"
          },
          "capture_sequence": {
            "type": "integer",
            "format": "int32",
            "description": "Sequence number of this capture, in the series of captures made for the parent attempt"
          },
          "error_message": {
            "type": [
              "string",
              "null"
            ],
            "description": "A human-readable message from the connector explaining why this capture operation failed, if applicable."
          },
          "error_code": {
            "type": [
              "string",
              "null"
            ],
            "description": "The error code returned by the connector if this capture operation failed. This code is connector-specific."
          },
          "error_reason": {
            "type": [
              "string",
              "null"
            ],
            "description": "A more detailed reason from the connector explaining the capture failure, if available."
          },
          "reference_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "The connector's own reference or transaction ID for this specific capture operation. Useful for reconciliation."
          }
        }
      },
      "CaptureStatus": {
        "type": "string",
        "enum": [
          "started",
          "charged",
          "pending",
          "failed"
        ]
      },
      "Card": {
        "type": "object",
        "required": [
          "card_number",
          "card_exp_month",
          "card_exp_year",
          "card_holder_name",
          "card_cvc"
        ],
        "properties": {
          "card_number": {
            "type": "string",
            "description": "The card number",
            "example": "4242424242424242"
          },
          "card_exp_month": {
            "type": "string",
            "description": "The card's expiry month",
            "example": "24"
          },
          "card_exp_year": {
            "type": "string",
            "description": "The card's expiry year",
            "example": "24"
          },
          "card_holder_name": {
            "type": "string",
            "description": "The card holder's name",
            "example": "John Test"
          },
          "card_cvc": {
            "type": "string",
            "description": "The CVC number for the card",
            "example": "242"
          },
          "card_issuer": {
            "type": [
              "string",
              "null"
            ],
            "description": "The name of the issuer of card",
            "example": "chase"
          },
          "card_network": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CardNetwork",
                "description": "The card network for the card"
              }
            ]
          },
          "card_type": {
            "type": [
              "string",
              "null"
            ],
            "example": "CREDIT"
          },
          "card_issuing_country": {
            "type": [
              "string",
              "null"
            ],
            "example": "INDIA"
          },
          "bank_code": {
            "type": [
              "string",
              "null"
            ],
            "example": "JP_AMEX"
          },
          "nick_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "The card holder's nick name",
            "example": "John Test"
          }
        }
      },
      "CardAdditionalData": {
        "type": "object",
        "description": "Masked payout method details for card payout method",
        "required": [
          "card_exp_month",
          "card_exp_year",
          "card_holder_name"
        ],
        "properties": {
          "card_issuer": {
            "type": [
              "string",
              "null"
            ],
            "description": "Issuer of the card"
          },
          "card_network": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CardNetwork",
                "description": "Card network of the card"
              }
            ]
          },
          "card_type": {
            "type": [
              "string",
              "null"
            ],
            "description": "Card type, can be either `credit` or `debit`"
          },
          "card_issuing_country": {
            "type": [
              "string",
              "null"
            ],
            "description": "Card issuing country"
          },
          "bank_code": {
            "type": [
              "string",
              "null"
            ],
            "description": "Code for Card issuing bank"
          },
          "last4": {
            "type": [
              "string",
              "null"
            ],
            "description": "Last 4 digits of the card number"
          },
          "card_isin": {
            "type": [
              "string",
              "null"
            ],
            "description": "The ISIN of the card"
          },
          "card_extended_bin": {
            "type": [
              "string",
              "null"
            ],
            "description": "Extended bin of card, contains the first 8 digits of card number"
          },
          "card_exp_month": {
            "type": "string",
            "description": "Card expiry month",
            "example": "01"
          },
          "card_exp_year": {
            "type": "string",
            "description": "Card expiry year",
            "example": "2026"
          },
          "card_holder_name": {
            "type": "string",
            "description": "Card holder name",
            "example": "John Doe"
          }
        }
      },
      "CardDetail": {
        "type": "object",
        "required": [
          "card_number",
          "card_exp_month",
          "card_exp_year",
          "card_holder_name",
          "card_cvc"
        ],
        "properties": {
          "card_number": {
            "type": "string",
            "description": "Card Number",
            "example": "4111111145551142"
          },
          "card_exp_month": {
            "type": "string",
            "description": "Card Expiry Month",
            "example": "10"
          },
          "card_exp_year": {
            "type": "string",
            "description": "Card Expiry Year",
            "example": "25"
          },
          "card_holder_name": {
            "type": "string",
            "description": "Card Holder Name",
            "example": "John Doe"
          },
          "nick_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Card Holder's Nick Name",
            "example": "John Doe"
          },
          "card_issuing_country": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CountryAlpha2",
                "description": "Card Issuing Country"
              }
            ]
          },
          "card_network": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CardNetwork",
                "description": "Card's Network"
              }
            ]
          },
          "card_issuer": {
            "type": [
              "string",
              "null"
            ],
            "description": "Issuer Bank for Card"
          },
          "card_type": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CardType",
                "description": "Card Type"
              }
            ]
          },
          "card_cvc": {
            "type": "string",
            "description": "The CVC number for the card\nThis is optional in case the card needs to be vaulted",
            "example": "242"
          }
        },
        "additionalProperties": false
      },
      "CardDetailFromLocker": {
        "type": "object",
        "required": [
          "saved_to_locker"
        ],
        "properties": {
          "issuer_country": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CountryAlpha2"
              }
            ]
          },
          "last4_digits": {
            "type": [
              "string",
              "null"
            ]
          },
          "expiry_month": {
            "type": [
              "string",
              "null"
            ]
          },
          "expiry_year": {
            "type": [
              "string",
              "null"
            ]
          },
          "card_holder_name": {
            "type": [
              "string",
              "null"
            ]
          },
          "card_fingerprint": {
            "type": [
              "string",
              "null"
            ]
          },
          "nick_name": {
            "type": [
              "string",
              "null"
            ]
          },
          "card_network": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CardNetwork"
              }
            ]
          },
          "card_isin": {
            "type": [
              "string",
              "null"
            ]
          },
          "card_issuer": {
            "type": [
              "string",
              "null"
            ]
          },
          "card_type": {
            "type": [
              "string",
              "null"
            ]
          },
          "saved_to_locker": {
            "type": "boolean"
          }
        }
      },
      "CardDetailUpdate": {
        "type": "object",
        "required": [
          "card_holder_name"
        ],
        "properties": {
          "card_holder_name": {
            "type": "string",
            "description": "Card Holder Name",
            "example": "John Doe"
          },
          "nick_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Card Holder's Nick Name",
            "example": "John Doe"
          }
        },
        "additionalProperties": false
      },
      "CardNetwork": {
        "type": "string",
        "description": "Indicates the card network.",
        "enum": [
          "Visa",
          "Mastercard",
          "AmericanExpress",
          "JCB",
          "DinersClub",
          "Discover",
          "CartesBancaires",
          "UnionPay",
          "Interac",
          "RuPay",
          "Maestro",
          "Star",
          "Pulse",
          "Accel",
          "Nyce"
        ]
      },
      "CardNetworkTokenizeRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenizeDataRequest",
            "description": "Details of the card or payment method to be tokenized"
          },
          {
            "type": "object",
            "required": [
              "merchant_id",
              "customer"
            ],
            "properties": {
              "merchant_id": {
                "type": "string",
                "description": "Merchant ID associated with the tokenization request",
                "example": "merchant_1671528864"
              },
              "customer": {
                "$ref": "#/components/schemas/CustomerDetails",
                "description": "Customer details"
              },
              "billing": {
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/components/schemas/Address",
                    "description": "The billing details of the payment method"
                  }
                ]
              },
              "metadata": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object."
              },
              "payment_method_issuer": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "The name of the bank/ provider issuing the payment method to the end user"
              }
            }
          }
        ]
      },
      "CardNetworkTokenizeResponse": {
        "type": "object",
        "required": [
          "card_tokenized"
        ],
        "properties": {
          "payment_method_response": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PaymentMethodResponse",
                "description": "Response for payment method entry in DB"
              }
            ]
          },
          "customer": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CustomerDetails",
                "description": "Customer details"
              }
            ]
          },
          "card_tokenized": {
            "type": "boolean",
            "description": "Card network tokenization status"
          },
          "error_code": {
            "type": [
              "string",
              "null"
            ],
            "description": "Error code"
          },
          "error_message": {
            "type": [
              "string",
              "null"
            ],
            "description": "Error message"
          },
          "tokenization_data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/TokenizeDataRequest",
                "description": "Details that were sent for tokenization"
              }
            ]
          }
        }
      },
      "CardNetworkTypes": {
        "type": "object",
        "required": [
          "card_network",
          "eligible_connectors"
        ],
        "properties": {
          "card_network": {
            "$ref": "#/components/schemas/CardNetwork",
            "description": "The card network enabled"
          },
          "surcharge_details": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/SurchargeDetailsResponse",
                "description": "surcharge details for this card network"
              }
            ]
          },
          "eligible_connectors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of eligible connectors for a given card network",
            "example": [
              "stripe",
              "adyen"
            ]
          }
        }
      },
      "CardPayout": {
        "type": "object",
        "required": [
          "card_number",
          "expiry_month",
          "expiry_year",
          "card_holder_name"
        ],
        "properties": {
          "card_number": {
            "type": "string",
            "description": "The card number",
            "example": "4242424242424242"
          },
          "expiry_month": {
            "type": "string",
            "description": "The card's expiry month"
          },
          "expiry_year": {
            "type": "string",
            "description": "The card's expiry year"
          },
          "card_holder_name": {
            "type": "string",
            "description": "The card holder's name",
            "example": "John Doe"
          }
        }
      },
      "CardRedirectData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "knet"
            ],
            "properties": {
              "knet": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "benefit"
            ],
            "properties": {
              "benefit": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "momo_atm"
            ],
            "properties": {
              "momo_atm": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "card_redirect"
            ],
            "properties": {
              "card_redirect": {
                "type": "object"
              }
            }
          }
        ]
      },
      "CardRedirectResponse": {
        "allOf": [
          {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CardRedirectData"
              }
            ]
          }
        ]
      },
      "CardResponse": {
        "type": "object",
        "properties": {
          "last4": {
            "type": [
              "string",
              "null"
            ]
          },
          "card_type": {
            "type": [
              "string",
              "null"
            ]
          },
          "card_network": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CardNetwork"
              }
            ]
          },
          "card_issuer": {
            "type": [
              "string",
              "null"
            ]
          },
          "card_issuing_country": {
            "type": [
              "string",
              "null"
            ]
          },
          "card_isin": {
            "type": [
              "string",
              "null"
            ]
          },
          "card_extended_bin": {
            "type": [
              "string",
              "null"
            ]
          },
          "card_exp_month": {
            "type": [
              "string",
              "null"
            ]
          },
          "card_exp_year": {
            "type": [
              "string",
              "null"
            ]
          },
          "card_holder_name": {
            "type": [
              "string",
              "null"
            ]
          },
          "payment_checks": {},
          "authentication_data": {}
        }
      },
      "CardSpecificFeatures": {
        "type": "object",
        "required": [
          "three_ds",
          "no_three_ds",
          "supported_card_networks"
        ],
        "properties": {
          "three_ds": {
            "$ref": "#/components/schemas/FeatureStatus",
            "description": "Indicates whether three_ds card payments are supported"
          },
          "no_three_ds": {
            "$ref": "#/components/schemas/FeatureStatus",
            "description": "Indicates whether non three_ds card payments are supported"
          },
          "supported_card_networks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CardNetwork"
            },
            "description": "List of supported card networks"
          }
        }
      },
      "CardTestingGuardConfig": {
        "type": "object",
        "required": [
          "card_ip_blocking_status",
          "card_ip_blocking_threshold",
          "guest_user_card_blocking_status",
          "guest_user_card_blocking_threshold",
          "customer_id_blocking_status",
          "customer_id_blocking_threshold",
          "card_testing_guard_expiry"
        ],
        "properties": {
          "card_ip_blocking_status": {
            "$ref": "#/components/schemas/CardTestingGuardStatus",
            "description": "Determines if Card IP Blocking is enabled for profile"
          },
          "card_ip_blocking_threshold": {
            "type": "integer",
            "format": "int32",
            "description": "Determines the unsuccessful payment threshold for Card IP Blocking for profile"
          },
          "guest_user_card_blocking_status": {
            "$ref": "#/components/schemas/CardTestingGuardStatus",
            "description": "Determines if Guest User Card Blocking is enabled for profile"
          },
          "guest_user_card_blocking_threshold": {
            "type": "integer",
            "format": "int32",
            "description": "Determines the unsuccessful payment threshold for Guest User Card Blocking for profile"
          },
          "customer_id_blocking_status": {
            "$ref": "#/components/schemas/CardTestingGuardStatus",
            "description": "Determines if Customer Id Blocking is enabled for profile"
          },
          "customer_id_blocking_threshold": {
            "type": "integer",
            "format": "int32",
            "description": "Determines the unsuccessful payment threshold for Customer Id Blocking for profile"
          },
          "card_testing_guard_expiry": {
            "type": "integer",
            "format": "int32",
            "description": "Determines Redis Expiry for Card Testing Guard for profile"
          }
        }
      },
      "CardTestingGuardStatus": {
        "type": "string",
        "enum": [
          "enabled",
          "disabled"
        ]
      },
      "CardToken": {
        "type": "object",
        "required": [
          "card_holder_name"
        ],
        "properties": {
          "card_holder_name": {
            "type": "string",
            "description": "The card holder's name",
            "example": "John Test"
          },
          "card_cvc": {
            "type": [
              "string",
              "null"
            ],
            "description": "The CVC number for the card"
          }
        }
      },
      "CardTokenAdditionalData": {
        "type": "object",
        "required": [
          "card_holder_name"
        ],
        "properties": {
          "card_holder_name": {
            "type": "string",
            "description": "The card holder's name",
            "example": "John Test"
          }
        }
      },
      "CardTokenResponse": {
        "allOf": [
          {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CardTokenAdditionalData"
              }
            ]
          }
        ]
      },
      "CardType": {
        "type": "string",
        "enum": [
          "credit",
          "debit"
        ]
      },
      "CashappQr": {
        "type": "object"
      },
      "ChargeRefunds": {
        "type": "object",
        "description": "Charge specific fields for controlling the revert of funds from either platform or connected account. Check sub-fields for more details.",
        "required": [
          "charge_id"
        ],
        "properties": {
          "charge_id": {
            "type": "string",
            "description": "Identifier for charge created for the payment"
          },
          "revert_platform_fee": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Toggle for reverting the application fee that was collected for the payment.\nIf set to false, the funds are pulled from the destination account."
          },
          "revert_transfer": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Toggle for reverting the transfer that was made during the charge.\nIf set to false, the funds are pulled from the main platform's account."
          }
        }
      },
      "ClickToPaySessionResponse": {
        "type": "object",
        "required": [
          "dpa_id",
          "dpa_name",
          "locale",
          "card_brands",
          "acquirer_bin",
          "acquirer_merchant_id",
          "merchant_category_code",
          "merchant_country_code",
          "transaction_amount",
          "transaction_currency_code"
        ],
        "properties": {
          "dpa_id": {
            "type": "string"
          },
          "dpa_name": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "card_brands": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CardNetwork"
            },
            "example": "[Visa, Mastercard]",
            "uniqueItems": true
          },
          "acquirer_bin": {
            "type": "string"
          },
          "acquirer_merchant_id": {
            "type": "string"
          },
          "merchant_category_code": {
            "type": "string"
          },
          "merchant_country_code": {
            "type": "string"
          },
          "transaction_amount": {
            "type": "string",
            "example": "38.02"
          },
          "transaction_currency_code": {
            "$ref": "#/components/schemas/Currency"
          },
          "phone_number": {
            "type": [
              "string",
              "null"
            ],
            "example": "9123456789",
            "maxLength": 255
          },
          "email": {
            "type": [
              "string",
              "null"
            ],
            "example": "johntest@test.com",
            "maxLength": 255
          },
          "phone_country_code": {
            "type": [
              "string",
              "null"
            ]
          },
          "provider": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CtpServiceProvider",
                "description": "provider Eg: Visa, Mastercard"
              }
            ]
          },
          "dpa_client_id": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "ClientSecretResponse": {
        "type": "object",
        "description": "client_secret for the resource_id mentioned",
        "required": [
          "id",
          "resource_id",
          "created_at",
          "expires",
          "secret"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Client Secret id",
            "maxLength": 32,
            "minLength": 1
          },
          "resource_id": {
            "$ref": "#/components/schemas/ResourceId",
            "description": "resource_id to which this client secret belongs to"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "time at which this client secret was created"
          },
          "expires": {
            "type": "string",
            "format": "date-time",
            "description": "time at which this client secret would expire"
          },
          "secret": {
            "type": "string",
            "description": "client secret"
          }
        }
      },
      "Comparison": {
        "type": "object",
        "description": "Represents a single comparison condition.",
        "required": [
          "lhs",
          "comparison",
          "value",
          "metadata"
        ],
        "properties": {
          "lhs": {
            "type": "string",
            "description": "The left hand side which will always be a domain input identifier like \"payment.method.cardtype\""
          },
          "comparison": {
            "$ref": "#/components/schemas/ComparisonType",
            "description": "The comparison operator"
          },
          "value": {
            "$ref": "#/components/schemas/ValueType",
            "description": "The value to compare against"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata that the Static Analyzer and Backend does not touch.\nThis can be used to store useful information for the frontend and is required for communication\nbetween the static analyzer and the frontend.",
            "additionalProperties": {},
            "propertyNames": {
              "type": "string"
            }
          }
        }
      },
      "ComparisonType": {
        "type": "string",
        "description": "Conditional comparison type",
        "enum": [
          "equal",
          "not_equal",
          "less_than",
          "less_than_equal",
          "greater_than",
          "greater_than_equal"
        ]
      },
      "Connector": {
        "type": "string",
        "enum": [
          "authipay",
          "adyenplatform",
          "stripe_billing_test",
          "phonypay",
          "fauxpay",
          "pretendpay",
          "stripe_test",
          "adyen_test",
          "checkout_test",
          "paypal_test",
          "aci",
          "adyen",
          "airwallex",
          "archipel",
          "authorizedotnet",
          "bambora",
          "bamboraapac",
          "bankofamerica",
          "barclaycard",
          "billwerk",
          "bitpay",
          "bluesnap",
          "boku",
          "braintree",
          "cashtocode",
          "celero",
          "chargebee",
          "checkout",
          "coinbase",
          "coingate",
          "cryptopay",
          "ctp_mastercard",
          "ctp_visa",
          "cybersource",
          "datatrans",
          "deutschebank",
          "digitalvirgo",
          "dlocal",
          "ebanx",
          "elavon",
          "facilitapay",
          "fiserv",
          "fiservemea",
          "fiuu",
          "forte",
          "getnet",
          "globalpay",
          "globepay",
          "gocardless",
          "gpayments",
          "hipay",
          "helcim",
          "hyperswitch_vault",
          "inespay",
          "iatapay",
          "itaubank",
          "jpmorgan",
          "juspaythreedsserver",
          "klarna",
          "mifinity",
          "mollie",
          "moneris",
          "multisafepay",
          "netcetera",
          "nexinets",
          "nexixpay",
          "nmi",
          "nomupay",
          "noon",
          "novalnet",
          "nuvei",
          "opennode",
          "paybox",
          "payload",
          "payme",
          "payone",
          "paypal",
          "paystack",
          "payu",
          "placetopay",
          "powertranz",
          "prophetpay",
          "rapyd",
          "razorpay",
          "recurly",
          "redsys",
          "santander",
          "shift4",
          "square",
          "stax",
          "stripe",
          "stripebilling",
          "taxjar",
          "threedsecureio",
          "tokenio",
          "trustpay",
          "tsys",
          "vgs",
          "volt",
          "wellsfargo",
          "wise",
          "worldline",
          "worldpay",
          "worldpayvantiv",
          "worldpayxml",
          "signifyd",
          "plaid",
          "riskified",
          "xendit",
          "zen",
          "zsl"
        ]
      },
      "ConnectorChargeResponseData": {
        "oneOf": [
          {
            "type": "object",
            "description": "StripeChargeResponseData",
            "required": [
              "stripe_split_payment"
            ],
            "properties": {
              "stripe_split_payment": {
                "$ref": "#/components/schemas/StripeChargeResponseData",
                "description": "StripeChargeResponseData"
              }
            }
          },
          {
            "type": "object",
            "description": "AdyenChargeResponseData",
            "required": [
              "adyen_split_payment"
            ],
            "properties": {
              "adyen_split_payment": {
                "$ref": "#/components/schemas/AdyenSplitData",
                "description": "AdyenChargeResponseData"
              }
            }
          },
          {
            "type": "object",
            "description": "XenditChargeResponseData",
            "required": [
              "xendit_split_payment"
            ],
            "properties": {
              "xendit_split_payment": {
                "$ref": "#/components/schemas/XenditChargeResponseData",
                "description": "XenditChargeResponseData"
              }
            }
          }
        ],
        "description": "Charge Information"
      },
      "ConnectorFeatureMatrixResponse": {
        "type": "object",
        "required": [
          "name",
          "supported_payment_methods"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the connector"
          },
          "display_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "The display name of the connector"
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "description": "The description of the connector"
          },
          "category": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PaymentConnectorCategory",
                "description": "The category of the connector"
              }
            ]
          },
          "supported_payment_methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SupportedPaymentMethod"
            },
            "description": "The list of payment methods supported by the connector"
          },
          "supported_webhook_flows": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/EventClass"
            },
            "description": "The list of webhook flows supported by the connector"
          }
        }
      },
      "ConnectorMetadata": {
        "type": "object",
        "description": "Some connectors like Apple Pay, Airwallex and Noon might require some additional information, find specific details in the child attributes below.",
        "properties": {
          "apple_pay": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ApplepayConnectorMetadataRequest"
              }
            ]
          },
          "airwallex": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/AirwallexData"
              }
            ]
          },
          "noon": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/NoonData"
              }
            ]
          },
          "braintree": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/BraintreeData"
              }
            ]
          },
          "adyen": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/AdyenConnectorMetadata"
              }
            ]
          }
        }
      },
      "ConnectorSelection": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "data",
              "type"
            ],
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoutableConnectorChoice"
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "priority"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "data",
              "type"
            ],
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ConnectorVolumeSplit"
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "volume_split"
                ]
              }
            }
          }
        ]
      },
      "ConnectorStatus": {
        "type": "string",
        "enum": [
          "inactive",
          "active"
        ]
      },
      "ConnectorTokenDetails": {
        "type": "object",
        "required": [
          "connector_id",
          "token_type",
          "status",
          "token"
        ],
        "properties": {
          "connector_id": {
            "type": "string",
            "description": "The unique identifier of the connector account through which the token was generated",
            "example": "mca_"
          },
          "token_type": {
            "$ref": "#/components/schemas/TokenizationType"
          },
          "status": {
            "$ref": "#/components/schemas/ConnectorTokenStatus",
            "description": "The status of connector token if it is active or inactive"
          },
          "connector_token_request_reference_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "The reference id of the connector token\nThis is the reference that was passed to connector when creating the token"
          },
          "original_payment_authorized_amount": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MinorUnit"
              }
            ]
          },
          "original_payment_authorized_currency": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Currency",
                "description": "The currency of the original payment authorized amount"
              }
            ]
          },
          "metadata": {
            "type": [
              "object",
              "null"
            ],
            "description": "Metadata associated with the connector token"
          },
          "token": {
            "type": "string",
            "description": "The value of the connector token. This token can be used to make merchant initiated payments ( MIT ), directly with the connector."
          }
        }
      },
      "ConnectorTokenStatus": {
        "type": "string",
        "description": "Connector Mandate Status",
        "enum": [
          "active",
          "inactive"
        ]
      },
      "ConnectorType": {
        "type": "string",
        "description": "Type of the Connector for the financial use case. Could range from Payments to Accounting to Banking.",
        "enum": [
          "payment_processor",
          "payment_vas",
          "fin_operations",
          "fiz_operations",
          "networks",
          "banking_entities",
          "non_banking_finance",
          "payout_processor",
          "payment_method_auth",
          "authentication_processor",
          "tax_processor",
          "billing_processor",
          "vault_processor"
        ]
      },
      "ConnectorVolumeSplit": {
        "type": "object",
        "required": [
          "connector",
          "split"
        ],
        "properties": {
          "connector": {
            "$ref": "#/components/schemas/RoutableConnectorChoice"
          },
          "split": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        }
      },
      "ConnectorWalletDetails": {
        "type": "object",
        "properties": {
          "apple_pay_combined": {
            "type": [
              "object",
              "null"
            ],
            "description": "This field contains the Apple Pay certificates and credentials for iOS and Web Apple Pay flow"
          },
          "apple_pay": {
            "type": [
              "object",
              "null"
            ],
            "description": "This field is for our legacy Apple Pay flow that contains the Apple Pay certificates and credentials for only iOS Apple Pay flow"
          },
          "samsung_pay": {
            "type": [
              "object",
              "null"
            ],
            "description": "This field contains the Samsung Pay certificates and credentials"
          },
          "paze": {
            "type": [
              "object",
              "null"
            ],
            "description": "This field contains the Paze certificates and credentials"
          },
          "google_pay": {
            "type": [
              "object",
              "null"
            ],
            "description": "This field contains the Google Pay certificates and credentials"
          }
        },
        "additionalProperties": false
      },
      "ContractBasedRoutingConfig": {
        "type": "object",
        "properties": {
          "config": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ContractBasedRoutingConfigBody"
              }
            ]
          },
          "label_info": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/LabelInformation"
            }
          }
        }
      },
      "ContractBasedRoutingConfigBody": {
        "type": "object",
        "properties": {
          "constants": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "number",
              "format": "double"
            }
          },
          "time_scale": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ContractBasedTimeScale"
              }
            ]
          }
        }
      },
      "ContractBasedTimeScale": {
        "type": "string",
        "enum": [
          "day",
          "month"
        ]
      },
      "CountryAlpha2": {
        "type": "string",
        "enum": [
          "AF",
          "AX",
          "AL",
          "DZ",
          "AS",
          "AD",
          "AO",
          "AI",
          "AQ",
          "AG",
          "AR",
          "AM",
          "AW",
          "AU",
          "AT",
          "AZ",
          "BS",
          "BH",
          "BD",
          "BB",
          "BY",
          "BE",
          "BZ",
          "BJ",
          "BM",
          "BT",
          "BO",
          "BQ",
          "BA",
          "BW",
          "BV",
          "BR",
          "IO",
          "BN",
          "BG",
          "BF",
          "BI",
          "KH",
          "CM",
          "CA",
          "CV",
          "KY",
          "CF",
          "TD",
          "CL",
          "CN",
          "CX",
          "CC",
          "CO",
          "KM",
          "CG",
          "CD",
          "CK",
          "CR",
          "CI",
          "HR",
          "CU",
          "CW",
          "CY",
          "CZ",
          "DK",
          "DJ",
          "DM",
          "DO",
          "EC",
          "EG",
          "SV",
          "GQ",
          "ER",
          "EE",
          "ET",
          "FK",
          "FO",
          "FJ",
          "FI",
          "FR",
          "GF",
          "PF",
          "TF",
          "GA",
          "GM",
          "GE",
          "DE",
          "GH",
          "GI",
          "GR",
          "GL",
          "GD",
          "GP",
          "GU",
          "GT",
          "GG",
          "GN",
          "GW",
          "GY",
          "HT",
          "HM",
          "VA",
          "HN",
          "HK",
          "HU",
          "IS",
          "IN",
          "ID",
          "IR",
          "IQ",
          "IE",
          "IM",
          "IL",
          "IT",
          "JM",
          "JP",
          "JE",
          "JO",
          "KZ",
          "KE",
          "KI",
          "KP",
          "KR",
          "KW",
          "KG",
          "LA",
          "LV",
          "LB",
          "LS",
          "LR",
          "LY",
          "LI",
          "LT",
          "LU",
          "MO",
          "MK",
          "MG",
          "MW",
          "MY",
          "MV",
          "ML",
          "MT",
          "MH",
          "MQ",
          "MR",
          "MU",
          "YT",
          "MX",
          "FM",
          "MD",
          "MC",
          "MN",
          "ME",
          "MS",
          "MA",
          "MZ",
          "MM",
          "NA",
          "NR",
          "NP",
          "NL",
          "NC",
          "NZ",
          "NI",
          "NE",
          "NG",
          "NU",
          "NF",
          "MP",
          "NO",
          "OM",
          "PK",
          "PW",
          "PS",
          "PA",
          "PG",
          "PY",
          "PE",
          "PH",
          "PN",
          "PL",
          "PT",
          "PR",
          "QA",
          "RE",
          "RO",
          "RU",
          "RW",
          "BL",
          "SH",
          "KN",
          "LC",
          "MF",
          "PM",
          "VC",
          "WS",
          "SM",
          "ST",
          "SA",
          "SN",
          "RS",
          "SC",
          "SL",
          "SG",
          "SX",
          "SK",
          "SI",
          "SB",
          "SO",
          "ZA",
          "GS",
          "SS",
          "ES",
          "LK",
          "SD",
          "SR",
          "SJ",
          "SZ",
          "SE",
          "CH",
          "SY",
          "TW",
          "TJ",
          "TZ",
          "TH",
          "TL",
          "TG",
          "TK",
          "TO",
          "TT",
          "TN",
          "TR",
          "TM",
          "TC",
          "TV",
          "UG",
          "UA",
          "AE",
          "GB",
          "UM",
          "UY",
          "UZ",
          "VU",
          "VE",
          "VN",
          "VG",
          "VI",
          "WF",
          "EH",
          "YE",
          "ZM",
          "ZW",
          "US"
        ]
      },
      "CountryAlpha3": {
        "type": "string",
        "enum": [
          "AFG",
          "ALA",
          "ALB",
          "DZA",
          "ASM",
          "AND",
          "AGO",
          "AIA",
          "ATA",
          "ATG",
          "ARG",
          "ARM",
          "ABW",
          "AUS",
          "AUT",
          "AZE",
          "BHS",
          "BHR",
          "BGD",
          "BRB",
          "BLR",
          "BEL",
          "BLZ",
          "BEN",
          "BMU",
          "BTN",
          "BOL",
          "BES",
          "BIH",
          "BWA",
          "BVT",
          "BRA",
          "IOT",
          "BRN",
          "BGR",
          "BFA",
          "BDI",
          "CPV",
          "KHM",
          "CMR",
          "CAN",
          "CYM",
          "CAF",
          "TCD",
          "CHL",
          "CHN",
          "CXR",
          "CCK",
          "COL",
          "COM",
          "COG",
          "COD",
          "COK",
          "CRI",
          "CIV",
          "HRV",
          "CUB",
          "CUW",
          "CYP",
          "CZE",
          "DNK",
          "DJI",
          "DMA",
          "DOM",
          "ECU",
          "EGY",
          "SLV",
          "GNQ",
          "ERI",
          "EST",
          "ETH",
          "FLK",
          "FRO",
          "FJI",
          "FIN",
          "FRA",
          "GUF",
          "PYF",
          "ATF",
          "GAB",
          "GMB",
          "GEO",
          "DEU",
          "GHA",
          "GIB",
          "GRC",
          "GRL",
          "GRD",
          "GLP",
          "GUM",
          "GTM",
          "GGY",
          "GIN",
          "GNB",
          "GUY",
          "HTI",
          "HMD",
          "VAT",
          "HND",
          "HKG",
          "HUN",
          "ISL",
          "IND",
          "IDN",
          "IRN",
          "IRQ",
          "IRL",
          "IMN",
          "ISR",
          "ITA",
          "JAM",
          "JPN",
          "JEY",
          "JOR",
          "KAZ",
          "KEN",
          "KIR",
          "PRK",
          "KOR",
          "KWT",
          "KGZ",
          "LAO",
          "LVA",
          "LBN",
          "LSO",
          "LBR",
          "LBY",
          "LIE",
          "LTU",
          "LUX",
          "MAC",
          "MKD",
          "MDG",
          "MWI",
          "MYS",
          "MDV",
          "MLI",
          "MLT",
          "MHL",
          "MTQ",
          "MRT",
          "MUS",
          "MYT",
          "MEX",
          "FSM",
          "MDA",
          "MCO",
          "MNG",
          "MNE",
          "MSR",
          "MAR",
          "MOZ",
          "MMR",
          "NAM",
          "NRU",
          "NPL",
          "NLD",
          "NCL",
          "NZL",
          "NIC",
          "NER",
          "NGA",
          "NIU",
          "NFK",
          "MNP",
          "NOR",
          "OMN",
          "PAK",
          "PLW",
          "PSE",
          "PAN",
          "PNG",
          "PRY",
          "PER",
          "PHL",
          "PCN",
          "POL",
          "PRT",
          "PRI",
          "QAT",
          "REU",
          "ROU",
          "RUS",
          "RWA",
          "BLM",
          "SHN",
          "KNA",
          "LCA",
          "MAF",
          "SPM",
          "VCT",
          "WSM",
          "SMR",
          "STP",
          "SAU",
          "SEN",
          "SRB",
          "SYC",
          "SLE",
          "SGP",
          "SXM",
          "SVK",
          "SVN",
          "SLB",
          "SOM",
          "ZAF",
          "SGS",
          "SSD",
          "ESP",
          "LKA",
          "SDN",
          "SUR",
          "SJM",
          "SWZ",
          "SWE",
          "CHE",
          "SYR",
          "TWN",
          "TJK",
          "TZA",
          "THA",
          "TLS",
          "TGO",
          "TKL",
          "TON",
          "TTO",
          "TUN",
          "TUR",
          "TKM",
          "TCA",
          "TUV",
          "UGA",
          "UKR",
          "ARE",
          "GBR",
          "USA",
          "UMI",
          "URY",
          "UZB",
          "VUT",
          "VEN",
          "VNM",
          "VGB",
          "VIR",
          "WLF",
          "ESH",
          "YEM",
          "ZMB",
          "ZWE"
        ]
      },
      "CreateApiKeyRequest": {
        "type": "object",
        "description": "The request body for creating an API Key.",
        "required": [
          "name",
          "expiration"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "A unique name for the API Key to help you identify it.",
            "example": "Sandbox integration key",
            "maxLength": 64
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "description": "A description to provide more context about the API Key.",
            "example": "Key used by our developers to integrate with the sandbox environment",
            "maxLength": 256
          },
          "expiration": {
            "$ref": "#/components/schemas/ApiKeyExpiration",
            "description": "An expiration date for the API Key. Although we allow keys to never expire, we recommend\nrotating your keys once every 6 months."
          }
        },
        "additionalProperties": false
      },
      "CreateApiKeyResponse": {
        "type": "object",
        "description": "The response body for creating an API Key.",
        "required": [
          "key_id",
          "merchant_id",
          "name",
          "api_key",
          "created",
          "expiration"
        ],
        "properties": {
          "key_id": {
            "type": "string",
            "description": "The identifier for the API Key.",
            "example": "5hEEqkgJUyuxgSKGArHA4mWSnX",
            "maxLength": 64
          },
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account.",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 64
          },
          "name": {
            "type": "string",
            "description": "The unique name for the API Key to help you identify it.",
            "example": "Sandbox integration key",
            "maxLength": 64
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "description": "The description to provide more context about the API Key.",
            "example": "Key used by our developers to integrate with the sandbox environment",
            "maxLength": 256
          },
          "api_key": {
            "type": "string",
            "description": "The plaintext API Key used for server-side API access. Ensure you store the API Key\nsecurely as you will not be able to see it again.",
            "maxLength": 128
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "The time at which the API Key was created.",
            "example": "2022-09-10T10:11:12Z"
          },
          "expiration": {
            "$ref": "#/components/schemas/ApiKeyExpiration",
            "description": "The expiration date for the API Key."
          }
        }
      },
      "CryptoData": {
        "type": "object",
        "properties": {
          "pay_currency": {
            "type": [
              "string",
              "null"
            ]
          },
          "network": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "CryptoResponse": {
        "allOf": [
          {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CryptoData"
              }
            ]
          }
        ]
      },
      "CtpServiceDetails": {
        "type": "object",
        "properties": {
          "merchant_transaction_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "merchant transaction id"
          },
          "correlation_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "network transaction correlation id"
          },
          "x_src_flow_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "session transaction flow id"
          },
          "provider": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CtpServiceProvider",
                "description": "provider Eg: Visa, Mastercard"
              }
            ]
          },
          "encrypted_payload": {
            "type": [
              "string",
              "null"
            ],
            "description": "Encrypted payload"
          }
        }
      },
      "CtpServiceProvider": {
        "type": "string",
        "enum": [
          "visa",
          "mastercard"
        ]
      },
      "Currency": {
        "type": "string",
        "description": "The three-letter ISO 4217 currency code (e.g., \"USD\", \"EUR\") for the payment amount. This field is mandatory for creating a payment.",
        "enum": [
          "AED",
          "AFN",
          "ALL",
          "AMD",
          "ANG",
          "AOA",
          "ARS",
          "AUD",
          "AWG",
          "AZN",
          "BAM",
          "BBD",
          "BDT",
          "BGN",
          "BHD",
          "BIF",
          "BMD",
          "BND",
          "BOB",
          "BRL",
          "BSD",
          "BTN",
          "BWP",
          "BYN",
          "BZD",
          "CAD",
          "CDF",
          "CHF",
          "CLF",
          "CLP",
          "CNY",
          "COP",
          "CRC",
          "CUC",
          "CUP",
          "CVE",
          "CZK",
          "DJF",
          "DKK",
          "DOP",
          "DZD",
          "EGP",
          "ERN",
          "ETB",
          "EUR",
          "FJD",
          "FKP",
          "GBP",
          "GEL",
          "GHS",
          "GIP",
          "GMD",
          "GNF",
          "GTQ",
          "GYD",
          "HKD",
          "HNL",
          "HRK",
          "HTG",
          "HUF",
          "IDR",
          "ILS",
          "INR",
          "IQD",
          "IRR",
          "ISK",
          "JMD",
          "JOD",
          "JPY",
          "KES",
          "KGS",
          "KHR",
          "KMF",
          "KPW",
          "KRW",
          "KWD",
          "KYD",
          "KZT",
          "LAK",
          "LBP",
          "LKR",
          "LRD",
          "LSL",
          "LYD",
          "MAD",
          "MDL",
          "MGA",
          "MKD",
          "MMK",
          "MNT",
          "MOP",
          "MRU",
          "MUR",
          "MVR",
          "MWK",
          "MXN",
          "MYR",
          "MZN",
          "NAD",
          "NGN",
          "NIO",
          "NOK",
          "NPR",
          "NZD",
          "OMR",
          "PAB",
          "PEN",
          "PGK",
          "PHP",
          "PKR",
          "PLN",
          "PYG",
          "QAR",
          "RON",
          "RSD",
          "RUB",
          "RWF",
          "SAR",
          "SBD",
          "SCR",
          "SDG",
          "SEK",
          "SGD",
          "SHP",
          "SLE",
          "SLL",
          "SOS",
          "SRD",
          "SSP",
          "STD",
          "STN",
          "SVC",
          "SYP",
          "SZL",
          "THB",
          "TJS",
          "TMT",
          "TND",
          "TOP",
          "TRY",
          "TTD",
          "TWD",
          "TZS",
          "UAH",
          "UGX",
          "USD",
          "UYU",
          "UZS",
          "VES",
          "VND",
          "VUV",
          "WST",
          "XAF",
          "XCD",
          "XOF",
          "XPF",
          "YER",
          "ZAR",
          "ZMW",
          "ZWL"
        ]
      },
      "CurrentBlockThreshold": {
        "type": "object",
        "properties": {
          "duration_in_mins": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "minimum": 0
          },
          "max_total_count": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "minimum": 0
          }
        }
      },
      "CustomerAcceptance": {
        "type": "object",
        "description": "This \"CustomerAcceptance\" object is passed during Payments-Confirm request, it enlists the type, time, and mode of acceptance properties related to an acceptance done by the customer. The customer_acceptance sub object is usually passed by the SDK or client.",
        "required": [
          "acceptance_type"
        ],
        "properties": {
          "acceptance_type": {
            "$ref": "#/components/schemas/AcceptanceType",
            "description": "Type of acceptance provided by the"
          },
          "accepted_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time",
            "description": "Specifying when the customer acceptance was provided",
            "example": "2022-09-10T10:11:12Z"
          },
          "online": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/OnlineMandate",
                "description": "Information required for online mandate generation"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "CustomerDeleteResponse": {
        "type": "object",
        "required": [
          "id",
          "merchant_reference_id",
          "customer_deleted",
          "address_deleted",
          "payment_methods_deleted"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the customer",
            "example": "12345_cus_01926c58bc6e77c09e809964e72af8c8",
            "maxLength": 64,
            "minLength": 32
          },
          "merchant_reference_id": {
            "type": "string",
            "description": "The identifier for the customer object",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "customer_deleted": {
            "type": "boolean",
            "description": "Whether customer was deleted or not",
            "example": false
          },
          "address_deleted": {
            "type": "boolean",
            "description": "Whether address was deleted or not",
            "example": false
          },
          "payment_methods_deleted": {
            "type": "boolean",
            "description": "Whether payment methods deleted or not",
            "example": false
          }
        }
      },
      "CustomerDetails": {
        "type": "object",
        "description": "Passing this object creates a new customer or attaches an existing customer to the payment",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The identifier for the customer.",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 64,
            "minLength": 1
          },
          "name": {
            "type": [
              "string",
              "null"
            ],
            "description": "The customer's name",
            "example": "John Doe",
            "maxLength": 255
          },
          "email": {
            "type": [
              "string",
              "null"
            ],
            "description": "The customer's email address",
            "example": "johntest@test.com",
            "maxLength": 255
          },
          "phone": {
            "type": [
              "string",
              "null"
            ],
            "description": "The customer's phone number",
            "example": "9123456789",
            "maxLength": 10
          },
          "phone_country_code": {
            "type": [
              "string",
              "null"
            ],
            "description": "The country code for the customer's phone number",
            "example": "+1",
            "maxLength": 2
          }
        }
      },
      "CustomerDetailsResponse": {
        "type": "object",
        "description": "Details of customer attached to this payment",
        "properties": {
          "name": {
            "type": [
              "string",
              "null"
            ],
            "description": "The customer's name",
            "example": "John Doe",
            "maxLength": 255
          },
          "email": {
            "type": [
              "string",
              "null"
            ],
            "description": "The customer's email address",
            "example": "johntest@test.com",
            "maxLength": 255
          },
          "phone": {
            "type": [
              "string",
              "null"
            ],
            "description": "The customer's phone number",
            "example": "9123456789",
            "maxLength": 10
          },
          "phone_country_code": {
            "type": [
              "string",
              "null"
            ],
            "description": "The country code for the customer's phone number",
            "example": "+1",
            "maxLength": 2
          }
        }
      },
      "CustomerPaymentMethodResponseItem": {
        "type": "object",
        "required": [
          "id",
          "payment_token",
          "customer_id",
          "payment_method_type",
          "payment_method_subtype",
          "recurring_enabled",
          "created",
          "requires_cvv",
          "last_used_at",
          "is_default"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the payment method.",
            "example": "12345_pm_01926c58bc6e77c09e809964e72af8c8"
          },
          "payment_token": {
            "type": "string",
            "description": "Temporary Token for payment method in vault which gets refreshed for every payment",
            "example": "7ebf443f-a050-4067-84e5-e6f6d4800aef"
          },
          "customer_id": {
            "type": "string",
            "description": "The unique identifier of the customer.",
            "example": "12345_cus_01926c58bc6e77c09e809964e72af8c8",
            "maxLength": 64,
            "minLength": 32
          },
          "payment_method_type": {
            "$ref": "#/components/schemas/PaymentMethod",
            "description": "The type of payment method use for the payment."
          },
          "payment_method_subtype": {
            "$ref": "#/components/schemas/PaymentMethodType",
            "description": "This is a sub-category of payment method."
          },
          "recurring_enabled": {
            "type": "boolean",
            "description": "Indicates whether the payment method is eligible for recurring payments",
            "example": true
          },
          "payment_method_data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PaymentMethodListData",
                "description": "PaymentMethod Data from locker"
              }
            ]
          },
          "bank": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MaskedBankDetails",
                "description": "Masked bank details from PM auth services"
              }
            ]
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "A timestamp (ISO 8601 code) that determines when the payment method was created",
            "example": "2023-01-18T11:04:09.922Z"
          },
          "requires_cvv": {
            "type": "boolean",
            "description": "Whether this payment method requires CVV to be collected",
            "example": true
          },
          "last_used_at": {
            "type": "string",
            "format": "date-time",
            "description": "A timestamp (ISO 8601 code) that determines when the payment method was last used",
            "example": "2024-02-24T11:04:09.922Z"
          },
          "is_default": {
            "type": "boolean",
            "description": "Indicates if the payment method has been set to default or not",
            "example": true
          },
          "billing": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Address",
                "description": "The billing details of the payment method"
              }
            ]
          }
        }
      },
      "CustomerPaymentMethodsListResponse": {
        "type": "object",
        "required": [
          "customer_payment_methods"
        ],
        "properties": {
          "customer_payment_methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodResponseItem"
            },
            "description": "List of payment methods for customer"
          }
        }
      },
      "CustomerRequest": {
        "type": "object",
        "description": "The customer details",
        "required": [
          "name",
          "email"
        ],
        "properties": {
          "merchant_reference_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "The merchant identifier for the customer object.",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 64,
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "The customer's name",
            "example": "Jon Test",
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "description": "The customer's email address",
            "example": "JonTest@test.com",
            "maxLength": 255
          },
          "phone": {
            "type": [
              "string",
              "null"
            ],
            "description": "The customer's phone number",
            "example": "9123456789",
            "maxLength": 255
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "description": "An arbitrary string that you can attach to a customer object.",
            "example": "First Customer",
            "maxLength": 255
          },
          "phone_country_code": {
            "type": [
              "string",
              "null"
            ],
            "description": "The country code for the customer phone number",
            "example": "+65",
            "maxLength": 255
          },
          "default_billing_address": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/AddressDetails",
                "description": "The default billing address for the customer"
              }
            ]
          },
          "default_shipping_address": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/AddressDetails",
                "description": "The default shipping address for the customer"
              }
            ]
          },
          "metadata": {
            "type": [
              "object",
              "null"
            ],
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500\ncharacters long. Metadata is useful for storing additional, structured information on an\nobject."
          }
        },
        "additionalProperties": false
      },
      "CustomerResponse": {
        "type": "object",
        "required": [
          "id",
          "merchant_reference_id",
          "created_at"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the customer",
            "example": "12345_cus_01926c58bc6e77c09e809964e72af8c8",
            "maxLength": 64,
            "minLength": 32
          },
          "merchant_reference_id": {
            "type": "string",
            "description": "The identifier for the customer object",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 64,
            "minLength": 1
          },
          "connector_customer_ids": {
            "type": [
              "object",
              "null"
            ],
            "description": "Connector specific customer reference ids"
          },
          "name": {
            "type": [
              "string",
              "null"
            ],
            "description": "The customer's name",
            "example": "Jon Test",
            "maxLength": 255
          },
          "email": {
            "type": [
              "string",
              "null"
            ],
            "description": "The customer's email address",
            "example": "JonTest@test.com",
            "maxLength": 255
          },
          "phone": {
            "type": [
              "string",
              "null"
            ],
            "description": "The customer's phone number",
            "example": "9123456789",
            "maxLength": 255
          },
          "phone_country_code": {
            "type": [
              "string",
              "null"
            ],
            "description": "The country code for the customer phone number",
            "example": "+65",
            "maxLength": 255
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "description": "An arbitrary string that you can attach to a customer object.",
            "example": "First Customer",
            "maxLength": 255
          },
          "default_billing_address": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/AddressDetails",
                "description": "The default billing address for the customer"
              }
            ]
          },
          "default_shipping_address": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/AddressDetails",
                "description": "The default shipping address for the customer"
              }
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "A timestamp (ISO 8601 code) that determines when the customer was created",
            "example": "2023-01-18T11:04:09.922Z"
          },
          "metadata": {
            "type": [
              "object",
              "null"
            ],
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500\ncharacters long. Metadata is useful for storing additional, structured information on an\nobject."
          },
          "default_payment_method_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "The identifier for the default payment method.",
            "example": "12345_pm_01926c58bc6e77c09e809964e72af8c8",
            "maxLength": 64
          }
        }
      },
      "CustomerUpdateRequest": {
        "type": "object",
        "required": [
          "name",
          "email"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The customer's name",
            "example": "Jon Test",
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "description": "The customer's email address",
            "example": "JonTest@test.com",
            "maxLength": 255
          },
          "phone": {
            "type": [
              "string",
              "null"
            ],
            "description": "The customer's phone number",
            "example": "9123456789",
            "maxLength": 255
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "description": "An arbitrary string that you can attach to a customer object.",
            "example": "First Customer",
            "maxLength": 255
          },
          "phone_country_code": {
            "type": [
              "string",
              "null"
            ],
            "description": "The country code for the customer phone number",
            "example": "+65",
            "maxLength": 255
          },
          "default_billing_address": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/AddressDetails",
                "description": "The default billing address for the customer"
              }
            ]
          },
          "default_shipping_address": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/AddressDetails",
                "description": "The default shipping address for the customer"
              }
            ]
          },
          "metadata": {
            "type": [
              "object",
              "null"
            ],
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500\ncharacters long. Metadata is useful for storing additional, structured information on an\nobject."
          },
          "default_payment_method_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "The unique identifier of the payment method",
            "example": "12345_pm_01926c58bc6e77c09e809964e72af8c8"
          }
        },
        "additionalProperties": false
      },
      "DecisionEngineEliminationData": {
        "type": "object",
        "required": [
          "threshold"
        ],
        "properties": {
          "threshold": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "DecisionEngineGatewayWiseExtraScore": {
        "type": "object",
        "required": [
          "gatewayName",
          "gatewaySigmaFactor"
        ],
        "properties": {
          "gatewayName": {
            "type": "string"
          },
          "gatewaySigmaFactor": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "DecisionEngineSRSubLevelInputConfig": {
        "type": "object",
        "properties": {
          "paymentMethodType": {
            "type": [
              "string",
              "null"
            ]
          },
          "paymentMethod": {
            "type": [
              "string",
              "null"
            ]
          },
          "latencyThreshold": {
            "type": [
              "number",
              "null"
            ],
            "format": "double"
          },
          "bucketSize": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "hedgingPercent": {
            "type": [
              "number",
              "null"
            ],
            "format": "double"
          },
          "lowerResetFactor": {
            "type": [
              "number",
              "null"
            ],
            "format": "double"
          },
          "upperResetFactor": {
            "type": [
              "number",
              "null"
            ],
            "format": "double"
          },
          "gatewayExtraScore": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/DecisionEngineGatewayWiseExtraScore"
            }
          }
        }
      },
      "DecisionEngineSuccessRateData": {
        "type": "object",
        "properties": {
          "defaultLatencyThreshold": {
            "type": [
              "number",
              "null"
            ],
            "format": "double"
          },
          "defaultBucketSize": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "defaultHedgingPercent": {
            "type": [
              "number",
              "null"
            ],
            "format": "double"
          },
          "defaultLowerResetFactor": {
            "type": [
              "number",
              "null"
            ],
            "format": "double"
          },
          "defaultUpperResetFactor": {
            "type": [
              "number",
              "null"
            ],
            "format": "double"
          },
          "defaultGatewayExtraScore": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/DecisionEngineGatewayWiseExtraScore"
            }
          },
          "subLevelInputConfig": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/DecisionEngineSRSubLevelInputConfig"
            }
          }
        }
      },
      "DecoupledAuthenticationType": {
        "type": "string",
        "enum": [
          "challenge",
          "frictionless"
        ]
      },
      "DeviceChannel": {
        "type": "string",
        "description": "Device Channel indicating whether request is coming from App or Browser",
        "enum": [
          "APP",
          "BRW"
        ]
      },
      "DisplayAmountOnSdk": {
        "type": "object",
        "required": [
          "net_amount",
          "order_tax_amount",
          "shipping_cost"
        ],
        "properties": {
          "net_amount": {
            "type": "string",
            "description": "net amount = amount + order_tax_amount + shipping_cost"
          },
          "order_tax_amount": {
            "type": "string",
            "description": "order tax amount calculated by tax connectors"
          },
          "shipping_cost": {
            "type": "string",
            "description": "shipping cost for the order"
          }
        }
      },
      "DisputeResponse": {
        "type": "object",
        "required": [
          "dispute_id",
          "payment_id",
          "attempt_id",
          "amount",
          "currency",
          "dispute_stage",
          "dispute_status",
          "connector",
          "connector_status",
          "connector_dispute_id",
          "created_at"
        ],
        "properties": {
          "dispute_id": {
            "type": "string",
            "description": "The identifier for dispute"
          },
          "payment_id": {
            "type": "string",
            "description": "The identifier for payment_intent"
          },
          "attempt_id": {
            "type": "string",
            "description": "The identifier for payment_attempt"
          },
          "amount": {
            "$ref": "#/components/schemas/StringMinorUnit",
            "description": "The dispute amount"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency",
            "description": "The three-letter ISO currency code"
          },
          "dispute_stage": {
            "$ref": "#/components/schemas/DisputeStage",
            "description": "Stage of the dispute"
          },
          "dispute_status": {
            "$ref": "#/components/schemas/DisputeStatus",
            "description": "Status of the dispute"
          },
          "connector": {
            "type": "string",
            "description": "connector to which dispute is associated with"
          },
          "connector_status": {
            "type": "string",
            "description": "Status of the dispute sent by connector"
          },
          "connector_dispute_id": {
            "type": "string",
            "description": "Dispute id sent by connector"
          },
          "connector_reason": {
            "type": [
              "string",
              "null"
            ],
            "description": "Reason of dispute sent by connector"
          },
          "connector_reason_code": {
            "type": [
              "string",
              "null"
            ],
            "description": "Reason code of dispute sent by connector"
          },
          "challenge_required_by": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time",
            "description": "Evidence deadline of dispute sent by connector"
          },
          "connector_created_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time",
            "description": "Dispute created time sent by connector"
          },
          "connector_updated_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time",
            "description": "Dispute updated time sent by connector"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which dispute is received"
          },
          "profile_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "The `profile_id` associated with the dispute"
          },
          "merchant_connector_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "The `merchant_connector_id` of the connector / processor through which the dispute was processed"
          }
        }
      },
      "DisputeResponsePaymentsRetrieve": {
        "type": "object",
        "required": [
          "dispute_id",
          "dispute_stage",
          "dispute_status",
          "connector_status",
          "connector_dispute_id",
          "created_at"
        ],
        "properties": {
          "dispute_id": {
            "type": "string",
            "description": "The identifier for dispute"
          },
          "dispute_stage": {
            "$ref": "#/components/schemas/DisputeStage",
            "description": "Stage of the dispute"
          },
          "dispute_status": {
            "$ref": "#/components/schemas/DisputeStatus",
            "description": "Status of the dispute"
          },
          "connector_status": {
            "type": "string",
            "description": "Status of the dispute sent by connector"
          },
          "connector_dispute_id": {
            "type": "string",
            "description": "Dispute id sent by connector"
          },
          "connector_reason": {
            "type": [
              "string",
              "null"
            ],
            "description": "Reason of dispute sent by connector"
          },
          "connector_reason_code": {
            "type": [
              "string",
              "null"
            ],
            "description": "Reason code of dispute sent by connector"
          },
          "challenge_required_by": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time",
            "description": "Evidence deadline of dispute sent by connector"
          },
          "connector_created_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time",
            "description": "Dispute created time sent by connector"
          },
          "connector_updated_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time",
            "description": "Dispute updated time sent by connector"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which dispute is received"
          }
        }
      },
      "DisputeStage": {
        "type": "string",
        "description": "Stage of the dispute",
        "enum": [
          "pre_dispute",
          "dispute",
          "pre_arbitration"
        ]
      },
      "DisputeStatus": {
        "type": "string",
        "description": "Status of the dispute",
        "enum": [
          "dispute_opened",
          "dispute_expired",
          "dispute_accepted",
          "dispute_cancelled",
          "dispute_challenged",
          "dispute_won",
          "dispute_lost"
        ]
      },
      "DokuBankTransferInstructions": {
        "type": "object",
        "required": [
          "expires_at",
          "reference",
          "instructions_url"
        ],
        "properties": {
          "expires_at": {
            "type": "string",
            "example": "1707091200000"
          },
          "reference": {
            "type": "string",
            "example": "122385736258"
          },
          "instructions_url": {
            "type": "string"
          }
        }
      },
      "DokuBillingDetails": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "The billing first name for Doku",
            "example": "Jane"
          },
          "last_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "The billing second name for Doku",
            "example": "Doe"
          },
          "email": {
            "type": [
              "string",
              "null"
            ],
            "description": "The Email ID for Doku billing",
            "example": "example@me.com"
          }
        }
      },
      "DynamicRoutingAlgorithm": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/EliminationRoutingConfig"
          },
          {
            "$ref": "#/components/schemas/SuccessBasedRoutingConfig"
          },
          {
            "$ref": "#/components/schemas/ContractBasedRoutingConfig"
          }
        ]
      },
      "DynamicRoutingConfigParams": {
        "type": "string",
        "enum": [
          "PaymentMethod",
          "PaymentMethodType",
          "AuthenticationType",
          "Currency",
          "Country",
          "CardNetwork",
          "CardBin"
        ]
      },
      "ElementPosition": {
        "type": "string",
        "enum": [
          "left",
          "top left",
          "top",
          "top right",
          "right",
          "bottom right",
          "bottom",
          "bottom left",
          "center"
        ]
      },
      "ElementSize": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "Variants"
            ],
            "properties": {
              "Variants": {
                "$ref": "#/components/schemas/SizeVariants"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "Percentage"
            ],
            "properties": {
              "Percentage": {
                "type": "integer",
                "format": "int32",
                "minimum": 0
              }
            }
          },
          {
            "type": "object",
            "required": [
              "Pixels"
            ],
            "properties": {
              "Pixels": {
                "type": "integer",
                "format": "int32",
                "minimum": 0
              }
            }
          }
        ]
      },
      "EliminationAnalyserConfig": {
        "type": "object",
        "properties": {
          "bucket_size": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "minimum": 0
          },
          "bucket_leak_interval_in_secs": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "EliminationRoutingConfig": {
        "type": "object",
        "properties": {
          "params": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/DynamicRoutingConfigParams"
            }
          },
          "elimination_analyser_config": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/EliminationAnalyserConfig"
              }
            ]
          },
          "decision_engine_configs": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/DecisionEngineEliminationData"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "EnablePaymentLinkRequest": {
        "type": "string",
        "description": "Whether payment link is requested to be enabled or not for this transaction",
        "enum": [
          "Enable",
          "Skip"
        ]
      },
      "EnabledPaymentMethod": {
        "type": "object",
        "description": "Object for EnabledPaymentMethod",
        "required": [
          "payment_method",
          "payment_method_types"
        ],
        "properties": {
          "payment_method": {
            "$ref": "#/components/schemas/PaymentMethod",
            "description": "Payment method (banks, cards, wallets) enabled for the operation"
          },
          "payment_method_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodType"
            },
            "description": "An array of associated payment method types",
            "uniqueItems": true
          }
        }
      },
      "ErrorCategory": {
        "type": "string",
        "enum": [
          "frm_decline",
          "processor_downtime",
          "processor_decline_unauthorized",
          "issue_with_payment_method",
          "processor_decline_incorrect_data"
        ]
      },
      "ErrorDetails": {
        "type": "object",
        "description": "Error details for the payment",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "The error code"
          },
          "message": {
            "type": "string",
            "description": "The error message"
          },
          "unified_code": {
            "type": [
              "string",
              "null"
            ],
            "description": "The unified error code across all connectors.\nThis can be relied upon for taking decisions based on the error."
          },
          "unified_message": {
            "type": [
              "string",
              "null"
            ],
            "description": "The unified error message across all connectors.\nIf there is a translation available, this will have the translated message"
          },
          "network_advice_code": {
            "type": [
              "string",
              "null"
            ],
            "description": "This field can be returned for both approved and refused Mastercard payments.\nThis code provides additional information about the type of transaction or the reason why the payment failed.\nIf the payment failed, the network advice code gives guidance on if and when you can retry the payment."
          },
          "network_decline_code": {
            "type": [
              "string",
              "null"
            ],
            "description": "For card errors resulting from a card issuer decline, a brand specific 2, 3, or 4 digit code which indicates the reason the authorization failed."
          },
          "network_error_message": {
            "type": [
              "string",
              "null"
            ],
            "description": "A string indicating how to proceed with an network error if payment gateway provide one. This is used to understand the network error code better."
          }
        }
      },
      "EventClass": {
        "type": "string",
        "enum": [
          "payments",
          "refunds",
          "disputes",
          "mandates",
          "payouts"
        ]
      },
      "EventListItemResponse": {
        "type": "object",
        "description": "The response body for each item when listing events.",
        "required": [
          "event_id",
          "merchant_id",
          "profile_id",
          "object_id",
          "event_type",
          "event_class",
          "initial_attempt_id",
          "created"
        ],
        "properties": {
          "event_id": {
            "type": "string",
            "description": "The identifier for the Event.",
            "example": "evt_018e31720d1b7a2b82677d3032cab959",
            "maxLength": 64
          },
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account.",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 64
          },
          "profile_id": {
            "type": "string",
            "description": "The identifier for the Business Profile.",
            "example": "SqB0zwDGR5wHppWf0bx7GKr1f2",
            "maxLength": 64
          },
          "object_id": {
            "type": "string",
            "description": "The identifier for the object (Payment Intent ID, Refund ID, etc.)",
            "example": "QHrfd5LUDdZaKtAjdJmMu0dMa1",
            "maxLength": 64
          },
          "event_type": {
            "$ref": "#/components/schemas/EventType",
            "description": "Specifies the type of event, which includes the object and its status."
          },
          "event_class": {
            "$ref": "#/components/schemas/EventClass",
            "description": "Specifies the class of event (the type of object: Payment, Refund, etc.)"
          },
          "is_delivery_successful": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Indicates whether the webhook was ultimately delivered or not."
          },
          "initial_attempt_id": {
            "type": "string",
            "description": "The identifier for the initial delivery attempt. This will be the same as `event_id` for\nthe initial delivery attempt.",
            "example": "evt_018e31720d1b7a2b82677d3032cab959",
            "maxLength": 64
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the event was created.",
            "example": "2022-09-10T10:11:12Z"
          }
        }
      },
      "EventRetrieveResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EventListItemResponse"
          },
          {
            "type": "object",
            "required": [
              "request",
              "response"
            ],
            "properties": {
              "request": {
                "$ref": "#/components/schemas/OutgoingWebhookRequestContent",
                "description": "The request information (headers and body) sent in the webhook."
              },
              "response": {
                "$ref": "#/components/schemas/OutgoingWebhookResponseContent",
                "description": "The response information (headers, body and status code) received for the webhook sent."
              },
              "delivery_attempt": {
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/components/schemas/WebhookDeliveryAttempt",
                    "description": "Indicates the type of delivery attempt."
                  }
                ]
              }
            }
          }
        ],
        "description": "The response body for retrieving an event."
      },
      "EventType": {
        "type": "string",
        "enum": [
          "payment_succeeded",
          "payment_failed",
          "payment_processing",
          "payment_cancelled",
          "payment_authorized",
          "payment_captured",
          "action_required",
          "refund_succeeded",
          "refund_failed",
          "dispute_opened",
          "dispute_expired",
          "dispute_accepted",
          "dispute_cancelled",
          "dispute_challenged",
          "dispute_won",
          "dispute_lost",
          "mandate_active",
          "mandate_revoked",
          "payout_success",
          "payout_failed",
          "payout_initiated",
          "payout_processing",
          "payout_cancelled",
          "payout_expired",
          "payout_reversed"
        ]
      },
      "ExtendedCardInfo": {
        "type": "object",
        "required": [
          "card_number",
          "card_exp_month",
          "card_exp_year",
          "card_holder_name",
          "card_cvc"
        ],
        "properties": {
          "card_number": {
            "type": "string",
            "description": "The card number",
            "example": "4242424242424242"
          },
          "card_exp_month": {
            "type": "string",
            "description": "The card's expiry month",
            "example": "24"
          },
          "card_exp_year": {
            "type": "string",
            "description": "The card's expiry year",
            "example": "24"
          },
          "card_holder_name": {
            "type": "string",
            "description": "The card holder's name",
            "example": "John Test"
          },
          "card_cvc": {
            "type": "string",
            "description": "The CVC number for the card",
            "example": "242"
          },
          "card_issuer": {
            "type": [
              "string",
              "null"
            ],
            "description": "The name of the issuer of card",
            "example": "chase"
          },
          "card_network": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CardNetwork",
                "description": "The card network for the card"
              }
            ]
          },
          "card_type": {
            "type": [
              "string",
              "null"
            ],
            "example": "CREDIT"
          },
          "card_issuing_country": {
            "type": [
              "string",
              "null"
            ],
            "example": "INDIA"
          },
          "bank_code": {
            "type": [
              "string",
              "null"
            ],
            "example": "JP_AMEX"
          }
        }
      },
      "ExtendedCardInfoConfig": {
        "type": "object",
        "required": [
          "public_key"
        ],
        "properties": {
          "public_key": {
            "type": "string",
            "description": "Merchant public key"
          },
          "ttl_in_secs": {
            "type": "integer",
            "format": "int32",
            "description": "TTL for extended card info",
            "default": 900,
            "maximum": 7200,
            "minimum": 0
          }
        }
      },
      "ExtendedCardInfoResponse": {
        "type": "object",
        "required": [
          "payload"
        ],
        "properties": {
          "payload": {
            "type": "string"
          }
        }
      },
      "External3dsAuthenticationRequest": {
        "type": "string",
        "description": "Whether 3ds authentication is requested or not",
        "enum": [
          "Enable",
          "Skip"
        ]
      },
      "ExternalAuthenticationDetailsResponse": {
        "type": "object",
        "description": "Details of external authentication",
        "required": [
          "status"
        ],
        "properties": {
          "authentication_flow": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/DecoupledAuthenticationType",
                "description": "Authentication Type - Challenge / Frictionless"
              }
            ]
          },
          "electronic_commerce_indicator": {
            "type": [
              "string",
              "null"
            ],
            "description": "Electronic Commerce Indicator (eci)"
          },
          "status": {
            "$ref": "#/components/schemas/AuthenticationStatus",
            "description": "Authentication Status"
          },
          "ds_transaction_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "DS Transaction ID"
          },
          "version": {
            "type": [
              "string",
              "null"
            ],
            "description": "Message Version"
          },
          "error_code": {
            "type": [
              "string",
              "null"
            ],
            "description": "Error Code"
          },
          "error_message": {
            "type": [
              "string",
              "null"
            ],
            "description": "Error Message"
          }
        }
      },
      "ExternalVaultConnectorDetails": {
        "type": "object",
        "properties": {
          "vault_connector_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "Merchant Connector id to be stored for vault connector"
          },
          "vault_sdk": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/VaultSdk",
                "description": "External vault to be used for storing payment method information"
              }
            ]
          }
        }
      },
      "FeatureMatrixListResponse": {
        "type": "object",
        "required": [
          "connector_count",
          "connectors"
        ],
        "properties": {
          "connector_count": {
            "type": "integer",
            "description": "The number of connectors included in the response",
            "minimum": 0
          },
          "connectors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConnectorFeatureMatrixResponse"
            }
          }
        }
      },
      "FeatureMatrixRequest": {
        "type": "object",
        "properties": {
          "connectors": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/Connector"
            }
          }
        }
      },
      "FeatureMetadata": {
        "type": "object",
        "description": "additional data that might be required by hyperswitch",
        "properties": {
          "redirect_response": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/RedirectResponse",
                "description": "Redirection response coming in request as metadata field only for redirection scenarios"
              }
            ]
          },
          "search_tags": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            },
            "description": "Additional tags to be used for global search"
          },
          "apple_pay_recurring_details": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ApplePayRecurringDetails",
                "description": "Recurring payment details required for apple pay Merchant Token"
              }
            ]
          },
          "payment_revenue_recovery_metadata": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PaymentRevenueRecoveryMetadata",
                "description": "revenue recovery data for payment intent"
              }
            ]
          }
        }
      },
      "FeatureStatus": {
        "type": "string",
        "description": "The status of the feature",
        "enum": [
          "not_supported",
          "supported"
        ]
      },
      "FieldType": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "user_card_number"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_card_expiry_month"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_card_expiry_year"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_card_cvc"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_card_network"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_full_name"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_email_address"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_phone_number"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_phone_number_country_code"
            ]
          },
          {
            "type": "object",
            "required": [
              "user_country"
            ],
            "properties": {
              "user_country": {
                "type": "object",
                "required": [
                  "options"
                ],
                "properties": {
                  "options": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "user_currency"
            ],
            "properties": {
              "user_currency": {
                "type": "object",
                "required": [
                  "options"
                ],
                "properties": {
                  "options": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          {
            "type": "string",
            "enum": [
              "user_crypto_currency_network"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_billing_name"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_address_line1"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_address_line2"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_address_city"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_address_pincode"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_address_state"
            ]
          },
          {
            "type": "object",
            "required": [
              "user_address_country"
            ],
            "properties": {
              "user_address_country": {
                "type": "object",
                "required": [
                  "options"
                ],
                "properties": {
                  "options": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          {
            "type": "string",
            "enum": [
              "user_shipping_name"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_shipping_address_line1"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_shipping_address_line2"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_shipping_address_city"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_shipping_address_pincode"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_shipping_address_state"
            ]
          },
          {
            "type": "object",
            "required": [
              "user_shipping_address_country"
            ],
            "properties": {
              "user_shipping_address_country": {
                "type": "object",
                "required": [
                  "options"
                ],
                "properties": {
                  "options": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          {
            "type": "string",
            "enum": [
              "user_social_security_number"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_blik_code"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_bank"
            ]
          },
          {
            "type": "object",
            "required": [
              "user_bank_options"
            ],
            "properties": {
              "user_bank_options": {
                "type": "object",
                "required": [
                  "options"
                ],
                "properties": {
                  "options": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          {
            "type": "string",
            "enum": [
              "user_bank_account_number"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_source_bank_account_id"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_destination_bank_account_id"
            ]
          },
          {
            "type": "string",
            "enum": [
              "text"
            ]
          },
          {
            "type": "object",
            "required": [
              "drop_down"
            ],
            "properties": {
              "drop_down": {
                "type": "object",
                "required": [
                  "options"
                ],
                "properties": {
                  "options": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          {
            "type": "string",
            "enum": [
              "user_date_of_birth"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_vpa_id"
            ]
          },
          {
            "type": "object",
            "required": [
              "language_preference"
            ],
            "properties": {
              "language_preference": {
                "type": "object",
                "required": [
                  "options"
                ],
                "properties": {
                  "options": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          {
            "type": "string",
            "enum": [
              "user_pix_key"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_cpf"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_cnpj"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_iban"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_bsb_number"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_bank_sort_code"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_bank_routing_number"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_msisdn"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_client_identifier"
            ]
          },
          {
            "type": "string",
            "enum": [
              "order_details_product_name"
            ]
          }
        ],
        "description": "Possible field type of required fields in payment_method_data"
      },
      "ForceSync": {
        "type": "string",
        "enum": [
          "true",
          "false"
        ]
      },
      "FrmAction": {
        "type": "string",
        "enum": [
          "cancel_txn",
          "auto_refund",
          "manual_review"
        ]
      },
      "FrmConfigs": {
        "type": "object",
        "description": "Details of FrmConfigs are mentioned here... it should be passed in payment connector create api call, and stored in merchant_connector_table",
        "required": [
          "payment_methods"
        ],
        "properties": {
          "gateway": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Connector",
                "description": "this is the connector that can be used for the payment"
              }
            ]
          },
          "payment_methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FrmPaymentMethod"
            },
            "description": "payment methods that can be used in the payment"
          }
        },
        "additionalProperties": false
      },
      "FrmMessage": {
        "type": "object",
        "description": "frm message is an object sent inside the payments response...when frm is invoked, its value is Some(...), else its None",
        "required": [
          "frm_name"
        ],
        "properties": {
          "frm_name": {
            "type": "string"
          },
          "frm_transaction_id": {
            "type": [
              "string",
              "null"
            ]
          },
          "frm_transaction_type": {
            "type": [
              "string",
              "null"
            ]
          },
          "frm_status": {
            "type": [
              "string",
              "null"
            ]
          },
          "frm_score": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "frm_reason": {},
          "frm_error": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "FrmPaymentMethod": {
        "type": "object",
        "description": "Details of FrmPaymentMethod are mentioned here... it should be passed in payment connector create api call, and stored in merchant_connector_table",
        "properties": {
          "payment_method": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PaymentMethod",
                "description": "payment methods(card, wallet, etc) that can be used in the payment"
              }
            ]
          },
          "payment_method_types": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/FrmPaymentMethodType"
            },
            "description": "payment method types(credit, debit) that can be used in the payment. This field is deprecated. It has not been removed to provide backward compatibility."
          },
          "flow": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/FrmPreferredFlowTypes",
                "description": "frm flow type to be used, can be pre/post"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "FrmPaymentMethodType": {
        "type": "object",
        "description": "Details of FrmPaymentMethodType are mentioned here... it should be passed in payment connector create api call, and stored in merchant_connector_table",
        "required": [
          "flow",
          "action"
        ],
        "properties": {
          "payment_method_type": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PaymentMethodType",
                "description": "payment method types(credit, debit) that can be used in the payment"
              }
            ]
          },
          "card_networks": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/CardNetwork"
            },
            "description": "card networks(like visa mastercard) types that can be used in the payment"
          },
          "flow": {
            "$ref": "#/components/schemas/FrmPreferredFlowTypes",
            "description": "frm flow type to be used, can be pre/post"
          },
          "action": {
            "$ref": "#/components/schemas/FrmAction",
            "description": "action that the frm would take, in case fraud is detected"
          }
        },
        "additionalProperties": false
      },
      "FrmPreferredFlowTypes": {
        "type": "string",
        "enum": [
          "pre",
          "post"
        ]
      },
      "FutureUsage": {
        "type": "string",
        "description": "Specifies how the payment method can be used for future payments.\n- `off_session`: The payment method can be used for future payments when the customer is not present.\n- `on_session`: The payment method is intended for use only when the customer is present during checkout.\nIf omitted, defaults to `on_session`.",
        "enum": [
          "off_session",
          "on_session"
        ]
      },
      "GcashRedirection": {
        "type": "object"
      },
      "GenericLinkUiConfig": {
        "type": "object",
        "description": "Object for GenericLinkUiConfig",
        "properties": {
          "logo": {
            "type": [
              "string",
              "null"
            ],
            "description": "Merchant's display logo",
            "example": "https://hyperswitch.io/favicon.ico",
            "maxLength": 255
          },
          "merchant_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Custom merchant name for the link",
            "example": "Hyperswitch",
            "maxLength": 255
          },
          "theme": {
            "type": [
              "string",
              "null"
            ],
            "description": "Primary color to be used in the form represented in hex format",
            "example": "#4285F4",
            "maxLength": 255
          }
        }
      },
      "GenericTokenizationRequest": {
        "type": "object",
        "required": [
          "customer_id",
          "token_request"
        ],
        "properties": {
          "customer_id": {
            "type": "string",
            "description": "Customer ID for which the tokenization is requested",
            "example": "12345_cus_01926c58bc6e77c09e809964e72af8c8"
          },
          "token_request": {
            "type": "object",
            "description": "Request for tokenization which contains the data to be tokenized"
          }
        }
      },
      "GenericTokenizationResponse": {
        "type": "object",
        "required": [
          "id",
          "created_at",
          "flag"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier returned by the tokenization service",
            "example": "12345_tok_01926c58bc6e77c09e809964e72af8c8"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Created time of the tokenization id",
            "example": "2024-02-24T11:04:09.922Z"
          },
          "flag": {
            "type": "string",
            "description": "Status of the tokenization id created",
            "example": "enabled"
          }
        }
      },
      "GiftCardAdditionalData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "givex"
            ],
            "properties": {
              "givex": {
                "$ref": "#/components/schemas/GivexGiftCardAdditionalData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "pay_safe_card"
            ],
            "properties": {
              "pay_safe_card": {
                "type": "object"
              }
            }
          }
        ]
      },
      "GiftCardData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "givex"
            ],
            "properties": {
              "givex": {
                "$ref": "#/components/schemas/GiftCardDetails"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "pay_safe_card"
            ],
            "properties": {
              "pay_safe_card": {
                "type": "object"
              }
            }
          }
        ]
      },
      "GiftCardDetails": {
        "type": "object",
        "required": [
          "number",
          "cvc"
        ],
        "properties": {
          "number": {
            "type": "string",
            "description": "The gift card number"
          },
          "cvc": {
            "type": "string",
            "description": "The card verification code."
          }
        }
      },
      "GiftCardResponse": {
        "allOf": [
          {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/GiftCardAdditionalData"
              }
            ]
          }
        ]
      },
      "GiropayBankRedirectAdditionalData": {
        "type": "object",
        "properties": {
          "bic": {
            "type": [
              "string",
              "null"
            ],
            "description": "Masked bank account bic code"
          },
          "iban": {
            "type": [
              "string",
              "null"
            ],
            "description": "Partially masked international bank account number (iban) for SEPA"
          },
          "country": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CountryAlpha2",
                "description": "Country for bank payment"
              }
            ]
          }
        }
      },
      "GivexGiftCardAdditionalData": {
        "type": "object",
        "required": [
          "last4"
        ],
        "properties": {
          "last4": {
            "type": "string",
            "description": "Last 4 digits of the gift card number",
            "example": "4242"
          }
        }
      },
      "GoPayRedirection": {
        "type": "object"
      },
      "GooglePayAssuranceDetails": {
        "type": "object",
        "required": [
          "card_holder_authenticated",
          "account_verified"
        ],
        "properties": {
          "card_holder_authenticated": {
            "type": "boolean",
            "description": "indicates that Cardholder possession validation has been performed"
          },
          "account_verified": {
            "type": "boolean",
            "description": "indicates that identification and verifications (ID&V) was performed"
          }
        }
      },
      "GooglePayPaymentMethodInfo": {
        "type": "object",
        "required": [
          "card_network",
          "card_details"
        ],
        "properties": {
          "card_network": {
            "type": "string",
            "description": "The name of the card network"
          },
          "card_details": {
            "type": "string",
            "description": "The details of the card"
          },
          "assurance_details": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/GooglePayAssuranceDetails"
              }
            ]
          }
        }
      },
      "GooglePayRedirectData": {
        "type": "object"
      },
      "GooglePaySessionResponse": {
        "type": "object",
        "required": [
          "merchant_info",
          "shipping_address_required",
          "email_required",
          "shipping_address_parameters",
          "allowed_payment_methods",
          "transaction_info",
          "delayed_session_token",
          "connector",
          "sdk_next_action"
        ],
        "properties": {
          "merchant_info": {
            "$ref": "#/components/schemas/GpayMerchantInfo",
            "description": "The merchant info"
          },
          "shipping_address_required": {
            "type": "boolean",
            "description": "Is shipping address required"
          },
          "email_required": {
            "type": "boolean",
            "description": "Is email required"
          },
          "shipping_address_parameters": {
            "$ref": "#/components/schemas/GpayShippingAddressParameters",
            "description": "Shipping address parameters"
          },
          "allowed_payment_methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GpayAllowedPaymentMethods"
            },
            "description": "List of the allowed payment meythods"
          },
          "transaction_info": {
            "$ref": "#/components/schemas/GpayTransactionInfo",
            "description": "The transaction info Google Pay requires"
          },
          "delayed_session_token": {
            "type": "boolean",
            "description": "Identifier for the delayed session response"
          },
          "connector": {
            "type": "string",
            "description": "The name of the connector"
          },
          "sdk_next_action": {
            "$ref": "#/components/schemas/SdkNextAction",
            "description": "The next action for the sdk (ex: calling confirm or sync call)"
          },
          "secrets": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/SecretInfoToInitiateSdk",
                "description": "Secrets for sdk display and payment"
              }
            ]
          }
        }
      },
      "GooglePayThirdPartySdk": {
        "type": "object",
        "required": [
          "delayed_session_token",
          "connector",
          "sdk_next_action"
        ],
        "properties": {
          "delayed_session_token": {
            "type": "boolean",
            "description": "Identifier for the delayed session response"
          },
          "connector": {
            "type": "string",
            "description": "The name of the connector"
          },
          "sdk_next_action": {
            "$ref": "#/components/schemas/SdkNextAction",
            "description": "The next action for the sdk (ex: calling confirm or sync call)"
          }
        }
      },
      "GooglePayThirdPartySdkData": {
        "type": "object"
      },
      "GooglePayWalletData": {
        "type": "object",
        "required": [
          "type",
          "description",
          "info",
          "tokenization_data"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of payment method"
          },
          "description": {
            "type": "string",
            "description": "User-facing message to describe the payment method that funds this transaction."
          },
          "info": {
            "$ref": "#/components/schemas/GooglePayPaymentMethodInfo",
            "description": "The information of the payment method"
          },
          "tokenization_data": {
            "$ref": "#/components/schemas/GpayTokenizationData",
            "description": "The tokenization data of Google pay"
          }
        }
      },
      "GpayAllowedMethodsParameters": {
        "type": "object",
        "required": [
          "allowed_auth_methods",
          "allowed_card_networks"
        ],
        "properties": {
          "allowed_auth_methods": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of allowed auth methods (ex: 3DS, No3DS, PAN_ONLY etc)"
          },
          "allowed_card_networks": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of allowed card networks (ex: AMEX,JCB etc)"
          },
          "billing_address_required": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Is billing address required"
          },
          "billing_address_parameters": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/GpayBillingAddressParameters",
                "description": "Billing address parameters"
              }
            ]
          },
          "assurance_details_required": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Whether assurance details are required"
          }
        }
      },
      "GpayAllowedPaymentMethods": {
        "type": "object",
        "required": [
          "type",
          "parameters",
          "tokenization_specification"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of payment method"
          },
          "parameters": {
            "$ref": "#/components/schemas/GpayAllowedMethodsParameters",
            "description": "The parameters Google Pay requires"
          },
          "tokenization_specification": {
            "$ref": "#/components/schemas/GpayTokenizationSpecification",
            "description": "The tokenization specification for Google Pay"
          }
        }
      },
      "GpayBillingAddressFormat": {
        "type": "string",
        "enum": [
          "FULL",
          "MIN"
        ]
      },
      "GpayBillingAddressParameters": {
        "type": "object",
        "required": [
          "phone_number_required",
          "format"
        ],
        "properties": {
          "phone_number_required": {
            "type": "boolean",
            "description": "Is billing phone number required"
          },
          "format": {
            "$ref": "#/components/schemas/GpayBillingAddressFormat",
            "description": "Billing address format"
          }
        }
      },
      "GpayMerchantInfo": {
        "type": "object",
        "required": [
          "merchant_name"
        ],
        "properties": {
          "merchant_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "The merchant Identifier that needs to be passed while invoking Gpay SDK"
          },
          "merchant_name": {
            "type": "string",
            "description": "The name of the merchant that needs to be displayed on Gpay PopUp"
          }
        }
      },
      "GpaySessionTokenResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/GooglePayThirdPartySdk",
            "description": "Google pay response involving third party sdk"
          },
          {
            "$ref": "#/components/schemas/GooglePaySessionResponse",
            "description": "Google pay session response for non third party sdk"
          }
        ]
      },
      "GpayShippingAddressParameters": {
        "type": "object",
        "required": [
          "phone_number_required"
        ],
        "properties": {
          "phone_number_required": {
            "type": "boolean",
            "description": "Is shipping phone number required"
          }
        }
      },
      "GpayTokenParameters": {
        "type": "object",
        "properties": {
          "gateway": {
            "type": [
              "string",
              "null"
            ],
            "description": "The name of the connector"
          },
          "gateway_merchant_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "The merchant ID registered in the connector associated"
          },
          "stripe:version": {
            "type": [
              "string",
              "null"
            ]
          },
          "stripe:publishableKey": {
            "type": [
              "string",
              "null"
            ]
          },
          "protocol_version": {
            "type": [
              "string",
              "null"
            ],
            "description": "The protocol version for encryption"
          },
          "public_key": {
            "type": [
              "string",
              "null"
            ],
            "description": "The public key provided by the merchant"
          }
        }
      },
      "GpayTokenizationData": {
        "type": "object",
        "required": [
          "type",
          "token"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of the token"
          },
          "token": {
            "type": "string",
            "description": "Token generated for the wallet"
          }
        }
      },
      "GpayTokenizationSpecification": {
        "type": "object",
        "required": [
          "type",
          "parameters"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The token specification type(ex: PAYMENT_GATEWAY)"
          },
          "parameters": {
            "$ref": "#/components/schemas/GpayTokenParameters",
            "description": "The parameters for the token specification Google Pay"
          }
        }
      },
      "GpayTransactionInfo": {
        "type": "object",
        "required": [
          "country_code",
          "currency_code",
          "total_price_status",
          "total_price"
        ],
        "properties": {
          "country_code": {
            "$ref": "#/components/schemas/CountryAlpha2",
            "description": "The country code"
          },
          "currency_code": {
            "$ref": "#/components/schemas/Currency",
            "description": "The currency code"
          },
          "total_price_status": {
            "type": "string",
            "description": "The total price status (ex: 'FINAL')"
          },
          "total_price": {
            "type": "string",
            "description": "The total price",
            "example": "38.02"
          }
        }
      },
      "GsmCreateRequest": {
        "type": "object",
        "required": [
          "connector",
          "flow",
          "sub_flow",
          "code",
          "message",
          "status",
          "decision",
          "step_up_possible",
          "clear_pan_possible"
        ],
        "properties": {
          "connector": {
            "$ref": "#/components/schemas/Connector",
            "description": "The connector through which payment has gone through"
          },
          "flow": {
            "type": "string",
            "description": "The flow in which the code and message occurred for a connector"
          },
          "sub_flow": {
            "type": "string",
            "description": "The sub_flow in which the code and message occurred  for a connector"
          },
          "code": {
            "type": "string",
            "description": "code received from the connector"
          },
          "message": {
            "type": "string",
            "description": "message received from the connector"
          },
          "status": {
            "type": "string",
            "description": "status provided by the router"
          },
          "router_error": {
            "type": [
              "string",
              "null"
            ],
            "description": "optional error provided by the router"
          },
          "decision": {
            "$ref": "#/components/schemas/GsmDecision",
            "description": "decision to be taken for auto retries flow"
          },
          "step_up_possible": {
            "type": "boolean",
            "description": "indicates if step_up retry is possible"
          },
          "unified_code": {
            "type": [
              "string",
              "null"
            ],
            "description": "error code unified across the connectors"
          },
          "unified_message": {
            "type": [
              "string",
              "null"
            ],
            "description": "error message unified across the connectors"
          },
          "error_category": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ErrorCategory",
                "description": "category in which error belongs to"
              }
            ]
          },
          "clear_pan_possible": {
            "type": "boolean",
            "description": "indicates if retry with pan is possible"
          }
        }
      },
      "GsmDecision": {
        "type": "string",
        "enum": [
          "retry",
          "requeue",
          "do_default"
        ]
      },
      "GsmDeleteRequest": {
        "type": "object",
        "required": [
          "connector",
          "flow",
          "sub_flow",
          "code",
          "message"
        ],
        "properties": {
          "connector": {
            "type": "string",
            "description": "The connector through which payment has gone through"
          },
          "flow": {
            "type": "string",
            "description": "The flow in which the code and message occurred for a connector"
          },
          "sub_flow": {
            "type": "string",
            "description": "The sub_flow in which the code and message occurred  for a connector"
          },
          "code": {
            "type": "string",
            "description": "code received from the connector"
          },
          "message": {
            "type": "string",
            "description": "message received from the connector"
          }
        }
      },
      "GsmDeleteResponse": {
        "type": "object",
        "required": [
          "gsm_rule_delete",
          "connector",
          "flow",
          "sub_flow",
          "code"
        ],
        "properties": {
          "gsm_rule_delete": {
            "type": "boolean"
          },
          "connector": {
            "type": "string",
            "description": "The connector through which payment has gone through"
          },
          "flow": {
            "type": "string",
            "description": "The flow in which the code and message occurred for a connector"
          },
          "sub_flow": {
            "type": "string",
            "description": "The sub_flow in which the code and message occurred  for a connector"
          },
          "code": {
            "type": "string",
            "description": "code received from the connector"
          }
        }
      },
      "GsmResponse": {
        "type": "object",
        "required": [
          "connector",
          "flow",
          "sub_flow",
          "code",
          "message",
          "status",
          "decision",
          "step_up_possible",
          "clear_pan_possible"
        ],
        "properties": {
          "connector": {
            "type": "string",
            "description": "The connector through which payment has gone through"
          },
          "flow": {
            "type": "string",
            "description": "The flow in which the code and message occurred for a connector"
          },
          "sub_flow": {
            "type": "string",
            "description": "The sub_flow in which the code and message occurred  for a connector"
          },
          "code": {
            "type": "string",
            "description": "code received from the connector"
          },
          "message": {
            "type": "string",
            "description": "message received from the connector"
          },
          "status": {
            "type": "string",
            "description": "status provided by the router"
          },
          "router_error": {
            "type": [
              "string",
              "null"
            ],
            "description": "optional error provided by the router"
          },
          "decision": {
            "type": "string",
            "description": "decision to be taken for auto retries flow"
          },
          "step_up_possible": {
            "type": "boolean",
            "description": "indicates if step_up retry is possible"
          },
          "unified_code": {
            "type": [
              "string",
              "null"
            ],
            "description": "error code unified across the connectors"
          },
          "unified_message": {
            "type": [
              "string",
              "null"
            ],
            "description": "error message unified across the connectors"
          },
          "error_category": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ErrorCategory",
                "description": "category in which error belongs to"
              }
            ]
          },
          "clear_pan_possible": {
            "type": "boolean",
            "description": "indicates if retry with pan is possible"
          }
        }
      },
      "GsmRetrieveRequest": {
        "type": "object",
        "required": [
          "connector",
          "flow",
          "sub_flow",
          "code",
          "message"
        ],
        "properties": {
          "connector": {
            "$ref": "#/components/schemas/Connector",
            "description": "The connector through which payment has gone through"
          },
          "flow": {
            "type": "string",
            "description": "The flow in which the code and message occurred for a connector"
          },
          "sub_flow": {
            "type": "string",
            "description": "The sub_flow in which the code and message occurred  for a connector"
          },
          "code": {
            "type": "string",
            "description": "code received from the connector"
          },
          "message": {
            "type": "string",
            "description": "message received from the connector"
          }
        }
      },
      "GsmUpdateRequest": {
        "type": "object",
        "required": [
          "connector",
          "flow",
          "sub_flow",
          "code",
          "message"
        ],
        "properties": {
          "connector": {
            "type": "string",
            "description": "The connector through which payment has gone through"
          },
          "flow": {
            "type": "string",
            "description": "The flow in which the code and message occurred for a connector"
          },
          "sub_flow": {
            "type": "string",
            "description": "The sub_flow in which the code and message occurred  for a connector"
          },
          "code": {
            "type": "string",
            "description": "code received from the connector"
          },
          "message": {
            "type": "string",
            "description": "message received from the connector"
          },
          "status": {
            "type": [
              "string",
              "null"
            ],
            "description": "status provided by the router"
          },
          "router_error": {
            "type": [
              "string",
              "null"
            ],
            "description": "optional error provided by the router"
          },
          "decision": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/GsmDecision",
                "description": "decision to be taken for auto retries flow"
              }
            ]
          },
          "step_up_possible": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "indicates if step_up retry is possible"
          },
          "unified_code": {
            "type": [
              "string",
              "null"
            ],
            "description": "error code unified across the connectors"
          },
          "unified_message": {
            "type": [
              "string",
              "null"
            ],
            "description": "error message unified across the connectors"
          },
          "error_category": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ErrorCategory",
                "description": "category in which error belongs to"
              }
            ]
          },
          "clear_pan_possible": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "indicates if retry with pan is possible"
          }
        }
      },
      "HyperswitchVaultSessionDetails": {
        "type": "object",
        "required": [
          "payment_method_session_id",
          "client_secret",
          "publishable_key",
          "profile_id"
        ],
        "properties": {
          "payment_method_session_id": {
            "type": "string",
            "description": "Session ID for Hyperswitch Vault"
          },
          "client_secret": {
            "type": "string",
            "description": "Client secret for Hyperswitch Vault"
          },
          "publishable_key": {
            "type": "string",
            "description": "Publishable key for Hyperswitch Vault"
          },
          "profile_id": {
            "type": "string",
            "description": "Profile ID for Hyperswitch Vault"
          }
        }
      },
      "IfStatement": {
        "type": "object",
        "description": "Represents an IF statement with conditions and optional nested IF statements\n\n```text\npayment.method = card {\n    payment.method.cardtype = (credit, debit) {\n        payment.method.network = (amex, rupay, diners)\n    }\n}\n```",
        "required": [
          "condition"
        ],
        "properties": {
          "condition": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comparison"
            }
          },
          "nested": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/IfStatement"
            }
          }
        }
      },
      "IframeData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "three_ds_method_url",
              "three_ds_method_data_submission",
              "directory_server_id",
              "method_key"
            ],
            "properties": {
              "three_ds_method_url": {
                "type": "string",
                "description": "ThreeDS method url"
              },
              "three_ds_method_data_submission": {
                "type": "boolean",
                "description": "Whether ThreeDS method data submission is required"
              },
              "three_ds_method_data": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "ThreeDS method data"
              },
              "directory_server_id": {
                "type": "string",
                "description": "ThreeDS Server ID"
              },
              "message_version": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "ThreeDS Protocol version"
              },
              "method_key": {
                "type": "string",
                "enum": [
                  "threeDSMethodData"
                ]
              }
            }
          }
        ]
      },
      "IncrementalAuthorizationResponse": {
        "type": "object",
        "required": [
          "authorization_id",
          "amount",
          "status",
          "previously_authorized_amount"
        ],
        "properties": {
          "authorization_id": {
            "type": "string",
            "description": "The unique identifier of authorization"
          },
          "amount": {
            "$ref": "#/components/schemas/MinorUnit",
            "description": "Amount the authorization has been made for"
          },
          "status": {
            "$ref": "#/components/schemas/AuthorizationStatus",
            "description": "The status of the authorization"
          },
          "error_code": {
            "type": [
              "string",
              "null"
            ],
            "description": "Error code sent by the connector for authorization"
          },
          "error_message": {
            "type": [
              "string",
              "null"
            ],
            "description": "Error message sent by the connector for authorization"
          },
          "previously_authorized_amount": {
            "$ref": "#/components/schemas/MinorUnit",
            "description": "Previously authorized amount for the payment"
          }
        }
      },
      "IndomaretVoucherData": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "The billing first name for Alfamart",
            "example": "Jane"
          },
          "last_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "The billing second name for Alfamart",
            "example": "Doe"
          },
          "email": {
            "type": [
              "string",
              "null"
            ],
            "description": "The Email ID for Alfamart",
            "example": "example@me.com"
          }
        }
      },
      "IntentStatus": {
        "type": "string",
        "description": "Represents the overall status of a payment intent.\nThe status transitions through various states depending on the payment method, confirmation, capture method, and any subsequent actions (like customer authentication or manual capture).",
        "enum": [
          "succeeded",
          "failed",
          "cancelled",
          "processing",
          "requires_customer_action",
          "requires_merchant_action",
          "requires_payment_method",
          "requires_confirmation",
          "requires_capture",
          "partially_captured",
          "partially_captured_and_capturable",
          "conflicted"
        ]
      },
      "JCSVoucherData": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "The billing first name for Japanese convenience stores",
            "example": "Jane"
          },
          "last_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "The billing second name Japanese convenience stores",
            "example": "Doe"
          },
          "email": {
            "type": [
              "string",
              "null"
            ],
            "description": "The Email ID for Japanese convenience stores",
            "example": "example@me.com"
          },
          "phone_number": {
            "type": [
              "string",
              "null"
            ],
            "description": "The telephone number for Japanese convenience stores",
            "example": "9123456789"
          }
        }
      },
      "KakaoPayRedirection": {
        "type": "object"
      },
      "KlarnaSdkPaymentMethodResponse": {
        "type": "object",
        "properties": {
          "payment_type": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "KlarnaSessionTokenResponse": {
        "type": "object",
        "required": [
          "session_token",
          "session_id"
        ],
        "properties": {
          "session_token": {
            "type": "string",
            "description": "The session token for Klarna"
          },
          "session_id": {
            "type": "string",
            "description": "The identifier for the session"
          }
        }
      },
      "LabelInformation": {
        "type": "object",
        "required": [
          "label",
          "target_count",
          "target_time",
          "mca_id"
        ],
        "properties": {
          "label": {
            "type": "string"
          },
          "target_count": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "target_time": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "mca_id": {
            "type": "string"
          }
        }
      },
      "LinkedRoutingConfigRetrieveResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/RoutingRetrieveResponse"
          },
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoutingDictionaryRecord"
            }
          }
        ]
      },
      "ListBlocklistQuery": {
        "type": "object",
        "required": [
          "data_kind"
        ],
        "properties": {
          "data_kind": {
            "$ref": "#/components/schemas/BlocklistDataKind"
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        }
      },
      "LocalBankTransferAdditionalData": {
        "type": "object",
        "properties": {
          "bank_code": {
            "type": [
              "string",
              "null"
            ],
            "description": "Partially masked bank code",
            "example": "**** OA2312"
          }
        }
      },
      "MandateAmountData": {
        "type": "object",
        "required": [
          "amount",
          "currency"
        ],
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/MinorUnit",
            "description": "The maximum amount to be debited for the mandate transaction"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency",
            "description": "The currency for the transaction"
          },
          "start_date": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time",
            "description": "Specifying start date of the mandate",
            "example": "2022-09-10T00:00:00Z"
          },
          "end_date": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time",
            "description": "Specifying end date of the mandate",
            "example": "2023-09-10T23:59:59Z"
          },
          "metadata": {
            "type": [
              "object",
              "null"
            ],
            "description": "Additional details required by mandate"
          }
        }
      },
      "MandateCardDetails": {
        "type": "object",
        "properties": {
          "last4_digits": {
            "type": [
              "string",
              "null"
            ],
            "description": "The last 4 digits of card"
          },
          "card_exp_month": {
            "type": [
              "string",
              "null"
            ],
            "description": "The expiry month of card"
          },
          "card_exp_year": {
            "type": [
              "string",
              "null"
            ],
            "description": "The expiry year of card"
          },
          "card_holder_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "The card holder name"
          },
          "card_token": {
            "type": [
              "string",
              "null"
            ],
            "description": "The token from card locker"
          },
          "scheme": {
            "type": [
              "string",
              "null"
            ],
            "description": "The card scheme network for the particular card"
          },
          "issuer_country": {
            "type": [
              "string",
              "null"
            ],
            "description": "The country code in in which the card was issued"
          },
          "card_fingerprint": {
            "type": [
              "string",
              "null"
            ],
            "description": "A unique identifier alias to identify a particular card"
          },
          "card_isin": {
            "type": [
              "string",
              "null"
            ],
            "description": "The first 6 digits of card"
          },
          "card_issuer": {
            "type": [
              "string",
              "null"
            ],
            "description": "The bank that issued the card"
          },
          "card_network": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CardNetwork",
                "description": "The network that facilitates payment card transactions"
              }
            ]
          },
          "card_type": {
            "type": [
              "string",
              "null"
            ],
            "description": "The type of the payment card"
          },
          "nick_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "The nick_name of the card holder"
          }
        }
      },
      "MandateData": {
        "type": "object",
        "description": "Passing this object during payments creates a mandate. The mandate_type sub object is passed by the server.",
        "properties": {
          "update_mandate_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "A way to update the mandate's payment method details"
          },
          "customer_acceptance": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CustomerAcceptance",
                "description": "A consent from the customer to store the payment method"
              }
            ]
          },
          "mandate_type": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MandateType",
                "description": "A way to select the type of mandate used"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "MandateResponse": {
        "type": "object",
        "required": [
          "mandate_id",
          "status",
          "payment_method_id",
          "payment_method"
        ],
        "properties": {
          "mandate_id": {
            "type": "string",
            "description": "The identifier for mandate"
          },
          "status": {
            "$ref": "#/components/schemas/MandateStatus",
            "description": "The status for mandates"
          },
          "payment_method_id": {
            "type": "string",
            "description": "The identifier for payment method"
          },
          "payment_method": {
            "type": "string",
            "description": "The payment method"
          },
          "payment_method_type": {
            "type": [
              "string",
              "null"
            ],
            "description": "The payment method type"
          },
          "card": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MandateCardDetails",
                "description": "The card details for mandate"
              }
            ]
          },
          "customer_acceptance": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CustomerAcceptance",
                "description": "Details about the customer’s acceptance"
              }
            ]
          }
        }
      },
      "MandateRevokedResponse": {
        "type": "object",
        "required": [
          "mandate_id",
          "status"
        ],
        "properties": {
          "mandate_id": {
            "type": "string",
            "description": "The identifier for mandate"
          },
          "status": {
            "$ref": "#/components/schemas/MandateStatus",
            "description": "The status for mandates"
          },
          "error_code": {
            "type": [
              "string",
              "null"
            ],
            "description": "If there was an error while calling the connectors the code is received here",
            "example": "E0001"
          },
          "error_message": {
            "type": [
              "string",
              "null"
            ],
            "description": "If there was an error while calling the connector the error message is received here",
            "example": "Failed while verifying the card"
          }
        }
      },
      "MandateStatus": {
        "type": "string",
        "description": "The status of the mandate, which indicates whether it can be used to initiate a payment.",
        "enum": [
          "active",
          "inactive",
          "pending",
          "revoked"
        ]
      },
      "MandateType": {
        "oneOf": [
          {
            "type": "object",
            "description": "If the mandate should only be valid for 1 off-session use",
            "required": [
              "single_use"
            ],
            "properties": {
              "single_use": {
                "$ref": "#/components/schemas/MandateAmountData",
                "description": "If the mandate should only be valid for 1 off-session use"
              }
            }
          },
          {
            "type": "object",
            "description": "If the mandate should be valid for multiple debits",
            "required": [
              "multi_use"
            ],
            "properties": {
              "multi_use": {
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/components/schemas/MandateAmountData",
                    "description": "If the mandate should be valid for multiple debits"
                  }
                ]
              }
            }
          }
        ]
      },
      "MaskedBankDetails": {
        "type": "object",
        "required": [
          "mask"
        ],
        "properties": {
          "mask": {
            "type": "string"
          }
        }
      },
      "MbWayRedirection": {
        "type": "object",
        "required": [
          "telephone_number"
        ],
        "properties": {
          "telephone_number": {
            "type": "string",
            "description": "Telephone number of the shopper. Should be Portuguese phone number."
          }
        }
      },
      "MerchantAccountCreate": {
        "type": "object",
        "required": [
          "merchant_name",
          "organization_id"
        ],
        "properties": {
          "merchant_name": {
            "type": "string"
          },
          "merchant_details": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MerchantDetails"
              }
            ]
          },
          "metadata": {
            "type": [
              "object",
              "null"
            ]
          },
          "organization_id": {
            "type": "string"
          },
          "product_type": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MerchantProductType",
                "description": "Product Type of this merchant account"
              }
            ]
          }
        }
      },
      "MerchantAccountData": {
        "oneOf": [
          {
            "type": "object",
            "description": "IBAN-based account for international transfers",
            "required": [
              "iban"
            ],
            "properties": {
              "iban": {
                "type": "object",
                "description": "IBAN-based account for international transfers",
                "required": [
                  "iban",
                  "name"
                ],
                "properties": {
                  "iban": {
                    "type": "string",
                    "description": "International Bank Account Number (up to 34 characters)"
                  },
                  "name": {
                    "type": "string",
                    "description": "Account holder name"
                  },
                  "connector_recipient_id": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "description": "UK BACS payment system",
            "required": [
              "bacs"
            ],
            "properties": {
              "bacs": {
                "type": "object",
                "description": "UK BACS payment system",
                "required": [
                  "account_number",
                  "sort_code",
                  "name"
                ],
                "properties": {
                  "account_number": {
                    "type": "string",
                    "description": "8-digit UK account number"
                  },
                  "sort_code": {
                    "type": "string",
                    "description": "6-digit UK sort code",
                    "example": "123456"
                  },
                  "name": {
                    "type": "string",
                    "description": "Account holder name"
                  },
                  "connector_recipient_id": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "description": "UK Faster Payments (instant transfers)",
            "required": [
              "faster_payments"
            ],
            "properties": {
              "faster_payments": {
                "type": "object",
                "description": "UK Faster Payments (instant transfers)",
                "required": [
                  "account_number",
                  "sort_code",
                  "name"
                ],
                "properties": {
                  "account_number": {
                    "type": "string",
                    "description": "8-digit UK account number"
                  },
                  "sort_code": {
                    "type": "string",
                    "description": "6-digit UK sort code"
                  },
                  "name": {
                    "type": "string",
                    "description": "Account holder name"
                  },
                  "connector_recipient_id": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "description": "SEPA payments (Euro zone)",
            "required": [
              "sepa"
            ],
            "properties": {
              "sepa": {
                "type": "object",
                "description": "SEPA payments (Euro zone)",
                "required": [
                  "iban",
                  "name"
                ],
                "properties": {
                  "iban": {
                    "type": "string",
                    "description": "IBAN for SEPA transfers",
                    "example": "FR1420041010050500013M02606"
                  },
                  "name": {
                    "type": "string",
                    "description": "Account holder name"
                  },
                  "connector_recipient_id": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "description": "SEPA Instant payments (10-second transfers)",
            "required": [
              "sepa_instant"
            ],
            "properties": {
              "sepa_instant": {
                "type": "object",
                "description": "SEPA Instant payments (10-second transfers)",
                "required": [
                  "iban",
                  "name"
                ],
                "properties": {
                  "iban": {
                    "type": "string",
                    "description": "IBAN for instant SEPA transfers",
                    "example": "DE89370400440532013000"
                  },
                  "name": {
                    "type": "string",
                    "description": "Account holder name"
                  },
                  "connector_recipient_id": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "description": "Polish Elixir payment system",
            "required": [
              "elixir"
            ],
            "properties": {
              "elixir": {
                "type": "object",
                "description": "Polish Elixir payment system",
                "required": [
                  "account_number",
                  "iban",
                  "name"
                ],
                "properties": {
                  "account_number": {
                    "type": "string",
                    "description": "Polish account number (26 digits)",
                    "example": "12345678901234567890123456"
                  },
                  "iban": {
                    "type": "string",
                    "description": "Polish IBAN (28 chars)",
                    "example": "PL27114020040000300201355387"
                  },
                  "name": {
                    "type": "string",
                    "description": "Account holder name"
                  },
                  "connector_recipient_id": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "description": "Swedish Bankgiro system",
            "required": [
              "bankgiro"
            ],
            "properties": {
              "bankgiro": {
                "type": "object",
                "description": "Swedish Bankgiro system",
                "required": [
                  "number",
                  "name"
                ],
                "properties": {
                  "number": {
                    "type": "string",
                    "description": "Bankgiro number (7-8 digits)",
                    "example": "5402-9656"
                  },
                  "name": {
                    "type": "string",
                    "description": "Account holder name",
                    "example": "Erik Andersson"
                  },
                  "connector_recipient_id": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "description": "Swedish Plusgiro system",
            "required": [
              "plusgiro"
            ],
            "properties": {
              "plusgiro": {
                "type": "object",
                "description": "Swedish Plusgiro system",
                "required": [
                  "number",
                  "name"
                ],
                "properties": {
                  "number": {
                    "type": "string",
                    "description": "Plusgiro number (2-8 digits)",
                    "example": "4789-2"
                  },
                  "name": {
                    "type": "string",
                    "description": "Account holder name",
                    "example": "Anna Larsson"
                  },
                  "connector_recipient_id": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              }
            }
          }
        ]
      },
      "MerchantAccountDeleteResponse": {
        "type": "object",
        "required": [
          "merchant_id",
          "deleted"
        ],
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "deleted": {
            "type": "boolean",
            "description": "If the connector is deleted or not",
            "example": false
          }
        }
      },
      "MerchantAccountResponse": {
        "type": "object",
        "required": [
          "id",
          "merchant_name",
          "publishable_key",
          "organization_id",
          "recon_status"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The identifier for the Merchant Account",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 64
          },
          "merchant_name": {
            "type": "string",
            "description": "Name of the Merchant Account",
            "example": "NewAge Retailer"
          },
          "merchant_details": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MerchantDetails",
                "description": "Details about the merchant"
              }
            ]
          },
          "publishable_key": {
            "type": "string",
            "description": "API key that will be used for server side API access",
            "example": "AH3423bkjbkjdsfbkj"
          },
          "metadata": {
            "type": [
              "object",
              "null"
            ],
            "description": "Metadata is useful for storing additional, unstructured information on an object."
          },
          "organization_id": {
            "type": "string",
            "description": "The id of the organization which the merchant is associated with",
            "example": "org_q98uSGAYbjEwqs0mJwnz",
            "maxLength": 64,
            "minLength": 1
          },
          "recon_status": {
            "$ref": "#/components/schemas/ReconStatus",
            "description": "Used to indicate the status of the recon module for a merchant account"
          },
          "product_type": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MerchantProductType",
                "description": "Product Type of this merchant account"
              }
            ]
          }
        }
      },
      "MerchantAccountUpdate": {
        "type": "object",
        "properties": {
          "merchant_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Name of the Merchant Account",
            "example": "NewAge Retailer"
          },
          "merchant_details": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MerchantDetails",
                "description": "Details about the merchant"
              }
            ]
          },
          "metadata": {
            "type": [
              "object",
              "null"
            ],
            "description": "Metadata is useful for storing additional, unstructured information on an object."
          }
        },
        "additionalProperties": false
      },
      "MerchantCategoryCode": {
        "type": "string",
        "enum": [
          "5411",
          "7011",
          "0763",
          "8111",
          "5021",
          "4816",
          "5661"
        ]
      },
      "MerchantConnectorAccountFeatureMetadata": {
        "type": "object",
        "description": "Feature metadata for merchant connector account",
        "properties": {
          "revenue_recovery": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/RevenueRecoveryMetadata",
                "description": "Revenue recovery metadata for merchant connector account"
              }
            ]
          }
        }
      },
      "MerchantConnectorAuthDetails": {
        "type": "object",
        "description": "Merchant connector details",
        "required": [
          "connector_name",
          "merchant_connector_creds"
        ],
        "properties": {
          "connector_name": {
            "$ref": "#/components/schemas/Connector",
            "description": "The connector used for the payment"
          },
          "merchant_connector_creds": {
            "type": "object",
            "description": "The merchant connector credentials used for the payment"
          }
        }
      },
      "MerchantConnectorCreate": {
        "type": "object",
        "description": "Create a new Merchant Connector for the merchant account. The connector could be a payment processor / facilitator / acquirer or specialized services like Fraud / Accounting etc.\"",
        "required": [
          "connector_type",
          "connector_name",
          "profile_id",
          "payment_methods_enabled"
        ],
        "properties": {
          "connector_type": {
            "$ref": "#/components/schemas/ConnectorType",
            "description": "Type of the Connector for the financial use case. Could range from Payments to Accounting to Banking."
          },
          "connector_name": {
            "$ref": "#/components/schemas/Connector",
            "description": "Name of the Connector"
          },
          "connector_label": {
            "type": [
              "string",
              "null"
            ],
            "description": "This is an unique label you can generate and pass in order to identify this connector account on your Hyperswitch dashboard and reports, If not passed then if will take `connector_name`_`profile_name`. Eg: if your profile label is `default`, connector label can be `stripe_default`",
            "example": "stripe_US_travel"
          },
          "profile_id": {
            "type": "string",
            "description": "Identifier for the profile, if not provided default will be chosen from merchant account",
            "maxLength": 64
          },
          "connector_account_details": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MerchantConnectorDetails",
                "description": "An object containing the required details/credentials for a Connector account."
              }
            ]
          },
          "payment_methods_enabled": {
            "$ref": "#/components/schemas/PaymentMethodsEnabled",
            "description": "An object containing the details about the payment methods that need to be enabled under this merchant connector account"
          },
          "connector_webhook_details": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MerchantConnectorWebhookDetails",
                "description": "Webhook details of this merchant connector"
              }
            ]
          },
          "metadata": {
            "type": [
              "object",
              "null"
            ],
            "description": "Metadata is useful for storing additional, unstructured information on an object."
          },
          "disabled": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "A boolean value to indicate if the connector is disabled. By default, its value is false.",
            "default": false,
            "example": false
          },
          "frm_configs": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/FrmConfigs"
            },
            "description": "Contains the frm configs for the merchant connector",
            "example": "\n[{\"gateway\":\"stripe\",\"payment_methods\":[{\"payment_method\":\"card\",\"payment_method_types\":[{\"payment_method_type\":\"credit\",\"card_networks\":[\"Visa\"],\"flow\":\"pre\",\"action\":\"cancel_txn\"},{\"payment_method_type\":\"debit\",\"card_networks\":[\"Visa\"],\"flow\":\"pre\"}]}]}]\n"
          },
          "pm_auth_config": {
            "type": [
              "object",
              "null"
            ],
            "description": "pm_auth_config will relate MCA records to their respective chosen auth services, based on payment_method and pmt"
          },
          "status": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ConnectorStatus"
              }
            ]
          },
          "additional_merchant_data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/AdditionalMerchantData",
                "description": "In case the merchant needs to store any additional sensitive data"
              }
            ]
          },
          "connector_wallets_details": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ConnectorWalletDetails",
                "description": "The connector_wallets_details is used to store wallet details such as certificates and wallet credentials"
              }
            ]
          },
          "feature_metadata": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MerchantConnectorAccountFeatureMetadata",
                "description": "Additional data that might be required by hyperswitch, to enable some specific features."
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "MerchantConnectorDeleteResponse": {
        "type": "object",
        "required": [
          "merchant_id",
          "id",
          "deleted"
        ],
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "id": {
            "type": "string",
            "description": "Unique ID of the connector",
            "example": "mca_5apGeP94tMts6rg3U3kR"
          },
          "deleted": {
            "type": "boolean",
            "description": "If the connector is deleted or not",
            "example": false
          }
        }
      },
      "MerchantConnectorDetails": {
        "type": "object",
        "properties": {
          "connector_account_details": {
            "type": [
              "object",
              "null"
            ],
            "description": "Account details of the Connector. You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Useful for storing additional, structured information on an object."
          },
          "metadata": {
            "type": [
              "object",
              "null"
            ],
            "description": "Metadata is useful for storing additional, unstructured information on an object."
          }
        }
      },
      "MerchantConnectorDetailsWrap": {
        "type": "object",
        "description": "Merchant connector details used to make payments.",
        "required": [
          "creds_identifier"
        ],
        "properties": {
          "creds_identifier": {
            "type": "string",
            "description": "Creds Identifier is to uniquely identify the credentials. Do not send any sensitive info, like encoded_data in this field. And do not send the string \"null\"."
          },
          "encoded_data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MerchantConnectorDetails",
                "description": "Merchant connector details type type. Base64 Encode the credentials and send it in  this type and send as a string."
              }
            ]
          }
        }
      },
      "MerchantConnectorId": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string"
          }
        }
      },
      "MerchantConnectorListResponse": {
        "type": "object",
        "required": [
          "connector_type",
          "connector_name",
          "id",
          "profile_id",
          "payment_methods_enabled",
          "status"
        ],
        "properties": {
          "connector_type": {
            "$ref": "#/components/schemas/ConnectorType",
            "description": "Type of the Connector for the financial use case. Could range from Payments to Accounting to Banking."
          },
          "connector_name": {
            "$ref": "#/components/schemas/Connector",
            "description": "Name of the Connector"
          },
          "connector_label": {
            "type": [
              "string",
              "null"
            ],
            "description": "A unique label to identify the connector account created under a profile",
            "example": "stripe_US_travel"
          },
          "id": {
            "type": "string",
            "description": "Unique ID of the merchant connector account",
            "example": "mca_5apGeP94tMts6rg3U3kR"
          },
          "profile_id": {
            "type": "string",
            "description": "Identifier for the profile, if not provided default will be chosen from merchant account",
            "maxLength": 64
          },
          "payment_methods_enabled": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodsEnabled"
            },
            "description": "An object containing the details about the payment methods that need to be enabled under this merchant connector account"
          },
          "disabled": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "A boolean value to indicate if the connector is disabled. By default, its value is false.",
            "default": false,
            "example": false
          },
          "frm_configs": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/FrmConfigs"
            },
            "description": "Contains the frm configs for the merchant connector",
            "example": "\n[{\"gateway\":\"stripe\",\"payment_methods\":[{\"payment_method\":\"card\",\"payment_method_types\":[{\"payment_method_type\":\"credit\",\"card_networks\":[\"Visa\"],\"flow\":\"pre\",\"action\":\"cancel_txn\"},{\"payment_method_type\":\"debit\",\"card_networks\":[\"Visa\"],\"flow\":\"pre\"}]}]}]\n"
          },
          "applepay_verified_domains": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            },
            "description": "identifier for the verified domains of a particular connector account"
          },
          "pm_auth_config": {
            "type": [
              "object",
              "null"
            ]
          },
          "status": {
            "$ref": "#/components/schemas/ConnectorStatus"
          }
        },
        "additionalProperties": false
      },
      "MerchantConnectorResponse": {
        "type": "object",
        "description": "Response of creating a new Merchant Connector for the merchant account.\"",
        "required": [
          "connector_type",
          "connector_name",
          "id",
          "profile_id",
          "payment_methods_enabled",
          "status"
        ],
        "properties": {
          "connector_type": {
            "$ref": "#/components/schemas/ConnectorType",
            "description": "Type of the Connector for the financial use case. Could range from Payments to Accounting to Banking."
          },
          "connector_name": {
            "$ref": "#/components/schemas/Connector",
            "description": "Name of the Connector"
          },
          "connector_label": {
            "type": [
              "string",
              "null"
            ],
            "description": "A unique label to identify the connector account created under a profile",
            "example": "stripe_US_travel"
          },
          "id": {
            "type": "string",
            "description": "Unique ID of the merchant connector account",
            "example": "mca_5apGeP94tMts6rg3U3kR"
          },
          "profile_id": {
            "type": "string",
            "description": "Identifier for the profile, if not provided default will be chosen from merchant account",
            "maxLength": 64
          },
          "connector_account_details": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MerchantConnectorDetails",
                "description": "An object containing the required details/credentials for a Connector account."
              }
            ]
          },
          "payment_methods_enabled": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodsEnabled"
            },
            "description": "An object containing the details about the payment methods that need to be enabled under this merchant connector account"
          },
          "connector_webhook_details": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MerchantConnectorWebhookDetails",
                "description": "Webhook details of this merchant connector"
              }
            ]
          },
          "metadata": {
            "type": [
              "object",
              "null"
            ],
            "description": "Metadata is useful for storing additional, unstructured information on an object."
          },
          "disabled": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "A boolean value to indicate if the connector is disabled. By default, its value is false.",
            "default": false,
            "example": false
          },
          "frm_configs": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/FrmConfigs"
            },
            "description": "Contains the frm configs for the merchant connector",
            "example": "\n[{\"gateway\":\"stripe\",\"payment_methods\":[{\"payment_method\":\"card\",\"payment_method_types\":[{\"payment_method_type\":\"credit\",\"card_networks\":[\"Visa\"],\"flow\":\"pre\",\"action\":\"cancel_txn\"},{\"payment_method_type\":\"debit\",\"card_networks\":[\"Visa\"],\"flow\":\"pre\"}]}]}]\n"
          },
          "applepay_verified_domains": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            },
            "description": "identifier for the verified domains of a particular connector account"
          },
          "pm_auth_config": {
            "type": [
              "object",
              "null"
            ],
            "description": "pm_auth_config will relate MCA records to their respective chosen auth services, based on payment_method and pmt"
          },
          "status": {
            "$ref": "#/components/schemas/ConnectorStatus"
          },
          "additional_merchant_data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/AdditionalMerchantData"
              }
            ]
          },
          "connector_wallets_details": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ConnectorWalletDetails",
                "description": "The connector_wallets_details is used to store wallet details such as certificates and wallet credentials"
              }
            ]
          },
          "feature_metadata": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MerchantConnectorAccountFeatureMetadata",
                "description": "Additional data that might be required by hyperswitch, to enable some specific features."
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "MerchantConnectorUpdate": {
        "type": "object",
        "description": "Create a new Merchant Connector for the merchant account. The connector could be a payment processor / facilitator / acquirer or specialized services like Fraud / Accounting etc.\"",
        "required": [
          "connector_type",
          "merchant_id"
        ],
        "properties": {
          "connector_type": {
            "$ref": "#/components/schemas/ConnectorType",
            "description": "Type of the Connector for the financial use case. Could range from Payments to Accounting to Banking."
          },
          "connector_label": {
            "type": [
              "string",
              "null"
            ],
            "description": "This is an unique label you can generate and pass in order to identify this connector account on your Hyperswitch dashboard and reports, If not passed then if will take `connector_name`_`profile_name`. Eg: if your profile label is `default`, connector label can be `stripe_default`",
            "example": "stripe_US_travel"
          },
          "connector_account_details": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MerchantConnectorDetails",
                "description": "An object containing the required details/credentials for a Connector account."
              }
            ]
          },
          "payment_methods_enabled": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/PaymentMethodsEnabled"
            },
            "description": "An object containing the details about the payment methods that need to be enabled under this merchant connector account"
          },
          "connector_webhook_details": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MerchantConnectorWebhookDetails",
                "description": "Webhook details of this merchant connector"
              }
            ]
          },
          "metadata": {
            "type": [
              "object",
              "null"
            ],
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object."
          },
          "disabled": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "A boolean value to indicate if the connector is disabled. By default, its value is false.",
            "default": false,
            "example": false
          },
          "frm_configs": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/FrmConfigs"
            },
            "description": "Contains the frm configs for the merchant connector",
            "example": "\n[{\"gateway\":\"stripe\",\"payment_methods\":[{\"payment_method\":\"card\",\"payment_method_types\":[{\"payment_method_type\":\"credit\",\"card_networks\":[\"Visa\"],\"flow\":\"pre\",\"action\":\"cancel_txn\"},{\"payment_method_type\":\"debit\",\"card_networks\":[\"Visa\"],\"flow\":\"pre\"}]}]}]\n"
          },
          "pm_auth_config": {
            "type": [
              "object",
              "null"
            ],
            "description": "pm_auth_config will relate MCA records to their respective chosen auth services, based on payment_method and pmt"
          },
          "status": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ConnectorStatus"
              }
            ]
          },
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 64,
            "minLength": 1
          },
          "additional_merchant_data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/AdditionalMerchantData",
                "description": "In case the merchant needs to store any additional sensitive data"
              }
            ]
          },
          "connector_wallets_details": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ConnectorWalletDetails",
                "description": "The connector_wallets_details is used to store wallet details such as certificates and wallet credentials"
              }
            ]
          },
          "feature_metadata": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MerchantConnectorAccountFeatureMetadata",
                "description": "Additional data that might be required by hyperswitch, to enable some specific features."
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "MerchantConnectorWebhookDetails": {
        "type": "object",
        "required": [
          "merchant_secret",
          "additional_secret"
        ],
        "properties": {
          "merchant_secret": {
            "type": "string",
            "example": "12345678900987654321"
          },
          "additional_secret": {
            "type": "string",
            "example": "12345678900987654321"
          }
        },
        "additionalProperties": false
      },
      "MerchantCountryCode": {
        "type": "string",
        "description": "A wrapper type for merchant country codes that provides validation and conversion functionality.\n\nThis type stores a country code as a string and provides methods to validate it\nand convert it to a `Country` enum variant."
      },
      "MerchantDetails": {
        "type": "object",
        "properties": {
          "primary_contact_person": {
            "type": [
              "string",
              "null"
            ],
            "description": "The merchant's primary contact name",
            "example": "John Doe",
            "maxLength": 255
          },
          "primary_phone": {
            "type": [
              "string",
              "null"
            ],
            "description": "The merchant's primary phone number",
            "example": "999999999",
            "maxLength": 255
          },
          "primary_email": {
            "type": [
              "string",
              "null"
            ],
            "description": "The merchant's primary email address",
            "example": "johndoe@test.com",
            "maxLength": 255
          },
          "secondary_contact_person": {
            "type": [
              "string",
              "null"
            ],
            "description": "The merchant's secondary contact name",
            "example": "John Doe2",
            "maxLength": 255
          },
          "secondary_phone": {
            "type": [
              "string",
              "null"
            ],
            "description": "The merchant's secondary phone number",
            "example": "999999988",
            "maxLength": 255
          },
          "secondary_email": {
            "type": [
              "string",
              "null"
            ],
            "description": "The merchant's secondary email address",
            "example": "johndoe2@test.com",
            "maxLength": 255
          },
          "website": {
            "type": [
              "string",
              "null"
            ],
            "description": "The business website of the merchant",
            "example": "www.example.com",
            "maxLength": 255
          },
          "about_business": {
            "type": [
              "string",
              "null"
            ],
            "description": "A brief description about merchant's business",
            "example": "Online Retail with a wide selection of organic products for North America",
            "maxLength": 255
          },
          "address": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/AddressDetails",
                "description": "The merchant's address details"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "MerchantProductType": {
        "type": "string",
        "enum": [
          "orchestration",
          "vault",
          "recon",
          "recovery",
          "cost_observability",
          "dynamic_routing"
        ]
      },
      "MerchantRecipientData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "connector_recipient_id"
            ],
            "properties": {
              "connector_recipient_id": {
                "type": [
                  "string",
                  "null"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "wallet_id"
            ],
            "properties": {
              "wallet_id": {
                "type": [
                  "string",
                  "null"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "account_data"
            ],
            "properties": {
              "account_data": {
                "$ref": "#/components/schemas/MerchantAccountData"
              }
            }
          }
        ]
      },
      "MerchantRoutingAlgorithm": {
        "type": "object",
        "description": "Routing Algorithm specific to merchants",
        "required": [
          "id",
          "profile_id",
          "name",
          "description",
          "algorithm",
          "created_at",
          "modified_at",
          "algorithm_for"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "profile_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "algorithm": {
            "$ref": "#/components/schemas/RoutingAlgorithmWrapper"
          },
          "created_at": {
            "type": "integer",
            "format": "int64"
          },
          "modified_at": {
            "type": "integer",
            "format": "int64"
          },
          "algorithm_for": {
            "$ref": "#/components/schemas/TransactionType"
          }
        }
      },
      "MetadataValue": {
        "type": "object",
        "required": [
          "key",
          "value"
        ],
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "Method": {
        "type": "string",
        "enum": [
          "GET",
          "POST",
          "PUT",
          "DELETE",
          "PATCH"
        ]
      },
      "MifinityData": {
        "type": "object",
        "required": [
          "date_of_birth"
        ],
        "properties": {
          "date_of_birth": {
            "type": "string",
            "format": "date"
          },
          "language_preference": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "MinorUnit": {
        "type": "integer",
        "format": "int64",
        "description": "This Unit struct represents MinorUnit in which core amount works"
      },
      "MitExemptionRequest": {
        "type": "string",
        "enum": [
          "Apply",
          "Skip"
        ]
      },
      "MobilePayRedirection": {
        "type": "object"
      },
      "MobilePaymentConsent": {
        "type": "string",
        "enum": [
          "consent_required",
          "consent_not_required",
          "consent_optional"
        ]
      },
      "MobilePaymentData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "direct_carrier_billing"
            ],
            "properties": {
              "direct_carrier_billing": {
                "type": "object",
                "required": [
                  "msisdn"
                ],
                "properties": {
                  "msisdn": {
                    "type": "string",
                    "description": "The phone number of the user",
                    "example": "1234567890"
                  },
                  "client_uid": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "Unique user id",
                    "example": "02iacdYXGI9CnyJdoN8c7"
                  }
                }
              }
            }
          }
        ]
      },
      "MobilePaymentNextStepData": {
        "type": "object",
        "required": [
          "consent_data_required"
        ],
        "properties": {
          "consent_data_required": {
            "$ref": "#/components/schemas/MobilePaymentConsent",
            "description": "is consent details required to be shown by sdk"
          }
        }
      },
      "MobilePaymentResponse": {
        "allOf": [
          {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MobilePaymentData"
              }
            ]
          }
        ]
      },
      "MomoRedirection": {
        "type": "object"
      },
      "MultibancoBillingDetails": {
        "type": "object",
        "properties": {
          "email": {
            "type": [
              "string",
              "null"
            ],
            "example": "example@me.com"
          }
        }
      },
      "MultibancoTransferInstructions": {
        "type": "object",
        "required": [
          "reference",
          "entity"
        ],
        "properties": {
          "reference": {
            "type": "string",
            "example": "122385736258"
          },
          "entity": {
            "type": "string",
            "example": "12345"
          }
        }
      },
      "NetworkTokenDetailsPaymentMethod": {
        "type": "object",
        "properties": {
          "last4_digits": {
            "type": [
              "string",
              "null"
            ]
          },
          "issuer_country": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CountryAlpha2"
              }
            ]
          },
          "network_token_expiry_month": {
            "type": [
              "string",
              "null"
            ]
          },
          "network_token_expiry_year": {
            "type": [
              "string",
              "null"
            ]
          },
          "nick_name": {
            "type": [
              "string",
              "null"
            ]
          },
          "card_holder_name": {
            "type": [
              "string",
              "null"
            ]
          },
          "card_isin": {
            "type": [
              "string",
              "null"
            ]
          },
          "card_issuer": {
            "type": [
              "string",
              "null"
            ]
          },
          "card_network": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CardNetwork"
              }
            ]
          },
          "card_type": {
            "type": [
              "string",
              "null"
            ]
          },
          "saved_to_locker": {
            "type": "boolean"
          }
        }
      },
      "NetworkTokenDetailsResponse": {
        "type": "object",
        "required": [
          "network_token",
          "network_token_exp_month",
          "network_token_exp_year"
        ],
        "properties": {
          "network_token": {
            "type": "string",
            "description": "Network token generated against the Card Number"
          },
          "network_token_exp_month": {
            "type": "string",
            "description": "Expiry month of the network token"
          },
          "network_token_exp_year": {
            "type": "string",
            "description": "Expiry year of the network token"
          },
          "cryptogram": {
            "type": [
              "string",
              "null"
            ],
            "description": "Cryptogram generated by the Network"
          },
          "card_issuer": {
            "type": [
              "string",
              "null"
            ],
            "description": "Issuer of the card"
          },
          "card_network": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CardNetwork",
                "description": "Card network of the token"
              }
            ]
          },
          "card_type": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CardType",
                "description": "Card type of the token"
              }
            ]
          },
          "card_issuing_country": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CountryAlpha2",
                "description": "Issuing country of the card"
              }
            ]
          },
          "bank_code": {
            "type": [
              "string",
              "null"
            ],
            "description": "Bank code of the card"
          },
          "card_holder_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Name of the card holder"
          },
          "nick_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Nick name of the card holder"
          },
          "eci": {
            "type": [
              "string",
              "null"
            ],
            "description": "ECI indicator of the card"
          }
        }
      },
      "NetworkTokenResponse": {
        "type": "object",
        "required": [
          "payment_method_data"
        ],
        "properties": {
          "payment_method_data": {
            "$ref": "#/components/schemas/NetworkTokenDetailsPaymentMethod"
          }
        }
      },
      "NetworkTokenization": {
        "type": "object",
        "description": "The network tokenization configuration for creating the payment method session",
        "required": [
          "enable"
        ],
        "properties": {
          "enable": {
            "$ref": "#/components/schemas/NetworkTokenizationToggle",
            "description": "Enable the network tokenization for payment methods that are created using the payment method session"
          }
        }
      },
      "NetworkTokenizationToggle": {
        "type": "string",
        "description": "The network tokenization toggle, whether to enable or skip the network tokenization",
        "enum": [
          "Enable",
          "Skip"
        ]
      },
      "NetworkTransactionIdAndCardDetails": {
        "type": "object",
        "required": [
          "card_number",
          "card_exp_month",
          "card_exp_year",
          "card_holder_name",
          "network_transaction_id"
        ],
        "properties": {
          "card_number": {
            "type": "string",
            "description": "The card number",
            "example": "4242424242424242"
          },
          "card_exp_month": {
            "type": "string",
            "description": "The card's expiry month",
            "example": "24"
          },
          "card_exp_year": {
            "type": "string",
            "description": "The card's expiry year",
            "example": "24"
          },
          "card_holder_name": {
            "type": "string",
            "description": "The card holder's name",
            "example": "John Test"
          },
          "card_issuer": {
            "type": [
              "string",
              "null"
            ],
            "description": "The name of the issuer of card",
            "example": "chase"
          },
          "card_network": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CardNetwork",
                "description": "The card network for the card"
              }
            ]
          },
          "card_type": {
            "type": [
              "string",
              "null"
            ],
            "example": "CREDIT"
          },
          "card_issuing_country": {
            "type": [
              "string",
              "null"
            ],
            "example": "INDIA"
          },
          "bank_code": {
            "type": [
              "string",
              "null"
            ],
            "example": "JP_AMEX"
          },
          "nick_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "The card holder's nick name",
            "example": "John Test"
          },
          "network_transaction_id": {
            "type": "string",
            "description": "The network transaction ID provided by the card network during a CIT (Customer Initiated Transaction),\nwhere `setup_future_usage` is set to `off_session`."
          }
        }
      },
      "NextActionCall": {
        "type": "string",
        "enum": [
          "post_session_tokens",
          "confirm",
          "sync",
          "complete_authorize"
        ]
      },
      "NextActionData": {
        "oneOf": [
          {
            "type": "object",
            "description": "Contains the url for redirection flow",
            "required": [
              "redirect_to_url",
              "type"
            ],
            "properties": {
              "redirect_to_url": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "redirect_to_url"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "Informs the next steps for bank transfer and also contains the charges details (ex: amount received, amount charged etc)",
            "required": [
              "bank_transfer_steps_and_charges_details",
              "type"
            ],
            "properties": {
              "bank_transfer_steps_and_charges_details": {
                "$ref": "#/components/schemas/BankTransferNextStepsData"
              },
              "type": {
                "type": "string",
                "enum": [
                  "display_bank_transfer_information"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "Contains third party sdk session token response",
            "required": [
              "type"
            ],
            "properties": {
              "session_token": {
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/components/schemas/SessionToken"
                  }
                ]
              },
              "type": {
                "type": "string",
                "enum": [
                  "third_party_sdk_session_token"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "Contains url for Qr code image, this qr code has to be shown in sdk",
            "required": [
              "image_data_url",
              "qr_code_url",
              "type"
            ],
            "properties": {
              "image_data_url": {
                "type": "string",
                "description": "Hyperswitch generated image data source url"
              },
              "display_to_timestamp": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "int64"
              },
              "qr_code_url": {
                "type": "string",
                "description": "The url for Qr code given by the connector"
              },
              "display_text": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "border_color": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "type": {
                "type": "string",
                "enum": [
                  "qr_code_information"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "Contains url to fetch Qr code data",
            "required": [
              "qr_code_fetch_url",
              "type"
            ],
            "properties": {
              "qr_code_fetch_url": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "fetch_qr_code_information"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "Contains the download url and the reference number for transaction",
            "required": [
              "voucher_details",
              "type"
            ],
            "properties": {
              "voucher_details": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "display_voucher_information"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "Contains duration for displaying a wait screen, wait screen with timer is displayed by sdk",
            "required": [
              "display_from_timestamp",
              "type"
            ],
            "properties": {
              "display_from_timestamp": {
                "type": "integer"
              },
              "display_to_timestamp": {
                "type": [
                  "integer",
                  "null"
                ]
              },
              "poll_config": {
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/components/schemas/PollConfig"
                  }
                ]
              },
              "type": {
                "type": "string",
                "enum": [
                  "wait_screen_information"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "Contains the information regarding three_ds_method_data submission, three_ds authentication, and authorization flows",
            "required": [
              "three_ds_data",
              "type"
            ],
            "properties": {
              "three_ds_data": {
                "$ref": "#/components/schemas/ThreeDsData"
              },
              "type": {
                "type": "string",
                "enum": [
                  "three_ds_invoke"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "next_action_data",
              "type"
            ],
            "properties": {
              "next_action_data": {
                "$ref": "#/components/schemas/SdkNextActionData"
              },
              "type": {
                "type": "string",
                "enum": [
                  "invoke_sdk_client"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "Contains consent to collect otp for mobile payment",
            "required": [
              "consent_data_required",
              "type"
            ],
            "properties": {
              "consent_data_required": {
                "$ref": "#/components/schemas/MobilePaymentConsent"
              },
              "type": {
                "type": "string",
                "enum": [
                  "collect_otp"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "Contains data required to invoke hidden iframe",
            "required": [
              "iframe_data",
              "type"
            ],
            "properties": {
              "iframe_data": {
                "$ref": "#/components/schemas/IframeData"
              },
              "type": {
                "type": "string",
                "enum": [
                  "invoke_hidden_iframe"
                ]
              }
            }
          }
        ]
      },
      "NextActionType": {
        "type": "string",
        "enum": [
          "redirect_to_url",
          "display_qr_code",
          "invoke_sdk_client",
          "trigger_api",
          "display_bank_transfer_information",
          "display_wait_screen",
          "collect_otp",
          "redirect_inside_popup"
        ]
      },
      "NoThirdPartySdkSessionResponse": {
        "type": "object",
        "required": [
          "epoch_timestamp",
          "expires_at",
          "merchant_session_identifier",
          "nonce",
          "merchant_identifier",
          "domain_name",
          "display_name",
          "signature",
          "operational_analytics_identifier",
          "retries",
          "psp_id"
        ],
        "properties": {
          "epoch_timestamp": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp at which session is requested",
            "minimum": 0
          },
          "expires_at": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp at which session expires",
            "minimum": 0
          },
          "merchant_session_identifier": {
            "type": "string",
            "description": "The identifier for the merchant session"
          },
          "nonce": {
            "type": "string",
            "description": "Apple pay generated unique ID (UUID) value"
          },
          "merchant_identifier": {
            "type": "string",
            "description": "The identifier for the merchant"
          },
          "domain_name": {
            "type": "string",
            "description": "The domain name of the merchant which is registered in Apple Pay"
          },
          "display_name": {
            "type": "string",
            "description": "The name to be displayed on Apple Pay button"
          },
          "signature": {
            "type": "string",
            "description": "A string which represents the properties of a payment"
          },
          "operational_analytics_identifier": {
            "type": "string",
            "description": "The identifier for the operational analytics"
          },
          "retries": {
            "type": "integer",
            "format": "int32",
            "description": "The number of retries to get the session response",
            "minimum": 0
          },
          "psp_id": {
            "type": "string",
            "description": "The identifier for the connector transaction"
          }
        }
      },
      "NoonData": {
        "type": "object",
        "properties": {
          "order_category": {
            "type": [
              "string",
              "null"
            ],
            "description": "Information about the order category that merchant wants to specify at connector level. (e.g. In Noon Payments it can take values like \"pay\", \"food\", or any other custom string set by the merchant in Noon's Dashboard)"
          }
        }
      },
      "NullObject": {
        "default": null
      },
      "NumberComparison": {
        "type": "object",
        "description": "Represents a number comparison for \"NumberComparisonArrayValue\"",
        "required": [
          "comparisonType",
          "number"
        ],
        "properties": {
          "comparisonType": {
            "$ref": "#/components/schemas/ComparisonType"
          },
          "number": {
            "$ref": "#/components/schemas/MinorUnit"
          }
        }
      },
      "OnlineMandate": {
        "type": "object",
        "description": "Details of online mandate",
        "required": [
          "ip_address",
          "user_agent"
        ],
        "properties": {
          "ip_address": {
            "type": "string",
            "description": "Ip address of the customer machine from which the mandate was created",
            "example": "123.32.25.123"
          },
          "user_agent": {
            "type": "string",
            "description": "The user-agent of the customer's browser"
          }
        },
        "additionalProperties": false
      },
      "OpenBankingData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "open_banking_pis"
            ],
            "properties": {
              "open_banking_pis": {
                "type": "object"
              }
            }
          }
        ]
      },
      "OpenBankingResponse": {
        "allOf": [
          {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/OpenBankingData"
              }
            ]
          }
        ]
      },
      "OpenBankingSessionToken": {
        "type": "object",
        "required": [
          "open_banking_session_token"
        ],
        "properties": {
          "open_banking_session_token": {
            "type": "string",
            "description": "The session token for OpenBanking Connectors"
          }
        }
      },
      "Order": {
        "type": "object",
        "required": [
          "on",
          "by"
        ],
        "properties": {
          "on": {
            "$ref": "#/components/schemas/SortOn",
            "description": "The field to sort, such as Amount or Created etc."
          },
          "by": {
            "$ref": "#/components/schemas/SortBy",
            "description": "The order in which to sort the items, either Ascending or Descending"
          }
        }
      },
      "OrderDetailsWithAmount": {
        "type": "object",
        "required": [
          "product_name",
          "quantity",
          "amount"
        ],
        "properties": {
          "product_name": {
            "type": "string",
            "description": "Name of the product that is being purchased",
            "example": "shirt",
            "maxLength": 255
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "description": "The quantity of the product to be purchased",
            "example": 1,
            "minimum": 0
          },
          "amount": {
            "$ref": "#/components/schemas/MinorUnit",
            "description": "the amount per quantity of product"
          },
          "tax_rate": {
            "type": [
              "number",
              "null"
            ],
            "format": "double",
            "description": "tax rate applicable to the product"
          },
          "total_tax_amount": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MinorUnit",
                "description": "total tax amount applicable to the product"
              }
            ]
          },
          "requires_shipping": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "product_img_link": {
            "type": [
              "string",
              "null"
            ],
            "description": "The image URL of the product"
          },
          "product_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "ID of the product that is being purchased"
          },
          "category": {
            "type": [
              "string",
              "null"
            ],
            "description": "Category of the product that is being purchased"
          },
          "sub_category": {
            "type": [
              "string",
              "null"
            ],
            "description": "Sub category of the product that is being purchased"
          },
          "brand": {
            "type": [
              "string",
              "null"
            ],
            "description": "Brand of the product that is being purchased"
          },
          "product_type": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ProductType",
                "description": "Type of the product that is being purchased"
              }
            ]
          },
          "product_tax_code": {
            "type": [
              "string",
              "null"
            ],
            "description": "The tax code for the product"
          }
        }
      },
      "OrderFulfillmentTimeOrigin": {
        "type": "string",
        "enum": [
          "create",
          "confirm"
        ]
      },
      "OrganizationCreateRequest": {
        "type": "object",
        "required": [
          "organization_name"
        ],
        "properties": {
          "organization_name": {
            "type": "string",
            "description": "Name of the organization"
          },
          "organization_details": {
            "type": [
              "object",
              "null"
            ],
            "description": "Details about the organization"
          },
          "metadata": {
            "type": [
              "object",
              "null"
            ],
            "description": "Metadata is useful for storing additional, unstructured information on an object."
          }
        },
        "additionalProperties": false
      },
      "OrganizationResponse": {
        "type": "object",
        "required": [
          "id",
          "modified_at",
          "created_at"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the Organization",
            "example": "org_q98uSGAYbjEwqs0mJwnz",
            "maxLength": 64,
            "minLength": 1
          },
          "organization_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Name of the Organization"
          },
          "organization_details": {
            "type": [
              "object",
              "null"
            ],
            "description": "Details about the organization"
          },
          "metadata": {
            "type": [
              "object",
              "null"
            ],
            "description": "Metadata is useful for storing additional, unstructured information on an object."
          },
          "modified_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "OrganizationUpdateRequest": {
        "type": "object",
        "required": [
          "platform_merchant_id"
        ],
        "properties": {
          "organization_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Name of the organization"
          },
          "organization_details": {
            "type": [
              "object",
              "null"
            ],
            "description": "Details about the organization"
          },
          "metadata": {
            "type": [
              "object",
              "null"
            ],
            "description": "Metadata is useful for storing additional, unstructured information on an object."
          },
          "platform_merchant_id": {
            "type": "string",
            "description": "Platform merchant id is unique distiguisher for special merchant in the platform org"
          }
        },
        "additionalProperties": false
      },
      "OutgoingWebhook": {
        "type": "object",
        "required": [
          "merchant_id",
          "event_id",
          "event_type",
          "content"
        ],
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The merchant id of the merchant"
          },
          "event_id": {
            "type": "string",
            "description": "The unique event id for each webhook"
          },
          "event_type": {
            "$ref": "#/components/schemas/EventType",
            "description": "The type of event this webhook corresponds to."
          },
          "content": {
            "$ref": "#/components/schemas/OutgoingWebhookContent",
            "description": "This is specific to the flow, for ex: it will be `PaymentsResponse` for payments flow"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The time at which webhook was sent"
          }
        }
      },
      "OutgoingWebhookContent": {
        "oneOf": [
          {
            "type": "object",
            "title": "PaymentsResponse",
            "required": [
              "object",
              "type"
            ],
            "properties": {
              "object": {
                "$ref": "#/components/schemas/PaymentsResponse"
              },
              "type": {
                "type": "string",
                "enum": [
                  "payment_details"
                ]
              }
            }
          },
          {
            "type": "object",
            "title": "RefundResponse",
            "required": [
              "object",
              "type"
            ],
            "properties": {
              "object": {
                "$ref": "#/components/schemas/RefundResponse"
              },
              "type": {
                "type": "string",
                "enum": [
                  "refund_details"
                ]
              }
            }
          },
          {
            "type": "object",
            "title": "DisputeResponse",
            "required": [
              "object",
              "type"
            ],
            "properties": {
              "object": {
                "$ref": "#/components/schemas/DisputeResponse"
              },
              "type": {
                "type": "string",
                "enum": [
                  "dispute_details"
                ]
              }
            }
          },
          {
            "type": "object",
            "title": "MandateResponse",
            "required": [
              "object",
              "type"
            ],
            "properties": {
              "object": {
                "$ref": "#/components/schemas/MandateResponse"
              },
              "type": {
                "type": "string",
                "enum": [
                  "mandate_details"
                ]
              }
            }
          },
          {
            "type": "object",
            "title": "PayoutCreateResponse",
            "required": [
              "object",
              "type"
            ],
            "properties": {
              "object": {
                "$ref": "#/components/schemas/PayoutCreateResponse"
              },
              "type": {
                "type": "string",
                "enum": [
                  "payout_details"
                ]
              }
            }
          }
        ]
      },
      "OutgoingWebhookRequestContent": {
        "type": "object",
        "description": "The request information (headers and body) sent in the webhook.",
        "required": [
          "body",
          "headers"
        ],
        "properties": {
          "body": {
            "type": "string",
            "description": "The request body sent in the webhook."
          },
          "headers": {
            "type": "array",
            "items": {
              "type": "array",
              "items": false,
              "prefixItems": [
                {
                  "type": "string"
                },
                {
                  "type": "string"
                }
              ]
            },
            "description": "The request headers sent in the webhook.",
            "example": [
              [
                "content-type",
                "application/json"
              ],
              [
                "content-length",
                "1024"
              ]
            ]
          }
        }
      },
      "OutgoingWebhookResponseContent": {
        "type": "object",
        "description": "The response information (headers, body and status code) received for the webhook sent.",
        "properties": {
          "body": {
            "type": [
              "string",
              "null"
            ],
            "description": "The response body received for the webhook sent."
          },
          "headers": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "array",
              "items": false,
              "prefixItems": [
                {
                  "type": "string"
                },
                {
                  "type": "string"
                }
              ]
            },
            "description": "The response headers received for the webhook sent.",
            "example": [
              [
                "content-type",
                "application/json"
              ],
              [
                "content-length",
                "1024"
              ]
            ]
          },
          "status_code": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "description": "The HTTP status code for the webhook sent.",
            "example": 200,
            "minimum": 0
          },
          "error_message": {
            "type": [
              "string",
              "null"
            ],
            "description": "Error message in case any error occurred when trying to deliver the webhook.",
            "example": 200
          }
        }
      },
      "PayLaterData": {
        "oneOf": [
          {
            "type": "object",
            "description": "For KlarnaRedirect as PayLater Option",
            "required": [
              "klarna_redirect"
            ],
            "properties": {
              "klarna_redirect": {
                "type": "object",
                "description": "For KlarnaRedirect as PayLater Option",
                "properties": {
                  "billing_email": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "The billing email"
                  },
                  "billing_country": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "$ref": "#/components/schemas/CountryAlpha2"
                      }
                    ]
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "description": "For Klarna Sdk as PayLater Option",
            "required": [
              "klarna_sdk"
            ],
            "properties": {
              "klarna_sdk": {
                "type": "object",
                "description": "For Klarna Sdk as PayLater Option",
                "required": [
                  "token"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The token for the sdk workflow"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "description": "For Affirm redirect as PayLater Option",
            "required": [
              "affirm_redirect"
            ],
            "properties": {
              "affirm_redirect": {
                "type": "object",
                "description": "For Affirm redirect as PayLater Option"
              }
            }
          },
          {
            "type": "object",
            "description": "For AfterpayClearpay redirect as PayLater Option",
            "required": [
              "afterpay_clearpay_redirect"
            ],
            "properties": {
              "afterpay_clearpay_redirect": {
                "type": "object",
                "description": "For AfterpayClearpay redirect as PayLater Option",
                "properties": {
                  "billing_email": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "The billing email"
                  },
                  "billing_name": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "The billing name"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "description": "For PayBright Redirect as PayLater Option",
            "required": [
              "pay_bright_redirect"
            ],
            "properties": {
              "pay_bright_redirect": {
                "type": "object",
                "description": "For PayBright Redirect as PayLater Option"
              }
            }
          },
          {
            "type": "object",
            "description": "For WalleyRedirect as PayLater Option",
            "required": [
              "walley_redirect"
            ],
            "properties": {
              "walley_redirect": {
                "type": "object",
                "description": "For WalleyRedirect as PayLater Option"
              }
            }
          },
          {
            "type": "object",
            "description": "For Alma Redirection as PayLater Option",
            "required": [
              "alma_redirect"
            ],
            "properties": {
              "alma_redirect": {
                "type": "object",
                "description": "For Alma Redirection as PayLater Option"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "atome_redirect"
            ],
            "properties": {
              "atome_redirect": {
                "type": "object"
              }
            }
          }
        ]
      },
      "PayPalWalletData": {
        "type": "object",
        "required": [
          "token"
        ],
        "properties": {
          "token": {
            "type": "string",
            "description": "Token generated for the Apple pay"
          }
        }
      },
      "PaylaterResponse": {
        "type": "object",
        "properties": {
          "klarna_sdk": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/KlarnaSdkPaymentMethodResponse"
              }
            ]
          }
        }
      },
      "PaymentAmountDetailsResponse": {
        "type": "object",
        "required": [
          "currency",
          "external_tax_calculation",
          "surcharge_calculation",
          "net_amount",
          "amount_capturable"
        ],
        "properties": {
          "order_amount": {
            "$ref": "#/components/schemas/MinorUnit",
            "description": "The payment amount. Amount for the payment in the lowest denomination of the currency, (i.e) in cents for USD denomination, in yen for JPY denomination etc. E.g., Pass 100 to charge $1.00 and 1 for 1¥ since ¥ is a zero-decimal currency. Read more about [the Decimal and Non-Decimal Currencies](https://github.com/juspay/hyperswitch/wiki/Decimal-and-Non%E2%80%90Decimal-Currencies)"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency",
            "description": "The currency of the order"
          },
          "shipping_cost": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MinorUnit",
                "description": "The shipping cost of the order. This has to be collected from the merchant"
              }
            ]
          },
          "order_tax_amount": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MinorUnit",
                "description": "Tax amount related to the order. This will be calculated by the external tax provider"
              }
            ]
          },
          "external_tax_calculation": {
            "$ref": "#/components/schemas/TaxCalculationOverride",
            "description": "The action to whether calculate tax by calling external tax provider or not"
          },
          "surcharge_calculation": {
            "$ref": "#/components/schemas/SurchargeCalculationOverride",
            "description": "The action to whether calculate surcharge or not"
          },
          "surcharge_amount": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MinorUnit",
                "description": "The surcharge amount to be added to the order, collected from the merchant"
              }
            ]
          },
          "tax_on_surcharge": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MinorUnit",
                "description": "tax on surcharge amount"
              }
            ]
          },
          "net_amount": {
            "$ref": "#/components/schemas/MinorUnit",
            "description": "The total amount of the order including tax, surcharge and shipping cost"
          },
          "amount_to_capture": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MinorUnit",
                "description": "The amount that was requested to be captured for this payment"
              }
            ]
          },
          "amount_capturable": {
            "$ref": "#/components/schemas/MinorUnit",
            "description": "The amount that can be captured on the payment. Either in one go or through multiple captures.\nThis is applicable in case the capture method was either `manual` or `manual_multiple`"
          },
          "amount_captured": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MinorUnit",
                "description": "The amount that was captured for this payment. This is the sum of all the captures done on this payment"
              }
            ]
          }
        }
      },
      "PaymentAttemptAmountDetails": {
        "type": "object",
        "required": [
          "net_amount",
          "amount_capturable"
        ],
        "properties": {
          "net_amount": {
            "$ref": "#/components/schemas/MinorUnit",
            "description": "The total amount of the order including tax, surcharge and shipping cost"
          },
          "amount_to_capture": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MinorUnit",
                "description": "The amount that was requested to be captured for this payment"
              }
            ]
          },
          "surcharge_amount": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MinorUnit",
                "description": "Surcharge amount for the payment attempt.\nThis is either derived by surcharge rules, or sent by the merchant"
              }
            ]
          },
          "tax_on_surcharge": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MinorUnit",
                "description": "Tax amount for the payment attempt\nThis is either derived by surcharge rules, or sent by the merchant"
              }
            ]
          },
          "amount_capturable": {
            "$ref": "#/components/schemas/MinorUnit",
            "description": "The total amount that can be captured for this payment attempt."
          },
          "shipping_cost": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MinorUnit",
                "description": "Shipping cost for the payment attempt.\nShipping cost for the payment attempt."
              }
            ]
          },
          "order_tax_amount": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MinorUnit",
                "description": "Tax amount for the order.\nThis is either derived by calling an external tax processor, or sent by the merchant"
              }
            ]
          }
        }
      },
      "PaymentAttemptFeatureMetadata": {
        "type": "object",
        "properties": {
          "revenue_recovery": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PaymentAttemptRevenueRecoveryData",
                "description": "Revenue recovery metadata that might be required by hyperswitch."
              }
            ]
          }
        }
      },
      "PaymentAttemptListRequest": {
        "type": "object",
        "required": [
          "payment_intent_id"
        ],
        "properties": {
          "payment_intent_id": {
            "type": "string"
          }
        }
      },
      "PaymentAttemptListResponse": {
        "type": "object",
        "required": [
          "payment_attempt_list"
        ],
        "properties": {
          "payment_attempt_list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentAttemptResponse"
            }
          }
        }
      },
      "PaymentAttemptRecordResponse": {
        "type": "object",
        "required": [
          "id",
          "status"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The global identifier for the payment attempt"
          },
          "status": {
            "$ref": "#/components/schemas/AttemptStatus",
            "description": "The status of the attempt"
          },
          "payment_intent_feature_metadata": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/FeatureMetadata",
                "description": "Additional data that might be required by hyperswitch based on the requested features by the merchants."
              }
            ]
          },
          "payment_attempt_feature_metadata": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PaymentAttemptFeatureMetadata",
                "description": "Additional data that might be required by hyperswitch, to enable some specific features."
              }
            ]
          }
        }
      },
      "PaymentAttemptResponse": {
        "type": "object",
        "required": [
          "id",
          "status",
          "amount",
          "authentication_type",
          "created_at",
          "modified_at",
          "payment_method_type",
          "connector_payment_id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The global identifier for the payment attempt"
          },
          "status": {
            "$ref": "#/components/schemas/AttemptStatus",
            "description": "/// The status of the attempt"
          },
          "amount": {
            "$ref": "#/components/schemas/PaymentAttemptAmountDetails",
            "description": "Amount related information for this payment and attempt"
          },
          "connector": {
            "type": [
              "string",
              "null"
            ],
            "description": "Name of the connector that was used for the payment attempt.",
            "example": "stripe"
          },
          "error": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ErrorDetails",
                "description": "Error details for the payment if any"
              }
            ]
          },
          "authentication_type": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthenticationType",
                "description": "The transaction authentication can be set to undergo payer authentication. By default, the authentication will be marked as NO_THREE_DS, as the 3DS method helps with more robust payer authentication"
              }
            ],
            "default": "three_ds"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time of Payment attempt creation"
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the payment attempt was last modified"
          },
          "cancellation_reason": {
            "type": [
              "string",
              "null"
            ],
            "description": "The reason for the cancellation of the payment attempt. Some connectors will have strict rules regarding the values this can have\nCancellation reason will be validated at the connector level when building the request"
          },
          "payment_token": {
            "type": [
              "string",
              "null"
            ],
            "description": "Payment token is the token used for temporary use in case the payment method is stored in vault",
            "example": "187282ab-40ef-47a9-9206-5099ba31e432"
          },
          "connector_metadata": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ConnectorMetadata",
                "description": "Additional data related to some connectors"
              }
            ]
          },
          "payment_experience": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PaymentExperience",
                "description": "Payment Experience for the current payment"
              }
            ]
          },
          "payment_method_type": {
            "$ref": "#/components/schemas/PaymentMethod",
            "description": "Payment method type for the payment attempt"
          },
          "connector_reference_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "reference(Identifier) to the payment at connector side",
            "example": "993672945374576J"
          },
          "payment_method_subtype": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PaymentMethodType",
                "description": "The payment method subtype for the payment attempt."
              }
            ]
          },
          "connector_payment_id": {
            "type": "string",
            "description": "A unique identifier for a payment provided by the connector"
          },
          "payment_method_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "Identifier for Payment Method used for the payment attempt",
            "example": "12345_pm_01926c58bc6e77c09e809964e72af8c8"
          },
          "client_source": {
            "type": [
              "string",
              "null"
            ],
            "description": "Value passed in X-CLIENT-SOURCE header during payments confirm request by the client"
          },
          "client_version": {
            "type": [
              "string",
              "null"
            ],
            "description": "Value passed in X-CLIENT-VERSION header during payments confirm request by the client"
          },
          "feature_metadata": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PaymentAttemptFeatureMetadata",
                "description": "Additional data that might be required by hyperswitch, to enable some specific features."
              }
            ]
          }
        }
      },
      "PaymentAttemptRevenueRecoveryData": {
        "type": "object",
        "required": [
          "attempt_triggered_by"
        ],
        "properties": {
          "attempt_triggered_by": {
            "$ref": "#/components/schemas/TriggeredBy",
            "description": "Flag to find out whether an attempt was created by external or internal system."
          },
          "charge_id": {
            "type": [
              "string",
              "null"
            ],
            "example": "ch_123abc456def789ghi012klmn"
          }
        }
      },
      "PaymentChargeType": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "Stripe"
            ],
            "properties": {
              "Stripe": {
                "$ref": "#/components/schemas/StripeChargeType"
              }
            }
          }
        ]
      },
      "PaymentConnectorCategory": {
        "type": "string",
        "description": "Connector Access Method",
        "enum": [
          "payment_gateway",
          "alternative_payment_method",
          "bank_acquirer"
        ]
      },
      "PaymentConnectorTransmission": {
        "type": "string",
        "enum": [
          "ConnectorCallUnsuccessful",
          "ConnectorCallSucceeded"
        ]
      },
      "PaymentCreatePaymentLinkConfig": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentLinkConfigRequest",
            "description": "Theme config for the particular payment"
          }
        ],
        "description": "Configure a custom payment link for the particular payment"
      },
      "PaymentExperience": {
        "type": "string",
        "description": "To indicate the type of payment experience that the customer would go through",
        "enum": [
          "redirect_to_url",
          "invoke_sdk_client",
          "display_qr_code",
          "one_click",
          "link_wallet",
          "invoke_payment_app",
          "display_wait_screen",
          "collect_otp"
        ]
      },
      "PaymentExperienceTypes": {
        "type": "object",
        "required": [
          "payment_experience_type",
          "eligible_connectors"
        ],
        "properties": {
          "payment_experience_type": {
            "$ref": "#/components/schemas/PaymentExperience",
            "description": "The payment experience enabled"
          },
          "eligible_connectors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of eligible connectors for a given payment experience",
            "example": [
              "stripe",
              "adyen"
            ]
          }
        }
      },
      "PaymentLinkBackgroundImageConfig": {
        "type": "object",
        "required": [
          "url"
        ],
        "properties": {
          "url": {
            "type": "string",
            "description": "URL of the image",
            "example": "https://hyperswitch.io/favicon.ico"
          },
          "position": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ElementPosition",
                "description": "Position of the image in the UI"
              }
            ]
          },
          "size": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ElementSize",
                "description": "Size of the image in the UI"
              }
            ]
          }
        }
      },
      "PaymentLinkConfig": {
        "type": "object",
        "required": [
          "theme",
          "logo",
          "seller_name",
          "sdk_layout",
          "display_sdk_only",
          "enabled_saved_payment_method",
          "hide_card_nickname_field",
          "show_card_form_by_default",
          "enable_button_only_on_form_ready"
        ],
        "properties": {
          "theme": {
            "type": "string",
            "description": "custom theme for the payment link"
          },
          "logo": {
            "type": "string",
            "description": "merchant display logo"
          },
          "seller_name": {
            "type": "string",
            "description": "Custom merchant name for payment link"
          },
          "sdk_layout": {
            "type": "string",
            "description": "Custom layout for sdk"
          },
          "display_sdk_only": {
            "type": "boolean",
            "description": "Display only the sdk for payment link"
          },
          "enabled_saved_payment_method": {
            "type": "boolean",
            "description": "Enable saved payment method option for payment link"
          },
          "hide_card_nickname_field": {
            "type": "boolean",
            "description": "Hide card nickname field option for payment link"
          },
          "show_card_form_by_default": {
            "type": "boolean",
            "description": "Show card form by default for payment link"
          },
          "allowed_domains": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            },
            "description": "A list of allowed domains (glob patterns) where this link can be embedded / opened from",
            "uniqueItems": true
          },
          "transaction_details": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/PaymentLinkTransactionDetails"
            },
            "description": "Dynamic details related to merchant to be rendered in payment link"
          },
          "background_image": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PaymentLinkBackgroundImageConfig",
                "description": "Configurations for the background image for details section"
              }
            ]
          },
          "details_layout": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PaymentLinkDetailsLayout",
                "description": "Custom layout for details section"
              }
            ]
          },
          "branding_visibility": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Toggle for HyperSwitch branding visibility"
          },
          "payment_button_text": {
            "type": [
              "string",
              "null"
            ],
            "description": "Text for payment link's handle confirm button"
          },
          "custom_message_for_card_terms": {
            "type": [
              "string",
              "null"
            ],
            "description": "Text for customizing message for card terms"
          },
          "payment_button_colour": {
            "type": [
              "string",
              "null"
            ],
            "description": "Custom background colour for payment link's handle confirm button"
          },
          "skip_status_screen": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Skip the status screen after payment completion"
          },
          "payment_button_text_colour": {
            "type": [
              "string",
              "null"
            ],
            "description": "Custom text colour for payment link's handle confirm button"
          },
          "background_colour": {
            "type": [
              "string",
              "null"
            ],
            "description": "Custom background colour for the payment link"
          },
          "sdk_ui_rules": {
            "type": [
              "object",
              "null"
            ],
            "description": "SDK configuration rules",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "propertyNames": {
                "type": "string"
              }
            },
            "propertyNames": {
              "type": "string"
            }
          },
          "payment_link_ui_rules": {
            "type": [
              "object",
              "null"
            ],
            "description": "Payment link configuration rules",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "propertyNames": {
                "type": "string"
              }
            },
            "propertyNames": {
              "type": "string"
            }
          },
          "enable_button_only_on_form_ready": {
            "type": "boolean",
            "description": "Flag to enable the button only when the payment form is ready for submission"
          },
          "payment_form_header_text": {
            "type": [
              "string",
              "null"
            ],
            "description": "Optional header for the SDK's payment form"
          },
          "payment_form_label_type": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PaymentLinkSdkLabelType",
                "description": "Label type in the SDK's payment form"
              }
            ]
          },
          "show_card_terms": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PaymentLinkShowSdkTerms",
                "description": "Boolean for controlling whether or not to show the explicit consent for storing cards"
              }
            ]
          },
          "is_setup_mandate_flow": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Boolean to control payment button text for setup mandate calls"
          },
          "color_icon_card_cvc_error": {
            "type": [
              "string",
              "null"
            ],
            "description": "Hex color for the CVC icon during error state"
          }
        }
      },
      "PaymentLinkConfigRequest": {
        "type": "object",
        "properties": {
          "theme": {
            "type": [
              "string",
              "null"
            ],
            "description": "custom theme for the payment link",
            "example": "#4E6ADD",
            "maxLength": 255
          },
          "logo": {
            "type": [
              "string",
              "null"
            ],
            "description": "merchant display logo",
            "example": "https://i.pinimg.com/736x/4d/83/5c/4d835ca8aafbbb15f84d07d926fda473.jpg",
            "maxLength": 255
          },
          "seller_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Custom merchant name for payment link",
            "example": "hyperswitch",
            "maxLength": 255
          },
          "sdk_layout": {
            "type": [
              "string",
              "null"
            ],
            "description": "Custom layout for sdk",
            "example": "accordion",
            "maxLength": 255
          },
          "display_sdk_only": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Display only the sdk for payment link",
            "default": false,
            "example": true
          },
          "enabled_saved_payment_method": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Enable saved payment method option for payment link",
            "default": false,
            "example": true
          },
          "hide_card_nickname_field": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Hide card nickname field option for payment link",
            "default": false,
            "example": true
          },
          "show_card_form_by_default": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Show card form by default for payment link",
            "default": true,
            "example": true
          },
          "transaction_details": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/PaymentLinkTransactionDetails"
            },
            "description": "Dynamic details related to merchant to be rendered in payment link"
          },
          "background_image": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PaymentLinkBackgroundImageConfig",
                "description": "Configurations for the background image for details section"
              }
            ]
          },
          "details_layout": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PaymentLinkDetailsLayout",
                "description": "Custom layout for details section"
              }
            ]
          },
          "payment_button_text": {
            "type": [
              "string",
              "null"
            ],
            "description": "Text for payment link's handle confirm button"
          },
          "custom_message_for_card_terms": {
            "type": [
              "string",
              "null"
            ],
            "description": "Text for customizing message for card terms"
          },
          "payment_button_colour": {
            "type": [
              "string",
              "null"
            ],
            "description": "Custom background colour for payment link's handle confirm button"
          },
          "skip_status_screen": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Skip the status screen after payment completion"
          },
          "payment_button_text_colour": {
            "type": [
              "string",
              "null"
            ],
            "description": "Custom text colour for payment link's handle confirm button"
          },
          "background_colour": {
            "type": [
              "string",
              "null"
            ],
            "description": "Custom background colour for the payment link"
          },
          "sdk_ui_rules": {
            "type": [
              "object",
              "null"
            ],
            "description": "SDK configuration rules",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "propertyNames": {
                "type": "string"
              }
            },
            "propertyNames": {
              "type": "string"
            }
          },
          "payment_link_ui_rules": {
            "type": [
              "object",
              "null"
            ],
            "description": "Payment link configuration rules",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "propertyNames": {
                "type": "string"
              }
            },
            "propertyNames": {
              "type": "string"
            }
          },
          "enable_button_only_on_form_ready": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Flag to enable the button only when the payment form is ready for submission"
          },
          "payment_form_header_text": {
            "type": [
              "string",
              "null"
            ],
            "description": "Optional header for the SDK's payment form"
          },
          "payment_form_label_type": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PaymentLinkSdkLabelType",
                "description": "Label type in the SDK's payment form"
              }
            ]
          },
          "show_card_terms": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PaymentLinkShowSdkTerms",
                "description": "Boolean for controlling whether or not to show the explicit consent for storing cards"
              }
            ]
          },
          "is_setup_mandate_flow": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Boolean to control payment button text for setup mandate calls"
          },
          "color_icon_card_cvc_error": {
            "type": [
              "string",
              "null"
            ],
            "description": "Hex color for the CVC icon during error state"
          }
        }
      },
      "PaymentLinkDetailsLayout": {
        "type": "string",
        "enum": [
          "layout1",
          "layout2"
        ]
      },
      "PaymentLinkInitiateRequest": {
        "type": "object",
        "required": [
          "merchant_id",
          "payment_id"
        ],
        "properties": {
          "merchant_id": {
            "type": "string"
          },
          "payment_id": {
            "type": "string"
          }
        }
      },
      "PaymentLinkResponse": {
        "type": "object",
        "required": [
          "link",
          "payment_link_id"
        ],
        "properties": {
          "link": {
            "type": "string",
            "description": "URL for rendering the open payment link"
          },
          "secure_link": {
            "type": [
              "string",
              "null"
            ],
            "description": "URL for rendering the secure payment link"
          },
          "payment_link_id": {
            "type": "string",
            "description": "Identifier for the payment link"
          }
        }
      },
      "PaymentLinkSdkLabelType": {
        "type": "string",
        "enum": [
          "above",
          "floating",
          "never"
        ]
      },
      "PaymentLinkShowSdkTerms": {
        "type": "string",
        "enum": [
          "always",
          "auto",
          "never"
        ]
      },
      "PaymentLinkStatus": {
        "type": "string",
        "description": "Status Of the Payment Link",
        "enum": [
          "active",
          "expired"
        ]
      },
      "PaymentLinkTransactionDetails": {
        "type": "object",
        "required": [
          "key",
          "value"
        ],
        "properties": {
          "key": {
            "type": "string",
            "description": "Key for the transaction details",
            "example": "Policy-Number",
            "maxLength": 255
          },
          "value": {
            "type": "string",
            "description": "Value for the transaction details",
            "example": "297472368473924",
            "maxLength": 255
          },
          "ui_configuration": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/TransactionDetailsUiConfiguration",
                "description": "UI configuration for the transaction details"
              }
            ]
          }
        }
      },
      "PaymentListResponse": {
        "type": "object",
        "required": [
          "count",
          "total_count",
          "data"
        ],
        "properties": {
          "count": {
            "type": "integer",
            "description": "The number of payments included in the current response",
            "minimum": 0
          },
          "total_count": {
            "type": "integer",
            "format": "int64",
            "description": "The total number of available payments for given constraints"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentsListResponseItem"
            },
            "description": "The list of payments response objects"
          }
        }
      },
      "PaymentMethod": {
        "type": "string",
        "description": "Indicates the type of payment method. Eg: 'card', 'wallet', etc.",
        "enum": [
          "card",
          "card_redirect",
          "pay_later",
          "wallet",
          "bank_redirect",
          "bank_transfer",
          "crypto",
          "bank_debit",
          "reward",
          "real_time_payment",
          "upi",
          "voucher",
          "gift_card",
          "open_banking",
          "mobile_payment"
        ]
      },
      "PaymentMethodCollectLinkRequest": {
        "allOf": [
          {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/GenericLinkUiConfig"
              }
            ]
          },
          {
            "type": "object",
            "required": [
              "customer_id"
            ],
            "properties": {
              "pm_collect_link_id": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "The unique identifier for the collect link.",
                "example": "pm_collect_link_2bdacf398vwzq5n422S1"
              },
              "customer_id": {
                "type": "string",
                "description": "The unique identifier of the customer.",
                "example": "cus_92dnwed8s32bV9D8Snbiasd8v"
              },
              "session_expiry": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "int32",
                "description": "Will be used to expire client secret after certain amount of time to be supplied in seconds\n(900) for 15 mins",
                "example": 900,
                "minimum": 0
              },
              "return_url": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "Redirect to this URL post completion",
                "example": "https://sandbox.hyperswitch.io/payment_method/collect/pm_collect_link_2bdacf398vwzq5n422S1/status"
              },
              "enabled_payment_methods": {
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "$ref": "#/components/schemas/EnabledPaymentMethod"
                },
                "description": "List of payment methods shown on collect UI",
                "example": "[{\"payment_method\": \"bank_transfer\", \"payment_method_types\": [\"ach\", \"bacs\"]}]"
              }
            }
          }
        ]
      },
      "PaymentMethodCollectLinkResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GenericLinkUiConfig",
            "description": "Collect link config used"
          },
          {
            "type": "object",
            "required": [
              "pm_collect_link_id",
              "customer_id",
              "expiry",
              "link"
            ],
            "properties": {
              "pm_collect_link_id": {
                "type": "string",
                "description": "The unique identifier for the collect link.",
                "example": "pm_collect_link_2bdacf398vwzq5n422S1"
              },
              "customer_id": {
                "type": "string",
                "description": "The unique identifier of the customer.",
                "example": "cus_92dnwed8s32bV9D8Snbiasd8v"
              },
              "expiry": {
                "type": "string",
                "format": "date-time",
                "description": "Time when this link will be expired in ISO8601 format",
                "example": "2025-01-18T11:04:09.922Z"
              },
              "link": {
                "type": "string",
                "description": "URL to the form's link generated for collecting payment method details.",
                "example": "https://sandbox.hyperswitch.io/payment_method/collect/pm_collect_link_2bdacf398vwzq5n422S1"
              },
              "return_url": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "Redirect to this URL post completion",
                "example": "https://sandbox.hyperswitch.io/payment_method/collect/pm_collect_link_2bdacf398vwzq5n422S1/status"
              },
              "enabled_payment_methods": {
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "$ref": "#/components/schemas/EnabledPaymentMethod"
                },
                "description": "List of payment methods shown on collect UI",
                "example": "[{\"payment_method\": \"bank_transfer\", \"payment_method_types\": [\"ach\", \"bacs\"]}]"
              }
            }
          }
        ]
      },
      "PaymentMethodCreate": {
        "type": "object",
        "required": [
          "payment_method_type",
          "payment_method_subtype",
          "customer_id",
          "payment_method_data"
        ],
        "properties": {
          "payment_method_type": {
            "$ref": "#/components/schemas/PaymentMethod",
            "description": "The type of payment method use for the payment."
          },
          "payment_method_subtype": {
            "$ref": "#/components/schemas/PaymentMethodType",
            "description": "This is a sub-category of payment method."
          },
          "metadata": {
            "type": [
              "object",
              "null"
            ],
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object."
          },
          "customer_id": {
            "type": "string",
            "description": "The unique identifier of the customer.",
            "example": "12345_cus_01926c58bc6e77c09e809964e72af8c8",
            "maxLength": 64,
            "minLength": 32
          },
          "payment_method_data": {
            "$ref": "#/components/schemas/PaymentMethodCreateData",
            "description": "Payment method data to be passed"
          },
          "billing": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Address",
                "description": "The billing details of the payment method"
              }
            ]
          },
          "psp_tokenization": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PspTokenization",
                "description": "The tokenization type to be applied"
              }
            ]
          },
          "network_tokenization": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/NetworkTokenization",
                "description": "The network tokenization configuration if applicable"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "PaymentMethodCreateData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "card"
            ],
            "properties": {
              "card": {
                "$ref": "#/components/schemas/CardDetail"
              }
            }
          }
        ]
      },
      "PaymentMethodData": {
        "oneOf": [
          {
            "type": "object",
            "title": "Card",
            "required": [
              "card"
            ],
            "properties": {
              "card": {
                "$ref": "#/components/schemas/Card"
              }
            }
          },
          {
            "type": "object",
            "title": "CardRedirect",
            "required": [
              "card_redirect"
            ],
            "properties": {
              "card_redirect": {
                "$ref": "#/components/schemas/CardRedirectData"
              }
            }
          },
          {
            "type": "object",
            "title": "Wallet",
            "required": [
              "wallet"
            ],
            "properties": {
              "wallet": {
                "$ref": "#/components/schemas/WalletData"
              }
            }
          },
          {
            "type": "object",
            "title": "PayLater",
            "required": [
              "pay_later"
            ],
            "properties": {
              "pay_later": {
                "$ref": "#/components/schemas/PayLaterData"
              }
            }
          },
          {
            "type": "object",
            "title": "BankRedirect",
            "required": [
              "bank_redirect"
            ],
            "properties": {
              "bank_redirect": {
                "$ref": "#/components/schemas/BankRedirectData"
              }
            }
          },
          {
            "type": "object",
            "title": "BankDebit",
            "required": [
              "bank_debit"
            ],
            "properties": {
              "bank_debit": {
                "$ref": "#/components/schemas/BankDebitData"
              }
            }
          },
          {
            "type": "object",
            "title": "BankTransfer",
            "required": [
              "bank_transfer"
            ],
            "properties": {
              "bank_transfer": {
                "$ref": "#/components/schemas/BankTransferData"
              }
            }
          },
          {
            "type": "object",
            "title": "RealTimePayment",
            "required": [
              "real_time_payment"
            ],
            "properties": {
              "real_time_payment": {
                "$ref": "#/components/schemas/RealTimePaymentData"
              }
            }
          },
          {
            "type": "object",
            "title": "Crypto",
            "required": [
              "crypto"
            ],
            "properties": {
              "crypto": {
                "$ref": "#/components/schemas/CryptoData"
              }
            }
          },
          {
            "type": "string",
            "title": "MandatePayment",
            "enum": [
              "mandate_payment"
            ]
          },
          {
            "type": "string",
            "title": "Reward",
            "enum": [
              "reward"
            ]
          },
          {
            "type": "object",
            "title": "Upi",
            "required": [
              "upi"
            ],
            "properties": {
              "upi": {
                "$ref": "#/components/schemas/UpiData"
              }
            }
          },
          {
            "type": "object",
            "title": "Voucher",
            "required": [
              "voucher"
            ],
            "properties": {
              "voucher": {
                "$ref": "#/components/schemas/VoucherData"
              }
            }
          },
          {
            "type": "object",
            "title": "GiftCard",
            "required": [
              "gift_card"
            ],
            "properties": {
              "gift_card": {
                "$ref": "#/components/schemas/GiftCardData"
              }
            }
          },
          {
            "type": "object",
            "title": "CardToken",
            "required": [
              "card_token"
            ],
            "properties": {
              "card_token": {
                "$ref": "#/components/schemas/CardToken"
              }
            }
          },
          {
            "type": "object",
            "title": "OpenBanking",
            "required": [
              "open_banking"
            ],
            "properties": {
              "open_banking": {
                "$ref": "#/components/schemas/OpenBankingData"
              }
            }
          },
          {
            "type": "object",
            "title": "MobilePayment",
            "required": [
              "mobile_payment"
            ],
            "properties": {
              "mobile_payment": {
                "$ref": "#/components/schemas/MobilePaymentData"
              }
            }
          }
        ]
      },
      "PaymentMethodDataRequest": {
        "allOf": [
          {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PaymentMethodData",
                "description": "This field is optional because, in case of saved cards we pass the payment_token\nThere might be cases where we don't need to pass the payment_method_data and pass only payment method billing details\nWe have flattened it because to maintain backwards compatibility with the old API contract"
              }
            ]
          },
          {
            "type": "object",
            "properties": {
              "billing": {
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/components/schemas/Address",
                    "description": "billing details for the payment method.\nThis billing details will be passed to the processor as billing address.\nIf not passed, then payment.billing will be considered"
                  }
                ]
              }
            }
          }
        ],
        "description": "The payment method information provided for making a payment"
      },
      "PaymentMethodDataResponse": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "card"
            ],
            "properties": {
              "card": {
                "$ref": "#/components/schemas/CardResponse"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "bank_transfer"
            ],
            "properties": {
              "bank_transfer": {
                "$ref": "#/components/schemas/BankTransferResponse"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "wallet"
            ],
            "properties": {
              "wallet": {
                "$ref": "#/components/schemas/WalletResponse"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "pay_later"
            ],
            "properties": {
              "pay_later": {
                "$ref": "#/components/schemas/PaylaterResponse"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "bank_redirect"
            ],
            "properties": {
              "bank_redirect": {
                "$ref": "#/components/schemas/BankRedirectResponse"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "crypto"
            ],
            "properties": {
              "crypto": {
                "$ref": "#/components/schemas/CryptoResponse"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "bank_debit"
            ],
            "properties": {
              "bank_debit": {
                "$ref": "#/components/schemas/BankDebitResponse"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "mandate_payment"
            ],
            "properties": {
              "mandate_payment": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "reward"
            ],
            "properties": {
              "reward": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "real_time_payment"
            ],
            "properties": {
              "real_time_payment": {
                "$ref": "#/components/schemas/RealTimePaymentDataResponse"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "upi"
            ],
            "properties": {
              "upi": {
                "$ref": "#/components/schemas/UpiResponse"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "voucher"
            ],
            "properties": {
              "voucher": {
                "$ref": "#/components/schemas/VoucherResponse"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "gift_card"
            ],
            "properties": {
              "gift_card": {
                "$ref": "#/components/schemas/GiftCardResponse"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "card_redirect"
            ],
            "properties": {
              "card_redirect": {
                "$ref": "#/components/schemas/CardRedirectResponse"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "card_token"
            ],
            "properties": {
              "card_token": {
                "$ref": "#/components/schemas/CardTokenResponse"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "open_banking"
            ],
            "properties": {
              "open_banking": {
                "$ref": "#/components/schemas/OpenBankingResponse"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "mobile_payment"
            ],
            "properties": {
              "mobile_payment": {
                "$ref": "#/components/schemas/MobilePaymentResponse"
              }
            }
          }
        ]
      },
      "PaymentMethodDataResponseWithBilling": {
        "allOf": [
          {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PaymentMethodDataResponse"
              }
            ]
          },
          {
            "type": "object",
            "properties": {
              "billing": {
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ]
              }
            }
          }
        ]
      },
      "PaymentMethodDeleteResponse": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the Payment method",
            "example": "12345_pm_01926c58bc6e77c09e809964e72af8c8"
          }
        }
      },
      "PaymentMethodIntentConfirm": {
        "type": "object",
        "required": [
          "payment_method_data",
          "payment_method_type",
          "payment_method_subtype"
        ],
        "properties": {
          "customer_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "The unique identifier of the customer.",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 64,
            "minLength": 1
          },
          "payment_method_data": {
            "$ref": "#/components/schemas/PaymentMethodCreateData",
            "description": "Payment method data to be passed"
          },
          "payment_method_type": {
            "$ref": "#/components/schemas/PaymentMethod",
            "description": "The type of payment method use for the payment."
          },
          "payment_method_subtype": {
            "$ref": "#/components/schemas/PaymentMethodType",
            "description": "This is a sub-category of payment method."
          }
        },
        "additionalProperties": false
      },
      "PaymentMethodIntentCreate": {
        "type": "object",
        "required": [
          "customer_id"
        ],
        "properties": {
          "metadata": {
            "type": [
              "object",
              "null"
            ],
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object."
          },
          "billing": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Address",
                "description": "The billing details of the payment method"
              }
            ]
          },
          "customer_id": {
            "type": "string",
            "description": "The unique identifier of the customer.",
            "example": "12345_cus_01926c58bc6e77c09e809964e72af8c8",
            "maxLength": 64,
            "minLength": 32
          }
        },
        "additionalProperties": false
      },
      "PaymentMethodIssuerCode": {
        "type": "string",
        "enum": [
          "jp_hdfc",
          "jp_icici",
          "jp_googlepay",
          "jp_applepay",
          "jp_phonepay",
          "jp_wechat",
          "jp_sofort",
          "jp_giropay",
          "jp_sepa",
          "jp_bacs"
        ]
      },
      "PaymentMethodListData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "card"
            ],
            "properties": {
              "card": {
                "$ref": "#/components/schemas/CardDetailFromLocker"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "bank"
            ],
            "properties": {
              "bank": {
                "$ref": "#/components/schemas/Bank"
              }
            }
          }
        ]
      },
      "PaymentMethodListRequest": {
        "type": "object",
        "properties": {
          "client_secret": {
            "type": [
              "string",
              "null"
            ],
            "description": "This is a 15 minute expiry token which shall be used from the client to authenticate and perform sessions from the SDK",
            "example": "secret_k2uj3he2893eiu2d",
            "maxLength": 30,
            "minLength": 30
          },
          "accepted_countries": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/CountryAlpha2"
            },
            "description": "The two-letter ISO currency code",
            "example": [
              "US",
              "UK",
              "IN"
            ]
          },
          "amount": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MinorUnit",
                "description": "Filter by amount"
              }
            ]
          },
          "accepted_currencies": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/Currency"
            },
            "description": "The three-letter ISO currency code",
            "example": [
              "USD",
              "EUR"
            ]
          },
          "recurring_enabled": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Indicates whether the payment method supports recurring payments. Optional.",
            "example": true
          },
          "card_networks": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/CardNetwork"
            },
            "description": "Indicates whether the payment method is eligible for card netwotks",
            "example": [
              "visa",
              "mastercard"
            ]
          },
          "limit": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "description": "Indicates the limit of last used payment methods",
            "example": 1
          }
        },
        "additionalProperties": false
      },
      "PaymentMethodListResponseForPayments": {
        "type": "object",
        "required": [
          "payment_methods_enabled"
        ],
        "properties": {
          "payment_methods_enabled": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponsePaymentMethodTypesForPayments"
            },
            "description": "The list of payment methods that are enabled for the business profile"
          },
          "customer_payment_methods": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/CustomerPaymentMethodResponseItem"
            },
            "description": "The list of payment methods that are saved by the given customer\nThis field is only returned if the customer_id is provided in the request"
          }
        }
      },
      "PaymentMethodListResponseForSession": {
        "type": "object",
        "required": [
          "payment_methods_enabled",
          "customer_payment_methods"
        ],
        "properties": {
          "payment_methods_enabled": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponsePaymentMethodTypes"
            },
            "description": "The list of payment methods that are enabled for the business profile"
          },
          "customer_payment_methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerPaymentMethodResponseItem"
            },
            "description": "The list of saved payment methods of the customer"
          }
        }
      },
      "PaymentMethodResponse": {
        "type": "object",
        "required": [
          "id",
          "merchant_id",
          "customer_id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the Payment method",
            "example": "12345_pm_01926c58bc6e77c09e809964e72af8c8"
          },
          "merchant_id": {
            "type": "string",
            "description": "Unique identifier for a merchant",
            "example": "merchant_1671528864"
          },
          "customer_id": {
            "type": "string",
            "description": "The unique identifier of the customer.",
            "example": "12345_cus_01926c58bc6e77c09e809964e72af8c8",
            "maxLength": 64,
            "minLength": 32
          },
          "payment_method_type": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PaymentMethod",
                "description": "The type of payment method use for the payment."
              }
            ]
          },
          "payment_method_subtype": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PaymentMethodType",
                "description": "This is a sub-category of payment method."
              }
            ]
          },
          "recurring_enabled": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Indicates whether the payment method supports recurring payments. Optional.",
            "example": true
          },
          "created": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time",
            "description": "A timestamp (ISO 8601 code) that determines when the payment method was created",
            "example": "2023-01-18T11:04:09.922Z"
          },
          "last_used_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time",
            "description": "A timestamp (ISO 8601 code) that determines when the payment method was last used",
            "example": "2024-02-24T11:04:09.922Z"
          },
          "payment_method_data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PaymentMethodResponseData",
                "description": "The payment method details related to the payment method"
              }
            ]
          },
          "connector_tokens": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/ConnectorTokenDetails"
            },
            "description": "The connector token details if available"
          },
          "network_token": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/NetworkTokenResponse"
              }
            ]
          }
        }
      },
      "PaymentMethodResponseData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "card"
            ],
            "properties": {
              "card": {
                "$ref": "#/components/schemas/CardDetailFromLocker"
              }
            }
          }
        ]
      },
      "PaymentMethodResponseItem": {
        "type": "object",
        "required": [
          "id",
          "customer_id",
          "payment_method_type",
          "payment_method_subtype",
          "created",
          "requires_cvv",
          "is_default",
          "psp_tokenization_enabled"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the payment method.",
            "example": "12345_pm_01926c58bc6e77c09e809964e72af8c8"
          },
          "customer_id": {
            "type": "string",
            "description": "The unique identifier of the customer.",
            "example": "12345_cus_01926c58bc6e77c09e809964e72af8c8",
            "maxLength": 64,
            "minLength": 32
          },
          "payment_method_type": {
            "$ref": "#/components/schemas/PaymentMethod",
            "description": "The type of payment method use for the payment."
          },
          "payment_method_subtype": {
            "$ref": "#/components/schemas/PaymentMethodType",
            "description": "This is a sub-category of payment method."
          },
          "recurring_enabled": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Indicates whether the payment method supports recurring payments. Optional.",
            "example": true
          },
          "payment_method_data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PaymentMethodListData",
                "description": "PaymentMethod Data from locker"
              }
            ]
          },
          "bank": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MaskedBankDetails",
                "description": "Masked bank details from PM auth services"
              }
            ]
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "A timestamp (ISO 8601 code) that determines when the payment method was created",
            "example": "2023-01-18T11:04:09.922Z"
          },
          "requires_cvv": {
            "type": "boolean",
            "description": "Whether this payment method requires CVV to be collected",
            "example": true
          },
          "last_used_at": {
            "type": "string",
            "format": "date-time",
            "description": "A timestamp (ISO 8601 code) that determines when the payment method was last used",
            "example": "2024-02-24T11:04:09.922Z"
          },
          "is_default": {
            "type": "boolean",
            "description": "Indicates if the payment method has been set to default or not",
            "example": true
          },
          "billing": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Address",
                "description": "The billing details of the payment method"
              }
            ]
          },
          "network_tokenization": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/NetworkTokenResponse",
                "description": "The network token details for the payment method"
              }
            ]
          },
          "psp_tokenization_enabled": {
            "type": "boolean",
            "description": "Whether psp_tokenization is enabled for the payment_method, this will be true when at least\none multi-use token with status `Active` is available for the payment method"
          }
        }
      },
      "PaymentMethodSessionConfirmRequest": {
        "type": "object",
        "required": [
          "payment_method_type",
          "payment_method_subtype",
          "payment_method_data"
        ],
        "properties": {
          "payment_method_type": {
            "$ref": "#/components/schemas/PaymentMethod",
            "description": "The payment method type"
          },
          "payment_method_subtype": {
            "$ref": "#/components/schemas/PaymentMethodType",
            "description": "The payment method subtype"
          },
          "payment_method_data": {
            "$ref": "#/components/schemas/PaymentMethodDataRequest",
            "description": "The payment instrument data to be used for the payment"
          },
          "return_url": {
            "type": [
              "string",
              "null"
            ],
            "format": "uri",
            "description": "The return url to which the customer should be redirected to after adding the payment method"
          }
        }
      },
      "PaymentMethodSessionDeleteSavedPaymentMethod": {
        "type": "object",
        "required": [
          "payment_method_id"
        ],
        "properties": {
          "payment_method_id": {
            "type": "string",
            "description": "The payment method id of the payment method to be updated",
            "example": "12345_pm_01926c58bc6e77c09e809964e72af8c8"
          }
        }
      },
      "PaymentMethodSessionRequest": {
        "type": "object",
        "required": [
          "customer_id"
        ],
        "properties": {
          "customer_id": {
            "type": "string",
            "description": "The customer id for which the payment methods session is to be created",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44"
          },
          "billing": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Address",
                "description": "The billing address details of the customer. This will also be used for any new payment methods added during the session"
              }
            ]
          },
          "return_url": {
            "type": [
              "string",
              "null"
            ],
            "format": "uri",
            "description": "The return url to which the customer should be redirected to after adding the payment method"
          },
          "psp_tokenization": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PspTokenization",
                "description": "The tokenization type to be applied"
              }
            ]
          },
          "network_tokenization": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/NetworkTokenization",
                "description": "The network tokenization configuration if applicable"
              }
            ]
          },
          "expires_in": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "description": "The time (seconds ) when the session will expire\nIf not provided, the session will expire in 15 minutes",
            "default": 900,
            "example": 900,
            "minimum": 0
          },
          "tokenization_data": {
            "description": "Contains data to be passed on to tokenization service ( if present ) to create token_id for given JSON data"
          }
        }
      },
      "PaymentMethodSessionResponse": {
        "type": "object",
        "required": [
          "id",
          "customer_id",
          "expires_at",
          "client_secret"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "12345_pms_01926c58bc6e77c09e809964e72af8c8"
          },
          "customer_id": {
            "type": "string",
            "description": "The customer id for which the payment methods session is to be created",
            "example": "12345_cus_01926c58bc6e77c09e809964e72af8c8"
          },
          "billing": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Address",
                "description": "The billing address details of the customer. This will also be used for any new payment methods added during the session"
              }
            ]
          },
          "psp_tokenization": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PspTokenization",
                "description": "The tokenization type to be applied"
              }
            ]
          },
          "network_tokenization": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/NetworkTokenization",
                "description": "The network tokenization configuration if applicable"
              }
            ]
          },
          "tokenization_data": {
            "description": "Contains data to be passed on to tokenization service ( if present ) to create token_id for given JSON data"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "description": "The iso timestamp when the session will expire\nTrying to retrieve the session or any operations on the session after this time will result in an error",
            "example": "2023-01-18T11:04:09.922Z"
          },
          "client_secret": {
            "type": "string",
            "description": "Client Secret"
          },
          "return_url": {
            "type": [
              "string",
              "null"
            ],
            "description": "The return url to which the user should be redirected to"
          },
          "next_action": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/NextActionData",
                "description": "The next action details for the payment method session"
              }
            ]
          },
          "authentication_details": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/AuthenticationDetails",
                "description": "The customer authentication details for the payment method\nThis refers to either the payment / external authentication details"
              }
            ]
          },
          "associated_payment_methods": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            },
            "description": "The payment method that was created using this payment method session"
          },
          "associated_token_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "The token-id created if there is tokenization_data present",
            "example": "12345_tok_01926c58bc6e77c09e809964e72af8c8"
          }
        }
      },
      "PaymentMethodSessionUpdateSavedPaymentMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentMethodUpdate",
            "description": "The update request for the payment method update"
          },
          {
            "type": "object",
            "required": [
              "payment_method_id"
            ],
            "properties": {
              "payment_method_id": {
                "type": "string",
                "description": "The payment method id of the payment method to be updated",
                "example": "12345_pm_01926c58bc6e77c09e809964e72af8c8"
              }
            }
          }
        ]
      },
      "PaymentMethodSpecificFeatures": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/CardSpecificFeatures",
            "description": "Card specific features"
          }
        ]
      },
      "PaymentMethodStatus": {
        "type": "string",
        "description": "Payment Method Status",
        "enum": [
          "active",
          "inactive",
          "processing",
          "awaiting_data"
        ]
      },
      "PaymentMethodSubtypeSpecificData": {
        "oneOf": [
          {
            "type": "object",
            "title": "card",
            "required": [
              "card_networks"
            ],
            "properties": {
              "card_networks": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CardNetworkTypes"
                }
              }
            }
          },
          {
            "type": "object",
            "title": "bank",
            "required": [
              "bank_names"
            ],
            "properties": {
              "bank_names": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BankNames"
                }
              }
            }
          }
        ]
      },
      "PaymentMethodType": {
        "type": "string",
        "description": "Indicates the sub type of payment method. Eg: 'google_pay' & 'apple_pay' for wallets.",
        "enum": [
          "ach",
          "affirm",
          "afterpay_clearpay",
          "alfamart",
          "ali_pay",
          "ali_pay_hk",
          "alma",
          "amazon_pay",
          "skrill",
          "paysera",
          "apple_pay",
          "atome",
          "bacs",
          "bancontact_card",
          "becs",
          "benefit",
          "bizum",
          "blik",
          "boleto",
          "bca_bank_transfer",
          "bni_va",
          "bri_va",
          "card_redirect",
          "cimb_va",
          "classic",
          "credit",
          "crypto_currency",
          "cashapp",
          "dana",
          "danamon_va",
          "debit",
          "duit_now",
          "efecty",
          "eft",
          "eps",
          "fps",
          "evoucher",
          "giropay",
          "givex",
          "google_pay",
          "go_pay",
          "gcash",
          "ideal",
          "interac",
          "indomaret",
          "klarna",
          "kakao_pay",
          "local_bank_redirect",
          "mandiri_va",
          "knet",
          "mb_way",
          "mobile_pay",
          "momo",
          "momo_atm",
          "multibanco",
          "online_banking_thailand",
          "online_banking_czech_republic",
          "online_banking_finland",
          "online_banking_fpx",
          "online_banking_poland",
          "online_banking_slovakia",
          "oxxo",
          "pago_efectivo",
          "permata_bank_transfer",
          "open_banking_uk",
          "pay_bright",
          "paypal",
          "paze",
          "pix",
          "pay_safe_card",
          "przelewy24",
          "prompt_pay",
          "pse",
          "red_compra",
          "red_pagos",
          "samsung_pay",
          "sepa",
          "sepa_bank_transfer",
          "sofort",
          "swish",
          "touch_n_go",
          "trustly",
          "twint",
          "upi_collect",
          "upi_intent",
          "vipps",
          "viet_qr",
          "venmo",
          "walley",
          "we_chat_pay",
          "seven_eleven",
          "lawson",
          "mini_stop",
          "family_mart",
          "seicomart",
          "pay_easy",
          "local_bank_transfer",
          "mifinity",
          "open_banking_pis",
          "direct_carrier_billing",
          "instant_bank_transfer",
          "instant_bank_transfer_finland",
          "instant_bank_transfer_poland",
          "revolut_pay"
        ]
      },
      "PaymentMethodUpdate": {
        "type": "object",
        "properties": {
          "payment_method_data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PaymentMethodUpdateData",
                "description": "Payment method details to be updated for the payment_method"
              }
            ]
          },
          "connector_token_details": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ConnectorTokenDetails",
                "description": "The connector token details to be updated for the payment_method"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "PaymentMethodUpdateData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "card"
            ],
            "properties": {
              "card": {
                "$ref": "#/components/schemas/CardDetailUpdate"
              }
            }
          }
        ]
      },
      "PaymentMethodsEnabled": {
        "type": "object",
        "description": "Details of all the payment methods enabled for the connector for the given merchant account",
        "required": [
          "payment_method"
        ],
        "properties": {
          "payment_method": {
            "$ref": "#/components/schemas/PaymentMethod",
            "description": "Type of payment method."
          },
          "payment_method_types": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/RequestPaymentMethodTypes"
            },
            "description": "Subtype of payment method",
            "example": [
              "credit"
            ]
          }
        },
        "additionalProperties": false
      },
      "PaymentMethodsSessionUpdateRequest": {
        "type": "object",
        "properties": {
          "billing": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Address",
                "description": "The billing address details of the customer. This will also be used for any new payment methods added during the session"
              }
            ]
          },
          "psp_tokenization": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PspTokenization",
                "description": "The tokenization type to be applied"
              }
            ]
          },
          "network_tokenization": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/NetworkTokenization",
                "description": "The network tokenization configuration if applicable"
              }
            ]
          },
          "tokenization_data": {
            "description": "Contains data to be passed on to tokenization service ( if present ) to create token_id for given JSON data"
          }
        }
      },
      "PaymentProcessingDetails": {
        "type": "object",
        "required": [
          "payment_processing_certificate",
          "payment_processing_certificate_key"
        ],
        "properties": {
          "payment_processing_certificate": {
            "type": "string"
          },
          "payment_processing_certificate_key": {
            "type": "string"
          }
        }
      },
      "PaymentProcessingDetailsAt": {
        "oneOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentProcessingDetails"
              },
              {
                "type": "object",
                "required": [
                  "payment_processing_details_at"
                ],
                "properties": {
                  "payment_processing_details_at": {
                    "type": "string",
                    "enum": [
                      "Hyperswitch"
                    ]
                  }
                }
              }
            ]
          },
          {
            "type": "object",
            "required": [
              "payment_processing_details_at"
            ],
            "properties": {
              "payment_processing_details_at": {
                "type": "string",
                "enum": [
                  "Connector"
                ]
              }
            }
          }
        ]
      },
      "PaymentRevenueRecoveryMetadata": {
        "type": "object",
        "required": [
          "total_retry_count",
          "billing_connector_id",
          "active_attempt_payment_connector_id",
          "billing_connector_payment_details",
          "payment_method_type",
          "payment_method_subtype",
          "connector"
        ],
        "properties": {
          "total_retry_count": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of billing connector + recovery retries for a payment intent.",
            "example": "1",
            "minimum": 0
          },
          "payment_connector_transmission": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PaymentConnectorTransmission",
                "description": "Flag for the payment connector's call"
              }
            ]
          },
          "billing_connector_id": {
            "type": "string",
            "description": "Billing Connector Id to update the invoices",
            "example": "mca_1234567890"
          },
          "active_attempt_payment_connector_id": {
            "type": "string",
            "description": "Payment Connector Id to retry the payments",
            "example": "mca_1234567890"
          },
          "billing_connector_payment_details": {
            "$ref": "#/components/schemas/BillingConnectorPaymentDetails",
            "description": "Billing Connector Payment Details"
          },
          "payment_method_type": {
            "$ref": "#/components/schemas/PaymentMethod",
            "description": "Payment Method Type"
          },
          "payment_method_subtype": {
            "$ref": "#/components/schemas/PaymentMethodType",
            "description": "PaymentMethod Subtype"
          },
          "connector": {
            "$ref": "#/components/schemas/Connector",
            "description": "The name of the payment connector through which the payment attempt was made."
          },
          "billing_connector_payment_method_details": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/BillingConnectorPaymentMethodDetails",
                "description": "Extra Payment Method Details that are needed to be stored"
              }
            ]
          },
          "invoice_next_billing_time": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time",
            "description": "Invoice Next billing time"
          },
          "first_payment_attempt_pg_error_code": {
            "type": [
              "string",
              "null"
            ],
            "description": "First Payment Attempt Payment Gateway Error Code",
            "example": "card_declined"
          },
          "first_payment_attempt_network_decline_code": {
            "type": [
              "string",
              "null"
            ],
            "description": "First Payment Attempt Network Error Code",
            "example": "05"
          },
          "first_payment_attempt_network_advice_code": {
            "type": [
              "string",
              "null"
            ],
            "description": "First Payment Attempt Network Advice Code",
            "example": "02"
          }
        }
      },
      "PaymentType": {
        "type": "string",
        "description": "The type of the payment that differentiates between normal and various types of mandate payments. Use 'setup_mandate' in case of zero auth flow.",
        "enum": [
          "normal",
          "new_mandate",
          "setup_mandate",
          "recurring_mandate"
        ]
      },
      "PaymentsCancelRequest": {
        "type": "object",
        "properties": {
          "cancellation_reason": {
            "type": [
              "string",
              "null"
            ],
            "description": "The reason for the payment cancel"
          },
          "merchant_connector_details": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MerchantConnectorDetailsWrap",
                "description": "Merchant connector details used to make payments."
              }
            ]
          }
        }
      },
      "PaymentsCaptureRequest": {
        "type": "object",
        "properties": {
          "amount_to_capture": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MinorUnit",
                "description": "The Amount to be captured/ debited from the user's payment method. If not passed the full amount will be captured."
              }
            ]
          }
        }
      },
      "PaymentsCompleteAuthorizeRequest": {
        "type": "object",
        "required": [
          "client_secret"
        ],
        "properties": {
          "shipping": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Address",
                "description": "The shipping address for the payment"
              }
            ]
          },
          "client_secret": {
            "type": "string",
            "description": "Client Secret"
          },
          "threeds_method_comp_ind": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ThreeDsCompletionIndicator",
                "description": "Indicates if 3DS method data was successfully completed or not"
              }
            ]
          }
        }
      },
      "PaymentsConfirmIntentRequest": {
        "type": "object",
        "description": "Request for Payment Intent Confirm",
        "required": [
          "payment_method_data",
          "payment_method_type",
          "payment_method_subtype"
        ],
        "properties": {
          "return_url": {
            "type": [
              "string",
              "null"
            ],
            "description": "The URL to which you want the user to be redirected after the completion of the payment operation\nIf this url is not passed, the url configured in the business profile will be used",
            "example": "https://hyperswitch.io"
          },
          "payment_method_data": {
            "$ref": "#/components/schemas/PaymentMethodDataRequest",
            "description": "The payment instrument data to be used for the payment"
          },
          "payment_method_type": {
            "$ref": "#/components/schemas/PaymentMethod",
            "description": "The payment method type to be used for the payment. This should match with the `payment_method_data` provided"
          },
          "payment_method_subtype": {
            "$ref": "#/components/schemas/PaymentMethodType",
            "description": "The payment method subtype to be used for the payment. This should match with the `payment_method_data` provided"
          },
          "shipping": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Address",
                "description": "The shipping address for the payment. This will override the shipping address provided in the create-intent request"
              }
            ]
          },
          "customer_acceptance": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CustomerAcceptance",
                "description": "This \"CustomerAcceptance\" object is passed during Payments-Confirm request, it enlists the type, time, and mode of acceptance properties related to an acceptance done by the customer. The customer_acceptance sub object is usually passed by the SDK or client."
              }
            ]
          },
          "browser_info": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/BrowserInformation",
                "description": "Additional details required by 3DS 2.0"
              }
            ]
          },
          "payment_method_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "The payment_method_id to be associated with the payment"
          },
          "payment_token": {
            "type": [
              "string",
              "null"
            ],
            "example": "187282ab-40ef-47a9-9206-5099ba31e432"
          },
          "merchant_connector_details": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MerchantConnectorAuthDetails",
                "description": "Merchant connector details used to make payments."
              }
            ]
          },
          "return_raw_connector_response": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "If true, returns stringified connector raw response body"
          }
        },
        "additionalProperties": false
      },
      "PaymentsCreateIntentRequest": {
        "type": "object",
        "required": [
          "amount_details",
          "customer_id"
        ],
        "properties": {
          "amount_details": {
            "$ref": "#/components/schemas/AmountDetails",
            "description": "The amount details for the payment"
          },
          "merchant_reference_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "Unique identifier for the payment. This ensures idempotency for multiple payments\nthat have been done by a single merchant.",
            "example": "pay_mbabizu24mvu3mela5njyhpit4",
            "maxLength": 30,
            "minLength": 30
          },
          "routing_algorithm_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "The routing algorithm id to be used for the payment"
          },
          "capture_method": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CaptureMethod"
              }
            ]
          },
          "authentication_type": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/AuthenticationType"
              }
            ],
            "default": "no_three_ds"
          },
          "billing": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Address",
                "description": "The billing details of the payment. This address will be used for invoicing."
              }
            ]
          },
          "shipping": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Address",
                "description": "The shipping address for the payment"
              }
            ]
          },
          "customer_id": {
            "type": "string",
            "description": "The identifier for the customer",
            "example": "12345_cus_01926c58bc6e77c09e809964e72af8c8",
            "maxLength": 64,
            "minLength": 32
          },
          "customer_present": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PresenceOfCustomerDuringPayment",
                "description": "Set to `present` to indicate that the customer is in your checkout flow during this payment, and therefore is able to authenticate. This parameter should be `absent` when merchant's doing merchant initiated payments and customer is not present while doing the payment."
              }
            ]
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "description": "A description for the payment",
            "example": "It's my first payment request"
          },
          "return_url": {
            "type": [
              "string",
              "null"
            ],
            "format": "uri",
            "description": "The URL to which you want the user to be redirected after the completion of the payment operation",
            "example": "https://hyperswitch.io"
          },
          "setup_future_usage": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/FutureUsage"
              }
            ]
          },
          "apply_mit_exemption": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MitExemptionRequest",
                "description": "Apply MIT exemption for a payment"
              }
            ]
          },
          "statement_descriptor": {
            "type": [
              "string",
              "null"
            ],
            "description": "For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters.",
            "example": "Hyperswitch Router",
            "maxLength": 22
          },
          "order_details": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/OrderDetailsWithAmount"
            },
            "description": "Use this object to capture the details about the different products for which the payment is being made. The sum of amount across different products here should be equal to the overall payment amount",
            "example": "[{\n        \"product_name\": \"Apple iPhone 16\",\n        \"quantity\": 1,\n        \"amount\" : 69000\n        \"product_img_link\" : \"https://dummy-img-link.com\"\n    }]"
          },
          "allowed_payment_method_types": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/PaymentMethodType"
            },
            "description": "Use this parameter to restrict the Payment Method Types to show for a given PaymentIntent"
          },
          "metadata": {
            "type": [
              "object",
              "null"
            ],
            "description": "Metadata is useful for storing additional, unstructured information on an object."
          },
          "connector_metadata": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ConnectorMetadata",
                "description": "Some connectors like Apple pay, Airwallex and Noon might require some additional information, find specific details in the child attributes below."
              }
            ]
          },
          "feature_metadata": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/FeatureMetadata",
                "description": "Additional data that might be required by hyperswitch based on the requested features by the merchants."
              }
            ]
          },
          "payment_link_enabled": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/EnablePaymentLinkRequest",
                "description": "Whether to generate the payment link for this payment or not (if applicable)"
              }
            ]
          },
          "payment_link_config": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PaymentLinkConfigRequest",
                "description": "Configure a custom payment link for the particular payment"
              }
            ]
          },
          "request_incremental_authorization": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/RequestIncrementalAuthorization",
                "description": "Request an incremental authorization, i.e., increase the authorized amount on a confirmed payment before you capture it."
              }
            ]
          },
          "session_expiry": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "description": "Will be used to expire client secret after certain amount of time to be supplied in seconds, if not sent it will be taken from profile config\n(900) for 15 mins",
            "example": 900,
            "minimum": 0
          },
          "frm_metadata": {
            "type": [
              "object",
              "null"
            ],
            "description": "Additional data related to some frm(Fraud Risk Management) connectors"
          },
          "request_external_three_ds_authentication": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/External3dsAuthenticationRequest",
                "description": "Whether to perform external authentication (if applicable)"
              }
            ]
          },
          "force_3ds_challenge": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Indicates if 3ds challenge is forced"
          },
          "merchant_connector_details": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MerchantConnectorAuthDetails",
                "description": "Merchant connector details used to make payments."
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "PaymentsDynamicTaxCalculationRequest": {
        "type": "object",
        "required": [
          "shipping",
          "client_secret",
          "payment_method_type"
        ],
        "properties": {
          "shipping": {
            "$ref": "#/components/schemas/Address",
            "description": "The shipping address for the payment"
          },
          "client_secret": {
            "type": "string",
            "description": "Client Secret"
          },
          "payment_method_type": {
            "$ref": "#/components/schemas/PaymentMethodType",
            "description": "Payment method type"
          },
          "session_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "Session Id"
          }
        }
      },
      "PaymentsDynamicTaxCalculationResponse": {
        "type": "object",
        "required": [
          "payment_id",
          "net_amount",
          "display_amount"
        ],
        "properties": {
          "payment_id": {
            "type": "string",
            "description": "The identifier for the payment"
          },
          "net_amount": {
            "$ref": "#/components/schemas/MinorUnit",
            "description": "net amount = amount + order_tax_amount + shipping_cost"
          },
          "order_tax_amount": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MinorUnit",
                "description": "order tax amount calculated by tax connectors"
              }
            ]
          },
          "shipping_cost": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MinorUnit",
                "description": "shipping cost for the order"
              }
            ]
          },
          "display_amount": {
            "$ref": "#/components/schemas/DisplayAmountOnSdk",
            "description": "amount in Base Unit display format"
          }
        }
      },
      "PaymentsExternalAuthenticationRequest": {
        "type": "object",
        "required": [
          "client_secret",
          "device_channel",
          "threeds_method_comp_ind"
        ],
        "properties": {
          "client_secret": {
            "type": "string",
            "description": "Client Secret"
          },
          "sdk_information": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/SdkInformation",
                "description": "SDK Information if request is from SDK"
              }
            ]
          },
          "device_channel": {
            "$ref": "#/components/schemas/DeviceChannel",
            "description": "Device Channel indicating whether request is coming from App or Browser"
          },
          "threeds_method_comp_ind": {
            "$ref": "#/components/schemas/ThreeDsCompletionIndicator",
            "description": "Indicates if 3DS method data was successfully completed or not"
          }
        }
      },
      "PaymentsExternalAuthenticationResponse": {
        "type": "object",
        "required": [
          "trans_status",
          "three_ds_requestor_url"
        ],
        "properties": {
          "trans_status": {
            "$ref": "#/components/schemas/TransactionStatus",
            "description": "Indicates the transaction status"
          },
          "acs_url": {
            "type": [
              "string",
              "null"
            ],
            "description": "Access Server URL to be used for challenge submission"
          },
          "challenge_request": {
            "type": [
              "string",
              "null"
            ],
            "description": "Challenge request which should be sent to acs_url"
          },
          "acs_reference_number": {
            "type": [
              "string",
              "null"
            ],
            "description": "Unique identifier assigned by the EMVCo(Europay, Mastercard and Visa)"
          },
          "acs_trans_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "Unique identifier assigned by the ACS to identify a single transaction"
          },
          "three_dsserver_trans_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "Unique identifier assigned by the 3DS Server to identify a single transaction"
          },
          "acs_signed_content": {
            "type": [
              "string",
              "null"
            ],
            "description": "Contains the JWS object created by the ACS for the ARes(Authentication Response) message"
          },
          "three_ds_requestor_url": {
            "type": "string",
            "description": "Three DS Requestor URL"
          },
          "three_ds_requestor_app_url": {
            "type": [
              "string",
              "null"
            ],
            "description": "Merchant app declaring their URL within the CReq message so that the Authentication app can call the Merchant app after OOB authentication has occurred"
          }
        }
      },
      "PaymentsIncrementalAuthorizationRequest": {
        "type": "object",
        "required": [
          "amount"
        ],
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/MinorUnit",
            "description": "The total amount including previously authorized amount and additional amount"
          },
          "reason": {
            "type": [
              "string",
              "null"
            ],
            "description": "Reason for incremental authorization"
          }
        }
      },
      "PaymentsIntentResponse": {
        "type": "object",
        "required": [
          "id",
          "status",
          "amount_details",
          "client_secret",
          "profile_id",
          "capture_method",
          "customer_id",
          "customer_present",
          "setup_future_usage",
          "apply_mit_exemption",
          "payment_link_enabled",
          "request_incremental_authorization",
          "expires_on",
          "request_external_three_ds_authentication"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Global Payment Id for the payment"
          },
          "status": {
            "$ref": "#/components/schemas/IntentStatus",
            "description": "The status of the payment"
          },
          "amount_details": {
            "$ref": "#/components/schemas/AmountDetailsResponse",
            "description": "The amount details for the payment"
          },
          "client_secret": {
            "type": "string",
            "description": "It's a token used for client side verification.",
            "example": "cs_0195b34da95d75239c6a4bf514458896"
          },
          "profile_id": {
            "type": "string",
            "description": "The identifier for the profile. This is inferred from the `x-profile-id` header"
          },
          "merchant_reference_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "Unique identifier for the payment. This ensures idempotency for multiple payments\nthat have been done by a single merchant.",
            "example": "pay_mbabizu24mvu3mela5njyhpit4",
            "maxLength": 30,
            "minLength": 30
          },
          "routing_algorithm_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "The routing algorithm id to be used for the payment"
          },
          "capture_method": {
            "$ref": "#/components/schemas/CaptureMethod"
          },
          "authentication_type": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/AuthenticationType",
                "description": "The authentication type for the payment"
              }
            ]
          },
          "billing": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Address",
                "description": "The billing details of the payment. This address will be used for invoicing."
              }
            ]
          },
          "shipping": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Address",
                "description": "The shipping address for the payment"
              }
            ]
          },
          "customer_id": {
            "type": "string",
            "description": "The identifier for the customer",
            "example": "12345_cus_01926c58bc6e77c09e809964e72af8c8",
            "maxLength": 64,
            "minLength": 32
          },
          "customer_present": {
            "$ref": "#/components/schemas/PresenceOfCustomerDuringPayment",
            "description": "Set to `present` to indicate that the customer is in your checkout flow during this payment, and therefore is able to authenticate. This parameter should be `absent` when merchant's doing merchant initiated payments and customer is not present while doing the payment."
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "description": "A description for the payment",
            "example": "It's my first payment request"
          },
          "return_url": {
            "type": [
              "string",
              "null"
            ],
            "description": "The URL to which you want the user to be redirected after the completion of the payment operation",
            "example": "https://hyperswitch.io"
          },
          "setup_future_usage": {
            "$ref": "#/components/schemas/FutureUsage"
          },
          "apply_mit_exemption": {
            "$ref": "#/components/schemas/MitExemptionRequest",
            "description": "Apply MIT exemption for a payment"
          },
          "statement_descriptor": {
            "type": [
              "string",
              "null"
            ],
            "description": "For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters.",
            "example": "Hyperswitch Router",
            "maxLength": 22
          },
          "order_details": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/OrderDetailsWithAmount"
            },
            "description": "Use this object to capture the details about the different products for which the payment is being made. The sum of amount across different products here should be equal to the overall payment amount",
            "example": "[{\n        \"product_name\": \"Apple iPhone 16\",\n        \"quantity\": 1,\n        \"amount\" : 69000\n        \"product_img_link\" : \"https://dummy-img-link.com\"\n    }]"
          },
          "allowed_payment_method_types": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/PaymentMethodType"
            },
            "description": "Use this parameter to restrict the Payment Method Types to show for a given PaymentIntent"
          },
          "metadata": {
            "type": [
              "object",
              "null"
            ],
            "description": "Metadata is useful for storing additional, unstructured information on an object."
          },
          "connector_metadata": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ConnectorMetadata",
                "description": "Some connectors like Apple pay, Airwallex and Noon might require some additional information, find specific details in the child attributes below."
              }
            ]
          },
          "feature_metadata": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/FeatureMetadata",
                "description": "Additional data that might be required by hyperswitch based on the requested features by the merchants."
              }
            ]
          },
          "payment_link_enabled": {
            "$ref": "#/components/schemas/EnablePaymentLinkRequest",
            "description": "Whether to generate the payment link for this payment or not (if applicable)"
          },
          "payment_link_config": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PaymentLinkConfigRequest",
                "description": "Configure a custom payment link for the particular payment"
              }
            ]
          },
          "request_incremental_authorization": {
            "$ref": "#/components/schemas/RequestIncrementalAuthorization",
            "description": "Request an incremental authorization, i.e., increase the authorized amount on a confirmed payment before you capture it."
          },
          "expires_on": {
            "type": "string",
            "format": "date-time",
            "description": "Will be used to expire client secret after certain amount of time to be supplied in seconds"
          },
          "frm_metadata": {
            "type": [
              "object",
              "null"
            ],
            "description": "Additional data related to some frm(Fraud Risk Management) connectors"
          },
          "request_external_three_ds_authentication": {
            "$ref": "#/components/schemas/External3dsAuthenticationRequest",
            "description": "Whether to perform external authentication (if applicable)"
          }
        },
        "additionalProperties": false
      },
      "PaymentsListResponseItem": {
        "type": "object",
        "required": [
          "id",
          "merchant_id",
          "profile_id",
          "status",
          "amount",
          "created",
          "attempt_count",
          "return_url"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the payment",
            "example": "12345_pay_01926c58bc6e77c09e809964e72af8c8",
            "maxLength": 64,
            "minLength": 32
          },
          "merchant_id": {
            "type": "string",
            "description": "This is an identifier for the merchant account. This is inferred from the API key\nprovided during the request",
            "example": "merchant_1668273825",
            "maxLength": 255
          },
          "profile_id": {
            "type": "string",
            "description": "The business profile that is associated with this payment"
          },
          "customer_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "The identifier for the customer",
            "example": "12345_cus_01926c58bc6e77c09e809964e72af8c8",
            "maxLength": 64,
            "minLength": 32
          },
          "payment_method_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "Identifier for Payment Method used for the payment"
          },
          "status": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IntentStatus",
                "description": "Status of the payment"
              }
            ],
            "default": "requires_confirmation"
          },
          "amount": {
            "$ref": "#/components/schemas/PaymentAmountDetailsResponse",
            "description": "Amount related information for this payment and attempt"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the payment was created",
            "example": "2022-09-10T10:11:12Z"
          },
          "payment_method_type": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PaymentMethod",
                "description": "The payment method type for this payment attempt"
              }
            ]
          },
          "payment_method_subtype": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PaymentMethodType"
              }
            ]
          },
          "connector": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Connector",
                "description": "The connector used for the payment"
              }
            ]
          },
          "merchant_connector_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "Identifier of the connector ( merchant connector account ) which was chosen to make the payment"
          },
          "customer": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CustomerDetailsResponse",
                "description": "Details of the customer"
              }
            ]
          },
          "merchant_reference_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "The reference id for the order in the merchant's system. This value can be passed by the merchant."
          },
          "connector_payment_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "A unique identifier for a payment provided by the connector",
            "example": "993672945374576J"
          },
          "connector_response_reference_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "Reference to the capture at connector side"
          },
          "metadata": {
            "type": [
              "object",
              "null"
            ],
            "description": "Metadata is useful for storing additional, unstructured information on an object."
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "description": "A description of the payment",
            "example": "It's my first payment request"
          },
          "authentication_type": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/AuthenticationType",
                "description": "The transaction authentication can be set to undergo payer authentication. By default, the authentication will be marked as NO_THREE_DS"
              }
            ],
            "default": "three_ds"
          },
          "capture_method": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CaptureMethod",
                "description": "This is the instruction for capture/ debit the money from the users' card. On the other hand authorization refers to blocking the amount on the users' payment method."
              }
            ]
          },
          "setup_future_usage": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/FutureUsage",
                "description": "Indicates that you intend to make future payments with this Payment’s payment method. Providing this parameter will attach the payment method to the Customer, if present, after the Payment is confirmed and any required actions from the user are complete."
              }
            ]
          },
          "attempt_count": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of attempts associated with this payment"
          },
          "error": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ErrorDetails",
                "description": "Error details for the payment if any"
              }
            ]
          },
          "cancellation_reason": {
            "type": [
              "string",
              "null"
            ],
            "description": "If the payment was cancelled the reason will be provided here"
          },
          "order_details": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/OrderDetailsWithAmount"
            },
            "description": "Information about the product , quantity and amount for connectors. (e.g. Klarna)",
            "example": "[{\n        \"product_name\": \"gillete creme\",\n        \"quantity\": 15,\n        \"amount\" : 900\n    }]"
          },
          "return_url": {
            "type": "string",
            "description": "The URL to redirect after the completion of the operation",
            "example": "https://hyperswitch.io"
          },
          "statement_descriptor": {
            "type": [
              "string",
              "null"
            ],
            "description": "For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters.",
            "example": "Hyperswitch Router",
            "maxLength": 255
          },
          "allowed_payment_method_types": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/PaymentMethodType"
            },
            "description": "Allowed Payment Method Types for a given PaymentIntent"
          },
          "authorization_count": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "description": "Total number of authorizations happened in an incremental_authorization payment"
          },
          "modified_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time",
            "description": "Date time at which payment was updated",
            "example": "2022-09-10T10:11:12Z"
          }
        }
      },
      "PaymentsRequest": {
        "type": "object",
        "required": [
          "amount_details",
          "customer_id",
          "payment_method_data",
          "payment_method_type",
          "payment_method_subtype"
        ],
        "properties": {
          "amount_details": {
            "$ref": "#/components/schemas/AmountDetails",
            "description": "The amount details for the payment"
          },
          "merchant_reference_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "Unique identifier for the payment. This ensures idempotency for multiple payments\nthat have been done by a single merchant.",
            "example": "pay_mbabizu24mvu3mela5njyhpit4",
            "maxLength": 30,
            "minLength": 30
          },
          "routing_algorithm_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "The routing algorithm id to be used for the payment"
          },
          "capture_method": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CaptureMethod"
              }
            ]
          },
          "authentication_type": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/AuthenticationType"
              }
            ],
            "default": "no_three_ds"
          },
          "billing": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Address",
                "description": "The billing details of the payment. This address will be used for invoicing."
              }
            ]
          },
          "shipping": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Address",
                "description": "The shipping address for the payment"
              }
            ]
          },
          "customer_id": {
            "type": "string",
            "description": "The identifier for the customer",
            "example": "12345_cus_01926c58bc6e77c09e809964e72af8c8",
            "maxLength": 64,
            "minLength": 32
          },
          "customer_present": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PresenceOfCustomerDuringPayment",
                "description": "Set to `present` to indicate that the customer is in your checkout flow during this payment, and therefore is able to authenticate. This parameter should be `absent` when merchant's doing merchant initiated payments and customer is not present while doing the payment."
              }
            ]
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "description": "A description for the payment",
            "example": "It's my first payment request"
          },
          "return_url": {
            "type": [
              "string",
              "null"
            ],
            "description": "The URL to which you want the user to be redirected after the completion of the payment operation",
            "example": "https://hyperswitch.io"
          },
          "setup_future_usage": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/FutureUsage"
              }
            ]
          },
          "apply_mit_exemption": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MitExemptionRequest",
                "description": "Apply MIT exemption for a payment"
              }
            ]
          },
          "statement_descriptor": {
            "type": [
              "string",
              "null"
            ],
            "description": "For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters.",
            "example": "Hyperswitch Router",
            "maxLength": 22
          },
          "order_details": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/OrderDetailsWithAmount"
            },
            "description": "Use this object to capture the details about the different products for which the payment is being made. The sum of amount across different products here should be equal to the overall payment amount",
            "example": "[{\n        \"product_name\": \"Apple iPhone 16\",\n        \"quantity\": 1,\n        \"amount\" : 69000\n        \"product_img_link\" : \"https://dummy-img-link.com\"\n    }]"
          },
          "allowed_payment_method_types": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/PaymentMethodType"
            },
            "description": "Use this parameter to restrict the Payment Method Types to show for a given PaymentIntent"
          },
          "metadata": {
            "type": [
              "object",
              "null"
            ],
            "description": "Metadata is useful for storing additional, unstructured information on an object."
          },
          "connector_metadata": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ConnectorMetadata",
                "description": "Some connectors like Apple pay, Airwallex and Noon might require some additional information, find specific details in the child attributes below."
              }
            ]
          },
          "feature_metadata": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/FeatureMetadata",
                "description": "Additional data that might be required by hyperswitch based on the requested features by the merchants."
              }
            ]
          },
          "payment_link_enabled": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/EnablePaymentLinkRequest",
                "description": "Whether to generate the payment link for this payment or not (if applicable)"
              }
            ]
          },
          "payment_link_config": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PaymentLinkConfigRequest",
                "description": "Configure a custom payment link for the particular payment"
              }
            ]
          },
          "request_incremental_authorization": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/RequestIncrementalAuthorization",
                "description": "Request an incremental authorization, i.e., increase the authorized amount on a confirmed payment before you capture it."
              }
            ]
          },
          "session_expiry": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "description": "Will be used to expire client secret after certain amount of time to be supplied in seconds, if not sent it will be taken from profile config\n(900) for 15 mins",
            "example": 900,
            "minimum": 0
          },
          "frm_metadata": {
            "type": [
              "object",
              "null"
            ],
            "description": "Additional data related to some frm(Fraud Risk Management) connectors"
          },
          "request_external_three_ds_authentication": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/External3dsAuthenticationRequest",
                "description": "Whether to perform external authentication (if applicable)"
              }
            ]
          },
          "payment_method_data": {
            "$ref": "#/components/schemas/PaymentMethodDataRequest",
            "description": "The payment instrument data to be used for the payment"
          },
          "payment_method_type": {
            "$ref": "#/components/schemas/PaymentMethod",
            "description": "The payment method type to be used for the payment. This should match with the `payment_method_data` provided"
          },
          "payment_method_subtype": {
            "$ref": "#/components/schemas/PaymentMethodType",
            "description": "The payment method subtype to be used for the payment. This should match with the `payment_method_data` provided"
          },
          "customer_acceptance": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CustomerAcceptance",
                "description": "This \"CustomerAcceptance\" object is passed during Payments-Confirm request, it enlists the type, time, and mode of acceptance properties related to an acceptance done by the customer. The customer_acceptance sub object is usually passed by the SDK or client."
              }
            ]
          },
          "browser_info": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/BrowserInformation",
                "description": "Additional details required by 3DS 2.0"
              }
            ]
          },
          "payment_method_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "The payment_method_id to be associated with the payment"
          },
          "force_3ds_challenge": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Indicates if 3ds challenge is forced"
          },
          "is_iframe_redirection_enabled": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Indicates if the redirection has to open in the iframe"
          },
          "merchant_connector_details": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MerchantConnectorAuthDetails",
                "description": "Merchant connector details used to make payments."
              }
            ]
          },
          "return_raw_connector_response": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Stringified connector raw response body. Only returned if `return_raw_connector_response` is true"
          }
        },
        "additionalProperties": false
      },
      "PaymentsResponse": {
        "type": "object",
        "description": "Response for Payment Intent Confirm\nFew fields should be expandable, we need not return these in the normal response\nBut when explicitly requested for expanded objects, these can be returned\nFor example\nshipping, billing, customer, payment_method",
        "required": [
          "id",
          "status",
          "amount",
          "customer_id",
          "created"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the payment. This ensures idempotency for multiple payments\nthat have been done by a single merchant.",
            "example": "12345_pay_01926c58bc6e77c09e809964e72af8c8",
            "maxLength": 64,
            "minLength": 32
          },
          "status": {
            "$ref": "#/components/schemas/IntentStatus"
          },
          "amount": {
            "$ref": "#/components/schemas/PaymentAmountDetailsResponse",
            "description": "Amount related information for this payment and attempt"
          },
          "customer_id": {
            "type": "string",
            "description": "The identifier for the customer",
            "example": "12345_cus_01926c58bc6e77c09e809964e72af8c8",
            "maxLength": 64,
            "minLength": 32
          },
          "connector": {
            "type": [
              "string",
              "null"
            ],
            "description": "The connector used for the payment",
            "example": "stripe"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the payment was created",
            "example": "2022-09-10T10:11:12Z"
          },
          "payment_method_data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PaymentMethodDataResponseWithBilling",
                "description": "The payment method information provided for making a payment"
              }
            ]
          },
          "payment_method_type": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PaymentMethod",
                "description": "The payment method type for this payment attempt"
              }
            ]
          },
          "payment_method_subtype": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PaymentMethodType"
              }
            ]
          },
          "connector_transaction_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "A unique identifier for a payment provided by the connector",
            "example": "993672945374576J"
          },
          "connector_reference_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "reference(Identifier) to the payment at connector side",
            "example": "993672945374576J"
          },
          "merchant_connector_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "Identifier of the connector ( merchant connector account ) which was chosen to make the payment"
          },
          "browser_info": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/BrowserInformation",
                "description": "The browser information used for this payment"
              }
            ]
          },
          "error": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ErrorDetails",
                "description": "Error details for the payment if any"
              }
            ]
          },
          "shipping": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Address",
                "description": "The shipping address associated with the payment intent"
              }
            ]
          },
          "billing": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Address",
                "description": "The billing address associated with the payment intent"
              }
            ]
          },
          "attempts": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/PaymentAttemptResponse"
            },
            "description": "List of payment attempts associated with payment intent"
          },
          "connector_token_details": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ConnectorTokenDetails",
                "description": "Connector token information that can be used to make payments directly by the merchant."
              }
            ]
          },
          "payment_method_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "The payment_method_id associated with the payment"
          },
          "next_action": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/NextActionData",
                "description": "Additional information required for redirection"
              }
            ]
          },
          "return_url": {
            "type": [
              "string",
              "null"
            ],
            "description": "The url to which user must be redirected to after completion of the purchase"
          },
          "authentication_type": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/AuthenticationType",
                "description": "The authentication type that was requested for this order"
              }
            ],
            "default": "no_three_ds"
          },
          "authentication_type_applied": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/AuthenticationType",
                "description": "The authentication type that was appliced for this order\nThis depeneds on the 3DS rules configured, If not a default authentication type will be applied"
              }
            ],
            "default": "no_three_ds"
          },
          "is_iframe_redirection_enabled": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Indicates if the redirection has to open in the iframe"
          },
          "merchant_reference_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "Unique identifier for the payment. This ensures idempotency for multiple payments\nthat have been done by a single merchant.",
            "example": "pay_mbabizu24mvu3mela5njyhpit4",
            "maxLength": 30,
            "minLength": 30
          },
          "raw_connector_response": {
            "type": [
              "string",
              "null"
            ],
            "description": "Stringified connector raw response body. Only returned if `return_raw_connector_response` is true"
          }
        }
      },
      "PaymentsRetrieveRequest": {
        "type": "object",
        "description": "Request body for Payment Status",
        "properties": {
          "force_sync": {
            "type": "boolean",
            "description": "A boolean used to indicate if the payment status should be fetched from the connector\nIf this is set to true, the status will be fetched from the connector"
          },
          "expand_attempts": {
            "type": "boolean",
            "description": "A boolean used to indicate if all the attempts needs to be fetched for the intent.\nIf this is set to true, attempts list will be available in the response."
          },
          "param": {
            "type": [
              "string",
              "null"
            ],
            "description": "These are the query params that are sent in case of redirect response.\nThese can be ingested by the connector to take necessary actions."
          },
          "return_raw_connector_response": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "If true, returns stringified connector raw response body"
          },
          "merchant_connector_details": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MerchantConnectorAuthDetails",
                "description": "Merchant connector details used to make payments."
              }
            ]
          }
        }
      },
      "PaymentsSessionRequest": {
        "type": "object"
      },
      "PaymentsSessionResponse": {
        "type": "object",
        "required": [
          "payment_id",
          "session_token"
        ],
        "properties": {
          "payment_id": {
            "type": "string",
            "description": "The identifier for the payment"
          },
          "session_token": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SessionToken"
            },
            "description": "The list of session token object"
          },
          "vault_details": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/VaultSessionDetails",
                "description": "External vault session details"
              }
            ]
          }
        }
      },
      "PaymentsStatusRequest": {
        "type": "object",
        "description": "Request for Payment Status",
        "properties": {
          "force_sync": {
            "type": "boolean",
            "description": "A boolean used to indicate if the payment status should be fetched from the connector\nIf this is set to true, the status will be fetched from the connector"
          },
          "expand_attempts": {
            "type": "boolean",
            "description": "A boolean used to indicate if all the attempts needs to be fetched for the intent.\nIf this is set to true, attempts list will be available in the response."
          },
          "param": {
            "type": [
              "string",
              "null"
            ],
            "description": "These are the query params that are sent in case of redirect response.\nThese can be ingested by the connector to take necessary actions."
          },
          "return_raw_connector_response": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "If true, returns stringified connector raw response body"
          }
        }
      },
      "PaymentsUpdateIntentRequest": {
        "type": "object",
        "properties": {
          "amount_details": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/AmountDetailsUpdate"
              }
            ]
          },
          "routing_algorithm_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "The routing algorithm id to be used for the payment"
          },
          "capture_method": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CaptureMethod"
              }
            ]
          },
          "authentication_type": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/AuthenticationType"
              }
            ],
            "default": "no_three_ds"
          },
          "billing": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Address",
                "description": "The billing details of the payment. This address will be used for invoicing."
              }
            ]
          },
          "shipping": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Address",
                "description": "The shipping address for the payment"
              }
            ]
          },
          "customer_present": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PresenceOfCustomerDuringPayment",
                "description": "Set to `present` to indicate that the customer is in your checkout flow during this payment, and therefore is able to authenticate. This parameter should be `absent` when merchant's doing merchant initiated payments and customer is not present while doing the payment."
              }
            ]
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "description": "A description for the payment",
            "example": "It's my first payment request"
          },
          "return_url": {
            "type": [
              "string",
              "null"
            ],
            "description": "The URL to which you want the user to be redirected after the completion of the payment operation",
            "example": "https://hyperswitch.io"
          },
          "setup_future_usage": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/FutureUsage"
              }
            ]
          },
          "apply_mit_exemption": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MitExemptionRequest",
                "description": "Apply MIT exemption for a payment"
              }
            ]
          },
          "statement_descriptor": {
            "type": [
              "string",
              "null"
            ],
            "description": "For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters.",
            "example": "Hyperswitch Router",
            "maxLength": 22
          },
          "order_details": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/OrderDetailsWithAmount"
            },
            "description": "Use this object to capture the details about the different products for which the payment is being made. The sum of amount across different products here should be equal to the overall payment amount",
            "example": "[{\n        \"product_name\": \"Apple iPhone 16\",\n        \"quantity\": 1,\n        \"amount\" : 69000\n        \"product_img_link\" : \"https://dummy-img-link.com\"\n    }]"
          },
          "allowed_payment_method_types": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/PaymentMethodType"
            },
            "description": "Use this parameter to restrict the Payment Method Types to show for a given PaymentIntent"
          },
          "metadata": {
            "type": [
              "object",
              "null"
            ],
            "description": "Metadata is useful for storing additional, unstructured information on an object. This metadata will override the metadata that was passed in payments"
          },
          "connector_metadata": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ConnectorMetadata",
                "description": "Some connectors like Apple pay, Airwallex and Noon might require some additional information, find specific details in the child attributes below."
              }
            ]
          },
          "feature_metadata": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/FeatureMetadata",
                "description": "Additional data that might be required by hyperswitch based on the requested features by the merchants."
              }
            ]
          },
          "payment_link_config": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PaymentLinkConfigRequest",
                "description": "Configure a custom payment link for the particular payment"
              }
            ]
          },
          "request_incremental_authorization": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/RequestIncrementalAuthorization",
                "description": "Request an incremental authorization, i.e., increase the authorized amount on a confirmed payment before you capture it."
              }
            ]
          },
          "session_expiry": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "description": " Will be used to expire client secret after certain amount of time to be supplied in seconds, if not sent it will be taken from profile config\n(900) for 15 mins",
            "example": 900,
            "minimum": 0
          },
          "frm_metadata": {
            "type": [
              "object",
              "null"
            ],
            "description": "Additional data related to some frm(Fraud Risk Management) connectors"
          },
          "request_external_three_ds_authentication": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/External3dsAuthenticationRequest",
                "description": "Whether to perform external authentication (if applicable)"
              }
            ]
          },
          "set_active_attempt_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/UpdateActiveAttempt",
                "description": "Whether to set / unset the active attempt id"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "PayoutActionRequest": {
        "type": "object",
        "required": [
          "payout_id"
        ],
        "properties": {
          "payout_id": {
            "type": "string",
            "description": "Unique identifier for the payout. This ensures idempotency for multiple payouts\nthat have been done by a single merchant. This field is auto generated and is returned in the API response.",
            "example": "187282ab-40ef-47a9-9206-5099ba31e432",
            "maxLength": 30,
            "minLength": 30
          }
        }
      },
      "PayoutAttemptResponse": {
        "type": "object",
        "required": [
          "attempt_id",
          "status",
          "amount"
        ],
        "properties": {
          "attempt_id": {
            "type": "string",
            "description": "Unique identifier for the attempt"
          },
          "status": {
            "$ref": "#/components/schemas/PayoutStatus",
            "description": "The status of the attempt"
          },
          "amount": {
            "$ref": "#/components/schemas/MinorUnit",
            "description": "The payout attempt amount. Amount for the payout in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc.,"
          },
          "currency": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Currency",
                "description": "The currency of the amount of the payout attempt"
              }
            ]
          },
          "connector": {
            "type": [
              "string",
              "null"
            ],
            "description": "The connector used for the payout"
          },
          "error_code": {
            "type": [
              "string",
              "null"
            ],
            "description": "Connector's error code in case of failures"
          },
          "error_message": {
            "type": [
              "string",
              "null"
            ],
            "description": "Connector's error message in case of failures"
          },
          "payment_method": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PayoutType",
                "description": "The payout method that was used"
              }
            ]
          },
          "payout_method_type": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PaymentMethodType",
                "description": "Payment Method Type"
              }
            ]
          },
          "connector_transaction_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "A unique identifier for a payout provided by the connector"
          },
          "cancellation_reason": {
            "type": [
              "string",
              "null"
            ],
            "description": "If the payout was cancelled the reason provided here"
          },
          "unified_code": {
            "type": [
              "string",
              "null"
            ],
            "description": "(This field is not live yet)\nError code unified across the connectors is received here in case of errors while calling the underlying connector",
            "example": "UE_000",
            "maxLength": 255
          },
          "unified_message": {
            "type": [
              "string",
              "null"
            ],
            "description": "(This field is not live yet)\nError message unified across the connectors is received here in case of errors while calling the underlying connector",
            "example": "Invalid card details",
            "maxLength": 1024
          }
        }
      },
      "PayoutConnectors": {
        "type": "string",
        "enum": [
          "adyen",
          "adyenplatform",
          "cybersource",
          "ebanx",
          "nomupay",
          "payone",
          "paypal",
          "stripe",
          "wise"
        ]
      },
      "PayoutCreatePayoutLinkConfig": {
        "allOf": [
          {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/GenericLinkUiConfig"
              }
            ]
          },
          {
            "type": "object",
            "properties": {
              "payout_link_id": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "The unique identifier for the collect link.",
                "example": "pm_collect_link_2bdacf398vwzq5n422S1"
              },
              "enabled_payment_methods": {
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "$ref": "#/components/schemas/EnabledPaymentMethod"
                },
                "description": "List of payout methods shown on collect UI",
                "example": "[{\"payment_method\": \"bank_transfer\", \"payment_method_types\": [\"ach\", \"bacs\"]}]"
              },
              "form_layout": {
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/components/schemas/UIWidgetFormLayout",
                    "description": "Form layout of the payout link"
                  }
                ]
              },
              "test_mode": {
                "type": [
                  "boolean",
                  "null"
                ],
                "description": "`test_mode` allows for opening payout links without any restrictions. This removes\n- domain name validations\n- check for making sure link is accessed within an iframe",
                "example": false
              }
            }
          }
        ],
        "description": "Custom payout link config for the particular payout, if payout link is to be generated."
      },
      "PayoutCreateRequest": {
        "type": "object",
        "properties": {
          "payout_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "Unique identifier for the payout. This ensures idempotency for multiple payouts that have been done by a single merchant. This field is auto generated and is returned in the API response, **not required to be included in the Payout Create/Update Request.**",
            "example": "187282ab-40ef-47a9-9206-5099ba31e432",
            "maxLength": 30,
            "minLength": 30
          },
          "merchant_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "This is an identifier for the merchant account. This is inferred from the API key provided during the request, **not required to be included in the Payout Create/Update Request.**",
            "example": "merchant_1668273825",
            "maxLength": 255
          },
          "merchant_order_reference_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "Your unique identifier for this payout or order. This ID helps you reconcile payouts on your system. If provided, it is passed to the connector if supported.",
            "example": "merchant_order_ref_123",
            "maxLength": 255
          },
          "amount": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "description": "The payout amount. Amount for the payout in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc.,",
            "example": 1000,
            "minimum": 0
          },
          "currency": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Currency",
                "description": "The currency of the payout request can be specified here"
              }
            ]
          },
          "routing": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/StaticRoutingAlgorithm",
                "description": "Specifies routing algorithm for selecting a connector"
              }
            ]
          },
          "connector": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/PayoutConnectors"
            },
            "description": "This field allows the merchant to manually select a connector with which the payout can go through.",
            "example": [
              "wise",
              "adyen"
            ]
          },
          "confirm": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "This field is used when merchant wants to confirm the payout, thus useful for the payout _Confirm_ request. Ideally merchants should _Create_ a payout, _Update_ it (if required), then _Confirm_ it.",
            "default": false,
            "example": true
          },
          "payout_type": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PayoutType",
                "description": "The payout_type of the payout request can be specified here, this is a mandatory field to _Confirm_ the payout, i.e., should be passed in _Create_ request, if not then should be updated in the payout _Update_ request, then only it can be confirmed."
              }
            ]
          },
          "payout_method_data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PayoutMethodData",
                "description": "The payout method information required for carrying out a payout"
              }
            ]
          },
          "billing": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Address",
                "description": "The billing address for the payout"
              }
            ]
          },
          "auto_fulfill": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Set to true to confirm the payout without review, no further action required",
            "default": false,
            "example": true
          },
          "customer_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "The identifier for the customer object. If not provided the customer ID will be autogenerated. _Deprecated: Use customer_id instead._",
            "deprecated": true,
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "customer": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CustomerDetails",
                "description": "Passing this object creates a new customer or attaches an existing customer to the payout"
              }
            ]
          },
          "client_secret": {
            "type": [
              "string",
              "null"
            ],
            "description": "It's a token used for client side verification.",
            "example": "pay_U42c409qyHwOkWo3vK60_secret_el9ksDkiB8hi6j9N78yo"
          },
          "return_url": {
            "type": [
              "string",
              "null"
            ],
            "description": "The URL to redirect after the completion of the operation",
            "example": "https://hyperswitch.io"
          },
          "business_country": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CountryAlpha2",
                "description": "Business country of the merchant for this payout. _Deprecated: Use profile_id instead._"
              }
            ]
          },
          "business_label": {
            "type": [
              "string",
              "null"
            ],
            "description": "Business label of the merchant for this payout. _Deprecated: Use profile_id instead._",
            "deprecated": true,
            "example": "food"
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "description": "A description of the payout",
            "example": "It's my first payout request"
          },
          "entity_type": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PayoutEntityType",
                "description": "Type of entity to whom the payout is being carried out to, select from the given list of options"
              }
            ]
          },
          "recurring": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Specifies whether or not the payout request is recurring",
            "default": false
          },
          "metadata": {
            "type": [
              "object",
              "null"
            ],
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object."
          },
          "payout_token": {
            "type": [
              "string",
              "null"
            ],
            "description": "Provide a reference to a stored payout method, used to process the payout.",
            "example": "187282ab-40ef-47a9-9206-5099ba31e432"
          },
          "profile_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "The business profile to use for this payout, especially if there are multiple business profiles associated with the account, otherwise default business profile associated with the merchant account will be used."
          },
          "priority": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PayoutSendPriority",
                "description": "The send method which will be required for processing payouts, check options for better understanding."
              }
            ]
          },
          "payout_link": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Whether to get the payout link (if applicable). Merchant need to specify this during the Payout _Create_, this field can not be updated during Payout _Update_.",
            "default": false,
            "example": true
          },
          "payout_link_config": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PayoutCreatePayoutLinkConfig",
                "description": "Custom payout link config for the particular payout, if payout link is to be generated."
              }
            ]
          },
          "session_expiry": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "description": "Will be used to expire client secret after certain amount of time to be supplied in seconds\n(900) for 15 mins",
            "example": 900,
            "minimum": 0
          },
          "email": {
            "type": [
              "string",
              "null"
            ],
            "description": "Customer's email. _Deprecated: Use customer object instead._",
            "deprecated": true,
            "example": "johntest@test.com",
            "maxLength": 255
          },
          "name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Customer's name. _Deprecated: Use customer object instead._",
            "deprecated": true,
            "example": "John Test",
            "maxLength": 255
          },
          "phone": {
            "type": [
              "string",
              "null"
            ],
            "description": "Customer's phone. _Deprecated: Use customer object instead._",
            "deprecated": true,
            "example": "9123456789",
            "maxLength": 255
          },
          "phone_country_code": {
            "type": [
              "string",
              "null"
            ],
            "description": "Customer's phone country code. _Deprecated: Use customer object instead._",
            "deprecated": true,
            "example": "+1",
            "maxLength": 255
          },
          "payout_method_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "Identifier for payout method"
          }
        },
        "additionalProperties": false
      },
      "PayoutCreateResponse": {
        "type": "object",
        "required": [
          "payout_id",
          "merchant_id",
          "amount",
          "currency",
          "auto_fulfill",
          "customer_id",
          "client_secret",
          "return_url",
          "entity_type",
          "recurring",
          "status",
          "profile_id"
        ],
        "properties": {
          "payout_id": {
            "type": "string",
            "description": "Unique identifier for the payout. This ensures idempotency for multiple payouts\nthat have been done by a single merchant. This field is auto generated and is returned in the API response.",
            "example": "187282ab-40ef-47a9-9206-5099ba31e432",
            "maxLength": 30,
            "minLength": 30
          },
          "merchant_id": {
            "type": "string",
            "description": "This is an identifier for the merchant account. This is inferred from the API key\nprovided during the request",
            "example": "merchant_1668273825",
            "maxLength": 255
          },
          "merchant_order_reference_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "Your unique identifier for this payout or order. This ID helps you reconcile payouts on your system. If provided, it is passed to the connector if supported.",
            "example": "merchant_order_ref_123",
            "maxLength": 255
          },
          "amount": {
            "$ref": "#/components/schemas/MinorUnit",
            "description": "The payout amount. Amount for the payout in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc.,"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency",
            "description": "Recipient's currency for the payout request"
          },
          "connector": {
            "type": [
              "string",
              "null"
            ],
            "description": "The connector used for the payout",
            "example": "wise"
          },
          "payout_type": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PayoutType",
                "description": "The payout method that is to be used"
              }
            ]
          },
          "payout_method_data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PayoutMethodDataResponse",
                "description": "The payout method details for the payout"
              }
            ]
          },
          "billing": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Address",
                "description": "The billing address for the payout"
              }
            ]
          },
          "auto_fulfill": {
            "type": "boolean",
            "description": "Set to true to confirm the payout without review, no further action required",
            "default": false,
            "example": true
          },
          "customer_id": {
            "type": "string",
            "description": "The identifier for the customer object. If not provided the customer ID will be autogenerated.",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "customer": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CustomerDetailsResponse",
                "description": "Passing this object creates a new customer or attaches an existing customer to the payout"
              }
            ]
          },
          "client_secret": {
            "type": "string",
            "description": "It's a token used for client side verification.",
            "example": "pay_U42c409qyHwOkWo3vK60_secret_el9ksDkiB8hi6j9N78yo"
          },
          "return_url": {
            "type": "string",
            "description": "The URL to redirect after the completion of the operation",
            "example": "https://hyperswitch.io"
          },
          "business_country": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CountryAlpha2",
                "description": "Business country of the merchant for this payout"
              }
            ]
          },
          "business_label": {
            "type": [
              "string",
              "null"
            ],
            "description": "Business label of the merchant for this payout",
            "example": "food"
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "description": "A description of the payout",
            "example": "It's my first payout request"
          },
          "entity_type": {
            "$ref": "#/components/schemas/PayoutEntityType",
            "description": "Type of entity to whom the payout is being carried out to"
          },
          "recurring": {
            "type": "boolean",
            "description": "Specifies whether or not the payout request is recurring",
            "default": false
          },
          "metadata": {
            "type": [
              "object",
              "null"
            ],
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object."
          },
          "merchant_connector_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "Unique identifier of the merchant connector account",
            "example": "mca_sAD3OZLATetvjLOYhUSy"
          },
          "status": {
            "$ref": "#/components/schemas/PayoutStatus",
            "description": "Current status of the Payout"
          },
          "error_message": {
            "type": [
              "string",
              "null"
            ],
            "description": "If there was an error while calling the connector the error message is received here",
            "example": "Failed while verifying the card"
          },
          "error_code": {
            "type": [
              "string",
              "null"
            ],
            "description": "If there was an error while calling the connectors the code is received here",
            "example": "E0001"
          },
          "profile_id": {
            "type": "string",
            "description": "The business profile that is associated with this payout"
          },
          "created": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time",
            "description": "Time when the payout was created",
            "example": "2022-09-10T10:11:12Z"
          },
          "connector_transaction_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "Underlying processor's payout resource ID",
            "example": "S3FC9G9M2MVFDXT5"
          },
          "priority": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PayoutSendPriority",
                "description": "Payout's send priority (if applicable)"
              }
            ]
          },
          "attempts": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/PayoutAttemptResponse"
            },
            "description": "List of attempts"
          },
          "payout_link": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PayoutLinkResponse",
                "description": "If payout link was requested, this contains the link's ID and the URL to render the payout widget"
              }
            ]
          },
          "email": {
            "type": [
              "string",
              "null"
            ],
            "description": "Customer's email. _Deprecated: Use customer object instead._",
            "deprecated": true,
            "example": "johntest@test.com",
            "maxLength": 255
          },
          "name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Customer's name. _Deprecated: Use customer object instead._",
            "deprecated": true,
            "example": "John Test",
            "maxLength": 255
          },
          "phone": {
            "type": [
              "string",
              "null"
            ],
            "description": "Customer's phone. _Deprecated: Use customer object instead._",
            "deprecated": true,
            "example": "9123456789",
            "maxLength": 255
          },
          "phone_country_code": {
            "type": [
              "string",
              "null"
            ],
            "description": "Customer's phone country code. _Deprecated: Use customer object instead._",
            "deprecated": true,
            "example": "+1",
            "maxLength": 255
          },
          "unified_code": {
            "type": [
              "string",
              "null"
            ],
            "description": "(This field is not live yet)\nError code unified across the connectors is received here in case of errors while calling the underlying connector",
            "example": "UE_000",
            "maxLength": 255
          },
          "unified_message": {
            "type": [
              "string",
              "null"
            ],
            "description": "(This field is not live yet)\nError message unified across the connectors is received here in case of errors while calling the underlying connector",
            "example": "Invalid card details",
            "maxLength": 1024
          },
          "payout_method_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "Identifier for payout method"
          }
        },
        "additionalProperties": false
      },
      "PayoutEntityType": {
        "type": "string",
        "description": "Type of entity to whom the payout is being carried out to, select from the given list of options",
        "enum": [
          "Individual",
          "Company",
          "NonProfit",
          "PublicSector",
          "NaturalPerson",
          "lowercase",
          "Personal"
        ]
      },
      "PayoutLinkInitiateRequest": {
        "type": "object",
        "required": [
          "merchant_id",
          "payout_id"
        ],
        "properties": {
          "merchant_id": {
            "type": "string"
          },
          "payout_id": {
            "type": "string"
          }
        }
      },
      "PayoutLinkResponse": {
        "type": "object",
        "required": [
          "payout_link_id",
          "link"
        ],
        "properties": {
          "payout_link_id": {
            "type": "string"
          },
          "link": {
            "type": "string"
          }
        }
      },
      "PayoutListConstraints": {
        "allOf": [
          {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/TimeRange",
                "description": "The time range for which objects are needed. TimeRange has two fields start_time and end_time from which objects can be filtered as per required scenarios (created_at, time less than, greater than etc)."
              }
            ]
          },
          {
            "type": "object",
            "properties": {
              "customer_id": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "The identifier for customer",
                "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44"
              },
              "starting_after": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "A cursor for use in pagination, fetch the next list after some object",
                "example": "payout_fafa124123"
              },
              "ending_before": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "A cursor for use in pagination, fetch the previous list before some object",
                "example": "payout_fafa124123"
              },
              "limit": {
                "type": "integer",
                "format": "int32",
                "description": "limit on the number of objects to return",
                "default": 10,
                "maximum": 100,
                "minimum": 0
              },
              "created": {
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time",
                "description": "The time at which payout is created",
                "example": "2022-09-10T10:11:12Z"
              }
            }
          }
        ]
      },
      "PayoutListFilterConstraints": {
        "allOf": [
          {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/TimeRange",
                "description": "The time range for which objects are needed. TimeRange has two fields start_time and end_time from which objects can be filtered as per required scenarios (created_at, time less than, greater than etc)."
              }
            ]
          },
          {
            "type": "object",
            "properties": {
              "payout_id": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "The identifier for payout",
                "example": "187282ab-40ef-47a9-9206-5099ba31e432",
                "maxLength": 30,
                "minLength": 30
              },
              "merchant_order_reference_id": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "The merchant order reference ID for payout",
                "example": "merchant_order_ref_123",
                "maxLength": 255
              },
              "profile_id": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "The identifier for business profile"
              },
              "customer_id": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "The identifier for customer",
                "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44"
              },
              "limit": {
                "type": "integer",
                "format": "int32",
                "description": "The limit on the number of objects. The default limit is 10 and max limit is 20",
                "minimum": 0
              },
              "offset": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "int32",
                "description": "The starting point within a list of objects",
                "minimum": 0
              },
              "connector": {
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "$ref": "#/components/schemas/PayoutConnectors"
                },
                "description": "The list of connectors to filter payouts list",
                "example": [
                  "wise",
                  "adyen"
                ]
              },
              "currency": {
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "$ref": "#/components/schemas/Currency"
                },
                "description": "The list of currencies to filter payouts list",
                "example": "USD"
              },
              "status": {
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "$ref": "#/components/schemas/PayoutStatus"
                },
                "description": "The list of payout status to filter payouts list",
                "example": [
                  "pending",
                  "failed"
                ]
              },
              "payout_method": {
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "$ref": "#/components/schemas/PayoutType"
                },
                "description": "The list of payout methods to filter payouts list",
                "example": [
                  "bank",
                  "card"
                ]
              },
              "entity_type": {
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/components/schemas/PayoutEntityType",
                    "description": "Type of recipient"
                  }
                ]
              }
            }
          }
        ]
      },
      "PayoutListResponse": {
        "type": "object",
        "required": [
          "size",
          "data"
        ],
        "properties": {
          "size": {
            "type": "integer",
            "description": "The number of payouts included in the list",
            "minimum": 0
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayoutCreateResponse"
            },
            "description": "The list of payouts response objects"
          },
          "total_count": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "description": "The total number of available payouts for given constraints"
          }
        }
      },
      "PayoutMethodData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "card"
            ],
            "properties": {
              "card": {
                "$ref": "#/components/schemas/CardPayout"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "bank"
            ],
            "properties": {
              "bank": {
                "$ref": "#/components/schemas/Bank"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "wallet"
            ],
            "properties": {
              "wallet": {
                "$ref": "#/components/schemas/Wallet"
              }
            }
          }
        ],
        "description": "The payout method information required for carrying out a payout"
      },
      "PayoutMethodDataResponse": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "card"
            ],
            "properties": {
              "card": {
                "$ref": "#/components/schemas/CardAdditionalData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "bank"
            ],
            "properties": {
              "bank": {
                "$ref": "#/components/schemas/BankAdditionalData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "wallet"
            ],
            "properties": {
              "wallet": {
                "$ref": "#/components/schemas/WalletAdditionalData"
              }
            }
          }
        ],
        "description": "The payout method information for response"
      },
      "PayoutRequest": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "PayoutActionRequest"
            ],
            "properties": {
              "PayoutActionRequest": {
                "$ref": "#/components/schemas/PayoutActionRequest"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "PayoutCreateRequest"
            ],
            "properties": {
              "PayoutCreateRequest": {
                "$ref": "#/components/schemas/PayoutCreateRequest"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "PayoutRetrieveRequest"
            ],
            "properties": {
              "PayoutRetrieveRequest": {
                "$ref": "#/components/schemas/PayoutRetrieveRequest"
              }
            }
          }
        ]
      },
      "PayoutRetrieveBody": {
        "type": "object",
        "properties": {
          "force_sync": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "merchant_id": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "PayoutRetrieveRequest": {
        "type": "object",
        "required": [
          "payout_id"
        ],
        "properties": {
          "payout_id": {
            "type": "string",
            "description": "Unique identifier for the payout. This ensures idempotency for multiple payouts\nthat have been done by a single merchant. This field is auto generated and is returned in the API response.",
            "example": "187282ab-40ef-47a9-9206-5099ba31e432",
            "maxLength": 30,
            "minLength": 30
          },
          "force_sync": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "`force_sync` with the connector to get payout details\n(defaults to false)",
            "default": false,
            "example": true
          },
          "merchant_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "The identifier for the Merchant Account."
          }
        }
      },
      "PayoutSendPriority": {
        "type": "string",
        "description": "The send method which will be required for processing payouts, check options for better understanding.",
        "enum": [
          "instant",
          "fast",
          "regular",
          "wire",
          "cross_border",
          "internal"
        ]
      },
      "PayoutStatus": {
        "type": "string",
        "enum": [
          "success",
          "failed",
          "cancelled",
          "initiated",
          "expired",
          "reversed",
          "pending",
          "ineligible",
          "requires_creation",
          "requires_confirmation",
          "requires_payout_method_data",
          "requires_fulfillment",
          "requires_vendor_account_creation"
        ]
      },
      "PayoutType": {
        "type": "string",
        "description": "The payout_type of the payout request is a mandatory field for confirming the payouts. It should be specified in the Create request. If not provided, it must be updated in the Payout Update request before it can be confirmed.",
        "enum": [
          "card",
          "bank",
          "wallet"
        ]
      },
      "Paypal": {
        "type": "object",
        "required": [
          "email",
          "telephone_number",
          "paypal_id"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "Email linked with paypal account",
            "example": "john.doe@example.com"
          },
          "telephone_number": {
            "type": "string",
            "description": "mobile number linked to paypal account",
            "example": "16608213349"
          },
          "paypal_id": {
            "type": "string",
            "description": "id of the paypal account",
            "example": "G83KXTJ5EHCQ2"
          }
        }
      },
      "PaypalAdditionalData": {
        "type": "object",
        "description": "Masked payout method details for paypal wallet payout method",
        "properties": {
          "email": {
            "type": [
              "string",
              "null"
            ],
            "description": "Email linked with paypal account",
            "example": "john.doe@example.com"
          },
          "telephone_number": {
            "type": [
              "string",
              "null"
            ],
            "description": "mobile number linked to paypal account",
            "example": "******* 3349"
          },
          "paypal_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "id of the paypal account",
            "example": "G83K ***** HCQ2"
          }
        }
      },
      "PaypalRedirection": {
        "type": "object",
        "properties": {
          "email": {
            "type": [
              "string",
              "null"
            ],
            "description": "paypal's email address",
            "example": "johntest@test.com",
            "maxLength": 255
          }
        }
      },
      "PaypalSessionTokenResponse": {
        "type": "object",
        "required": [
          "connector",
          "session_token",
          "sdk_next_action"
        ],
        "properties": {
          "connector": {
            "type": "string",
            "description": "Name of the connector"
          },
          "session_token": {
            "type": "string",
            "description": "The session token for PayPal"
          },
          "sdk_next_action": {
            "$ref": "#/components/schemas/SdkNextAction",
            "description": "The next action for the sdk (ex: calling confirm or sync call)"
          }
        }
      },
      "PayseraData": {
        "type": "object"
      },
      "PazeSessionTokenResponse": {
        "type": "object",
        "required": [
          "client_id",
          "client_name",
          "client_profile_id",
          "transaction_currency_code",
          "transaction_amount"
        ],
        "properties": {
          "client_id": {
            "type": "string",
            "description": "Paze Client ID"
          },
          "client_name": {
            "type": "string",
            "description": "Client Name to be displayed on the Paze screen"
          },
          "client_profile_id": {
            "type": "string",
            "description": "Paze Client Profile ID"
          },
          "transaction_currency_code": {
            "$ref": "#/components/schemas/Currency",
            "description": "The transaction currency code"
          },
          "transaction_amount": {
            "type": "string",
            "description": "The transaction amount",
            "example": "38.02"
          },
          "email_address": {
            "type": [
              "string",
              "null"
            ],
            "description": "Email Address",
            "example": "johntest@test.com",
            "maxLength": 255
          }
        }
      },
      "PazeWalletData": {
        "type": "object",
        "required": [
          "complete_response"
        ],
        "properties": {
          "complete_response": {
            "type": "string"
          }
        }
      },
      "PhoneDetails": {
        "type": "object",
        "properties": {
          "number": {
            "type": [
              "string",
              "null"
            ],
            "description": "The contact number",
            "example": "9123456789"
          },
          "country_code": {
            "type": [
              "string",
              "null"
            ],
            "description": "The country code attached to the number",
            "example": "+1"
          }
        }
      },
      "PixBankTransfer": {
        "type": "object",
        "required": [
          "bank_account_number",
          "pix_key"
        ],
        "properties": {
          "bank_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Bank name",
            "example": "Deutsche Bank"
          },
          "bank_branch": {
            "type": [
              "string",
              "null"
            ],
            "description": "Bank branch",
            "example": "3707"
          },
          "bank_account_number": {
            "type": "string",
            "description": "Bank account number is an unique identifier assigned by a bank to a customer.",
            "example": "000123456"
          },
          "pix_key": {
            "type": "string",
            "description": "Unique key for pix customer",
            "example": "000123456"
          },
          "tax_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "Individual taxpayer identification number",
            "example": "000123456"
          }
        }
      },
      "PixBankTransferAdditionalData": {
        "type": "object",
        "properties": {
          "pix_key": {
            "type": [
              "string",
              "null"
            ],
            "description": "Partially masked unique key for pix transfer",
            "example": "a1f4102e ****** 6fa48899c1d1"
          },
          "cpf": {
            "type": [
              "string",
              "null"
            ],
            "description": "Partially masked CPF - CPF is a Brazilian tax identification number",
            "example": "**** 124689"
          },
          "cnpj": {
            "type": [
              "string",
              "null"
            ],
            "description": "Partially masked CNPJ - CNPJ is a Brazilian company tax identification number",
            "example": "**** 417312"
          },
          "source_bank_account_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "Partially masked source bank account number",
            "example": "********-****-4073-****-9fa964d08bc5"
          },
          "destination_bank_account_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "Partially masked destination bank account number",
            "example": "********-****-460b-****-f23b4e71c97b"
          }
        }
      },
      "PollConfig": {
        "type": "object",
        "required": [
          "delay_in_secs",
          "frequency"
        ],
        "properties": {
          "delay_in_secs": {
            "type": "integer",
            "format": "int32",
            "description": "Interval of the poll",
            "minimum": 0
          },
          "frequency": {
            "type": "integer",
            "format": "int32",
            "description": "Frequency of the poll",
            "minimum": 0
          }
        }
      },
      "PollConfigResponse": {
        "type": "object",
        "required": [
          "poll_id",
          "delay_in_secs",
          "frequency"
        ],
        "properties": {
          "poll_id": {
            "type": "string",
            "description": "Poll Id"
          },
          "delay_in_secs": {
            "type": "integer",
            "format": "int32",
            "description": "Interval of the poll"
          },
          "frequency": {
            "type": "integer",
            "format": "int32",
            "description": "Frequency of the poll"
          }
        }
      },
      "PollResponse": {
        "type": "object",
        "required": [
          "poll_id",
          "status"
        ],
        "properties": {
          "poll_id": {
            "type": "string",
            "description": "The poll id"
          },
          "status": {
            "$ref": "#/components/schemas/PollStatus",
            "description": "Status of the poll"
          }
        }
      },
      "PollStatus": {
        "type": "string",
        "enum": [
          "pending",
          "completed",
          "not_found"
        ]
      },
      "PresenceOfCustomerDuringPayment": {
        "type": "string",
        "description": "Set to `present` to indicate that the customer is in your checkout flow during this payment, and therefore is able to authenticate. This parameter should be `absent` when merchant's doing merchant initiated payments and customer is not present while doing the payment.",
        "enum": [
          "present",
          "absent"
        ]
      },
      "PrimaryBusinessDetails": {
        "type": "object",
        "required": [
          "country",
          "business"
        ],
        "properties": {
          "country": {
            "$ref": "#/components/schemas/CountryAlpha2"
          },
          "business": {
            "type": "string",
            "example": "food"
          }
        },
        "additionalProperties": false
      },
      "ProcessTrackerStatus": {
        "type": "string",
        "enum": [
          "processing",
          "new",
          "pending",
          "process_started",
          "finish",
          "review"
        ]
      },
      "ProcessorPaymentToken": {
        "type": "object",
        "description": "Processor payment token for MIT payments where payment_method_data is not available",
        "required": [
          "processor_payment_token"
        ],
        "properties": {
          "processor_payment_token": {
            "type": "string"
          },
          "merchant_connector_id": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "ProductType": {
        "type": "string",
        "enum": [
          "physical",
          "digital",
          "travel",
          "ride",
          "event",
          "accommodation"
        ]
      },
      "ProfileCreate": {
        "type": "object",
        "required": [
          "profile_name"
        ],
        "properties": {
          "profile_name": {
            "type": "string",
            "description": "The name of profile",
            "maxLength": 64
          },
          "return_url": {
            "type": [
              "string",
              "null"
            ],
            "description": "The URL to redirect after the completion of the operation",
            "example": "https://www.example.com/success",
            "maxLength": 255
          },
          "enable_payment_response_hash": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "A boolean value to indicate if payment response hash needs to be enabled",
            "default": true,
            "example": true
          },
          "payment_response_hash_key": {
            "type": [
              "string",
              "null"
            ],
            "description": "Refers to the hash key used for calculating the signature for webhooks and redirect response. If the value is not provided, a value is automatically generated."
          },
          "redirect_to_merchant_with_http_post": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "A boolean value to indicate if redirect to merchant with http post needs to be enabled",
            "default": false,
            "example": true
          },
          "webhook_details": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/WebhookDetails",
                "description": "Webhook related details"
              }
            ]
          },
          "metadata": {
            "type": [
              "object",
              "null"
            ],
            "description": "Metadata is useful for storing additional, unstructured information on an object."
          },
          "order_fulfillment_time": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "description": "Will be used to determine the time till which your payment will be active once the payment session starts",
            "example": 900,
            "minimum": 0
          },
          "order_fulfillment_time_origin": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/OrderFulfillmentTimeOrigin",
                "description": "Whether the order fulfillment time is calculated from the origin or the time of creating the payment, or confirming the payment"
              }
            ]
          },
          "applepay_verified_domains": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            },
            "description": "Verified Apple Pay domains for a particular profile"
          },
          "session_expiry": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "description": "Client Secret Default expiry for all payments created under this profile",
            "example": 900,
            "minimum": 0
          },
          "payment_link_config": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/BusinessPaymentLinkConfig",
                "description": "Default Payment Link config for all payment links created under this profile"
              }
            ]
          },
          "authentication_connector_details": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/AuthenticationConnectorDetails",
                "description": "External 3DS authentication details"
              }
            ]
          },
          "use_billing_as_payment_method_billing": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Whether to use the billing details passed when creating the intent as payment method billing"
          },
          "collect_shipping_details_from_wallet_connector_if_required": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "A boolean value to indicate if customer shipping details needs to be collected from wallet\nconnector only if it is required field for connector (Eg. Apple Pay, Google Pay etc)",
            "default": false,
            "example": false
          },
          "collect_billing_details_from_wallet_connector_if_required": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "A boolean value to indicate if customer billing details needs to be collected from wallet\nconnector only if it is required field for connector (Eg. Apple Pay, Google Pay etc)",
            "default": false,
            "example": false
          },
          "always_collect_shipping_details_from_wallet_connector": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "A boolean value to indicate if customer shipping details needs to be collected from wallet\nconnector irrespective of connector required fields (Eg. Apple pay, Google pay etc)",
            "default": false,
            "example": false
          },
          "always_collect_billing_details_from_wallet_connector": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "A boolean value to indicate if customer billing details needs to be collected from wallet\nconnector irrespective of connector required fields (Eg. Apple pay, Google pay etc)",
            "default": false,
            "example": false
          },
          "is_connector_agnostic_mit_enabled": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Indicates if the MIT (merchant initiated transaction) payments can be made connector\nagnostic, i.e., MITs may be processed through different connector than CIT (customer\ninitiated transaction) based on the routing rules.\nIf set to `false`, MIT will go through the same connector as the CIT."
          },
          "payout_link_config": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/BusinessPayoutLinkConfig",
                "description": "Default payout link config"
              }
            ]
          },
          "outgoing_webhook_custom_http_headers": {
            "type": [
              "object",
              "null"
            ],
            "description": "These key-value pairs are sent as additional custom headers in the outgoing webhook request. It is recommended not to use more than four key-value pairs."
          },
          "tax_connector_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "Merchant Connector id to be stored for tax_calculator connector"
          },
          "is_tax_connector_enabled": {
            "type": "boolean",
            "description": "Indicates if tax_calculator connector is enabled or not.\nIf set to `true` tax_connector_id will be checked."
          },
          "is_network_tokenization_enabled": {
            "type": "boolean",
            "description": "Indicates if network tokenization is enabled or not."
          },
          "is_click_to_pay_enabled": {
            "type": "boolean",
            "description": "Indicates if click to pay is enabled or not.",
            "default": false,
            "example": false
          },
          "authentication_product_ids": {
            "type": [
              "object",
              "null"
            ],
            "description": "Product authentication ids"
          },
          "card_testing_guard_config": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CardTestingGuardConfig",
                "description": "Card Testing Guard Configs"
              }
            ]
          },
          "is_clear_pan_retries_enabled": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Indicates if clear pan retries is enabled or not."
          },
          "is_debit_routing_enabled": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Indicates if debit routing is enabled or not"
          },
          "merchant_business_country": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CountryAlpha2"
              }
            ]
          },
          "is_iframe_redirection_enabled": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Indicates if the redirection has to open in the iframe",
            "example": false
          },
          "is_external_vault_enabled": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Indicates if external vault is enabled or not."
          },
          "external_vault_connector_details": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ExternalVaultConnectorDetails",
                "description": "External Vault Connector Details"
              }
            ]
          },
          "merchant_category_code": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MerchantCategoryCode",
                "description": "Four-digit code assigned based on business type to determine processing fees and risk level"
              }
            ]
          },
          "merchant_country_code": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MerchantCountryCode",
                "description": "Merchant country code.\nThis is a 3-digit ISO 3166-1 numeric country code that represents the country in which the merchant is registered or operates.\nMerchants typically receive this value based on their business registration information or during onboarding via payment processors or acquiring banks.\nIt is used in payment processing, fraud detection, and regulatory compliance to determine regional rules and routing behavior."
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "ProfileDefaultRoutingConfig": {
        "type": "object",
        "required": [
          "profile_id",
          "connectors"
        ],
        "properties": {
          "profile_id": {
            "type": "string"
          },
          "connectors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoutableConnectorChoice"
            }
          }
        }
      },
      "ProfileResponse": {
        "type": "object",
        "required": [
          "merchant_id",
          "id",
          "profile_name",
          "enable_payment_response_hash",
          "redirect_to_merchant_with_http_post",
          "is_tax_connector_enabled",
          "is_network_tokenization_enabled",
          "is_click_to_pay_enabled",
          "is_clear_pan_retries_enabled"
        ],
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The identifier for Merchant Account",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 64
          },
          "id": {
            "type": "string",
            "description": "The identifier for profile. This must be used for creating merchant accounts, payments and payouts",
            "example": "pro_abcdefghijklmnopqrstuvwxyz",
            "maxLength": 64
          },
          "profile_name": {
            "type": "string",
            "description": "Name of the profile",
            "maxLength": 64
          },
          "return_url": {
            "type": [
              "string",
              "null"
            ],
            "description": "The URL to redirect after the completion of the operation",
            "example": "https://www.example.com/success",
            "maxLength": 255
          },
          "enable_payment_response_hash": {
            "type": "boolean",
            "description": "A boolean value to indicate if payment response hash needs to be enabled",
            "default": true,
            "example": true
          },
          "payment_response_hash_key": {
            "type": [
              "string",
              "null"
            ],
            "description": "Refers to the hash key used for calculating the signature for webhooks and redirect response. If the value is not provided, a value is automatically generated."
          },
          "redirect_to_merchant_with_http_post": {
            "type": "boolean",
            "description": "A boolean value to indicate if redirect to merchant with http post needs to be enabled",
            "default": false,
            "example": true
          },
          "webhook_details": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/WebhookDetails",
                "description": "Webhook related details"
              }
            ]
          },
          "metadata": {
            "type": [
              "object",
              "null"
            ],
            "description": "Metadata is useful for storing additional, unstructured information on an object."
          },
          "applepay_verified_domains": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            },
            "description": "Verified Apple Pay domains for a particular profile"
          },
          "session_expiry": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "description": "Client Secret Default expiry for all payments created under this profile",
            "example": 900
          },
          "payment_link_config": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/BusinessPaymentLinkConfig",
                "description": "Default Payment Link config for all payment links created under this profile"
              }
            ]
          },
          "authentication_connector_details": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/AuthenticationConnectorDetails",
                "description": "External 3DS authentication details"
              }
            ]
          },
          "use_billing_as_payment_method_billing": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "extended_card_info_config": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ExtendedCardInfoConfig",
                "description": "Merchant's config to support extended card info feature"
              }
            ]
          },
          "collect_shipping_details_from_wallet_connector_if_required": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "A boolean value to indicate if customer shipping details needs to be collected from wallet\nconnector only if it is required field for connector (Eg. Apple Pay, Google Pay etc)",
            "default": false,
            "example": false
          },
          "collect_billing_details_from_wallet_connector_if_required": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "A boolean value to indicate if customer billing details needs to be collected from wallet\nconnector only if it is required field for connector (Eg. Apple Pay, Google Pay etc)",
            "default": false,
            "example": false
          },
          "always_collect_shipping_details_from_wallet_connector": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "A boolean value to indicate if customer shipping details needs to be collected from wallet\nconnector irrespective of connector required fields (Eg. Apple pay, Google pay etc)",
            "default": false,
            "example": false
          },
          "always_collect_billing_details_from_wallet_connector": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "A boolean value to indicate if customer billing details needs to be collected from wallet\nconnector irrespective of connector required fields (Eg. Apple pay, Google pay etc)",
            "default": false,
            "example": false
          },
          "is_connector_agnostic_mit_enabled": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Indicates if the MIT (merchant initiated transaction) payments can be made connector\nagnostic, i.e., MITs may be processed through different connector than CIT (customer\ninitiated transaction) based on the routing rules.\nIf set to `false`, MIT will go through the same connector as the CIT."
          },
          "payout_link_config": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/BusinessPayoutLinkConfig",
                "description": "Default payout link config"
              }
            ]
          },
          "outgoing_webhook_custom_http_headers": {
            "type": [
              "object",
              "null"
            ],
            "description": "These key-value pairs are sent as additional custom headers in the outgoing webhook request."
          },
          "order_fulfillment_time": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "description": "Will be used to determine the time till which your payment will be active once the payment session starts",
            "example": 900,
            "minimum": 0
          },
          "order_fulfillment_time_origin": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/OrderFulfillmentTimeOrigin",
                "description": "Whether the order fulfillment time is calculated from the origin or the time of creating the payment, or confirming the payment"
              }
            ]
          },
          "tax_connector_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "Merchant Connector id to be stored for tax_calculator connector"
          },
          "is_tax_connector_enabled": {
            "type": "boolean",
            "description": "Indicates if tax_calculator connector is enabled or not.\nIf set to `true` tax_connector_id will be checked."
          },
          "is_network_tokenization_enabled": {
            "type": "boolean",
            "description": "Indicates if network tokenization is enabled or not.",
            "default": false,
            "example": false
          },
          "should_collect_cvv_during_payment": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Indicates if CVV should be collected during payment or not."
          },
          "is_click_to_pay_enabled": {
            "type": "boolean",
            "description": "Indicates if click to pay is enabled or not.",
            "default": false,
            "example": false
          },
          "authentication_product_ids": {
            "type": [
              "object",
              "null"
            ],
            "description": "Product authentication ids"
          },
          "card_testing_guard_config": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CardTestingGuardConfig",
                "description": "Card Testing Guard Configs"
              }
            ]
          },
          "is_clear_pan_retries_enabled": {
            "type": "boolean",
            "description": "Indicates if clear pan retries is enabled or not."
          },
          "is_debit_routing_enabled": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Indicates if debit routing is enabled or not"
          },
          "merchant_business_country": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CountryAlpha2"
              }
            ]
          },
          "is_iframe_redirection_enabled": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Indicates if the redirection has to open in the iframe",
            "example": false
          },
          "is_external_vault_enabled": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Indicates if external vault is enabled or not."
          },
          "external_vault_connector_details": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ExternalVaultConnectorDetails",
                "description": "External Vault Connector Details"
              }
            ]
          },
          "merchant_category_code": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MerchantCategoryCode",
                "description": "Four-digit code assigned based on business type to determine processing fees and risk level"
              }
            ]
          },
          "merchant_country_code": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MerchantCountryCode",
                "description": "Merchant country code.\nThis is a 3-digit ISO 3166-1 numeric country code that represents the country in which the merchant is registered or operates.\nMerchants typically receive this value based on their business registration information or during onboarding via payment processors or acquiring banks.\nIt is used in payment processing, fraud detection, and regulatory compliance to determine regional rules and routing behavior."
              }
            ]
          }
        }
      },
      "ProgramThreeDsDecisionRule": {
        "type": "object",
        "required": [
          "defaultSelection",
          "rules",
          "metadata"
        ],
        "properties": {
          "defaultSelection": {
            "$ref": "#/components/schemas/ThreeDSDecisionRule"
          },
          "rules": {
            "$ref": "#/components/schemas/RuleThreeDsDecisionRule"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {},
            "propertyNames": {
              "type": "string"
            }
          }
        }
      },
      "Program_ConnectorSelection": {
        "type": "object",
        "description": "The program, having a default connector selection and\na bunch of rules. Also can hold arbitrary metadata.",
        "required": [
          "defaultSelection",
          "rules",
          "metadata"
        ],
        "properties": {
          "defaultSelection": {
            "oneOf": [
              {
                "type": "object",
                "required": [
                  "data",
                  "type"
                ],
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/RoutableConnectorChoice"
                    }
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "priority"
                    ]
                  }
                }
              },
              {
                "type": "object",
                "required": [
                  "data",
                  "type"
                ],
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ConnectorVolumeSplit"
                    }
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "volume_split"
                    ]
                  }
                }
              }
            ]
          },
          "rules": {
            "$ref": "#/components/schemas/Rule_ConnectorSelection"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {},
            "propertyNames": {
              "type": "string"
            }
          }
        }
      },
      "Program_ThreeDSDecisionRule": {
        "type": "object",
        "description": "The program, having a default connector selection and\na bunch of rules. Also can hold arbitrary metadata.",
        "required": [
          "defaultSelection",
          "rules",
          "metadata"
        ],
        "properties": {
          "defaultSelection": {
            "type": "object",
            "description": "Struct representing the output configuration for the 3DS Decision Rule Engine.",
            "required": [
              "decision"
            ],
            "properties": {
              "decision": {
                "$ref": "#/components/schemas/ThreeDSDecision",
                "description": "The decided 3DS action based on the rules"
              }
            }
          },
          "rules": {
            "$ref": "#/components/schemas/Rule_ConnectorSelection"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {},
            "propertyNames": {
              "type": "string"
            }
          }
        }
      },
      "ProxyRequest": {
        "type": "object",
        "required": [
          "request_body",
          "destination_url",
          "headers",
          "method",
          "token",
          "token_type"
        ],
        "properties": {
          "request_body": {
            "description": "The request body that needs to be forwarded"
          },
          "destination_url": {
            "type": "string",
            "description": "The destination URL where the request needs to be forwarded",
            "example": "https://api.example.com/endpoint"
          },
          "headers": {
            "type": "object",
            "description": "The headers that need to be forwarded"
          },
          "method": {
            "$ref": "#/components/schemas/Method",
            "description": "The method that needs to be used for the request"
          },
          "token": {
            "type": "string",
            "description": "The vault token that is used to fetch sensitive data from the vault"
          },
          "token_type": {
            "$ref": "#/components/schemas/TokenType",
            "description": "The type of token that is used to fetch sensitive data from the vault"
          }
        }
      },
      "ProxyResponse": {
        "type": "object",
        "required": [
          "response",
          "status_code",
          "response_headers"
        ],
        "properties": {
          "response": {
            "description": "The response received from the destination"
          },
          "status_code": {
            "type": "integer",
            "format": "int32",
            "description": "The status code of the response",
            "minimum": 0
          },
          "response_headers": {
            "type": "object",
            "description": "The headers of the response"
          }
        }
      },
      "PspTokenization": {
        "type": "object",
        "description": "The Payment Service Provider Configuration for payment methods that are created using the payment method session",
        "required": [
          "tokenization_type",
          "connector_id"
        ],
        "properties": {
          "tokenization_type": {
            "$ref": "#/components/schemas/TokenizationType",
            "description": "The tokenization type to be applied for the payment method"
          },
          "connector_id": {
            "type": "string",
            "description": "The merchant connector id to be used for tokenization"
          }
        }
      },
      "RealTimePaymentData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "fps"
            ],
            "properties": {
              "fps": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "duit_now"
            ],
            "properties": {
              "duit_now": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "prompt_pay"
            ],
            "properties": {
              "prompt_pay": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "viet_qr"
            ],
            "properties": {
              "viet_qr": {
                "type": "object"
              }
            }
          }
        ]
      },
      "RealTimePaymentDataResponse": {
        "allOf": [
          {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/RealTimePaymentData"
              }
            ]
          }
        ]
      },
      "ReceiverDetails": {
        "type": "object",
        "required": [
          "amount_received"
        ],
        "properties": {
          "amount_received": {
            "type": "integer",
            "format": "int64",
            "description": "The amount received by receiver"
          },
          "amount_charged": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "description": "The amount charged by ACH"
          },
          "amount_remaining": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "description": "The amount remaining to be sent via ACH"
          }
        }
      },
      "ReconStatus": {
        "type": "string",
        "enum": [
          "not_requested",
          "requested",
          "active",
          "disabled"
        ]
      },
      "RecurringDetails": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "data",
              "type"
            ],
            "properties": {
              "data": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "mandate_id"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "data",
              "type"
            ],
            "properties": {
              "data": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "payment_method_id"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "data",
              "type"
            ],
            "properties": {
              "data": {
                "$ref": "#/components/schemas/ProcessorPaymentToken"
              },
              "type": {
                "type": "string",
                "enum": [
                  "processor_payment_token"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "Network transaction ID and Card Details for MIT payments when payment_method_data\nis not stored in the application",
            "required": [
              "data",
              "type"
            ],
            "properties": {
              "data": {
                "$ref": "#/components/schemas/NetworkTransactionIdAndCardDetails",
                "description": "Network transaction ID and Card Details for MIT payments when payment_method_data\nis not stored in the application"
              },
              "type": {
                "type": "string",
                "enum": [
                  "network_transaction_id_and_card_details"
                ]
              }
            }
          }
        ],
        "description": "Details required for recurring payment"
      },
      "RecurringPaymentIntervalUnit": {
        "type": "string",
        "enum": [
          "year",
          "month",
          "day",
          "hour",
          "minute"
        ]
      },
      "RedirectResponse": {
        "type": "object",
        "properties": {
          "param": {
            "type": [
              "string",
              "null"
            ]
          },
          "json_payload": {
            "type": [
              "object",
              "null"
            ]
          }
        }
      },
      "RefundErrorDetails": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "RefundListRequest": {
        "allOf": [
          {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/TimeRange",
                "description": "The time range for which objects are needed. TimeRange has two fields start_time and end_time from which objects can be filtered as per required scenarios (created_at, time less than, greater than etc)"
              }
            ]
          },
          {
            "type": "object",
            "required": [
              "refund_id"
            ],
            "properties": {
              "payment_id": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "The identifier for the payment"
              },
              "refund_id": {
                "type": "string",
                "description": "The identifier for the refund"
              },
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "int64",
                "description": "Limit on the number of objects to return"
              },
              "offset": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "int64",
                "description": "The starting point within a list of objects"
              },
              "amount_filter": {
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/components/schemas/AmountFilter",
                    "description": "The amount to filter reufnds list. Amount takes two option fields start_amount and end_amount from which objects can be filtered as per required scenarios (less_than, greater_than, equal_to and range)"
                  }
                ]
              },
              "connector": {
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "type": "string"
                },
                "description": "The list of connectors to filter refunds list"
              },
              "connector_id_list": {
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "type": "string"
                },
                "description": "The list of merchant connector ids to filter the refunds list for selected label"
              },
              "currency": {
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "$ref": "#/components/schemas/Currency"
                },
                "description": "The list of currencies to filter refunds list"
              },
              "refund_status": {
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "$ref": "#/components/schemas/RefundStatus"
                },
                "description": "The list of refund statuses to filter refunds list"
              }
            }
          }
        ]
      },
      "RefundListResponse": {
        "type": "object",
        "required": [
          "count",
          "total_count",
          "data"
        ],
        "properties": {
          "count": {
            "type": "integer",
            "description": "The number of refunds included in the list",
            "minimum": 0
          },
          "total_count": {
            "type": "integer",
            "format": "int64",
            "description": "The total number of refunds in the list"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RefundResponse"
            },
            "description": "The List of refund response object"
          }
        }
      },
      "RefundMetadataUpdateRequest": {
        "type": "object",
        "properties": {
          "reason": {
            "type": [
              "string",
              "null"
            ],
            "description": "An arbitrary string attached to the object. Often useful for displaying to users and your customer support executive",
            "example": "Customer returned the product",
            "maxLength": 255
          },
          "metadata": {
            "type": [
              "object",
              "null"
            ],
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object."
          }
        },
        "additionalProperties": false
      },
      "RefundResponse": {
        "type": "object",
        "required": [
          "id",
          "payment_id",
          "amount",
          "currency",
          "status",
          "created_at",
          "updated_at",
          "connector",
          "profile_id",
          "merchant_connector_id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Global Refund Id for the refund"
          },
          "payment_id": {
            "type": "string",
            "description": "The payment id against which refund is initiated"
          },
          "merchant_reference_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "Unique Identifier for the Refund. This is to ensure idempotency for multiple partial refunds initiated against the same payment.",
            "example": "ref_mbabizu24mvu3mela5njyhpit4",
            "maxLength": 30,
            "minLength": 30
          },
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "The refund amount",
            "example": 6540,
            "minimum": 100
          },
          "currency": {
            "$ref": "#/components/schemas/Currency",
            "description": "The three-letter ISO currency code"
          },
          "status": {
            "$ref": "#/components/schemas/RefundStatus",
            "description": "The status for refund"
          },
          "reason": {
            "type": [
              "string",
              "null"
            ],
            "description": "An arbitrary string attached to the object"
          },
          "metadata": {
            "type": [
              "object",
              "null"
            ],
            "description": "Metadata is useful for storing additional, unstructured information on an object"
          },
          "error_details": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/RefundErrorDetails",
                "description": "The error details for the refund"
              }
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp at which refund is created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp at which refund is updated"
          },
          "connector": {
            "$ref": "#/components/schemas/Connector",
            "description": "The connector used for the refund and the corresponding payment"
          },
          "profile_id": {
            "type": "string",
            "description": "The id of business profile for this refund"
          },
          "merchant_connector_id": {
            "type": "string",
            "description": "The merchant_connector_id of the processor through which this payment went through"
          },
          "connector_refund_reference_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "The reference id of the connector for the refund"
          }
        }
      },
      "RefundStatus": {
        "type": "string",
        "description": "The status for refunds",
        "enum": [
          "succeeded",
          "failed",
          "pending",
          "review"
        ]
      },
      "RefundType": {
        "type": "string",
        "description": "To indicate whether the refund needs to be instant or scheduled",
        "enum": [
          "scheduled",
          "instant"
        ]
      },
      "RefundsCreateRequest": {
        "type": "object",
        "required": [
          "payment_id",
          "merchant_reference_id"
        ],
        "properties": {
          "payment_id": {
            "type": "string",
            "description": "The payment id against which refund is initiated",
            "example": "pay_mbabizu24mvu3mela5njyhpit4",
            "maxLength": 30,
            "minLength": 30
          },
          "merchant_reference_id": {
            "type": "string",
            "description": "Unique Identifier for the Refund given by the Merchant.",
            "example": "ref_mbabizu24mvu3mela5njyhpit4",
            "maxLength": 64,
            "minLength": 1
          },
          "merchant_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "The identifier for the Merchant Account",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "amount": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "description": "Total amount for which the refund is to be initiated. Amount for the payment in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc., If not provided, this will default to the amount_captured of the payment",
            "example": 6540,
            "minimum": 100
          },
          "reason": {
            "type": [
              "string",
              "null"
            ],
            "description": "Reason for the refund. Often useful for displaying to users and your customer support executive.",
            "example": "Customer returned the product",
            "maxLength": 255
          },
          "refund_type": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/RefundType",
                "description": "To indicate whether to refund needs to be instant or scheduled. Default value is instant"
              }
            ],
            "default": "Instant"
          },
          "metadata": {
            "type": [
              "object",
              "null"
            ],
            "description": "Metadata is useful for storing additional, unstructured information on an object."
          },
          "merchant_connector_details": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MerchantConnectorAuthDetails",
                "description": "Merchant connector details used to make payments."
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "RequestIncrementalAuthorization": {
        "type": "string",
        "enum": [
          "true",
          "false",
          "default"
        ]
      },
      "RequestPaymentMethodTypes": {
        "type": "object",
        "required": [
          "payment_method_type"
        ],
        "properties": {
          "payment_method_type": {
            "$ref": "#/components/schemas/PaymentMethodType"
          },
          "payment_experience": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PaymentExperience"
              }
            ]
          },
          "card_networks": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/CardNetwork"
            }
          },
          "accepted_currencies": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/AcceptedCurrencies",
                "description": "List of currencies accepted or has the processing capabilities of the processor"
              }
            ]
          },
          "accepted_countries": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/AcceptedCountries",
                "description": "List of Countries accepted or has the processing capabilities of the processor"
              }
            ]
          },
          "minimum_amount": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MinorUnit",
                "description": "Minimum amount supported by the processor. To be represented in the lowest denomination of the target currency (For example, for USD it should be in cents)"
              }
            ]
          },
          "maximum_amount": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MinorUnit",
                "description": "Maximum amount supported by the processor. To be represented in the lowest denomination of\nthe target currency (For example, for USD it should be in cents)"
              }
            ]
          },
          "recurring_enabled": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Indicates whether the payment method supports recurring payments. Optional.",
            "example": false
          },
          "installment_payment_enabled": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Indicates whether the payment method is eligible for installment payments (e.g., EMI, BNPL). Optional.",
            "example": true
          }
        }
      },
      "RequestSurchargeDetails": {
        "type": "object",
        "description": "Details of surcharge applied on this payment, if applicable",
        "required": [
          "surcharge_amount"
        ],
        "properties": {
          "surcharge_amount": {
            "$ref": "#/components/schemas/MinorUnit"
          },
          "tax_amount": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MinorUnit"
              }
            ]
          }
        }
      },
      "RequiredFieldInfo": {
        "type": "object",
        "description": "Required fields info used while listing the payment_method_data",
        "required": [
          "required_field",
          "display_name",
          "field_type"
        ],
        "properties": {
          "required_field": {
            "type": "string",
            "description": "Required field for a payment_method through a payment_method_type"
          },
          "display_name": {
            "type": "string",
            "description": "Display name of the required field in the front-end"
          },
          "field_type": {
            "$ref": "#/components/schemas/FieldType",
            "description": "Possible field type of required field"
          },
          "value": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "ResourceId": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "customer"
            ],
            "properties": {
              "customer": {
                "type": "string"
              }
            }
          }
        ]
      },
      "ResponsePaymentMethodTypes": {
        "allOf": [
          {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PaymentMethodSubtypeSpecificData",
                "description": "payment method subtype specific information"
              }
            ]
          },
          {
            "type": "object",
            "required": [
              "payment_method_type",
              "payment_method_subtype",
              "required_fields"
            ],
            "properties": {
              "payment_method_type": {
                "$ref": "#/components/schemas/PaymentMethod",
                "description": "The payment method type enabled"
              },
              "payment_method_subtype": {
                "$ref": "#/components/schemas/PaymentMethodType",
                "description": "The payment method subtype enabled"
              },
              "required_fields": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RequiredFieldInfo"
                },
                "description": "Required fields for the payment_method_type.\nThis is the union of all the required fields for the payment method type enabled in all the connectors."
              }
            }
          }
        ]
      },
      "ResponsePaymentMethodTypesForPayments": {
        "allOf": [
          {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PaymentMethodSubtypeSpecificData",
                "description": "payment method subtype specific information"
              }
            ]
          },
          {
            "type": "object",
            "required": [
              "payment_method_type",
              "payment_method_subtype"
            ],
            "properties": {
              "payment_method_type": {
                "$ref": "#/components/schemas/PaymentMethod",
                "description": "The payment method type enabled"
              },
              "payment_method_subtype": {
                "$ref": "#/components/schemas/PaymentMethodType",
                "description": "The payment method subtype enabled"
              },
              "payment_experience": {
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "$ref": "#/components/schemas/PaymentExperience"
                },
                "description": "The payment experience for the payment method"
              },
              "required_fields": {
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "$ref": "#/components/schemas/RequiredFieldInfo"
                },
                "description": "Required fields for the payment_method_type.\nThis is the union of all the required fields for the payment method type enabled in all the connectors."
              },
              "surcharge_details": {
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/components/schemas/SurchargeDetailsResponse",
                    "description": "surcharge details for this payment method type if exists"
                  }
                ]
              }
            }
          }
        ]
      },
      "ResponsePaymentMethodsEnabled": {
        "type": "object",
        "required": [
          "payment_method",
          "payment_method_types"
        ],
        "properties": {
          "payment_method": {
            "$ref": "#/components/schemas/PaymentMethod",
            "description": "The payment method enabled"
          },
          "payment_method_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponsePaymentMethodTypes"
            },
            "description": "The list of payment method types enabled for a connector account"
          }
        }
      },
      "RetrieveApiKeyResponse": {
        "type": "object",
        "description": "The response body for retrieving an API Key.",
        "required": [
          "key_id",
          "merchant_id",
          "name",
          "prefix",
          "created",
          "expiration"
        ],
        "properties": {
          "key_id": {
            "type": "string",
            "description": "The identifier for the API Key.",
            "example": "5hEEqkgJUyuxgSKGArHA4mWSnX",
            "maxLength": 64
          },
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account.",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 64
          },
          "name": {
            "type": "string",
            "description": "The unique name for the API Key to help you identify it.",
            "example": "Sandbox integration key",
            "maxLength": 64
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "description": "The description to provide more context about the API Key.",
            "example": "Key used by our developers to integrate with the sandbox environment",
            "maxLength": 256
          },
          "prefix": {
            "type": "string",
            "description": "The first few characters of the plaintext API Key to help you identify it.",
            "maxLength": 64
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "The time at which the API Key was created.",
            "example": "2022-09-10T10:11:12Z"
          },
          "expiration": {
            "$ref": "#/components/schemas/ApiKeyExpiration",
            "description": "The expiration date for the API Key."
          }
        }
      },
      "RetrievePaymentLinkRequest": {
        "type": "object",
        "properties": {
          "client_secret": {
            "type": [
              "string",
              "null"
            ],
            "description": "It's a token used for client side verification."
          }
        }
      },
      "RetrievePaymentLinkResponse": {
        "type": "object",
        "required": [
          "payment_link_id",
          "merchant_id",
          "link_to_pay",
          "amount",
          "created_at",
          "status"
        ],
        "properties": {
          "payment_link_id": {
            "type": "string",
            "description": "Identifier for Payment Link"
          },
          "merchant_id": {
            "type": "string",
            "description": "Identifier for Merchant"
          },
          "link_to_pay": {
            "type": "string",
            "description": "Open payment link (without any security checks and listing SPMs)"
          },
          "amount": {
            "$ref": "#/components/schemas/MinorUnit",
            "description": "The payment amount. Amount for the payment in the lowest denomination of the currency"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time of Payment Link creation"
          },
          "expiry": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time",
            "description": "Date and time of Expiration for Payment Link"
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "description": "Description for Payment Link"
          },
          "status": {
            "$ref": "#/components/schemas/PaymentLinkStatus",
            "description": "Status Of the Payment Link"
          },
          "currency": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Currency"
              }
            ]
          },
          "secure_link": {
            "type": [
              "string",
              "null"
            ],
            "description": "Secure payment link (with security checks and listing saved payment methods)"
          }
        }
      },
      "RetryAction": {
        "type": "string",
        "description": "Denotes the retry action",
        "enum": [
          "manual_retry",
          "requeue"
        ]
      },
      "RevenueRecoveryMetadata": {
        "type": "object",
        "description": "Revenue recovery metadata for merchant connector account",
        "required": [
          "max_retry_count",
          "billing_connector_retry_threshold",
          "billing_account_reference"
        ],
        "properties": {
          "max_retry_count": {
            "type": "integer",
            "format": "int32",
            "description": "The maximum number of retries allowed for an invoice. This limit is set by the merchant for each `billing connector`. Once this limit is reached, no further retries will be attempted.",
            "example": "15",
            "minimum": 0
          },
          "billing_connector_retry_threshold": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of `billing connector` retries before revenue recovery can start executing retries.",
            "example": "10",
            "minimum": 0
          },
          "billing_account_reference": {
            "type": "integer",
            "format": "int32",
            "description": "Billing account reference id is payment gateway id at billing connector end.\nMerchants need to provide a mapping between these merchant connector account and the corresponding account reference IDs for each `billing connector`.",
            "example": "{ \"mca_vDSg5z6AxnisHq5dbJ6g\": \"stripe_123\", \"mca_vDSg5z6AumisHqh4x5m1\": \"adyen_123\" }",
            "minimum": 0
          }
        }
      },
      "RevenueRecoveryResponse": {
        "type": "object",
        "required": [
          "id",
          "status",
          "business_status"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": [
              "string",
              "null"
            ]
          },
          "schedule_time_for_payment": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          },
          "schedule_time_for_psync": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/ProcessTrackerStatus"
          },
          "business_status": {
            "type": "string"
          }
        }
      },
      "RevokeApiKeyResponse": {
        "type": "object",
        "description": "The response body for revoking an API Key.",
        "required": [
          "merchant_id",
          "key_id",
          "revoked"
        ],
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account.",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 64
          },
          "key_id": {
            "type": "string",
            "description": "The identifier for the API Key.",
            "example": "5hEEqkgJUyuxgSKGArHA4mWSnX",
            "maxLength": 64
          },
          "revoked": {
            "type": "boolean",
            "description": "Indicates whether the API key was revoked or not.",
            "example": "true"
          }
        }
      },
      "RevolutPayData": {
        "type": "object"
      },
      "RewardData": {
        "type": "object",
        "required": [
          "merchant_id"
        ],
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The merchant ID with which we have to call the connector"
          }
        }
      },
      "RoutableChoiceKind": {
        "type": "string",
        "enum": [
          "OnlyConnector",
          "FullStruct"
        ]
      },
      "RoutableConnectorChoice": {
        "type": "object",
        "required": [
          "connector",
          "merchant_connector_id"
        ],
        "properties": {
          "connector": {
            "$ref": "#/components/schemas/RoutableConnectors"
          },
          "merchant_connector_id": {
            "type": "string"
          }
        }
      },
      "RoutableConnectors": {
        "type": "string",
        "description": "RoutableConnectors are the subset of Connectors that are eligible for payments routing",
        "enum": [
          "authipay",
          "adyenplatform",
          "stripe_billing_test",
          "phonypay",
          "fauxpay",
          "pretendpay",
          "stripe_test",
          "adyen_test",
          "checkout_test",
          "paypal_test",
          "aci",
          "adyen",
          "airwallex",
          "archipel",
          "authorizedotnet",
          "bankofamerica",
          "barclaycard",
          "billwerk",
          "bitpay",
          "bambora",
          "bamboraapac",
          "bluesnap",
          "boku",
          "braintree",
          "cashtocode",
          "celero",
          "chargebee",
          "checkout",
          "coinbase",
          "coingate",
          "cryptopay",
          "cybersource",
          "datatrans",
          "deutschebank",
          "digitalvirgo",
          "dlocal",
          "ebanx",
          "elavon",
          "facilitapay",
          "fiserv",
          "fiservemea",
          "fiuu",
          "forte",
          "getnet",
          "globalpay",
          "globepay",
          "gocardless",
          "hipay",
          "helcim",
          "iatapay",
          "inespay",
          "itaubank",
          "jpmorgan",
          "klarna",
          "mifinity",
          "mollie",
          "moneris",
          "multisafepay",
          "nexinets",
          "nexixpay",
          "nmi",
          "nomupay",
          "noon",
          "novalnet",
          "nuvei",
          "opennode",
          "paybox",
          "payme",
          "payload",
          "payone",
          "paypal",
          "paystack",
          "payu",
          "placetopay",
          "powertranz",
          "prophetpay",
          "rapyd",
          "razorpay",
          "recurly",
          "redsys",
          "riskified",
          "santander",
          "shift4",
          "signifyd",
          "square",
          "stax",
          "stripe",
          "stripebilling",
          "trustpay",
          "tokenio",
          "tsys",
          "volt",
          "wellsfargo",
          "wise",
          "worldline",
          "worldpay",
          "worldpayvantiv",
          "worldpayxml",
          "xendit",
          "zen",
          "plaid",
          "zsl"
        ]
      },
      "RoutingAlgorithmId": {
        "type": "object",
        "required": [
          "routing_algorithm_id"
        ],
        "properties": {
          "routing_algorithm_id": {
            "type": "string"
          }
        }
      },
      "RoutingAlgorithmKind": {
        "type": "string",
        "enum": [
          "single",
          "priority",
          "volume_split",
          "advanced",
          "dynamic",
          "three_ds_decision_rule"
        ]
      },
      "RoutingAlgorithmWrapper": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/StaticRoutingAlgorithm"
          },
          {
            "$ref": "#/components/schemas/DynamicRoutingAlgorithm"
          }
        ]
      },
      "RoutingConfigRequest": {
        "type": "object",
        "required": [
          "name",
          "description",
          "algorithm",
          "profile_id"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "algorithm": {
            "$ref": "#/components/schemas/StaticRoutingAlgorithm"
          },
          "profile_id": {
            "type": "string"
          }
        }
      },
      "RoutingDictionary": {
        "type": "object",
        "required": [
          "merchant_id",
          "records"
        ],
        "properties": {
          "merchant_id": {
            "type": "string"
          },
          "active_id": {
            "type": [
              "string",
              "null"
            ]
          },
          "records": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoutingDictionaryRecord"
            }
          }
        }
      },
      "RoutingDictionaryRecord": {
        "type": "object",
        "required": [
          "id",
          "profile_id",
          "name",
          "kind",
          "description",
          "created_at",
          "modified_at"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "profile_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "kind": {
            "$ref": "#/components/schemas/RoutingAlgorithmKind"
          },
          "description": {
            "type": "string"
          },
          "created_at": {
            "type": "integer",
            "format": "int64"
          },
          "modified_at": {
            "type": "integer",
            "format": "int64"
          },
          "algorithm_for": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/TransactionType"
              }
            ]
          },
          "decision_engine_routing_id": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "RoutingKind": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/RoutingDictionary"
          },
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoutingDictionaryRecord"
            }
          }
        ]
      },
      "RoutingRetrieveResponse": {
        "type": "object",
        "description": "Response of the retrieved routing configs for a merchant account",
        "properties": {
          "algorithm": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MerchantRoutingAlgorithm"
              }
            ]
          }
        }
      },
      "RuleThreeDsDecisionRule": {
        "type": "object",
        "required": [
          "name",
          "connectorSelection",
          "statements"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "connectorSelection": {
            "$ref": "#/components/schemas/ThreeDSDecision"
          },
          "statements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IfStatement"
            }
          }
        }
      },
      "Rule_ConnectorSelection": {
        "type": "object",
        "description": "Represents a rule\n\n```text\nrule_name: [stripe, adyen, checkout]\n{\n    payment.method = card {\n        payment.method.cardtype = (credit, debit) {\n            payment.method.network = (amex, rupay, diners)\n        }\n\n        payment.method.cardtype = credit\n    }\n}\n```",
        "required": [
          "name",
          "connectorSelection",
          "statements"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "connectorSelection": {
            "oneOf": [
              {
                "type": "object",
                "required": [
                  "data",
                  "type"
                ],
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/RoutableConnectorChoice"
                    }
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "priority"
                    ]
                  }
                }
              },
              {
                "type": "object",
                "required": [
                  "data",
                  "type"
                ],
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ConnectorVolumeSplit"
                    }
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "volume_split"
                    ]
                  }
                }
              }
            ]
          },
          "statements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IfStatement"
            }
          }
        }
      },
      "SamsungPayAmountDetails": {
        "type": "object",
        "required": [
          "option",
          "currency_code",
          "total"
        ],
        "properties": {
          "option": {
            "$ref": "#/components/schemas/SamsungPayAmountFormat",
            "description": "Amount format to be displayed"
          },
          "currency_code": {
            "$ref": "#/components/schemas/Currency",
            "description": "The currency code"
          },
          "total": {
            "type": "string",
            "description": "The total amount of the transaction",
            "example": "38.02"
          }
        }
      },
      "SamsungPayAmountFormat": {
        "type": "string",
        "enum": [
          "FORMAT_TOTAL_PRICE_ONLY",
          "FORMAT_TOTAL_ESTIMATED_AMOUNT"
        ]
      },
      "SamsungPayAppWalletData": {
        "type": "object",
        "required": [
          "3_d_s",
          "payment_card_brand",
          "payment_currency_type",
          "payment_last4_fpan"
        ],
        "properties": {
          "3_d_s": {
            "$ref": "#/components/schemas/SamsungPayTokenData",
            "description": "Samsung Pay token data"
          },
          "payment_card_brand": {
            "$ref": "#/components/schemas/SamsungPayCardBrand",
            "description": "Brand of the payment card"
          },
          "payment_currency_type": {
            "type": "string",
            "description": "Currency type of the payment"
          },
          "payment_last4_dpan": {
            "type": [
              "string",
              "null"
            ],
            "description": "Last 4 digits of the device specific card number"
          },
          "payment_last4_fpan": {
            "type": "string",
            "description": "Last 4 digits of the card number"
          },
          "merchant_ref": {
            "type": [
              "string",
              "null"
            ],
            "description": "Merchant reference id that was passed in the session call request"
          },
          "method": {
            "type": [
              "string",
              "null"
            ],
            "description": "Specifies authentication method used"
          },
          "recurring_payment": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Value if credential is enabled for recurring payment"
          }
        }
      },
      "SamsungPayCardBrand": {
        "type": "string",
        "enum": [
          "visa",
          "mastercard",
          "amex",
          "discover",
          "unknown"
        ]
      },
      "SamsungPayMerchantPaymentInformation": {
        "type": "object",
        "required": [
          "name",
          "country_code"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Merchant name, this will be displayed on the Samsung Pay screen"
          },
          "url": {
            "type": [
              "string",
              "null"
            ],
            "description": "Merchant domain that process payments, required for web payments"
          },
          "country_code": {
            "$ref": "#/components/schemas/CountryAlpha2",
            "description": "Merchant country code"
          }
        }
      },
      "SamsungPayProtocolType": {
        "type": "string",
        "enum": [
          "PROTOCOL3DS"
        ]
      },
      "SamsungPaySessionTokenResponse": {
        "type": "object",
        "required": [
          "version",
          "service_id",
          "order_number",
          "merchant",
          "amount",
          "protocol",
          "allowed_brands",
          "billing_address_required",
          "shipping_address_required"
        ],
        "properties": {
          "version": {
            "type": "string",
            "description": "Samsung Pay API version"
          },
          "service_id": {
            "type": "string",
            "description": "Samsung Pay service ID to which session call needs to be made"
          },
          "order_number": {
            "type": "string",
            "description": "Order number of the transaction"
          },
          "merchant": {
            "$ref": "#/components/schemas/SamsungPayMerchantPaymentInformation",
            "description": "Field containing merchant information"
          },
          "amount": {
            "$ref": "#/components/schemas/SamsungPayAmountDetails",
            "description": "Field containing the payment amount"
          },
          "protocol": {
            "$ref": "#/components/schemas/SamsungPayProtocolType",
            "description": "Payment protocol type"
          },
          "allowed_brands": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of supported card brands"
          },
          "billing_address_required": {
            "type": "boolean",
            "description": "Is billing address required to be collected from wallet"
          },
          "shipping_address_required": {
            "type": "boolean",
            "description": "Is shipping address required to be collected from wallet"
          }
        }
      },
      "SamsungPayTokenData": {
        "type": "object",
        "required": [
          "version",
          "data"
        ],
        "properties": {
          "type": {
            "type": [
              "string",
              "null"
            ],
            "description": "3DS type used by Samsung Pay"
          },
          "version": {
            "type": "string",
            "description": "3DS version used by Samsung Pay"
          },
          "data": {
            "type": "string",
            "description": "Samsung Pay encrypted payment credential data"
          }
        }
      },
      "SamsungPayWalletCredentials": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SamsungPayWebWalletData"
          },
          {
            "$ref": "#/components/schemas/SamsungPayAppWalletData"
          }
        ]
      },
      "SamsungPayWalletData": {
        "type": "object",
        "required": [
          "payment_credential"
        ],
        "properties": {
          "payment_credential": {
            "$ref": "#/components/schemas/SamsungPayWalletCredentials"
          }
        }
      },
      "SamsungPayWebWalletData": {
        "type": "object",
        "required": [
          "card_brand",
          "card_last4digits",
          "3_d_s"
        ],
        "properties": {
          "method": {
            "type": [
              "string",
              "null"
            ],
            "description": "Specifies authentication method used"
          },
          "recurring_payment": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Value if credential is enabled for recurring payment"
          },
          "card_brand": {
            "$ref": "#/components/schemas/SamsungPayCardBrand",
            "description": "Brand of the payment card"
          },
          "card_last4digits": {
            "type": "string",
            "description": "Last 4 digits of the card number"
          },
          "3_d_s": {
            "$ref": "#/components/schemas/SamsungPayTokenData",
            "description": "Samsung Pay token data"
          }
        }
      },
      "ScaExemptionType": {
        "type": "string",
        "description": "SCA Exemptions types available for authentication",
        "enum": [
          "low_value",
          "transaction_risk_analysis"
        ]
      },
      "SdkInformation": {
        "type": "object",
        "description": "SDK Information if request is from SDK",
        "required": [
          "sdk_app_id",
          "sdk_enc_data",
          "sdk_ephem_pub_key",
          "sdk_trans_id",
          "sdk_reference_number",
          "sdk_max_timeout"
        ],
        "properties": {
          "sdk_app_id": {
            "type": "string",
            "description": "Unique ID created on installations of the 3DS Requestor App on a Consumer Device"
          },
          "sdk_enc_data": {
            "type": "string",
            "description": "JWE Object containing data encrypted by the SDK for the DS to decrypt"
          },
          "sdk_ephem_pub_key": {
            "type": "object",
            "description": "Public key component of the ephemeral key pair generated by the 3DS SDK",
            "additionalProperties": {
              "type": "string"
            },
            "propertyNames": {
              "type": "string"
            }
          },
          "sdk_trans_id": {
            "type": "string",
            "description": "Unique transaction identifier assigned by the 3DS SDK"
          },
          "sdk_reference_number": {
            "type": "string",
            "description": "Identifies the vendor and version for the 3DS SDK that is integrated in a 3DS Requestor App"
          },
          "sdk_max_timeout": {
            "type": "integer",
            "format": "int32",
            "description": "Indicates maximum amount of time in minutes",
            "minimum": 0
          },
          "sdk_type": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/SdkType",
                "description": "Indicates the type of 3DS SDK"
              }
            ]
          }
        }
      },
      "SdkNextAction": {
        "type": "object",
        "required": [
          "next_action"
        ],
        "properties": {
          "next_action": {
            "$ref": "#/components/schemas/NextActionCall",
            "description": "The type of next action"
          }
        }
      },
      "SdkNextActionData": {
        "type": "object",
        "required": [
          "next_action"
        ],
        "properties": {
          "next_action": {
            "$ref": "#/components/schemas/NextActionCall"
          },
          "order_id": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "SdkType": {
        "type": "string",
        "description": "Enum representing the type of 3DS SDK.",
        "enum": [
          "01",
          "02",
          "03",
          "04",
          "05"
        ]
      },
      "SecretInfoToInitiateSdk": {
        "type": "object",
        "required": [
          "display",
          "payment"
        ],
        "properties": {
          "display": {
            "type": "string"
          },
          "payment": {
            "type": "string"
          }
        }
      },
      "SepaAndBacsBillingDetails": {
        "type": "object",
        "properties": {
          "email": {
            "type": [
              "string",
              "null"
            ],
            "description": "The Email ID for SEPA and BACS billing",
            "example": "example@me.com"
          },
          "name": {
            "type": [
              "string",
              "null"
            ],
            "description": "The billing name for SEPA and BACS billing",
            "example": "Jane Doe"
          }
        }
      },
      "SepaBankDebitAdditionalData": {
        "type": "object",
        "required": [
          "iban"
        ],
        "properties": {
          "iban": {
            "type": "string",
            "description": "Partially masked international bank account number (iban) for SEPA",
            "example": "DE8937******013000"
          },
          "bank_account_holder_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Bank account's owner name",
            "example": "John Doe"
          }
        }
      },
      "SepaBankTransfer": {
        "type": "object",
        "required": [
          "iban",
          "bic"
        ],
        "properties": {
          "bank_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Bank name",
            "example": "Deutsche Bank"
          },
          "bank_country_code": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CountryAlpha2",
                "description": "Bank country code"
              }
            ]
          },
          "bank_city": {
            "type": [
              "string",
              "null"
            ],
            "description": "Bank city",
            "example": "California"
          },
          "iban": {
            "type": "string",
            "description": "International Bank Account Number (iban) - used in many countries for identifying a bank along with it's customer.",
            "example": "DE89370400440532013000"
          },
          "bic": {
            "type": "string",
            "description": "[8 / 11 digits] Bank Identifier Code (bic) / Swift Code - used in many countries for identifying a bank and it's branches",
            "example": "HSBCGB2LXXX"
          }
        }
      },
      "SepaBankTransferAdditionalData": {
        "type": "object",
        "description": "Masked payout method details for sepa bank transfer payout method",
        "required": [
          "iban"
        ],
        "properties": {
          "iban": {
            "type": "string",
            "description": "Partially masked international bank account number (iban) for SEPA",
            "example": "DE8937******013000"
          },
          "bank_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Bank name",
            "example": "Deutsche Bank"
          },
          "bank_country_code": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CountryAlpha2",
                "description": "Bank country code"
              }
            ]
          },
          "bank_city": {
            "type": [
              "string",
              "null"
            ],
            "description": "Bank city",
            "example": "California"
          },
          "bic": {
            "type": [
              "string",
              "null"
            ],
            "description": "[8 / 11 digits] Bank Identifier Code (bic) / Swift Code - used in many countries for identifying a bank and it's branches",
            "example": "HSBCGB2LXXX"
          }
        }
      },
      "SepaBankTransferInstructions": {
        "type": "object",
        "required": [
          "account_holder_name",
          "bic",
          "country",
          "iban",
          "reference"
        ],
        "properties": {
          "account_holder_name": {
            "type": "string",
            "example": "Jane Doe"
          },
          "bic": {
            "type": "string",
            "example": "9123456789"
          },
          "country": {
            "type": "string"
          },
          "iban": {
            "type": "string",
            "example": "123456789"
          },
          "reference": {
            "type": "string",
            "example": "U2PVVSEV4V9Y"
          }
        }
      },
      "SessionToken": {
        "oneOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/GpaySessionTokenResponse",
                "description": "The session response structure for Google Pay"
              },
              {
                "type": "object",
                "required": [
                  "wallet_name"
                ],
                "properties": {
                  "wallet_name": {
                    "type": "string",
                    "enum": [
                      "google_pay"
                    ]
                  }
                }
              }
            ],
            "description": "The session response structure for Google Pay"
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/SamsungPaySessionTokenResponse",
                "description": "The session response structure for Samsung Pay"
              },
              {
                "type": "object",
                "required": [
                  "wallet_name"
                ],
                "properties": {
                  "wallet_name": {
                    "type": "string",
                    "enum": [
                      "samsung_pay"
                    ]
                  }
                }
              }
            ],
            "description": "The session response structure for Samsung Pay"
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/KlarnaSessionTokenResponse",
                "description": "The session response structure for Klarna"
              },
              {
                "type": "object",
                "required": [
                  "wallet_name"
                ],
                "properties": {
                  "wallet_name": {
                    "type": "string",
                    "enum": [
                      "klarna"
                    ]
                  }
                }
              }
            ],
            "description": "The session response structure for Klarna"
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaypalSessionTokenResponse",
                "description": "The session response structure for PayPal"
              },
              {
                "type": "object",
                "required": [
                  "wallet_name"
                ],
                "properties": {
                  "wallet_name": {
                    "type": "string",
                    "enum": [
                      "paypal"
                    ]
                  }
                }
              }
            ],
            "description": "The session response structure for PayPal"
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApplepaySessionTokenResponse",
                "description": "The session response structure for Apple Pay"
              },
              {
                "type": "object",
                "required": [
                  "wallet_name"
                ],
                "properties": {
                  "wallet_name": {
                    "type": "string",
                    "enum": [
                      "apple_pay"
                    ]
                  }
                }
              }
            ],
            "description": "The session response structure for Apple Pay"
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenBankingSessionToken",
                "description": "Session token for OpenBanking PIS flow"
              },
              {
                "type": "object",
                "required": [
                  "wallet_name"
                ],
                "properties": {
                  "wallet_name": {
                    "type": "string",
                    "enum": [
                      "open_banking"
                    ]
                  }
                }
              }
            ],
            "description": "Session token for OpenBanking PIS flow"
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/PazeSessionTokenResponse",
                "description": "The session response structure for Paze"
              },
              {
                "type": "object",
                "required": [
                  "wallet_name"
                ],
                "properties": {
                  "wallet_name": {
                    "type": "string",
                    "enum": [
                      "paze"
                    ]
                  }
                }
              }
            ],
            "description": "The session response structure for Paze"
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClickToPaySessionResponse",
                "description": "The sessions response structure for ClickToPay"
              },
              {
                "type": "object",
                "required": [
                  "wallet_name"
                ],
                "properties": {
                  "wallet_name": {
                    "type": "string",
                    "enum": [
                      "click_to_pay"
                    ]
                  }
                }
              }
            ],
            "description": "The sessions response structure for ClickToPay"
          },
          {
            "type": "object",
            "description": "Whenever there is no session token response or an error in session response",
            "required": [
              "wallet_name"
            ],
            "properties": {
              "wallet_name": {
                "type": "string",
                "enum": [
                  "no_session_token_received"
                ]
              }
            }
          }
        ]
      },
      "SessionTokenInfo": {
        "allOf": [
          {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PaymentProcessingDetailsAt"
              }
            ]
          },
          {
            "type": "object",
            "required": [
              "certificate",
              "certificate_keys",
              "merchant_identifier",
              "display_name",
              "initiative"
            ],
            "properties": {
              "certificate": {
                "type": "string"
              },
              "certificate_keys": {
                "type": "string"
              },
              "merchant_identifier": {
                "type": "string"
              },
              "display_name": {
                "type": "string"
              },
              "initiative": {
                "$ref": "#/components/schemas/ApplepayInitiative"
              },
              "initiative_context": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "merchant_business_country": {
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/components/schemas/CountryAlpha2"
                  }
                ]
              }
            }
          }
        ]
      },
      "SizeVariants": {
        "type": "string",
        "enum": [
          "cover",
          "contain"
        ]
      },
      "SkrillData": {
        "type": "object"
      },
      "SortBy": {
        "type": "string",
        "enum": [
          "asc",
          "desc"
        ]
      },
      "SortOn": {
        "type": "string",
        "enum": [
          "amount",
          "created"
        ]
      },
      "SplitPaymentsRequest": {
        "oneOf": [
          {
            "type": "object",
            "description": "StripeSplitPayment",
            "required": [
              "stripe_split_payment"
            ],
            "properties": {
              "stripe_split_payment": {
                "$ref": "#/components/schemas/StripeSplitPaymentRequest",
                "description": "StripeSplitPayment"
              }
            }
          },
          {
            "type": "object",
            "description": "AdyenSplitPayment",
            "required": [
              "adyen_split_payment"
            ],
            "properties": {
              "adyen_split_payment": {
                "$ref": "#/components/schemas/AdyenSplitData",
                "description": "AdyenSplitPayment"
              }
            }
          },
          {
            "type": "object",
            "description": "XenditSplitPayment",
            "required": [
              "xendit_split_payment"
            ],
            "properties": {
              "xendit_split_payment": {
                "$ref": "#/components/schemas/XenditSplitRequest",
                "description": "XenditSplitPayment"
              }
            }
          }
        ],
        "description": "Fee information for Split Payments to be charged on the payment being collected"
      },
      "SplitRefund": {
        "oneOf": [
          {
            "type": "object",
            "description": "StripeSplitRefundRequest",
            "required": [
              "stripe_split_refund"
            ],
            "properties": {
              "stripe_split_refund": {
                "$ref": "#/components/schemas/StripeSplitRefundRequest",
                "description": "StripeSplitRefundRequest"
              }
            }
          },
          {
            "type": "object",
            "description": "AdyenSplitRefundRequest",
            "required": [
              "adyen_split_refund"
            ],
            "properties": {
              "adyen_split_refund": {
                "$ref": "#/components/schemas/AdyenSplitData",
                "description": "AdyenSplitRefundRequest"
              }
            }
          },
          {
            "type": "object",
            "description": "XenditSplitRefundRequest",
            "required": [
              "xendit_split_refund"
            ],
            "properties": {
              "xendit_split_refund": {
                "$ref": "#/components/schemas/XenditSplitSubMerchantData",
                "description": "XenditSplitRefundRequest"
              }
            }
          }
        ],
        "description": "Charge specific fields for controlling the revert of funds from either platform or connected account. Check sub-fields for more details."
      },
      "StaticRoutingAlgorithm": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "data",
              "type"
            ],
            "properties": {
              "data": {
                "$ref": "#/components/schemas/RoutableConnectorChoice"
              },
              "type": {
                "type": "string",
                "enum": [
                  "single"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "data",
              "type"
            ],
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoutableConnectorChoice"
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "priority"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "data",
              "type"
            ],
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ConnectorVolumeSplit"
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "volume_split"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "data",
              "type"
            ],
            "properties": {
              "data": {
                "$ref": "#/components/schemas/Program_ConnectorSelection"
              },
              "type": {
                "type": "string",
                "enum": [
                  "advanced"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "data",
              "type"
            ],
            "properties": {
              "data": {
                "$ref": "#/components/schemas/Program_ThreeDSDecisionRule"
              },
              "type": {
                "type": "string",
                "enum": [
                  "three_ds_decision_rule"
                ]
              }
            }
          }
        ]
      },
      "StraightThroughAlgorithm": {
        "oneOf": [
          {
            "type": "object",
            "title": "Single",
            "required": [
              "data",
              "type"
            ],
            "properties": {
              "data": {
                "$ref": "#/components/schemas/RoutableConnectorChoice"
              },
              "type": {
                "type": "string",
                "enum": [
                  "single"
                ]
              }
            }
          },
          {
            "type": "object",
            "title": "Priority",
            "required": [
              "data",
              "type"
            ],
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoutableConnectorChoice"
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "priority"
                ]
              }
            }
          },
          {
            "type": "object",
            "title": "VolumeSplit",
            "required": [
              "data",
              "type"
            ],
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ConnectorVolumeSplit"
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "volume_split"
                ]
              }
            }
          }
        ]
      },
      "StringMinorUnit": {
        "type": "string",
        "description": "Connector specific types to send"
      },
      "StripeChargeResponseData": {
        "type": "object",
        "description": "Fee information to be charged on the payment being collected via Stripe",
        "required": [
          "charge_type",
          "application_fees",
          "transfer_account_id"
        ],
        "properties": {
          "charge_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "Identifier for charge created for the payment"
          },
          "charge_type": {
            "$ref": "#/components/schemas/PaymentChargeType",
            "description": "Type of charge (connector specific)"
          },
          "application_fees": {
            "type": "integer",
            "format": "int64",
            "description": "Platform fees collected on the payment",
            "example": 6540
          },
          "transfer_account_id": {
            "type": "string",
            "description": "Identifier for the reseller's account where the funds were transferred"
          }
        },
        "additionalProperties": false
      },
      "StripeChargeType": {
        "type": "string",
        "enum": [
          "direct",
          "destination"
        ]
      },
      "StripeSplitPaymentRequest": {
        "type": "object",
        "description": "Fee information for Split Payments to be charged on the payment being collected for Stripe",
        "required": [
          "charge_type",
          "application_fees",
          "transfer_account_id"
        ],
        "properties": {
          "charge_type": {
            "$ref": "#/components/schemas/PaymentChargeType",
            "description": "Stripe's charge type"
          },
          "application_fees": {
            "type": "integer",
            "format": "int64",
            "description": "Platform fees to be collected on the payment",
            "example": 6540
          },
          "transfer_account_id": {
            "type": "string",
            "description": "Identifier for the reseller's account where the funds were transferred"
          }
        },
        "additionalProperties": false
      },
      "StripeSplitRefundRequest": {
        "type": "object",
        "description": "Charge specific fields for controlling the revert of funds from either platform or connected account for Stripe. Check sub-fields for more details.",
        "properties": {
          "revert_platform_fee": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Toggle for reverting the application fee that was collected for the payment.\nIf set to false, the funds are pulled from the destination account."
          },
          "revert_transfer": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Toggle for reverting the transfer that was made during the charge.\nIf set to false, the funds are pulled from the main platform's account."
          }
        },
        "additionalProperties": false
      },
      "SuccessBasedRoutingConfig": {
        "type": "object",
        "properties": {
          "params": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/DynamicRoutingConfigParams"
            }
          },
          "config": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/SuccessBasedRoutingConfigBody"
              }
            ]
          },
          "decision_engine_configs": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/DecisionEngineSuccessRateData"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "SuccessBasedRoutingConfigBody": {
        "type": "object",
        "properties": {
          "min_aggregates_size": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "minimum": 0
          },
          "default_success_rate": {
            "type": [
              "number",
              "null"
            ],
            "format": "double"
          },
          "max_aggregates_size": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "minimum": 0
          },
          "current_block_threshold": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CurrentBlockThreshold"
              }
            ]
          },
          "specificity_level": {
            "$ref": "#/components/schemas/SuccessRateSpecificityLevel"
          },
          "exploration_percent": {
            "type": [
              "number",
              "null"
            ],
            "format": "double"
          },
          "shuffle_on_tie_during_exploitation": {
            "type": [
              "boolean",
              "null"
            ]
          }
        }
      },
      "SuccessRateSpecificityLevel": {
        "type": "string",
        "enum": [
          "merchant",
          "global"
        ]
      },
      "SupportedPaymentMethod": {
        "allOf": [
          {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PaymentMethodSpecificFeatures",
                "description": "Information on the Payment method specific payment features"
              }
            ]
          },
          {
            "type": "object",
            "required": [
              "payment_method",
              "payment_method_type",
              "payment_method_type_display_name",
              "mandates",
              "refunds",
              "supported_capture_methods"
            ],
            "properties": {
              "payment_method": {
                "$ref": "#/components/schemas/PaymentMethod",
                "description": "The payment method supported by the connector"
              },
              "payment_method_type": {
                "$ref": "#/components/schemas/PaymentMethodType",
                "description": "The payment method type supported by the connector"
              },
              "payment_method_type_display_name": {
                "type": "string",
                "description": "The display name of the payment method type"
              },
              "mandates": {
                "$ref": "#/components/schemas/FeatureStatus",
                "description": "Indicates whether the payment method supports mandates via the connector"
              },
              "refunds": {
                "$ref": "#/components/schemas/FeatureStatus",
                "description": "Indicates whether the payment method supports refunds via the connector"
              },
              "supported_capture_methods": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CaptureMethod"
                },
                "description": "List of supported capture methods supported by the payment method type"
              },
              "supported_countries": {
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "$ref": "#/components/schemas/CountryAlpha3"
                },
                "description": "List of countries supported by the payment method type via the connector",
                "uniqueItems": true
              },
              "supported_currencies": {
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "$ref": "#/components/schemas/Currency"
                },
                "description": "List of currencies supported by the payment method type via the connector",
                "uniqueItems": true
              }
            }
          }
        ]
      },
      "SurchargeCalculationOverride": {
        "type": "string",
        "enum": [
          "skip",
          "calculate"
        ]
      },
      "SurchargeDetailsResponse": {
        "type": "object",
        "required": [
          "surcharge",
          "display_surcharge_amount",
          "display_tax_on_surcharge_amount",
          "display_total_surcharge_amount"
        ],
        "properties": {
          "surcharge": {
            "$ref": "#/components/schemas/SurchargeResponse",
            "description": "surcharge value"
          },
          "tax_on_surcharge": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/SurchargePercentage",
                "description": "tax on surcharge value"
              }
            ]
          },
          "display_surcharge_amount": {
            "type": "number",
            "format": "double",
            "description": "surcharge amount for this payment"
          },
          "display_tax_on_surcharge_amount": {
            "type": "number",
            "format": "double",
            "description": "tax on surcharge amount for this payment"
          },
          "display_total_surcharge_amount": {
            "type": "number",
            "format": "double",
            "description": "sum of display_surcharge_amount and display_tax_on_surcharge_amount"
          }
        }
      },
      "SurchargePercentage": {
        "type": "object",
        "required": [
          "percentage"
        ],
        "properties": {
          "percentage": {
            "type": "number",
            "format": "float"
          }
        }
      },
      "SurchargeResponse": {
        "oneOf": [
          {
            "type": "object",
            "description": "Fixed Surcharge value",
            "required": [
              "value",
              "type"
            ],
            "properties": {
              "value": {
                "$ref": "#/components/schemas/MinorUnit",
                "description": "Fixed Surcharge value"
              },
              "type": {
                "type": "string",
                "enum": [
                  "fixed"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "Surcharge percentage",
            "required": [
              "value",
              "type"
            ],
            "properties": {
              "value": {
                "$ref": "#/components/schemas/SurchargePercentage",
                "description": "Surcharge percentage"
              },
              "type": {
                "type": "string",
                "enum": [
                  "rate"
                ]
              }
            }
          }
        ]
      },
      "SwishQrData": {
        "type": "object"
      },
      "TaxCalculationOverride": {
        "type": "string",
        "enum": [
          "skip",
          "calculate"
        ]
      },
      "ThirdPartySdkSessionResponse": {
        "type": "object",
        "required": [
          "secrets"
        ],
        "properties": {
          "secrets": {
            "$ref": "#/components/schemas/SecretInfoToInitiateSdk"
          }
        }
      },
      "ThreeDSDecision": {
        "type": "string",
        "description": "Enum representing the possible outcomes of the 3DS Decision Rule Engine.",
        "enum": [
          "no_three_ds",
          "challenge_requested",
          "challenge_preferred",
          "three_ds_exemption_requested_tra",
          "three_ds_exemption_requested_low_value",
          "issuer_three_ds_exemption_requested"
        ]
      },
      "ThreeDSDecisionRule": {
        "type": "object",
        "description": "Struct representing the output configuration for the 3DS Decision Rule Engine.",
        "required": [
          "decision"
        ],
        "properties": {
          "decision": {
            "$ref": "#/components/schemas/ThreeDSDecision",
            "description": "The decided 3DS action based on the rules"
          }
        }
      },
      "ThreeDsCompletionIndicator": {
        "type": "string",
        "description": "Indicates if 3DS method data was successfully completed or not",
        "enum": [
          "Y",
          "N",
          "U"
        ]
      },
      "ThreeDsData": {
        "type": "object",
        "required": [
          "three_ds_authentication_url",
          "three_ds_authorize_url",
          "three_ds_method_details",
          "poll_config"
        ],
        "properties": {
          "three_ds_authentication_url": {
            "type": "string",
            "description": "ThreeDS authentication url - to initiate authentication"
          },
          "three_ds_authorize_url": {
            "type": "string",
            "description": "ThreeDS authorize url - to complete the payment authorization after authentication"
          },
          "three_ds_method_details": {
            "$ref": "#/components/schemas/ThreeDsMethodData",
            "description": "ThreeDS method details"
          },
          "poll_config": {
            "$ref": "#/components/schemas/PollConfigResponse",
            "description": "Poll config for a connector"
          },
          "message_version": {
            "type": [
              "string",
              "null"
            ],
            "description": "Message Version"
          },
          "directory_server_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "Directory Server ID"
          }
        }
      },
      "ThreeDsMethodData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "three_ds_method_data_submission",
              "three_ds_method_key"
            ],
            "properties": {
              "three_ds_method_data_submission": {
                "type": "boolean",
                "description": "Whether ThreeDS method data submission is required"
              },
              "three_ds_method_data": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "ThreeDS method data"
              },
              "three_ds_method_url": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "ThreeDS method url"
              },
              "three_ds_method_key": {
                "type": "string",
                "enum": [
                  "threeDSMethodData"
                ]
              }
            }
          }
        ]
      },
      "TimeRange": {
        "type": "object",
        "description": "A type representing a range of time for filtering, including a mandatory start time and an optional end time.",
        "required": [
          "start_time"
        ],
        "properties": {
          "start_time": {
            "type": "string",
            "format": "date-time",
            "description": "The start time to filter payments list or to get list of filters. To get list of filters start time is needed to be passed"
          },
          "end_time": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time",
            "description": "The end time to filter payments list or to get list of filters. If not passed the default time is now"
          }
        }
      },
      "ToggleBlocklistResponse": {
        "type": "object",
        "required": [
          "blocklist_guard_status"
        ],
        "properties": {
          "blocklist_guard_status": {
            "type": "string"
          }
        }
      },
      "ToggleKVRequest": {
        "type": "object",
        "required": [
          "kv_enabled"
        ],
        "properties": {
          "kv_enabled": {
            "type": "boolean",
            "description": "Status of KV for the specific merchant",
            "example": true
          }
        }
      },
      "ToggleKVResponse": {
        "type": "object",
        "required": [
          "merchant_id",
          "kv_enabled"
        ],
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "kv_enabled": {
            "type": "boolean",
            "description": "Status of KV for the specific merchant",
            "example": true
          }
        }
      },
      "TokenDataResponse": {
        "type": "object",
        "required": [
          "payment_method_id",
          "token_type",
          "token_details"
        ],
        "properties": {
          "payment_method_id": {
            "type": "string",
            "description": "The unique identifier of the payment method.",
            "example": "12345_pm_01926c58bc6e77c09e809964e72af8c8"
          },
          "token_type": {
            "$ref": "#/components/schemas/TokenDataType",
            "description": "token type of the payment method"
          },
          "token_details": {
            "$ref": "#/components/schemas/TokenDetailsResponse",
            "description": "token details of the payment method"
          }
        }
      },
      "TokenDataType": {
        "type": "string",
        "description": "The type of token data to fetch for get-token endpoint",
        "enum": [
          "single_use_token",
          "multi_use_token",
          "network_token"
        ]
      },
      "TokenDetailsResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/NetworkTokenDetailsResponse"
          }
        ]
      },
      "TokenType": {
        "type": "string",
        "enum": [
          "tokenization_id",
          "payment_method_id"
        ]
      },
      "TokenizationType": {
        "type": "string",
        "description": "The type of tokenization to use for the payment method",
        "enum": [
          "single_use",
          "multi_use"
        ]
      },
      "TokenizeCardRequest": {
        "type": "object",
        "required": [
          "raw_card_number",
          "card_expiry_month",
          "card_expiry_year"
        ],
        "properties": {
          "raw_card_number": {
            "type": "string",
            "description": "Card Number",
            "example": "4111111145551142"
          },
          "card_expiry_month": {
            "type": "string",
            "description": "Card Expiry Month",
            "example": "10"
          },
          "card_expiry_year": {
            "type": "string",
            "description": "Card Expiry Year",
            "example": "25"
          },
          "card_cvc": {
            "type": [
              "string",
              "null"
            ],
            "description": "The CVC number for the card",
            "example": "242"
          },
          "card_holder_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Card Holder Name",
            "example": "John Doe"
          },
          "nick_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Card Holder's Nick Name",
            "example": "John Doe"
          },
          "card_issuing_country": {
            "type": [
              "string",
              "null"
            ],
            "description": "Card Issuing Country"
          },
          "card_network": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CardNetwork",
                "description": "Card's Network"
              }
            ]
          },
          "card_issuer": {
            "type": [
              "string",
              "null"
            ],
            "description": "Issuer Bank for Card"
          },
          "card_type": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CardType",
                "description": "Card Type"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "TokenizeDataRequest": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "card"
            ],
            "properties": {
              "card": {
                "$ref": "#/components/schemas/TokenizeCardRequest"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "existing_payment_method"
            ],
            "properties": {
              "existing_payment_method": {
                "$ref": "#/components/schemas/TokenizePaymentMethodRequest"
              }
            }
          }
        ]
      },
      "TokenizePaymentMethodRequest": {
        "type": "object",
        "properties": {
          "card_cvc": {
            "type": [
              "string",
              "null"
            ],
            "description": "The CVC number for the card",
            "example": "242"
          }
        }
      },
      "TouchNGoRedirection": {
        "type": "object"
      },
      "TransactionDetailsUiConfiguration": {
        "type": "object",
        "properties": {
          "position": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "description": "Position of the key-value pair in the UI",
            "example": 5
          },
          "is_key_bold": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Whether the key should be bold",
            "default": false,
            "example": true
          },
          "is_value_bold": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Whether the value should be bold",
            "default": false,
            "example": true
          }
        }
      },
      "TransactionStatus": {
        "type": "string",
        "description": "Indicates the transaction status",
        "enum": [
          "Y",
          "N",
          "U",
          "A",
          "R",
          "C",
          "D",
          "I"
        ]
      },
      "TransactionType": {
        "type": "string",
        "enum": [
          "payment",
          "payout",
          "three_ds_authentication"
        ]
      },
      "TriggeredBy": {
        "type": "string",
        "enum": [
          "internal",
          "external"
        ]
      },
      "UIWidgetFormLayout": {
        "type": "string",
        "enum": [
          "tabs",
          "journey"
        ]
      },
      "UpdateActiveAttempt": {
        "oneOf": [
          {
            "type": "object",
            "description": "Request to set the active attempt id",
            "required": [
              "Set"
            ],
            "properties": {
              "Set": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "Request to set the active attempt id"
              }
            }
          },
          {
            "type": "string",
            "description": "To unset the active attempt id",
            "enum": [
              "Unset"
            ]
          }
        ],
        "description": "Whether active attempt is to be set/unset"
      },
      "UpdateApiKeyRequest": {
        "type": "object",
        "description": "The request body for updating an API Key.",
        "properties": {
          "name": {
            "type": [
              "string",
              "null"
            ],
            "description": "A unique name for the API Key to help you identify it.",
            "example": "Sandbox integration key",
            "maxLength": 64
          },
          "description": {
            "type": [
              "string",
              "null"
            ],
            "description": "A description to provide more context about the API Key.",
            "example": "Key used by our developers to integrate with the sandbox environment",
            "maxLength": 256
          },
          "expiration": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ApiKeyExpiration",
                "description": "An expiration date for the API Key. Although we allow keys to never expire, we recommend\nrotating your keys once every 6 months."
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "UpiAdditionalData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "upi_collect"
            ],
            "properties": {
              "upi_collect": {
                "$ref": "#/components/schemas/UpiCollectAdditionalData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "upi_intent"
            ],
            "properties": {
              "upi_intent": {
                "$ref": "#/components/schemas/UpiIntentData"
              }
            }
          }
        ]
      },
      "UpiCollectAdditionalData": {
        "type": "object",
        "properties": {
          "vpa_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "Masked VPA ID",
            "example": "ab********@okhdfcbank"
          }
        }
      },
      "UpiCollectData": {
        "type": "object",
        "properties": {
          "vpa_id": {
            "type": [
              "string",
              "null"
            ],
            "example": "successtest@iata"
          }
        }
      },
      "UpiData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "upi_collect"
            ],
            "properties": {
              "upi_collect": {
                "$ref": "#/components/schemas/UpiCollectData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "upi_intent"
            ],
            "properties": {
              "upi_intent": {
                "$ref": "#/components/schemas/UpiIntentData"
              }
            }
          }
        ]
      },
      "UpiIntentData": {
        "type": "object"
      },
      "UpiResponse": {
        "allOf": [
          {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/UpiAdditionalData"
              }
            ]
          }
        ]
      },
      "ValueType": {
        "oneOf": [
          {
            "type": "object",
            "description": "Represents a number literal",
            "required": [
              "value",
              "type"
            ],
            "properties": {
              "value": {
                "$ref": "#/components/schemas/MinorUnit",
                "description": "Represents a number literal"
              },
              "type": {
                "type": "string",
                "enum": [
                  "number"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "Represents an enum variant",
            "required": [
              "value",
              "type"
            ],
            "properties": {
              "value": {
                "type": "string",
                "description": "Represents an enum variant"
              },
              "type": {
                "type": "string",
                "enum": [
                  "enum_variant"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "Represents a Metadata variant",
            "required": [
              "value",
              "type"
            ],
            "properties": {
              "value": {
                "$ref": "#/components/schemas/MetadataValue",
                "description": "Represents a Metadata variant"
              },
              "type": {
                "type": "string",
                "enum": [
                  "metadata_variant"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "Represents a arbitrary String value",
            "required": [
              "value",
              "type"
            ],
            "properties": {
              "value": {
                "type": "string",
                "description": "Represents a arbitrary String value"
              },
              "type": {
                "type": "string",
                "enum": [
                  "str_value"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "Represents an array of numbers. This is basically used for\n\"one of the given numbers\" operations\neg: payment.method.amount = (1, 2, 3)",
            "required": [
              "value",
              "type"
            ],
            "properties": {
              "value": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MinorUnit"
                },
                "description": "Represents an array of numbers. This is basically used for\n\"one of the given numbers\" operations\neg: payment.method.amount = (1, 2, 3)"
              },
              "type": {
                "type": "string",
                "enum": [
                  "number_array"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "Similar to NumberArray but for enum variants\neg: payment.method.cardtype = (debit, credit)",
            "required": [
              "value",
              "type"
            ],
            "properties": {
              "value": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Similar to NumberArray but for enum variants\neg: payment.method.cardtype = (debit, credit)"
              },
              "type": {
                "type": "string",
                "enum": [
                  "enum_variant_array"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "Like a number array but can include comparisons. Useful for\nconditions like \"500 < amount < 1000\"\neg: payment.amount = (> 500, < 1000)",
            "required": [
              "value",
              "type"
            ],
            "properties": {
              "value": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NumberComparison"
                },
                "description": "Like a number array but can include comparisons. Useful for\nconditions like \"500 < amount < 1000\"\neg: payment.amount = (> 500, < 1000)"
              },
              "type": {
                "type": "string",
                "enum": [
                  "number_comparison_array"
                ]
              }
            }
          }
        ],
        "description": "Represents a value in the DSL"
      },
      "VaultSdk": {
        "type": "string",
        "enum": [
          "vgs_sdk",
          "hyperswitch_sdk"
        ]
      },
      "VaultSessionDetails": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "vgs"
            ],
            "properties": {
              "vgs": {
                "$ref": "#/components/schemas/VgsSessionDetails"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "hyperswitch_vault"
            ],
            "properties": {
              "hyperswitch_vault": {
                "$ref": "#/components/schemas/HyperswitchVaultSessionDetails"
              }
            }
          }
        ]
      },
      "Venmo": {
        "type": "object",
        "required": [
          "telephone_number"
        ],
        "properties": {
          "telephone_number": {
            "type": "string",
            "description": "mobile number linked to venmo account",
            "example": "16608213349"
          }
        }
      },
      "VenmoAdditionalData": {
        "type": "object",
        "description": "Masked payout method details for venmo wallet payout method",
        "properties": {
          "telephone_number": {
            "type": [
              "string",
              "null"
            ],
            "description": "mobile number linked to venmo account",
            "example": "******* 3349"
          }
        }
      },
      "VgsSessionDetails": {
        "type": "object",
        "required": [
          "external_vault_id",
          "sdk_env"
        ],
        "properties": {
          "external_vault_id": {
            "type": "string",
            "description": "The identifier of the external vault"
          },
          "sdk_env": {
            "type": "string",
            "description": "The environment for the external vault initiation"
          }
        }
      },
      "VoucherData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "boleto"
            ],
            "properties": {
              "boleto": {
                "$ref": "#/components/schemas/BoletoVoucherData"
              }
            }
          },
          {
            "type": "string",
            "enum": [
              "efecty"
            ]
          },
          {
            "type": "string",
            "enum": [
              "pago_efectivo"
            ]
          },
          {
            "type": "string",
            "enum": [
              "red_compra"
            ]
          },
          {
            "type": "string",
            "enum": [
              "red_pagos"
            ]
          },
          {
            "type": "object",
            "required": [
              "alfamart"
            ],
            "properties": {
              "alfamart": {
                "$ref": "#/components/schemas/AlfamartVoucherData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "indomaret"
            ],
            "properties": {
              "indomaret": {
                "$ref": "#/components/schemas/IndomaretVoucherData"
              }
            }
          },
          {
            "type": "string",
            "enum": [
              "oxxo"
            ]
          },
          {
            "type": "object",
            "required": [
              "seven_eleven"
            ],
            "properties": {
              "seven_eleven": {
                "$ref": "#/components/schemas/JCSVoucherData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "lawson"
            ],
            "properties": {
              "lawson": {
                "$ref": "#/components/schemas/JCSVoucherData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "mini_stop"
            ],
            "properties": {
              "mini_stop": {
                "$ref": "#/components/schemas/JCSVoucherData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "family_mart"
            ],
            "properties": {
              "family_mart": {
                "$ref": "#/components/schemas/JCSVoucherData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "seicomart"
            ],
            "properties": {
              "seicomart": {
                "$ref": "#/components/schemas/JCSVoucherData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "pay_easy"
            ],
            "properties": {
              "pay_easy": {
                "$ref": "#/components/schemas/JCSVoucherData"
              }
            }
          }
        ]
      },
      "VoucherResponse": {
        "allOf": [
          {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/VoucherData"
              }
            ]
          }
        ]
      },
      "Wallet": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "paypal"
            ],
            "properties": {
              "paypal": {
                "$ref": "#/components/schemas/Paypal"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "venmo"
            ],
            "properties": {
              "venmo": {
                "$ref": "#/components/schemas/Venmo"
              }
            }
          }
        ]
      },
      "WalletAdditionalData": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/PaypalAdditionalData",
            "description": "Additional data for paypal wallet payout method"
          },
          {
            "$ref": "#/components/schemas/VenmoAdditionalData",
            "description": "Additional data for venmo wallet payout method"
          }
        ],
        "description": "Masked payout method details for wallet payout method"
      },
      "WalletAdditionalDataForCard": {
        "type": "object",
        "required": [
          "last4",
          "card_network"
        ],
        "properties": {
          "last4": {
            "type": "string",
            "description": "Last 4 digits of the card number"
          },
          "card_network": {
            "type": "string",
            "description": "The information of the payment method"
          },
          "type": {
            "type": [
              "string",
              "null"
            ],
            "description": "The type of payment method"
          }
        }
      },
      "WalletData": {
        "oneOf": [
          {
            "type": "object",
            "description": "The wallet data for Ali Pay QrCode",
            "required": [
              "ali_pay_qr"
            ],
            "properties": {
              "ali_pay_qr": {
                "$ref": "#/components/schemas/AliPayQr",
                "description": "The wallet data for Ali Pay QrCode"
              }
            }
          },
          {
            "type": "object",
            "description": "The wallet data for Ali Pay redirect",
            "required": [
              "ali_pay_redirect"
            ],
            "properties": {
              "ali_pay_redirect": {
                "$ref": "#/components/schemas/AliPayRedirection",
                "description": "The wallet data for Ali Pay redirect"
              }
            }
          },
          {
            "type": "object",
            "description": "The wallet data for Ali Pay HK redirect",
            "required": [
              "ali_pay_hk_redirect"
            ],
            "properties": {
              "ali_pay_hk_redirect": {
                "$ref": "#/components/schemas/AliPayHkRedirection",
                "description": "The wallet data for Ali Pay HK redirect"
              }
            }
          },
          {
            "type": "object",
            "description": "The wallet data for Amazon Pay redirect",
            "required": [
              "amazon_pay_redirect"
            ],
            "properties": {
              "amazon_pay_redirect": {
                "$ref": "#/components/schemas/AmazonPayRedirectData",
                "description": "The wallet data for Amazon Pay redirect"
              }
            }
          },
          {
            "type": "object",
            "description": "The wallet data for Skrill",
            "required": [
              "skrill"
            ],
            "properties": {
              "skrill": {
                "$ref": "#/components/schemas/SkrillData",
                "description": "The wallet data for Skrill"
              }
            }
          },
          {
            "type": "object",
            "description": "The wallet data for Paysera",
            "required": [
              "paysera"
            ],
            "properties": {
              "paysera": {
                "$ref": "#/components/schemas/PayseraData",
                "description": "The wallet data for Paysera"
              }
            }
          },
          {
            "type": "object",
            "description": "The wallet data for Momo redirect",
            "required": [
              "momo_redirect"
            ],
            "properties": {
              "momo_redirect": {
                "$ref": "#/components/schemas/MomoRedirection",
                "description": "The wallet data for Momo redirect"
              }
            }
          },
          {
            "type": "object",
            "description": "The wallet data for KakaoPay redirect",
            "required": [
              "kakao_pay_redirect"
            ],
            "properties": {
              "kakao_pay_redirect": {
                "$ref": "#/components/schemas/KakaoPayRedirection",
                "description": "The wallet data for KakaoPay redirect"
              }
            }
          },
          {
            "type": "object",
            "description": "The wallet data for GoPay redirect",
            "required": [
              "go_pay_redirect"
            ],
            "properties": {
              "go_pay_redirect": {
                "$ref": "#/components/schemas/GoPayRedirection",
                "description": "The wallet data for GoPay redirect"
              }
            }
          },
          {
            "type": "object",
            "description": "The wallet data for Gcash redirect",
            "required": [
              "gcash_redirect"
            ],
            "properties": {
              "gcash_redirect": {
                "$ref": "#/components/schemas/GcashRedirection",
                "description": "The wallet data for Gcash redirect"
              }
            }
          },
          {
            "type": "object",
            "description": "The wallet data for Apple pay",
            "required": [
              "apple_pay"
            ],
            "properties": {
              "apple_pay": {
                "$ref": "#/components/schemas/ApplePayWalletData",
                "description": "The wallet data for Apple pay"
              }
            }
          },
          {
            "type": "object",
            "description": "Wallet data for apple pay redirect flow",
            "required": [
              "apple_pay_redirect"
            ],
            "properties": {
              "apple_pay_redirect": {
                "$ref": "#/components/schemas/ApplePayRedirectData",
                "description": "Wallet data for apple pay redirect flow"
              }
            }
          },
          {
            "type": "object",
            "description": "Wallet data for apple pay third party sdk flow",
            "required": [
              "apple_pay_third_party_sdk"
            ],
            "properties": {
              "apple_pay_third_party_sdk": {
                "$ref": "#/components/schemas/ApplePayThirdPartySdkData",
                "description": "Wallet data for apple pay third party sdk flow"
              }
            }
          },
          {
            "type": "object",
            "description": "Wallet data for DANA redirect flow",
            "required": [
              "dana_redirect"
            ],
            "properties": {
              "dana_redirect": {
                "type": "object",
                "description": "Wallet data for DANA redirect flow"
              }
            }
          },
          {
            "type": "object",
            "description": "The wallet data for Google pay",
            "required": [
              "google_pay"
            ],
            "properties": {
              "google_pay": {
                "$ref": "#/components/schemas/GooglePayWalletData",
                "description": "The wallet data for Google pay"
              }
            }
          },
          {
            "type": "object",
            "description": "Wallet data for google pay redirect flow",
            "required": [
              "google_pay_redirect"
            ],
            "properties": {
              "google_pay_redirect": {
                "$ref": "#/components/schemas/GooglePayRedirectData",
                "description": "Wallet data for google pay redirect flow"
              }
            }
          },
          {
            "type": "object",
            "description": "Wallet data for Google pay third party sdk flow",
            "required": [
              "google_pay_third_party_sdk"
            ],
            "properties": {
              "google_pay_third_party_sdk": {
                "$ref": "#/components/schemas/GooglePayThirdPartySdkData",
                "description": "Wallet data for Google pay third party sdk flow"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "mb_way_redirect"
            ],
            "properties": {
              "mb_way_redirect": {
                "$ref": "#/components/schemas/MbWayRedirection"
              }
            }
          },
          {
            "type": "object",
            "description": "The wallet data for MobilePay redirect",
            "required": [
              "mobile_pay_redirect"
            ],
            "properties": {
              "mobile_pay_redirect": {
                "$ref": "#/components/schemas/MobilePayRedirection",
                "description": "The wallet data for MobilePay redirect"
              }
            }
          },
          {
            "type": "object",
            "description": "This is for paypal redirection",
            "required": [
              "paypal_redirect"
            ],
            "properties": {
              "paypal_redirect": {
                "$ref": "#/components/schemas/PaypalRedirection",
                "description": "This is for paypal redirection"
              }
            }
          },
          {
            "type": "object",
            "description": "The wallet data for Paypal",
            "required": [
              "paypal_sdk"
            ],
            "properties": {
              "paypal_sdk": {
                "$ref": "#/components/schemas/PayPalWalletData",
                "description": "The wallet data for Paypal"
              }
            }
          },
          {
            "type": "object",
            "description": "The wallet data for Paze",
            "required": [
              "paze"
            ],
            "properties": {
              "paze": {
                "$ref": "#/components/schemas/PazeWalletData",
                "description": "The wallet data for Paze"
              }
            }
          },
          {
            "type": "object",
            "description": "The wallet data for Samsung Pay",
            "required": [
              "samsung_pay"
            ],
            "properties": {
              "samsung_pay": {
                "$ref": "#/components/schemas/SamsungPayWalletData",
                "description": "The wallet data for Samsung Pay"
              }
            }
          },
          {
            "type": "object",
            "description": "Wallet data for Twint Redirection",
            "required": [
              "twint_redirect"
            ],
            "properties": {
              "twint_redirect": {
                "type": "object",
                "description": "Wallet data for Twint Redirection"
              }
            }
          },
          {
            "type": "object",
            "description": "Wallet data for Vipps Redirection",
            "required": [
              "vipps_redirect"
            ],
            "properties": {
              "vipps_redirect": {
                "type": "object",
                "description": "Wallet data for Vipps Redirection"
              }
            }
          },
          {
            "type": "object",
            "description": "The wallet data for Touch n Go Redirection",
            "required": [
              "touch_n_go_redirect"
            ],
            "properties": {
              "touch_n_go_redirect": {
                "$ref": "#/components/schemas/TouchNGoRedirection",
                "description": "The wallet data for Touch n Go Redirection"
              }
            }
          },
          {
            "type": "object",
            "description": "The wallet data for WeChat Pay Redirection",
            "required": [
              "we_chat_pay_redirect"
            ],
            "properties": {
              "we_chat_pay_redirect": {
                "$ref": "#/components/schemas/WeChatPayRedirection",
                "description": "The wallet data for WeChat Pay Redirection"
              }
            }
          },
          {
            "type": "object",
            "description": "The wallet data for WeChat Pay Display QrCode",
            "required": [
              "we_chat_pay_qr"
            ],
            "properties": {
              "we_chat_pay_qr": {
                "$ref": "#/components/schemas/WeChatPayQr",
                "description": "The wallet data for WeChat Pay Display QrCode"
              }
            }
          },
          {
            "type": "object",
            "description": "The wallet data for Cashapp Qr",
            "required": [
              "cashapp_qr"
            ],
            "properties": {
              "cashapp_qr": {
                "$ref": "#/components/schemas/CashappQr",
                "description": "The wallet data for Cashapp Qr"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "swish_qr"
            ],
            "properties": {
              "swish_qr": {
                "$ref": "#/components/schemas/SwishQrData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "mifinity"
            ],
            "properties": {
              "mifinity": {
                "$ref": "#/components/schemas/MifinityData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "revolut_pay"
            ],
            "properties": {
              "revolut_pay": {
                "$ref": "#/components/schemas/RevolutPayData"
              }
            }
          }
        ]
      },
      "WalletResponse": {
        "allOf": [
          {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/WalletResponseData"
              }
            ]
          }
        ]
      },
      "WalletResponseData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "apple_pay"
            ],
            "properties": {
              "apple_pay": {
                "$ref": "#/components/schemas/WalletAdditionalDataForCard"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "google_pay"
            ],
            "properties": {
              "google_pay": {
                "$ref": "#/components/schemas/WalletAdditionalDataForCard"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "samsung_pay"
            ],
            "properties": {
              "samsung_pay": {
                "$ref": "#/components/schemas/WalletAdditionalDataForCard"
              }
            }
          }
        ],
        "description": "Hyperswitch supports SDK integration with Apple Pay and Google Pay wallets. For other wallets, we integrate with their respective connectors, redirecting the customer to the connector for wallet payments. As a result, we don’t receive any payment method data in the confirm call for payments made through other wallets."
      },
      "WeChatPay": {
        "type": "object"
      },
      "WeChatPayQr": {
        "type": "object"
      },
      "WeChatPayRedirection": {
        "type": "object"
      },
      "WebhookDeliveryAttempt": {
        "type": "string",
        "enum": [
          "initial_attempt",
          "automatic_retry",
          "manual_retry"
        ]
      },
      "WebhookDetails": {
        "type": "object",
        "properties": {
          "webhook_version": {
            "type": [
              "string",
              "null"
            ],
            "description": "The version for Webhook",
            "example": "1.0.2",
            "maxLength": 255
          },
          "webhook_username": {
            "type": [
              "string",
              "null"
            ],
            "description": "The user name for Webhook login",
            "example": "ekart_retail",
            "maxLength": 255
          },
          "webhook_password": {
            "type": [
              "string",
              "null"
            ],
            "description": "The password for Webhook login",
            "example": "ekart@123",
            "maxLength": 255
          },
          "webhook_url": {
            "type": [
              "string",
              "null"
            ],
            "description": "The url for the webhook endpoint",
            "example": "www.ekart.com/webhooks"
          },
          "payment_created_enabled": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "If this property is true, a webhook message is posted whenever a new payment is created",
            "example": true
          },
          "payment_succeeded_enabled": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "If this property is true, a webhook message is posted whenever a payment is successful",
            "example": true
          },
          "payment_failed_enabled": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "If this property is true, a webhook message is posted whenever a payment fails",
            "example": true
          },
          "payment_statuses_enabled": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/IntentStatus"
            },
            "description": "List of payment statuses that triggers a webhook for payment intents",
            "example": [
              "succeeded",
              "failed",
              "partially_captured",
              "requires_merchant_action"
            ]
          },
          "refund_statuses_enabled": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/RefundStatus"
            },
            "description": "List of refund statuses that triggers a webhook for refunds",
            "example": [
              "success",
              "failure"
            ]
          },
          "payout_statuses_enabled": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/PayoutStatus"
            },
            "description": "List of payout statuses that triggers a webhook for payouts",
            "example": [
              "success",
              "failed"
            ]
          }
        },
        "additionalProperties": false
      },
      "XenditChargeResponseData": {
        "oneOf": [
          {
            "type": "object",
            "description": "Split Between Multiple Accounts",
            "required": [
              "multiple_splits"
            ],
            "properties": {
              "multiple_splits": {
                "$ref": "#/components/schemas/XenditMultipleSplitResponse",
                "description": "Split Between Multiple Accounts"
              }
            }
          },
          {
            "type": "object",
            "description": "Collect Fee for Single Account",
            "required": [
              "single_split"
            ],
            "properties": {
              "single_split": {
                "$ref": "#/components/schemas/XenditSplitSubMerchantData",
                "description": "Collect Fee for Single Account"
              }
            }
          }
        ],
        "description": "Charge Information"
      },
      "XenditMultipleSplitRequest": {
        "type": "object",
        "description": "Fee information to be charged on the payment being collected via xendit",
        "required": [
          "name",
          "description",
          "routes"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name to identify split rule. Not required to be unique. Typically based on transaction and/or sub-merchant types."
          },
          "description": {
            "type": "string",
            "description": "Description to identify fee rule"
          },
          "for_user_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "The sub-account user-id that you want to make this transaction for."
          },
          "routes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/XenditSplitRoute"
            },
            "description": "Array of objects that define how the platform wants to route the fees and to which accounts."
          }
        },
        "additionalProperties": false
      },
      "XenditMultipleSplitResponse": {
        "type": "object",
        "description": "Fee information charged on the payment being collected via xendit",
        "required": [
          "split_rule_id",
          "name",
          "description",
          "routes"
        ],
        "properties": {
          "split_rule_id": {
            "type": "string",
            "description": "Identifier for split rule created for the payment"
          },
          "for_user_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "The sub-account user-id that you want to make this transaction for."
          },
          "name": {
            "type": "string",
            "description": "Name to identify split rule. Not required to be unique. Typically based on transaction and/or sub-merchant types."
          },
          "description": {
            "type": "string",
            "description": "Description to identify fee rule"
          },
          "routes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/XenditSplitRoute"
            },
            "description": "Array of objects that define how the platform wants to route the fees and to which accounts."
          }
        },
        "additionalProperties": false
      },
      "XenditSplitRequest": {
        "oneOf": [
          {
            "type": "object",
            "description": "Split Between Multiple Accounts",
            "required": [
              "multiple_splits"
            ],
            "properties": {
              "multiple_splits": {
                "$ref": "#/components/schemas/XenditMultipleSplitRequest",
                "description": "Split Between Multiple Accounts"
              }
            }
          },
          {
            "type": "object",
            "description": "Collect Fee for Single Account",
            "required": [
              "single_split"
            ],
            "properties": {
              "single_split": {
                "$ref": "#/components/schemas/XenditSplitSubMerchantData",
                "description": "Collect Fee for Single Account"
              }
            }
          }
        ],
        "description": "Xendit Charge Request"
      },
      "XenditSplitRoute": {
        "type": "object",
        "description": "Fee information to be charged on the payment being collected via xendit",
        "required": [
          "currency",
          "destination_account_id",
          "reference_id"
        ],
        "properties": {
          "flat_amount": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MinorUnit",
                "description": "Amount of payments to be split"
              }
            ]
          },
          "percent_amount": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "description": "Amount of payments to be split, using a percent rate as unit"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency",
            "description": "Currency code"
          },
          "destination_account_id": {
            "type": "string",
            "description": "ID of the destination account where the amount will be routed to"
          },
          "reference_id": {
            "type": "string",
            "description": "Reference ID which acts as an identifier of the route itself"
          }
        },
        "additionalProperties": false
      },
      "XenditSplitSubMerchantData": {
        "type": "object",
        "description": "Fee information to be charged on the payment being collected for sub-merchant via xendit",
        "required": [
          "for_user_id"
        ],
        "properties": {
          "for_user_id": {
            "type": "string",
            "description": "The sub-account user-id that you want to make this transaction for."
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "admin_api_key": {
        "type": "apiKey",
        "in": "header",
        "name": "api-key",
        "description": "Admin API keys allow you to perform some privileged actions such as creating a merchant account and Connector account."
      },
      "api_key": {
        "type": "apiKey",
        "in": "header",
        "name": "api-key",
        "description": "Use the API key created under your merchant account from the HyperSwitch dashboard. API key is used to authenticate API requests from your merchant server only. Don't expose this key on a website or embed it in a mobile application."
      },
      "ephemeral_key": {
        "type": "apiKey",
        "in": "header",
        "name": "api-key",
        "description": "Ephemeral keys provide temporary access to singular data, such as access to a single customer object for a short period of time."
      },
      "publishable_key": {
        "type": "apiKey",
        "in": "header",
        "name": "api-key",
        "description": "Publishable keys are a type of keys that can be public and have limited scope of usage."
      }
    }
  },
  "tags": [
    {
      "name": "Merchant Account",
      "description": "Create and manage merchant accounts"
    },
    {
      "name": "Profile",
      "description": "Create and manage profiles"
    },
    {
      "name": "Merchant Connector Account",
      "description": "Create and manage merchant connector accounts"
    },
    {
      "name": "Payments",
      "description": "Create and manage one-time payments, recurring payments and mandates"
    },
    {
      "name": "Refunds",
      "description": "Create and manage refunds for successful payments"
    },
    {
      "name": "Mandates",
      "description": "Manage mandates"
    },
    {
      "name": "Customers",
      "description": "Create and manage customers"
    },
    {
      "name": "Payment Methods",
      "description": "Create and manage payment methods of customers"
    },
    {
      "name": "Disputes",
      "description": "Manage disputes"
    },
    {
      "name": "API Key",
      "description": "Create and manage API Keys"
    },
    {
      "name": "Payouts",
      "description": "Create and manage payouts"
    },
    {
      "name": "payment link",
      "description": "Create payment link"
    },
    {
      "name": "Routing",
      "description": "Create and manage routing configurations"
    },
    {
      "name": "Event",
      "description": "Manage events"
    }
  ]
}