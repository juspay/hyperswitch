{
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          ""
        ],
        "type": "text/javascript"
      }
    },
    {
      "listen": "test",
      "script": {
        "exec": [
          "// Set response object as internal variable",
          "let jsonData = {};",
          "try {",
          "  jsonData = pm.response.json();",
          "} catch (e) {}",
          "",
          "// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
          "if (jsonData?.payment_id) {",
          "  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
          "  console.log(\"[LOG]::payment_id - \" + jsonData.payment_id);",
          "}",
          "",
          "console.log(\"[LOG]::x-request-id - \" + pm.response.headers.get(\"x-request-id\"));",
          ""
        ],
        "type": "text/javascript"
      }
    }
  ],
  "item": [
    {
      "name": "Health check",
      "item": [
        {
          "name": "Health",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Validate status 2xx",
                  "pm.test(\"[POST]::/accounts - Status code is 2xx\", function () {",
                  "  pm.response.to.be.success;",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "x-feature",
                "value": "router-custom",
                "type": "text",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "health"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Flow Testcases",
      "item": [
        {
          "name": "QuickStart",
          "item": [
            {
              "name": "Merchant Account - Create",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Validate status 2xx",
                      "pm.test(\"[POST]::/accounts - Status code is 2xx\", function () {",
                      "  pm.response.to.be.success;",
                      "});",
                      "",
                      "// Validate if response header has matching content-type",
                      "pm.test(\"[POST]::/accounts - Content-Type is application/json\", function () {",
                      "  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
                      "    \"application/json\",",
                      "  );",
                      "});",
                      "",
                      "// Set response object as internal variable",
                      "let jsonData = {};",
                      "try {",
                      "  jsonData = pm.response.json();",
                      "} catch (e) {}",
                      "",
                      "// pm.collectionVariables - Set merchant_id as variable for jsonData.merchant_id",
                      "if (jsonData?.merchant_id) {",
                      "  pm.collectionVariables.set(\"merchant_id\", jsonData.merchant_id);",
                      "  console.log(",
                      "    \"- use {{merchant_id}} as collection variable for value\",",
                      "    jsonData.merchant_id,",
                      "  );",
                      "} else {",
                      "  console.log(",
                      "    \"INFO - Unable to assign variable {{merchant_id}}, as jsonData.merchant_id is undefined.\",",
                      "  );",
                      "}",
                      "",
                      "// pm.collectionVariables - Set api_key as variable for jsonData.api_key",
                      "if (jsonData?.api_key) {",
                      "  pm.collectionVariables.set(\"api_key\", jsonData.api_key);",
                      "  console.log(",
                      "    \"- use {{api_key}} as collection variable for value\",",
                      "    jsonData.api_key,",
                      "  );",
                      "} else {",
                      "  console.log(",
                      "    \"INFO - Unable to assign variable {{api_key}}, as jsonData.api_key is undefined.\",",
                      "  );",
                      "}",
                      "",
                      "// pm.collectionVariables - Set publishable_key as variable for jsonData.publishable_key",
                      "if (jsonData?.publishable_key) {",
                      "  pm.collectionVariables.set(\"publishable_key\", jsonData.publishable_key);",
                      "  console.log(",
                      "    \"- use {{publishable_key}} as collection variable for value\",",
                      "    jsonData.publishable_key,",
                      "  );",
                      "} else {",
                      "  console.log(",
                      "    \"INFO - Unable to assign variable {{publishable_key}}, as jsonData.publishable_key is undefined.\",",
                      "  );",
                      "}",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "value",
                      "value": "{{admin_api_key}}",
                      "type": "string"
                    },
                    {
                      "key": "key",
                      "value": "api-key",
                      "type": "string"
                    },
                    {
                      "key": "in",
                      "value": "header",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  },
                  "raw": "{\"merchant_id\":\"postman_merchant_GHAction_{{$guid}}\",\"locker_id\":\"m0010\",\"merchant_name\":\"NewAge Retailer\",\"primary_business_details\":[{\"country\":\"US\",\"business\":\"default\"}],\"merchant_details\":{\"primary_contact_person\":\"John Test\",\"primary_email\":\"JohnTest@test.com\",\"primary_phone\":\"sunt laborum\",\"secondary_contact_person\":\"John Test2\",\"secondary_email\":\"JohnTest2@test.com\",\"secondary_phone\":\"cillum do dolor id\",\"website\":\"www.example.com\",\"about_business\":\"Online Retail with a wide selection of organic products for North America\",\"address\":{\"line1\":\"1467\",\"line2\":\"Harrison Street\",\"line3\":\"Harrison Street\",\"city\":\"San Fransico\",\"state\":\"California\",\"zip\":\"94122\",\"country\":\"US\"}},\"return_url\":\"https://duck.com\",\"webhook_details\":{\"webhook_version\":\"1.0.1\",\"webhook_username\":\"ekart_retail\",\"webhook_password\":\"password_ekart@123\",\"payment_created_enabled\":true,\"payment_succeeded_enabled\":true,\"payment_failed_enabled\":true},\"sub_merchants_enabled\":false,\"metadata\":{\"city\":\"NY\",\"unit\":\"245\"}}"
                },
                "url": {
                  "raw": "{{baseUrl}}/accounts",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "accounts"
                  ]
                },
                "description": "Create a new account for a merchant. The merchant could be a seller or retailer or client who likes to receive and send payments."
              },
              "response": []
            },
            {
              "name": "API Key - Create",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Validate status 2xx",
                      "pm.test(\"[POST]::/api_keys/:merchant_id - Status code is 2xx\", function () {",
                      "  pm.response.to.be.success;",
                      "});",
                      "",
                      "// Validate if response header has matching content-type",
                      "pm.test(",
                      "  \"[POST]::/api_keys/:merchant_id - Content-Type is application/json\",",
                      "  function () {",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
                      "      \"application/json\",",
                      "    );",
                      "  },",
                      ");",
                      "",
                      "// Set response object as internal variable",
                      "let jsonData = {};",
                      "try {",
                      "  jsonData = pm.response.json();",
                      "} catch (e) {}",
                      "",
                      "// pm.collectionVariables - Set api_key_id as variable for jsonData.key_id",
                      "if (jsonData?.key_id) {",
                      "  pm.collectionVariables.set(\"api_key_id\", jsonData.key_id);",
                      "  console.log(",
                      "    \"- use {{api_key_id}} as collection variable for value\",",
                      "    jsonData.key_id,",
                      "  );",
                      "} else {",
                      "  console.log(",
                      "    \"INFO - Unable to assign variable {{api_key_id}}, as jsonData.key_id is undefined.\",",
                      "  );",
                      "}",
                      "",
                      "// pm.collectionVariables - Set api_key as variable for jsonData.api_key",
                      "if (jsonData?.api_key) {",
                      "  pm.collectionVariables.set(\"api_key\", jsonData.api_key);",
                      "  console.log(",
                      "    \"- use {{api_key}} as collection variable for value\",",
                      "    jsonData.api_key,",
                      "  );",
                      "} else {",
                      "  console.log(",
                      "    \"INFO - Unable to assign variable {{api_key}}, as jsonData.api_key is undefined.\",",
                      "  );",
                      "}",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "value",
                      "value": "{{admin_api_key}}",
                      "type": "string"
                    },
                    {
                      "key": "key",
                      "value": "api-key",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"API Key 1\",\"description\":null,\"expiration\":\"2069-09-23T01:02:03.000Z\"}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api_keys/:merchant_id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api_keys",
                    ":merchant_id"
                  ],
                  "variable": [
                    {
                      "key": "merchant_id",
                      "value": "{{merchant_id}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Payout Connector - Create",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Validate status 2xx",
                      "pm.test(",
                      "  \"[POST]::/account/:account_id/connectors - Status code is 2xx\",",
                      "  function () {",
                      "    pm.response.to.be.success;",
                      "  },",
                      ");",
                      "",
                      "// Validate if response header has matching content-type",
                      "pm.test(",
                      "  \"[POST]::/account/:account_id/connectors - Content-Type is application/json\",",
                      "  function () {",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
                      "      \"application/json\",",
                      "    );",
                      "  },",
                      ");",
                      "",
                      "// Set response object as internal variable",
                      "let jsonData = {};",
                      "try {",
                      "  jsonData = pm.response.json();",
                      "} catch (e) {}",
                      "",
                      "// pm.collectionVariables - Set merchant_connector_id as variable for jsonData.merchant_connector_id",
                      "if (jsonData?.merchant_connector_id) {",
                      "  pm.collectionVariables.set(",
                      "    \"merchant_connector_id\",",
                      "    jsonData.merchant_connector_id,",
                      "  );",
                      "  console.log(",
                      "    \"- use {{merchant_connector_id}} as collection variable for value\",",
                      "    jsonData.merchant_connector_id,",
                      "  );",
                      "} else {",
                      "  console.log(",
                      "    \"INFO - Unable to assign variable {{merchant_connector_id}}, as jsonData.merchant_connector_id is undefined.\",",
                      "  );",
                      "}",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "value",
                      "value": "{{admin_api_key}}",
                      "type": "string"
                    },
                    {
                      "key": "key",
                      "value": "api-key",
                      "type": "string"
                    },
                    {
                      "key": "in",
                      "value": "header",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  },
                  "raw": "{\"connector_type\":\"payout_processor\",\"connector_name\":\"wise\",\"connector_account_details\":{\"auth_type\":\"BodyKey\",\"api_key\":\"{{connector_api_key}}\",\"key1\":\"{{connector_key1}}\"},\"test_mode\":false,\"disabled\":false,\"business_country\":\"US\",\"business_label\":\"default\",\"payment_methods_enabled\":[{\"payment_method\":\"card\",\"payment_method_types\":[{\"payment_method_type\":\"credit\",\"card_networks\":[\"Visa\",\"Mastercard\"],\"minimum_amount\":1,\"maximum_amount\":68607706,\"recurring_enabled\":true,\"installment_payment_enabled\":true},{\"payment_method_type\":\"debit\",\"card_networks\":[\"Visa\",\"Mastercard\"],\"minimum_amount\":1,\"maximum_amount\":68607706,\"recurring_enabled\":true,\"installment_payment_enabled\":true}]},{\"payment_method\":\"pay_later\",\"payment_method_types\":[{\"payment_method_type\":\"klarna\",\"payment_experience\":\"redirect_to_url\",\"card_networks\":null,\"accepted_currencies\":null,\"accepted_countries\":null,\"minimum_amount\":1,\"maximum_amount\":68607706,\"recurring_enabled\":true,\"installment_payment_enabled\":true},{\"payment_method_type\":\"affirm\",\"payment_experience\":\"redirect_to_url\",\"card_networks\":null,\"accepted_currencies\":null,\"accepted_countries\":null,\"minimum_amount\":1,\"maximum_amount\":68607706,\"recurring_enabled\":true,\"installment_payment_enabled\":true},{\"payment_method_type\":\"afterpay_clearpay\",\"payment_experience\":\"redirect_to_url\",\"card_networks\":null,\"accepted_currencies\":null,\"accepted_countries\":null,\"minimum_amount\":1,\"maximum_amount\":68607706,\"recurring_enabled\":true,\"installment_payment_enabled\":true},{\"payment_method_type\":\"pay_bright\",\"minimum_amount\":1,\"maximum_amount\":68607706,\"recurring_enabled\":true,\"installment_payment_enabled\":true},{\"payment_method_type\":\"walley\",\"minimum_amount\":1,\"maximum_amount\":68607706,\"recurring_enabled\":true,\"installment_payment_enabled\":true}]},{\"payment_method\":\"wallet\",\"payment_method_types\":[{\"payment_method_type\":\"paypal\",\"payment_experience\":\"redirect_to_url\",\"card_networks\":null,\"accepted_currencies\":null,\"accepted_countries\":null,\"minimum_amount\":1,\"maximum_amount\":68607706,\"recurring_enabled\":true,\"installment_payment_enabled\":true},{\"payment_method_type\":\"google_pay\",\"payment_experience\":\"invoke_sdk_client\",\"card_networks\":null,\"accepted_currencies\":null,\"accepted_countries\":null,\"minimum_amount\":1,\"maximum_amount\":68607706,\"recurring_enabled\":true,\"installment_payment_enabled\":true},{\"payment_method_type\":\"apple_pay\",\"payment_experience\":\"invoke_sdk_client\",\"card_networks\":null,\"accepted_currencies\":null,\"accepted_countries\":null,\"minimum_amount\":1,\"maximum_amount\":68607706,\"recurring_enabled\":true,\"installment_payment_enabled\":true},{\"payment_method_type\":\"mobile_pay\",\"minimum_amount\":1,\"maximum_amount\":68607706,\"recurring_enabled\":true,\"installment_payment_enabled\":true},{\"payment_method_type\":\"ali_pay\",\"minimum_amount\":1,\"maximum_amount\":68607706,\"recurring_enabled\":true,\"installment_payment_enabled\":true},{\"payment_method_type\":\"we_chat_pay\",\"minimum_amount\":1,\"maximum_amount\":68607706,\"recurring_enabled\":true,\"installment_payment_enabled\":true},{\"payment_method_type\":\"mb_way\",\"minimum_amount\":1,\"maximum_amount\":68607706,\"recurring_enabled\":true,\"installment_payment_enabled\":true}]},{\"payment_method\":\"bank_redirect\",\"payment_method_types\":[{\"payment_method_type\":\"giropay\",\"recurring_enabled\":true,\"installment_payment_enabled\":true},{\"payment_method_type\":\"eps\",\"recurring_enabled\":true,\"installment_payment_enabled\":true},{\"payment_method_type\":\"sofort\",\"recurring_enabled\":true,\"installment_payment_enabled\":true},{\"payment_method_type\":\"blik\",\"minimum_amount\":1,\"maximum_amount\":68607706,\"recurring_enabled\":true,\"installment_payment_enabled\":true},{\"payment_method_type\":\"trustly\",\"minimum_amount\":1,\"maximum_amount\":68607706,\"recurring_enabled\":true,\"installment_payment_enabled\":true},{\"payment_method_type\":\"online_banking_czech_republic\",\"minimum_amount\":1,\"maximum_amount\":68607706,\"recurring_enabled\":true,\"installment_payment_enabled\":true},{\"payment_method_type\":\"online_banking_finland\",\"minimum_amount\":1,\"maximum_amount\":68607706,\"recurring_enabled\":true,\"installment_payment_enabled\":true},{\"payment_method_type\":\"online_banking_poland\",\"minimum_amount\":1,\"maximum_amount\":68607706,\"recurring_enabled\":true,\"installment_payment_enabled\":true},{\"payment_method_type\":\"online_banking_slovakia\",\"minimum_amount\":1,\"maximum_amount\":68607706,\"recurring_enabled\":true,\"installment_payment_enabled\":true},{\"payment_method_type\":\"bancontact_card\",\"minimum_amount\":1,\"maximum_amount\":68607706,\"recurring_enabled\":true,\"installment_payment_enabled\":true}]},{\"payment_method\":\"bank_debit\",\"payment_method_types\":[{\"payment_method_type\":\"ach\",\"recurring_enabled\":true,\"installment_payment_enabled\":true},{\"payment_method_type\":\"bacs\",\"recurring_enabled\":true,\"installment_payment_enabled\":true}]}],\"metadata\":{\"google_pay\":{\"allowed_payment_methods\":[{\"type\":\"CARD\",\"parameters\":{\"allowed_auth_methods\":[\"PAN_ONLY\",\"CRYPTOGRAM_3DS\"],\"allowed_card_networks\":[\"AMEX\",\"DISCOVER\",\"INTERAC\",\"JCB\",\"MASTERCARD\",\"VISA\"]},\"tokenization_specification\":{\"type\":\"PAYMENT_GATEWAY\"}}],\"merchant_info\":{\"merchant_name\":\"Narayan Bhat\"}},\"apple_pay\":{\"session_token_data\":{\"initiative\":\"web\",\"certificate\":\"{{certificate}}\",\"display_name\":\"applepay\",\"certificate_keys\":\"{{certificate_keys}}\",\"initiative_context\":\"hyperswitch-sdk-test.netlify.app\",\"merchant_identifier\":\"merchant.com.stripe.sang\"},\"payment_request_data\":{\"label\":\"applepay pvt.ltd\",\"supported_networks\":[\"visa\",\"masterCard\",\"amex\",\"discover\"],\"merchant_capabilities\":[\"supports3DS\"]}}}}"
                },
                "url": {
                  "raw": "{{baseUrl}}/account/:account_id/connectors",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "account",
                    ":account_id",
                    "connectors"
                  ],
                  "variable": [
                    {
                      "key": "account_id",
                      "value": "{{merchant_id}}",
                      "description": "(Required) The unique identifier for the merchant account"
                    }
                  ]
                },
                "description": "Create a new Payment Connector for the merchant account. The connector could be a payment processor / facilitator / acquirer or specialised services like Fraud / Accounting etc."
              },
              "response": []
            },
            {
              "name": "Payouts - Create",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Validate status 2xx",
                      "pm.test(\"[POST]::/payouts/create - Status code is 2xx\", function () {",
                      "  pm.response.to.be.success;",
                      "});",
                      "",
                      "// Validate if response header has matching content-type",
                      "pm.test(\"[POST]::/payouts/create - Content-Type is application/json\", function () {",
                      "  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
                      "    \"application/json\",",
                      "  );",
                      "});",
                      "",
                      "// Validate if response has JSON Body",
                      "pm.test(\"[POST]::/payouts/create - Response has JSON Body\", function () {",
                      "  pm.response.to.have.jsonBody();",
                      "});",
                      "",
                      "// Set response object as internal variable",
                      "let jsonData = {};",
                      "try {",
                      "  jsonData = pm.response.json();",
                      "} catch (e) {}",
                      "",
                      "// pm.collectionVariables - Set payout_id as variable for jsonData.payout_id",
                      "if (jsonData?.payout_id) {",
                      "  pm.collectionVariables.set(\"payout_id\", jsonData.payout_id);",
                      "  console.log(",
                      "    \"- use {{payout_id}} as collection variable for value\",",
                      "    jsonData.payout_id,",
                      "  );",
                      "} else {",
                      "  console.log(",
                      "    \"INFO - Unable to assign variable {{payout_id}}, as jsonData.payout_id is undefined.\",",
                      "  );",
                      "}",
                      "",
                      "// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
                      "if (jsonData?.client_secret) {",
                      "  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
                      "  console.log(",
                      "    \"- use {{client_secret}} as collection variable for value\",",
                      "    jsonData.client_secret,",
                      "  );",
                      "} else {",
                      "  console.log(",
                      "    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
                      "  );",
                      "}",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  },
                  "raw": "{\"amount\":1,\"currency\":\"EUR\",\"customer_id\":\"wise_customer\",\"email\":\"payout_customer@example.com\",\"name\":\"John Doe\",\"phone\":\"999999999\",\"phone_country_code\":\"+65\",\"description\":\"Its my first payout request\",\"connector\":[\"wise\"],\"payout_type\":\"bank\",\"payout_method_data\":{\"bank\":{\"iban\":\"NL46TEST0136169112\",\"bic\":\"ABNANL2A\",\"bank_name\":\"Deutsche Bank\",\"bank_country_code\":\"NL\",\"bank_city\":\"Amsterdam\"}},\"billing\":{\"address\":{\"line1\":\"1467\",\"line2\":\"Harrison Street\",\"line3\":\"Harrison Street\",\"city\":\"San Fransico\",\"state\":\"CA\",\"zip\":\"94122\",\"country\":\"US\",\"first_name\":\"John\",\"last_name\":\"Doe\"},\"phone\":{\"number\":\"8056594427\",\"country_code\":\"+91\"}},\"entity_type\":\"Individual\",\"recurring\":true,\"metadata\":{\"ref\":\"123\"},\"confirm\":true,\"auto_fulfill\":true}"
                },
                "url": {
                  "raw": "{{baseUrl}}/payouts/create",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "payouts",
                    "create"
                  ]
                },
                "description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
              },
              "response": []
            }
          ]
        },
        {
          "name": "Happy Cases",
          "item": [
            {
              "name": "Scenario1 - Process Bacs Payout",
              "item": [
                {
                  "name": "Payouts - Create",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "// Validate status 2xx",
                          "pm.test(\"[POST]::/payouts/create - Status code is 2xx\", function () {",
                          "  pm.response.to.be.success;",
                          "});",
                          "",
                          "// Validate if response header has matching content-type",
                          "pm.test(\"[POST]::/payouts/create - Content-Type is application/json\", function () {",
                          "  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
                          "    \"application/json\",",
                          "  );",
                          "});",
                          "",
                          "// Validate if response has JSON Body",
                          "pm.test(\"[POST]::/payouts/create - Response has JSON Body\", function () {",
                          "  pm.response.to.have.jsonBody();",
                          "});",
                          "",
                          "// Set response object as internal variable",
                          "let jsonData = {};",
                          "try {",
                          "  jsonData = pm.response.json();",
                          "} catch (e) {}",
                          "",
                          "// pm.collectionVariables - Set payout_id as variable for jsonData.payout_id",
                          "if (jsonData?.payout_id) {",
                          "  pm.collectionVariables.set(\"payout_id\", jsonData.payout_id);",
                          "  console.log(",
                          "    \"- use {{payout_id}} as collection variable for value\",",
                          "    jsonData.payout_id,",
                          "  );",
                          "} else {",
                          "  console.log(",
                          "    \"INFO - Unable to assign variable {{payout_id}}, as jsonData.payout_id is undefined.\",",
                          "  );",
                          "}",
                          "",
                          "// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
                          "if (jsonData?.client_secret) {",
                          "  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
                          "  console.log(",
                          "    \"- use {{client_secret}} as collection variable for value\",",
                          "    jsonData.client_secret,",
                          "  );",
                          "} else {",
                          "  console.log(",
                          "    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
                          "  );",
                          "}",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      },
                      "raw": "{\"amount\":1,\"currency\":\"GBP\",\"customer_id\":\"wise_customer\",\"email\":\"payout_customer@example.com\",\"name\":\"John Doe\",\"phone\":\"999999999\",\"phone_country_code\":\"+65\",\"description\":\"Its my first payout request\",\"payout_type\":\"bank\",\"payout_method_data\":{\"bank\":{\"bank_sort_code\":\"231470\",\"bank_account_number\":\"28821822\",\"bank_name\":\"Deutsche Bank\",\"bank_country_code\":\"NL\",\"bank_city\":\"Amsterdam\"}},\"billing\":{\"address\":{\"line1\":\"1467\",\"line2\":\"Harrison Street\",\"line3\":\"Harrison Street\",\"city\":\"San Fransico\",\"state\":\"CA\",\"zip\":\"94122\",\"country\":\"US\",\"first_name\":\"John\",\"last_name\":\"Doe\"},\"phone\":{\"number\":\"8056594427\",\"country_code\":\"+91\"}},\"entity_type\":\"Individual\",\"recurring\":true,\"metadata\":{\"ref\":\"123\"},\"confirm\":true,\"auto_fulfill\":true,\"connector\":[\"wise\"]}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/payouts/create",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "payouts",
                        "create"
                      ]
                    },
                    "description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Scenario2 - Process SEPA Payout",
              "item": [
                {
                  "name": "Payouts - Create",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "// Validate status 2xx",
                          "pm.test(\"[POST]::/payouts/create - Status code is 2xx\", function () {",
                          "  pm.response.to.be.success;",
                          "});",
                          "",
                          "// Validate if response header has matching content-type",
                          "pm.test(\"[POST]::/payouts/create - Content-Type is application/json\", function () {",
                          "  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
                          "    \"application/json\",",
                          "  );",
                          "});",
                          "",
                          "// Validate if response has JSON Body",
                          "pm.test(\"[POST]::/payouts/create - Response has JSON Body\", function () {",
                          "  pm.response.to.have.jsonBody();",
                          "});",
                          "",
                          "// Set response object as internal variable",
                          "let jsonData = {};",
                          "try {",
                          "  jsonData = pm.response.json();",
                          "} catch (e) {}",
                          "",
                          "// pm.collectionVariables - Set payout_id as variable for jsonData.payout_id",
                          "if (jsonData?.payout_id) {",
                          "  pm.collectionVariables.set(\"payout_id\", jsonData.payout_id);",
                          "  console.log(",
                          "    \"- use {{payout_id}} as collection variable for value\",",
                          "    jsonData.payout_id,",
                          "  );",
                          "} else {",
                          "  console.log(",
                          "    \"INFO - Unable to assign variable {{payout_id}}, as jsonData.payout_id is undefined.\",",
                          "  );",
                          "}",
                          "",
                          "// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
                          "if (jsonData?.client_secret) {",
                          "  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
                          "  console.log(",
                          "    \"- use {{client_secret}} as collection variable for value\",",
                          "    jsonData.client_secret,",
                          "  );",
                          "} else {",
                          "  console.log(",
                          "    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
                          "  );",
                          "}",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      },
                      "raw": "{\"amount\":1,\"currency\":\"EUR\",\"customer_id\":\"wise_customer\",\"email\":\"payout_customer@example.com\",\"name\":\"John Doe\",\"phone\":\"999999999\",\"phone_country_code\":\"+65\",\"description\":\"Its my first payout request\",\"connector\":[\"wise\"],\"payout_type\":\"bank\",\"payout_method_data\":{\"bank\":{\"iban\":\"NL46TEST0136169112\",\"bic\":\"ABNANL2A\",\"bank_name\":\"Deutsche Bank\",\"bank_country_code\":\"NL\",\"bank_city\":\"Amsterdam\"}},\"billing\":{\"address\":{\"line1\":\"1467\",\"line2\":\"Harrison Street\",\"line3\":\"Harrison Street\",\"city\":\"San Fransico\",\"state\":\"CA\",\"zip\":\"94122\",\"country\":\"US\",\"first_name\":\"John\",\"last_name\":\"Doe\"},\"phone\":{\"number\":\"8056594427\",\"country_code\":\"+91\"}},\"entity_type\":\"Individual\",\"recurring\":true,\"metadata\":{\"ref\":\"123\"},\"confirm\":true,\"auto_fulfill\":true}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/payouts/create",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "payouts",
                        "create"
                      ]
                    },
                    "description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
                  },
                  "response": []
                }
              ]
            }
          ]
        },
        {
          "name": "Variation Cases",
          "item": [
            {
              "name": "Scenario1 - Create ACH payout with invalid data",
              "item": [
                {
                  "name": "Payouts - Create",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "// Validate status 4xx",
                          "pm.test(\"[POST]::/payouts/create - Status code is 4xx\", function () {",
                          "  pm.response.to.be.clientError;",
                          "});",
                          "",
                          "// Validate if response header has matching content-type",
                          "pm.test(\"[POST]::/payouts/create - Content-Type is application/json\", function () {",
                          "  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
                          "    \"application/json\",",
                          "  );",
                          "});",
                          "",
                          "// Validate if response has JSON Body",
                          "pm.test(\"[POST]::/payouts/create - Response has JSON Body\", function () {",
                          "  pm.response.to.have.jsonBody();",
                          "});",
                          "",
                          "// Set response object as internal variable",
                          "let jsonData = {};",
                          "try {",
                          "  jsonData = pm.response.json();",
                          "} catch (e) {}",
                          "",
                          "// pm.collectionVariables - Set payout_id as variable for jsonData.payout_id",
                          "if (jsonData?.payout_id) {",
                          "  pm.collectionVariables.set(\"payout_id\", jsonData.payout_id);",
                          "  console.log(",
                          "    \"- use {{payout_id}} as collection variable for value\",",
                          "    jsonData.payout_id,",
                          "  );",
                          "} else {",
                          "  console.log(",
                          "    \"INFO - Unable to assign variable {{payout_id}}, as jsonData.payout_id is undefined.\",",
                          "  );",
                          "}",
                          "",
                          "// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
                          "if (jsonData?.client_secret) {",
                          "  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
                          "  console.log(",
                          "    \"- use {{client_secret}} as collection variable for value\",",
                          "    jsonData.client_secret,",
                          "  );",
                          "} else {",
                          "  console.log(",
                          "    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
                          "  );",
                          "}",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      },
                      "raw": "{\"amount\":10000,\"currency\":\"USD\",\"customer_id\":\"wise_customer\",\"email\":\"payout_customer@example.com\",\"name\":\"Doest John\",\"phone\":\"6168205366\",\"phone_country_code\":\"+1\",\"description\":\"Its my first payout request\",\"connector\":[\"wise\"],\"payout_type\":\"bank\",\"payout_method_data\":{\"bank\":{\"bank_routing_number\":\"110000000\",\"bank_account_number\":\"000123456789\",\"bank_name\":\"Stripe Test Bank\",\"bank_country_code\":\"US\",\"bank_city\":\"California\"}},\"billing\":{\"address\":{\"line1\":\"1467\",\"line2\":\"Harrison Street\",\"line3\":\"Harrison Street\",\"city\":\"San Fransico\",\"state\":\"CA\",\"zip\":\"94122\",\"country\":\"US\",\"first_name\":\"Doest\",\"last_name\":\"John\"},\"phone\":{\"number\":\"6168205366\",\"country_code\":\"1\"}},\"entity_type\":\"Individual\",\"recurring\":false,\"metadata\":{\"ref\":\"123\"},\"confirm\":true,\"auto_fulfill\":true}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/payouts/create",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "payouts",
                        "create"
                      ]
                    },
                    "description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
                  },
                  "response": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "auth": {
    "type": "apikey",
    "apikey": [
      {
        "key": "value",
        "value": "{{api_key}}",
        "type": "string"
      },
      {
        "key": "key",
        "value": "api-key",
        "type": "string"
      },
      {
        "key": "in",
        "value": "header",
        "type": "string"
      }
    ]
  },
  "info": {
    "_postman_id": "b5107328-6e3c-4ef0-b575-4072bc64462a",
    "name": "wise",
    "description": "## Get started\n\nJuspay Router provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  \nYou can consume the APIs directly using your favorite HTTP/REST library.  \nWe have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data.\n\n### Base URLs\n\nUse the following base URLs when making requests to the APIs:\n\n| Environment | Base URL |\n| --- | --- |\n| Sandbox | [https://sandbox.hyperswitch.io](https://sandbox.hyperswitch.io) |\n| Production | [https://router.juspay.io](https://router.juspay.io) |\n\n# Authentication\n\nWhen you sign up for an account, you are given a secret key (also referred as api-key). You may authenticate all API requests with Juspay server by providing the appropriate key in the request Authorization header.  \nNever share your secret api keys. Keep them guarded and secure.\n\nContact Support:  \nName: Juspay Support  \nEmail: [support@juspay.in](mailto:support@juspay.in)",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "",
      "type": "string"
    },
    {
      "key": "admin_api_key",
      "value": "",
      "type": "string"
    },
    {
      "key": "api_key",
      "value": "",
      "type": "string"
    },
    {
      "key": "merchant_id",
      "value": ""
    },
    {
      "key": "payment_id",
      "value": ""
    },
    {
      "key": "customer_id",
      "value": ""
    },
    {
      "key": "mandate_id",
      "value": ""
    },
    {
      "key": "payment_method_id",
      "value": ""
    },
    {
      "key": "refund_id",
      "value": ""
    },
    {
      "key": "payout_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "merchant_connector_id",
      "value": ""
    },
    {
      "key": "client_secret",
      "value": "",
      "type": "string"
    },
    {
      "key": "connector_api_key",
      "value": "",
      "type": "string"
    },
    {
      "key": "connector_key1",
      "value": ""
    },
    {
      "key": "publishable_key",
      "value": "",
      "type": "string"
    },
    {
      "key": "payment_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "gateway_merchant_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "certificate",
      "value": "",
      "type": "string"
    },
    {
      "key": "certificate_keys",
      "value": "",
      "type": "string"
    },
    {
      "key": "api_key_id",
      "value": ""
    },
    {
      "key": "connector_api_secret",
      "value": "",
      "type": "string"
    }
  ]
}
