{
	"info": {
		"_postman_id": "def65b5c-dc11-4917-a1bb-508988011eff",
		"name": "cybersource",
		"description": "## Get started\n\nJuspay Router provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  \nYou can consume the APIs directly using your favorite HTTP/REST library.  \nWe have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data.\n\n### Base URLs\n\nUse the following base URLs when making requests to the APIs:\n\n| Environment | Base URL |\n| --- | --- |\n| Sandbox | [https://sandbox.hyperswitch.io](https://sandbox.hyperswitch.io) |\n| Production | [https://router.juspay.io](https://router.juspay.io) |\n\n# Authentication\n\nWhen you sign up for an account, you are given a secret key (also referred as api-key). You may authenticate all API requests with Juspay server by providing the appropriate key in the request Authorization header.  \nNever share your secret api keys. Keep them guarded and secure.\n\nContact Support:  \nName: Juspay Support  \nEmail: [support@juspay.in](mailto:support@juspay.in)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24206034"
	},
	"item": [
		{
			"name": "Health check",
			"item": [
				{
					"name": "New Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx",
									"pm.test(\"[POST]::/accounts - Status code is 2xx\", function () {",
									"  pm.response.to.be.success;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-feature",
								"value": "router-custom",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}/health",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"health"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Flow Testcases",
			"item": [
				{
					"name": "QuickStart",
					"item": [
						{
							"name": "Merchant Account - Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate status 2xx",
											"pm.test(\"[POST]::/accounts - Status code is 2xx\", function () {",
											"  pm.response.to.be.success;",
											"});",
											"",
											"// Validate if response header has matching content-type",
											"pm.test(\"[POST]::/accounts - Content-Type is application/json\", function () {",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
											"    \"application/json\",",
											"  );",
											"});",
											"",
											"// Set response object as internal variable",
											"let jsonData = {};",
											"try {",
											"  jsonData = pm.response.json();",
											"} catch (e) {}",
											"",
											"// pm.collectionVariables - Set merchant_id as variable for jsonData.merchant_id",
											"if (jsonData?.merchant_id) {",
											"  pm.collectionVariables.set(\"merchant_id\", jsonData.merchant_id);",
											"  console.log(",
											"    \"- use {{merchant_id}} as collection variable for value\",",
											"    jsonData.merchant_id,",
											"  );",
											"} else {",
											"  console.log(",
											"    \"INFO - Unable to assign variable {{merchant_id}}, as jsonData.merchant_id is undefined.\",",
											"  );",
											"}",
											"",
											"/*",
											"// pm.collectionVariables - Set api_key as variable for jsonData.api_key",
											"if (jsonData?.api_key) {",
											"   pm.collectionVariables.set(\"api_key\", jsonData.api_key);",
											"   console.log(\"- use {{api_key}} as collection variable for value\",jsonData.api_key);",
											"} else {",
											"   console.log('INFO - Unable to assign variable {{api_key}}, as jsonData.api_key is undefined.');",
											"};",
											"*/",
											"",
											"// pm.collectionVariables - Set publishable_key as variable for jsonData.publishable_key",
											"if (jsonData?.publishable_key) {",
											"  pm.collectionVariables.set(\"publishable_key\", jsonData.publishable_key);",
											"  console.log(",
											"    \"- use {{publishable_key}} as collection variable for value\",",
											"    jsonData.publishable_key,",
											"  );",
											"} else {",
											"  console.log(",
											"    \"INFO - Unable to assign variable {{publishable_key}}, as jsonData.publishable_key is undefined.\",",
											"  );",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{admin_api_key}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "api-key",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"merchant_id\":\"postman_merchant_GHAction_{{$guid}}\",\"locker_id\":\"m0010\",\"merchant_name\":\"NewAge Retailer\",\"merchant_details\":{\"primary_contact_person\":\"John Test\",\"primary_email\":\"JohnTest@test.com\",\"primary_phone\":\"sunt laborum\",\"secondary_contact_person\":\"John Test2\",\"secondary_email\":\"JohnTest2@test.com\",\"secondary_phone\":\"cillum do dolor id\",\"website\":\"www.example.com\",\"about_business\":\"Online Retail with a wide selection of organic products for North America\",\"address\":{\"line1\":\"1467\",\"line2\":\"Harrison Street\",\"line3\":\"Harrison Street\",\"city\":\"San Fransico\",\"state\":\"California\",\"zip\":\"94122\",\"country\":\"US\"}},\"return_url\":\"https://duck.com/success\",\"webhook_details\":{\"webhook_version\":\"1.0.1\",\"webhook_username\":\"ekart_retail\",\"webhook_password\":\"password_ekart@123\",\"payment_created_enabled\":true,\"payment_succeeded_enabled\":true,\"payment_failed_enabled\":true},\"sub_merchants_enabled\":false,\"metadata\":{\"city\":\"NY\",\"unit\":\"245\"},\"primary_business_details\":[{\"country\":\"US\",\"business\":\"default\"}]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/accounts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"accounts"
									]
								},
								"description": "Create a new account for a merchant. The merchant could be a seller or retailer or client who likes to receive and send payments."
							},
							"response": []
						},
						{
							"name": "API Key - Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate status 2xx",
											"pm.test(\"[POST]::/api_keys/:merchant_id - Status code is 2xx\", function () {",
											"  pm.response.to.be.success;",
											"});",
											"",
											"// Validate if response header has matching content-type",
											"pm.test(",
											"  \"[POST]::/api_keys/:merchant_id - Content-Type is application/json\",",
											"  function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
											"      \"application/json\",",
											"    );",
											"  },",
											");",
											"",
											"// Set response object as internal variable",
											"let jsonData = {};",
											"try {",
											"  jsonData = pm.response.json();",
											"} catch (e) {}",
											"",
											"// pm.collectionVariables - Set api_key_id as variable for jsonData.key_id",
											"if (jsonData?.key_id) {",
											"  pm.collectionVariables.set(\"api_key_id\", jsonData.key_id);",
											"  console.log(",
											"    \"- use {{api_key_id}} as collection variable for value\",",
											"    jsonData.key_id,",
											"  );",
											"} else {",
											"  console.log(",
											"    \"INFO - Unable to assign variable {{api_key_id}}, as jsonData.key_id is undefined.\",",
											"  );",
											"}",
											"",
											"// pm.collectionVariables - Set api_key as variable for jsonData.api_key",
											"if (jsonData?.api_key) {",
											"  pm.collectionVariables.set(\"api_key\", jsonData.api_key);",
											"  console.log(",
											"    \"- use {{api_key}} as collection variable for value\",",
											"    jsonData.api_key,",
											"  );",
											"} else {",
											"  console.log(",
											"    \"INFO - Unable to assign variable {{api_key}}, as jsonData.api_key is undefined.\",",
											"  );",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{admin_api_key}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "api-key",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"name\":\"API Key 1\",\"description\":null,\"expiration\":\"2069-09-23T01:02:03.000Z\"}"
								},
								"url": {
									"raw": "{{baseUrl}}/api_keys/:merchant_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api_keys",
										":merchant_id"
									],
									"variable": [
										{
											"key": "merchant_id",
											"value": "{{merchant_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Payment Connector - Create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate status 2xx",
											"pm.test(",
											"  \"[POST]::/account/:account_id/connectors - Status code is 2xx\",",
											"  function () {",
											"    pm.response.to.be.success;",
											"  },",
											");",
											"",
											"// Validate if response header has matching content-type",
											"pm.test(",
											"  \"[POST]::/account/:account_id/connectors - Content-Type is application/json\",",
											"  function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
											"      \"application/json\",",
											"    );",
											"  },",
											");",
											"",
											"// Set response object as internal variable",
											"let jsonData = {};",
											"try {",
											"  jsonData = pm.response.json();",
											"} catch (e) {}",
											"",
											"// pm.collectionVariables - Set merchant_connector_id as variable for jsonData.merchant_connector_id",
											"if (jsonData?.merchant_connector_id) {",
											"  pm.collectionVariables.set(",
											"    \"merchant_connector_id\",",
											"    jsonData.merchant_connector_id,",
											"  );",
											"  console.log(",
											"    \"- use {{merchant_connector_id}} as collection variable for value\",",
											"    jsonData.merchant_connector_id,",
											"  );",
											"} else {",
											"  console.log(",
											"    \"INFO - Unable to assign variable {{merchant_connector_id}}, as jsonData.merchant_connector_id is undefined.\",",
											"  );",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{admin_api_key}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "api-key",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"connector_type\": \"payment_processor\",\n    \"connector_name\": \"cybersource\",\n    \"connector_account_details\":{\n        \"auth_type\": \"SignatureKey\",\n        \"api_secret\": \"{{connector_api_secret}}\",\n        \"api_key\": \"{{connector_api_key}}\",\n        \"key1\": \"{{connector_key1}}\"\n    },\n    \"test_mode\": false,\n    \"disabled\": false,\n    \"payment_methods_enabled\": [\n        {\n            \"payment_method\": \"card\",\n            \"payment_method_types\": [\n                {\n                    \"payment_method_type\": \"credit\",\n                    \"card_networks\": [\n                        \"AmericanExpress\",\n                        \"Discover\",\n                        \"Interac\",\n                        \"JCB\",\n                        \"Mastercard\",\n                        \"Visa\",\n                        \"DinersClub\",\n                        \"UnionPay\",\n                        \"RuPay\"\n                    ],\n                    \"minimum_amount\": 1,\n                    \"maximum_amount\": 68607706,\n                    \"recurring_enabled\": true,\n                    \"installment_payment_enabled\": true\n                },\n                {\n                    \"payment_method_type\": \"debit\",\n                    \"card_networks\": [\n                        \"AmericanExpress\",\n                        \"Discover\",\n                        \"Interac\",\n                        \"JCB\",\n                        \"Mastercard\",\n                        \"Visa\",\n                        \"DinersClub\",\n                        \"UnionPay\",\n                        \"RuPay\"\n                    ],\n                    \"minimum_amount\": 1,\n                    \"maximum_amount\": 68607706,\n                    \"recurring_enabled\": true,\n                    \"installment_payment_enabled\": true\n                }\n            ]\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/account/:account_id/connectors",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"account",
										":account_id",
										"connectors"
									],
									"variable": [
										{
											"key": "account_id",
											"value": "{{merchant_id}}",
											"description": "(Required) The unique identifier for the merchant account"
										}
									]
								},
								"description": "Create a new Payment Connector for the merchant account. The connector could be a payment processor / facilitator / acquirer or specialised services like Fraud / Accounting etc."
							},
							"response": []
						},
						{
							"name": "Payments - Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate status 2xx",
											"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
											"  pm.response.to.be.success;",
											"});",
											"",
											"// Validate if response header has matching content-type",
											"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
											"    \"application/json\",",
											"  );",
											"});",
											"",
											"// Validate if response has JSON Body",
											"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
											"  pm.response.to.have.jsonBody();",
											"});",
											"",
											"// Set response object as internal variable",
											"let jsonData = {};",
											"try {",
											"  jsonData = pm.response.json();",
											"} catch (e) {}",
											"",
											"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
											"if (jsonData?.payment_id) {",
											"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
											"  console.log(",
											"    \"- use {{payment_id}} as collection variable for value\",",
											"    jsonData.payment_id,",
											"  );",
											"} else {",
											"  console.log(",
											"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
											"  );",
											"}",
											"",
											"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
											"if (jsonData?.mandate_id) {",
											"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
											"  console.log(",
											"    \"- use {{mandate_id}} as collection variable for value\",",
											"    jsonData.mandate_id,",
											"  );",
											"} else {",
											"  console.log(",
											"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
											"  );",
											"}",
											"",
											"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
											"if (jsonData?.client_secret) {",
											"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
											"  console.log(",
											"    \"- use {{client_secret}} as collection variable for value\",",
											"    jsonData.client_secret,",
											"  );",
											"} else {",
											"  console.log(",
											"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
											"  );",
											"}",
											"",
											"// Response body should have value \"succeeded\" for \"succeeded\"",
											"if (jsonData?.status) {",
											"  pm.test(",
											"    \"[POST]::/payments - Content check if value for 'status' matches 'succeeded'\",",
											"    function () {",
											"      pm.expect(jsonData.status).to.eql(\"succeeded\");",
											"    },",
											"  );",
											"}",
											"",
											"// Response body should have an error message",
											"if (jsonData?.error_message) {",
											"  pm.test(",
											"    \"[POST]::/payments - Content check if value for 'error_message' is not 'null'\",",
											"    function () {",
											"      pm.expect(jsonData.error_message).is.not.null;",
											"    },",
											"  );",
											"}",
											"",
											"// Response body should have \"connector_transaction_id\"",
											"pm.test(",
											"  \"[POST]::/payments - Content check if 'connector_transaction_id' exists\",",
											"  function () {",
											"    pm.expect(typeof jsonData.connector_transaction_id !== \"undefined\").to.be",
											"      .true;",
											"  },",
											");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"amount\": 6540,\n    \"currency\": \"USD\",\n    \"confirm\": true,\n    \"capture_method\": \"automatic\",\n    \"capture_on\": \"2022-09-10T10:11:12Z\",\n    \"amount_to_capture\": 6540,\n    \"customer_id\": \"StripeCustomer\",\n    \"email\": \"guest@example.com\",\n    \"name\": \"John Doe\",\n    \"phone\": \"999999999\",\n    \"phone_country_code\": \"+1\",\n    \"description\": \"Its my first payment request\",\n    \"authentication_type\": \"no_three_ds\",\n    \"return_url\": \"https://duck.com\",\n    \"payment_method\": \"card\",\n    \"payment_method_type\": \"credit\",\n    \"payment_method_data\": {\n        \"card\": {\n            \"card_number\": \"4242424242424242\",\n            \"card_exp_month\": \"10\",\n            \"card_exp_year\": \"25\",\n            \"card_holder_name\": \"joseph Doe\",\n            \"card_cvc\": \"123\"\n        }\n    },\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"joseph\",\n            \"last_name\": \"Doe\"\n        },\n        \"phone\": {\n            \"number\": \"8056594427\",\n            \"country_code\": \"+91\"\n        }\n    },\n    \"shipping\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"joseph\",\n            \"last_name\": \"Doe\"\n        },\n        \"phone\": {\n            \"number\": \"8056594427\",\n            \"country_code\": \"+91\"\n        }\n    },\n    \"statement_descriptor_name\": \"joseph\",\n    \"statement_descriptor_suffix\": \"JS\",\n    \"metadata\": {\n        \"udf1\": \"value1\",\n        \"new_customer\": \"true\",\n        \"login_date\": \"2019-09-10T10:11:12Z\"\n    },\n    \"routing\": {\n        \"type\": \"single\",\n        \"data\": \"cybersource\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/payments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"payments"
									]
								},
								"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
							},
							"response": []
						},
						{
							"name": "Payments - Retrieve",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate status 2xx",
											"pm.test(\"[GET]::/payments/:id - Status code is 2xx\", function () {",
											"  pm.response.to.be.success;",
											"});",
											"",
											"// Validate if response header has matching content-type",
											"pm.test(\"[GET]::/payments/:id - Content-Type is application/json\", function () {",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
											"    \"application/json\",",
											"  );",
											"});",
											"",
											"// Set response object as internal variable",
											"let jsonData = {};",
											"try {",
											"  jsonData = pm.response.json();",
											"} catch (e) {}",
											"",
											"// Validate if response has JSON Body",
											"pm.test(\"[GET]::/payments/:id - Response has JSON Body\", function () {",
											"  pm.response.to.have.jsonBody();",
											"});",
											"",
											"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
											"if (jsonData?.payment_id) {",
											"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
											"  console.log(",
											"    \"- use {{payment_id}} as collection variable for value\",",
											"    jsonData.payment_id,",
											"  );",
											"} else {",
											"  console.log(",
											"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
											"  );",
											"}",
											"",
											"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
											"if (jsonData?.mandate_id) {",
											"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
											"  console.log(",
											"    \"- use {{mandate_id}} as collection variable for value\",",
											"    jsonData.mandate_id,",
											"  );",
											"} else {",
											"  console.log(",
											"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
											"  );",
											"}",
											"",
											"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
											"if (jsonData?.client_secret) {",
											"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
											"  console.log(",
											"    \"- use {{client_secret}} as collection variable for value\",",
											"    jsonData.client_secret,",
											"  );",
											"} else {",
											"  console.log(",
											"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
											"  );",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/payments/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"payments",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{payment_id}}",
											"description": "(Required) unique payment id"
										}
									]
								},
								"description": "To retrieve the properties of a Payment. This may be used to get the status of a previously initiated payment or next action for an ongoing payment"
							},
							"response": []
						},
						{
							"name": "Refunds - Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate status 2xx",
											"pm.test(\"[POST]::/refunds - Status code is 2xx\", function () {",
											"  pm.response.to.be.success;",
											"});",
											"",
											"// Validate if response header has matching content-type",
											"pm.test(\"[POST]::/refunds - Content-Type is application/json\", function () {",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
											"    \"application/json\",",
											"  );",
											"});",
											"",
											"// Set response object as internal variable",
											"let jsonData = {};",
											"try {",
											"  jsonData = pm.response.json();",
											"} catch (e) {}",
											"",
											"// pm.collectionVariables - Set refund_id as variable for jsonData.payment_id",
											"if (jsonData?.refund_id) {",
											"  pm.collectionVariables.set(\"refund_id\", jsonData.refund_id);",
											"  console.log(",
											"    \"- use {{refund_id}} as collection variable for value\",",
											"    jsonData.refund_id,",
											"  );",
											"} else {",
											"  console.log(",
											"    \"INFO - Unable to assign variable {{refund_id}}, as jsonData.refund_id is undefined.\",",
											"  );",
											"}",
											"",
											"",
											"// Response body should have \"profile_id\" and not \"null\"",
											"pm.test(",
											"  \"[POST]::/payments - Content check if 'profile_id' exists and is not 'null'\",",
											"  function () {",
											"    pm.expect(typeof jsonData.profile_id !== \"undefined\").to.be.true;",
											"    pm.expect(jsonData.profile_id).is.not.null;",
											"  },",
											");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"payment_id\":\"{{payment_id}}\",\"amount\":600,\"reason\":\"Customer returned product\",\"refund_type\":\"instant\",\"metadata\":{\"udf1\":\"value1\",\"new_customer\":\"true\",\"login_date\":\"2019-09-10T10:11:12Z\"}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/refunds",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"refunds"
									]
								},
								"description": "To create a refund against an already processed payment"
							},
							"response": []
						},
						{
							"name": "Refunds - Retrieve",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate status 2xx",
											"pm.test(\"[GET]::/refunds/:id - Status code is 2xx\", function () {",
											"  pm.response.to.be.success;",
											"});",
											"",
											"// Validate if response header has matching content-type",
											"pm.test(\"[GET]::/refunds/:id - Content-Type is application/json\", function () {",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
											"    \"application/json\",",
											"  );",
											"});",
											"",
											"// Set response object as internal variable",
											"let jsonData = {};",
											"try {",
											"  jsonData = pm.response.json();",
											"} catch (e) {}",
											"",
											"// pm.collectionVariables - Set refund_id as variable for jsonData.payment_id",
											"if (jsonData?.refund_id) {",
											"  pm.collectionVariables.set(\"refund_id\", jsonData.refund_id);",
											"  console.log(",
											"    \"- use {{refund_id}} as collection variable for value\",",
											"    jsonData.refund_id,",
											"  );",
											"} else {",
											"  console.log(",
											"    \"INFO - Unable to assign variable {{refund_id}}, as jsonData.refund_id is undefined.\",",
											"  );",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/refunds/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"refunds",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{refund_id}}",
											"description": "(Required) unique refund id"
										}
									]
								},
								"description": "To retrieve the properties of a Refund. This may be used to get the status of a previously initiated payment or next action for an ongoing payment"
							},
							"response": []
						}
					]
				},
				{
					"name": "Happy Cases",
					"item": [
						{
							"name": "Scenario1-Create payment with confirm true",
							"item": [
								{
									"name": "Payments - Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments - Content check if value for 'status' matches 'succeeded'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"    },",
													"  );",
													"}",
													"",
													"// Response body should have \"connector_transaction_id\"",
													"pm.test(",
													"  \"[POST]::/payments - Content check if 'connector_transaction_id' exists\",",
													"  function () {",
													"    pm.expect(typeof jsonData.connector_transaction_id !== \"undefined\").to.be",
													"      .true;",
													"  },",
													");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 6540,\n    \"currency\": \"USD\",\n    \"confirm\": true,\n    \"business_country\": \"US\",\n    \"business_label\": \"default\",\n    \"capture_method\": \"automatic\",\n    \"capture_on\": \"2022-09-10T10:11:12Z\",\n    \"amount_to_capture\": 6540,\n    \"customer_id\": \"bernard123\",\n    \"email\": \"guest@example.com\",\n    \"name\": \"John Doe\",\n    \"phone\": \"999999999\",\n    \"phone_country_code\": \"+65\",\n    \"description\": \"Its my first payment request\",\n    \"authentication_type\": \"no_three_ds\",\n    \"return_url\": \"https://duck.com\",\n    \"setup_future_usage\": \"on_session\",\n    \"payment_method\": \"card\",\n    \"payment_method_type\": \"debit\",\n    \"payment_method_data\": {\n        \"card\": {\n            \"card_number\": \"4242424242424242\",\n            \"card_exp_month\": \"01\",\n            \"card_exp_year\": \"24\",\n            \"card_holder_name\": \"joseph Doe\",\n            \"card_cvc\": \"123\"\n        }\n    },\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"sundari\",\n            \"last_name\": \"sundari\"\n        }\n    },\n    \"shipping\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"sundari\",\n            \"last_name\": \"sundari\"\n        }\n    },\n    \"statement_descriptor_name\": \"joseph\",\n    \"statement_descriptor_suffix\": \"JS\",\n    \"metadata\": {\n        \"udf1\": \"value1\",\n        \"new_customer\": \"true\",\n        \"login_date\": \"2019-09-10T10:11:12Z\"\n    },\n    \"routing\": {\n        \"type\": \"single\",\n        \"data\": \"cybersource\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments"
											]
										},
										"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
									},
									"response": []
								},
								{
									"name": "Payments - Retrieve",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[GET]::/payments/:id - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[GET]::/payments/:id - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[GET]::/payments/:id - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"Succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments/:id - Content check if value for 'status' matches 'succeeded'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"    },",
													"  );",
													"}",
													"",
													"// Response body should have \"connector_transaction_id\"",
													"pm.test(",
													"  \"[POST]::/payments - Content check if 'connector_transaction_id' exists\",",
													"  function () {",
													"    pm.expect(typeof jsonData.connector_transaction_id !== \"undefined\").to.be",
													"      .true;",
													"  },",
													");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/payments/:id?force_sync=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												":id"
											],
											"query": [
												{
													"key": "force_sync",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{payment_id}}",
													"description": "(Required) unique payment id"
												}
											]
										},
										"description": "To retrieve the properties of a Payment. This may be used to get the status of a previously initiated payment or next action for an ongoing payment"
									},
									"response": []
								}
							]
						},
						{
							"name": "Scenario2-Create payment with confirm false",
							"item": [
								{
									"name": "Payments - Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"requires_payment_method\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments - Content check if value for 'status' matches 'requires_payment_method'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"requires_payment_method\");",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 6540,\n    \"currency\": \"USD\",\n    \"confirm\": false,\n    \"capture_method\": \"automatic\",\n    \"capture_on\": \"2022-09-10T10:11:12Z\",\n    \"amount_to_capture\": 6540,\n    \"customer_id\": \"StripeCustomer\",\n    \"email\": \"guest@example.com\",\n    \"name\": \"John Doe\",\n    \"phone\": \"999999999\",\n    \"phone_country_code\": \"+65\",\n    \"description\": \"Its my first payment request\",\n    \"authentication_type\": \"no_three_ds\",\n    \"return_url\": \"https://duck.com\",\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"likhin\",\n            \"last_name\": \"bopanna\"\n        }\n    },\n    \"shipping\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"likhin\",\n            \"last_name\": \"bopanna\"\n        }\n    },\n    \"statement_descriptor_name\": \"joseph\",\n    \"statement_descriptor_suffix\": \"JS\",\n    \"metadata\": {\n        \"udf1\": \"value1\",\n        \"new_customer\": \"true\",\n        \"login_date\": \"2019-09-10T10:11:12Z\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments"
											]
										},
										"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
									},
									"response": []
								},
								{
									"name": "Payments - Confirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[POST]::/payments/:id/confirm - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(",
													"  \"[POST]::/payments/:id/confirm - Content-Type is application/json\",",
													"  function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"      \"application/json\",",
													"    );",
													"  },",
													");",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[POST]::/payments/:id/confirm - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments/:id/confirm - Content check if value for 'status' matches 'succeeded'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{publishable_key}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "api-key",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"client_secret\": \"{{client_secret}}\",\n    \"payment_method\": \"card\",\n    \"payment_method_data\": {\n        \"card\": {\n            \"card_number\": \"4242424242424242\",\n            \"card_exp_month\": \"10\",\n            \"card_exp_year\": \"25\",\n            \"card_holder_name\": \"Joseph Doe\",\n            \"card_cvc\": \"123\"\n        }\n    },\n    \"browser_info\": {\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\",\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\n        \"language\": \"nl-NL\",\n        \"color_depth\": 24,\n        \"screen_height\": 723,\n        \"screen_width\": 1536,\n        \"time_zone\": 0,\n        \"java_enabled\": true,\n        \"java_script_enabled\": true,\n        \"ip_address\": \"125.0.0.1\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments/:id/confirm",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												":id",
												"confirm"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{payment_id}}",
													"description": "(Required) unique payment id"
												}
											]
										},
										"description": "This API is to confirm the payment request and forward payment to the payment processor. This API provides more granular control upon when the API is forwarded to the payment processor. Alternatively you can confirm the payment within the Payments-Create API"
									},
									"response": []
								},
								{
									"name": "Payments - Retrieve",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[GET]::/payments/:id - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[GET]::/payments/:id - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[GET]::/payments/:id - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments:id - Content check if value for 'status' matches 'succeeded'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/payments/:id?force_sync=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												":id"
											],
											"query": [
												{
													"key": "force_sync",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{payment_id}}",
													"description": "(Required) unique payment id"
												}
											]
										},
										"description": "To retrieve the properties of a Payment. This may be used to get the status of a previously initiated payment or next action for an ongoing payment"
									},
									"response": []
								}
							]
						},
						{
							"name": "Scenario2a-Create payment with confirm false card holder name null",
							"item": [
								{
									"name": "Payments - Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"requires_payment_method\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments - Content check if value for 'status' matches 'requires_payment_method'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"requires_payment_method\");",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 6540,\n    \"currency\": \"USD\",\n    \"confirm\": false,\n    \"capture_method\": \"automatic\",\n    \"capture_on\": \"2022-09-10T10:11:12Z\",\n    \"amount_to_capture\": 6540,\n    \"customer_id\": \"StripeCustomer\",\n    \"email\": \"guest@example.com\",\n    \"name\": \"John Doe\",\n    \"phone\": \"999999999\",\n    \"phone_country_code\": \"+65\",\n    \"description\": \"Its my first payment request\",\n    \"authentication_type\": \"no_three_ds\",\n    \"return_url\": \"https://duck.com\",\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"likhin\",\n            \"last_name\": \"bopanna\"\n        }\n    },\n    \"shipping\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"likhin\",\n            \"last_name\": \"bopanna\"\n        }\n    },\n    \"statement_descriptor_name\": \"joseph\",\n    \"statement_descriptor_suffix\": \"JS\",\n    \"metadata\": {\n        \"udf1\": \"value1\",\n        \"new_customer\": \"true\",\n        \"login_date\": \"2019-09-10T10:11:12Z\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments"
											]
										},
										"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
									},
									"response": []
								},
								{
									"name": "Payments - Confirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[POST]::/payments/:id/confirm - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(",
													"  \"[POST]::/payments/:id/confirm - Content-Type is application/json\",",
													"  function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"      \"application/json\",",
													"    );",
													"  },",
													");",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[POST]::/payments/:id/confirm - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments/:id/confirm - Content check if value for 'status' matches 'succeeded'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{publishable_key}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "api-key",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"payment_method\": \"card\",\n    \"payment_method_data\": {\n        \"card\": {\n            \"card_number\": \"4242424242424242\",\n            \"card_exp_month\": \"10\",\n            \"card_exp_year\": \"25\",\n            \"card_holder_name\": null,\n            \"card_cvc\": \"123\"\n        }\n    },\n    \"client_secret\": \"{{client_secret}}\",\n    \"browser_info\": {\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\",\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\n        \"language\": \"nl-NL\",\n        \"color_depth\": 24,\n        \"screen_height\": 723,\n        \"screen_width\": 1536,\n        \"time_zone\": 0,\n        \"java_enabled\": true,\n        \"java_script_enabled\": true,\n        \"ip_address\": \"125.0.0.1\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments/:id/confirm",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												":id",
												"confirm"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{payment_id}}",
													"description": "(Required) unique payment id"
												}
											]
										},
										"description": "This API is to confirm the payment request and forward payment to the payment processor. This API provides more granular control upon when the API is forwarded to the payment processor. Alternatively you can confirm the payment within the Payments-Create API"
									},
									"response": []
								},
								{
									"name": "Payments - Retrieve",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[GET]::/payments/:id - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[GET]::/payments/:id - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[GET]::/payments/:id - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments:id - Content check if value for 'status' matches 'succeeded'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/payments/:id?force_sync=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												":id"
											],
											"query": [
												{
													"key": "force_sync",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{payment_id}}",
													"description": "(Required) unique payment id"
												}
											]
										},
										"description": "To retrieve the properties of a Payment. This may be used to get the status of a previously initiated payment or next action for an ongoing payment"
									},
									"response": []
								}
							]
						},
						{
							"name": "Scenario2b-Create payment with confirm false card holder name empty",
							"item": [
								{
									"name": "Payments - Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"requires_payment_method\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments - Content check if value for 'status' matches 'requires_payment_method'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"requires_payment_method\");",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 6540,\n    \"currency\": \"USD\",\n    \"confirm\": false,\n    \"capture_method\": \"automatic\",\n    \"capture_on\": \"2022-09-10T10:11:12Z\",\n    \"amount_to_capture\": 6540,\n    \"customer_id\": \"StripeCustomer\",\n    \"email\": \"guest@example.com\",\n    \"name\": \"John Doe\",\n    \"phone\": \"999999999\",\n    \"phone_country_code\": \"+65\",\n    \"description\": \"Its my first payment request\",\n    \"authentication_type\": \"no_three_ds\",\n    \"return_url\": \"https://duck.com\",\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"likhin\",\n            \"last_name\": \"bopanna\"\n        }\n    },\n    \"shipping\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"likhin\",\n            \"last_name\": \"bopanna\"\n        }\n    },\n    \"statement_descriptor_name\": \"joseph\",\n    \"statement_descriptor_suffix\": \"JS\",\n    \"metadata\": {\n        \"udf1\": \"value1\",\n        \"new_customer\": \"true\",\n        \"login_date\": \"2019-09-10T10:11:12Z\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments"
											]
										},
										"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
									},
									"response": []
								},
								{
									"name": "Payments - Confirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(",
													"  \"[POST]::/payments/:id/confirm - Content-Type is application/json\",",
													"  function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"      \"application/json\",",
													"    );",
													"  },",
													");",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[POST]::/payments/:id/confirm - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments/:id/confirm - Content check if value for 'status' matches 'succeeded'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"    },",
													"  );",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{publishable_key}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "api-key",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"payment_method\": \"card\",\n    \"payment_method_data\": {\n        \"card\": {\n            \"card_number\": \"4242424242424242\",\n            \"card_exp_month\": \"10\",\n            \"card_exp_year\": \"25\",\n            \"card_holder_name\": \"\",\n            \"card_cvc\": \"123\"\n        }\n    },\n    \"client_secret\": \"{{client_secret}}\",\n    \"browser_info\": {\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\",\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\n        \"language\": \"nl-NL\",\n        \"color_depth\": 24,\n        \"screen_height\": 723,\n        \"screen_width\": 1536,\n        \"time_zone\": 0,\n        \"java_enabled\": true,\n        \"java_script_enabled\": true,\n        \"ip_address\": \"125.0.0.1\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments/:id/confirm",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												":id",
												"confirm"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{payment_id}}",
													"description": "(Required) unique payment id"
												}
											]
										},
										"description": "This API is to confirm the payment request and forward payment to the payment processor. This API provides more granular control upon when the API is forwarded to the payment processor. Alternatively you can confirm the payment within the Payments-Create API"
									},
									"response": []
								},
								{
									"name": "Payments - Retrieve",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[GET]::/payments/:id - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[GET]::/payments/:id - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[GET]::/payments/:id - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments:id - Content check if value for 'status' matches 'succeeded'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"    },",
													"  );",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/payments/:id?force_sync=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												":id"
											],
											"query": [
												{
													"key": "force_sync",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{payment_id}}",
													"description": "(Required) unique payment id"
												}
											]
										},
										"description": "To retrieve the properties of a Payment. This may be used to get the status of a previously initiated payment or next action for an ongoing payment"
									},
									"response": []
								}
							]
						},
						{
							"name": "Scenario3-Create payment without PMD",
							"item": [
								{
									"name": "Payments - Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"requires_payment_method\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments - Content check if value for 'status' matches 'requires_payment_method'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"requires_payment_method\");",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 6540,\n    \"currency\": \"USD\",\n    \"confirm\": false,\n    \"capture_method\": \"automatic\",\n    \"capture_on\": \"2022-09-10T10:11:12Z\",\n    \"amount_to_capture\": 6540,\n    \"customer_id\": \"StripeCustomer\",\n    \"email\": \"guest@example.com\",\n    \"name\": \"John Doe\",\n    \"phone\": \"999999999\",\n    \"phone_country_code\": \"+65\",\n    \"description\": \"Its my first payment request\",\n    \"authentication_type\": \"no_three_ds\",\n    \"return_url\": \"https://duck.com\",\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"likhin\",\n            \"last_name\": \"bopanna\"\n        }\n    },\n    \"shipping\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"likhin\",\n            \"last_name\": \"bopanna\"\n        }\n    },\n    \"statement_descriptor_name\": \"joseph\",\n    \"statement_descriptor_suffix\": \"JS\",\n    \"metadata\": {\n        \"udf1\": \"value1\",\n        \"new_customer\": \"true\",\n        \"login_date\": \"2019-09-10T10:11:12Z\"\n    },\n    \"routing\": {\n        \"type\": \"single\",\n        \"data\": \"cybersource\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments"
											]
										},
										"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
									},
									"response": []
								},
								{
									"name": "Payments - Confirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[POST]::/payments/:id/confirm - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(",
													"  \"[POST]::/payments/:id/confirm - Content-Type is application/json\",",
													"  function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"      \"application/json\",",
													"    );",
													"  },",
													");",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[POST]::/payments/:id/confirm - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"// Response body should have value \"succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments:id/confirm - Content check if value for 'status' matches 'succeeded'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{publishable_key}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "api-key",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"payment_method\":\"card\",\"payment_method_data\":{\"card\":{\"card_number\":\"4242424242424242\",\"card_exp_month\":\"10\",\"card_exp_year\":\"25\",\"card_holder_name\":\"joseph Doe\",\"card_cvc\":\"123\"}},\"client_secret\":\"{{client_secret}}\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments/:id/confirm",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												":id",
												"confirm"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{payment_id}}",
													"description": "(Required) unique payment id"
												}
											]
										},
										"description": "This API is to confirm the payment request and forward payment to the payment processor. This API provides more granular control upon when the API is forwarded to the payment processor. Alternatively you can confirm the payment within the Payments-Create API"
									},
									"response": []
								},
								{
									"name": "Payments - Retrieve",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[GET]::/payments/:id - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[GET]::/payments/:id - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[GET]::/payments/:id - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments:id - Content check if value for 'status' matches 'succeeded'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/payments/:id?force_sync=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												":id"
											],
											"query": [
												{
													"key": "force_sync",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{payment_id}}",
													"description": "(Required) unique payment id"
												}
											]
										},
										"description": "To retrieve the properties of a Payment. This may be used to get the status of a previously initiated payment or next action for an ongoing payment"
									},
									"response": []
								}
							]
						},
						{
							"name": "Scenario4-Create payment with Manual capture",
							"item": [
								{
									"name": "Payments - Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"requires_capture\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments - Content check if value for 'status' matches 'requires_capture'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"requires_capture\");",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 6540,\n    \"currency\": \"USD\",\n    \"confirm\": true,\n    \"capture_method\": \"manual\",\n    \"capture_on\": \"2022-09-10T10:11:12Z\",\n    \"amount_to_capture\": 6540,\n    \"customer_id\": \"StripeCustomer\",\n    \"email\": \"guest@example.com\",\n    \"name\": \"John Doe\",\n    \"phone\": \"999999999\",\n    \"phone_country_code\": \"+65\",\n    \"description\": \"Its my first payment request\",\n    \"authentication_type\": \"no_three_ds\",\n    \"return_url\": \"https://duck.com\",\n    \"payment_method\": \"card\",\n    \"payment_method_data\": {\n        \"card\": {\n            \"card_number\": \"4242424242424242\",\n            \"card_exp_month\": \"10\",\n            \"card_exp_year\": \"25\",\n            \"card_holder_name\": \"joseph Doe\",\n            \"card_cvc\": \"123\"\n        }\n    },\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"likhin\",\n            \"last_name\": \"bopanna\"\n        }\n    },\n    \"shipping\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"likhin\",\n            \"last_name\": \"bopanna\"\n        }\n    },\n    \"statement_descriptor_name\": \"joseph\",\n    \"statement_descriptor_suffix\": \"JS\",\n    \"metadata\": {\n        \"udf1\": \"value1\",\n        \"new_customer\": \"true\",\n        \"login_date\": \"2019-09-10T10:11:12Z\"\n    },\n    \"routing\": {\n        \"type\": \"single\",\n        \"data\": \"cybersource\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments"
											]
										},
										"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
									},
									"response": []
								},
								{
									"name": "Payments - Capture",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[POST]::/payments/:id/capture - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(",
													"  \"[POST]::/payments/:id/capture - Content-Type is application/json\",",
													"  function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"      \"application/json\",",
													"    );",
													"  },",
													");",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[POST]::/payments/:id/capture - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]:://payments/:id/capture - Content check if value for 'status' matches 'succeeded'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"    },",
													"  );",
													"}",
													"",
													"// Response body should have value \"6540\" for \"amount\"",
													"if (jsonData?.amount) {",
													"  pm.test(",
													"    \"[post]:://payments/:id/capture - Content check if value for 'amount' matches '6540'\",",
													"    function () {",
													"      pm.expect(jsonData.amount).to.eql(6540);",
													"    },",
													"  );",
													"}",
													"",
													"// Response body should have value \"6000\" for \"amount_received\"",
													"if (jsonData?.amount_received) {",
													"  pm.test(",
													"    \"[POST]::/payments:id/capture - Content check if value for 'amount_received' matches '6540'\",",
													"    function () {",
													"      pm.expect(jsonData.amount_received).to.eql(6540);",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"amount_to_capture\":6540,\"statement_descriptor_name\":\"Joseph\",\"statement_descriptor_suffix\":\"JS\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments/:id/capture",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												":id",
												"capture"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{payment_id}}",
													"description": "(Required) unique payment id"
												}
											]
										},
										"description": "To capture the funds for an uncaptured payment"
									},
									"response": []
								},
								{
									"name": "Payments - Retrieve",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[GET]::/payments/:id - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[GET]::/payments/:id - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[GET]::/payments/:id - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments - Content check if value for 'status' matches 'succeeded'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/payments/:id?force_sync=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												":id"
											],
											"query": [
												{
													"key": "force_sync",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{payment_id}}",
													"description": "(Required) unique payment id"
												}
											]
										},
										"description": "To retrieve the properties of a Payment. This may be used to get the status of a previously initiated payment or next action for an ongoing payment"
									},
									"response": []
								}
							]
						},
						{
							"name": "Scenario4a-Create payment with partial capture",
							"item": [
								{
									"name": "Payments - Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"requires_capture\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments - Content check if value for 'status' matches 'requires_capture'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"requires_capture\");",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 6540,\n    \"currency\": \"USD\",\n    \"confirm\": true,\n    \"capture_method\": \"manual\",\n    \"capture_on\": \"2022-09-10T10:11:12Z\",\n    \"amount_to_capture\": 6540,\n    \"customer_id\": \"StripeCustomer\",\n    \"email\": \"guest@example.com\",\n    \"name\": \"John Doe\",\n    \"phone\": \"999999999\",\n    \"phone_country_code\": \"+65\",\n    \"description\": \"Its my first payment request\",\n    \"authentication_type\": \"no_three_ds\",\n    \"return_url\": \"https://duck.com\",\n    \"payment_method\": \"card\",\n    \"payment_method_data\": {\n        \"card\": {\n            \"card_number\": \"4242424242424242\",\n            \"card_exp_month\": \"10\",\n            \"card_exp_year\": \"25\",\n            \"card_holder_name\": \"joseph Doe\",\n            \"card_cvc\": \"123\"\n        }\n    },\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"likhin\",\n            \"last_name\": \"bopanna\"\n        }\n    },\n    \"shipping\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"likhin\",\n            \"last_name\": \"bopanna\"\n        }\n    },\n    \"statement_descriptor_name\": \"joseph\",\n    \"statement_descriptor_suffix\": \"JS\",\n    \"metadata\": {\n        \"udf1\": \"value1\",\n        \"new_customer\": \"true\",\n        \"login_date\": \"2019-09-10T10:11:12Z\"\n    },\n    \"routing\": {\n        \"type\": \"single\",\n        \"data\": \"cybersource\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments"
											]
										},
										"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
									},
									"response": []
								},
								{
									"name": "Payments - Capture",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[POST]::/payments/:id/capture - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(",
													"  \"[POST]::/payments/:id/capture - Content-Type is application/json\",",
													"  function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"      \"application/json\",",
													"    );",
													"  },",
													");",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[POST]::/payments/:id/capture - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]:://payments/:id/capture - Content check if value for 'status' matches 'partially_captured'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"partially_captured\");",
													"    },",
													"  );",
													"}",
													"",
													"// Response body should have value \"6540\" for \"amount\"",
													"if (jsonData?.amount) {",
													"  pm.test(",
													"    \"[post]:://payments/:id/capture - Content check if value for 'amount' matches '6540'\",",
													"    function () {",
													"      pm.expect(jsonData.amount).to.eql(6540);",
													"    },",
													"  );",
													"}",
													"",
													"// Response body should have value \"6000\" for \"amount_received\"",
													"if (jsonData?.amount_received) {",
													"  pm.test(",
													"    \"[POST]::/payments:id/capture - Content check if value for 'amount_received' matches '6000'\",",
													"    function () {",
													"      pm.expect(jsonData.amount_received).to.eql(6000);",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"amount_to_capture\":6000,\"statement_descriptor_name\":\"Joseph\",\"statement_descriptor_suffix\":\"JS\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments/:id/capture",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												":id",
												"capture"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{payment_id}}",
													"description": "(Required) unique payment id"
												}
											]
										},
										"description": "To capture the funds for an uncaptured payment"
									},
									"response": []
								},
								{
									"name": "Payments - Retrieve",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[GET]::/payments/:id - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[GET]::/payments/:id - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[GET]::/payments/:id - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments - Content check if value for 'status' matches 'partially_captured'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"partially_captured\");",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/payments/:id?force_sync=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												":id"
											],
											"query": [
												{
													"key": "force_sync",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{payment_id}}",
													"description": "(Required) unique payment id"
												}
											]
										},
										"description": "To retrieve the properties of a Payment. This may be used to get the status of a previously initiated payment or next action for an ongoing payment"
									},
									"response": []
								}
							]
						},
						{
							"name": "Scenario5-Void the payment",
							"item": [
								{
									"name": "Payments - Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"requires_capture\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments - Content check if value for 'status' matches 'requires_capture'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"requires_capture\");",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 6540,\n    \"currency\": \"USD\",\n    \"confirm\": true,\n    \"capture_method\": \"manual\",\n    \"capture_on\": \"2022-09-10T10:11:12Z\",\n    \"amount_to_capture\": 6540,\n    \"customer_id\": \"StripeCustomer\",\n    \"email\": \"guest@example.com\",\n    \"name\": \"John Doe\",\n    \"phone\": \"999999999\",\n    \"phone_country_code\": \"+65\",\n    \"description\": \"Its my first payment request\",\n    \"authentication_type\": \"no_three_ds\",\n    \"return_url\": \"https://duck.com\",\n    \"payment_method\": \"card\",\n    \"payment_method_data\": {\n        \"card\": {\n            \"card_number\": \"4242424242424242\",\n            \"card_exp_month\": \"10\",\n            \"card_exp_year\": \"25\",\n            \"card_holder_name\": \"joseph Doe\",\n            \"card_cvc\": \"123\"\n        }\n    },\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"likhin\",\n            \"last_name\":\"bopanna\"\n        }\n    },\n    \"shipping\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"likhin\",\n            \"last_name\":\"bopanna\"\n        }\n    },\n    \"statement_descriptor_name\": \"joseph\",\n    \"statement_descriptor_suffix\": \"JS\",\n    \"metadata\": {\n        \"udf1\": \"value1\",\n        \"new_customer\": \"true\",\n        \"login_date\": \"2019-09-10T10:11:12Z\"\n    },\n    \"routing\": {\n        \"type\": \"single\",\n        \"data\": \"cybersource\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments"
											]
										},
										"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
									},
									"response": []
								},
								{
									"name": "Payments - Cancel",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[POST]::/payments/:id/cancel - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(",
													"  \"[POST]::/payments/:id/cancel - Content-Type is application/json\",",
													"  function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"      \"application/json\",",
													"    );",
													"  },",
													");",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[POST]::/payments/:id/cancel - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"cancelled\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments/:id/cancel - Content check if value for 'status' matches 'cancelled'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"cancelled\");",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"cancellation_reason\":\"requested_by_customer\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments/:id/cancel",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												":id",
												"cancel"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{payment_id}}",
													"description": "(Required) unique payment id"
												}
											]
										},
										"description": "A Payment could can be cancelled when it is in one of these statuses: requires_payment_method, requires_capture, requires_confirmation, requires_customer_action"
									},
									"response": []
								},
								{
									"name": "Payments - Retrieve",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[GET]::/payments/:id - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[GET]::/payments/:id - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[GET]::/payments/:id - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"cancelled\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments/:id - Content check if value for 'status' matches 'cancelled'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"cancelled\");",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/payments/:id?force_sync=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												":id"
											],
											"query": [
												{
													"key": "force_sync",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{payment_id}}",
													"description": "(Required) unique payment id"
												}
											]
										},
										"description": "To retrieve the properties of a Payment. This may be used to get the status of a previously initiated payment or next action for an ongoing payment"
									},
									"response": []
								}
							]
						},
						{
							"name": "Scenario6-Refund full payment",
							"item": [
								{
									"name": "Payments - Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments - Content check if value for 'status' matches 'succeeded'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 6540,\n    \"currency\": \"USD\",\n    \"confirm\": true,\n    \"capture_method\": \"automatic\",\n    \"capture_on\": \"2022-09-10T10:11:12Z\",\n    \"amount_to_capture\": 6540,\n    \"customer_id\": \"StripeCustomer\",\n    \"email\": \"guest@example.com\",\n    \"name\": \"John Doe\",\n    \"phone\": \"999999999\",\n    \"phone_country_code\": \"+65\",\n    \"description\": \"Its my first payment request\",\n    \"authentication_type\": \"no_three_ds\",\n    \"return_url\": \"https://duck.com\",\n    \"payment_method\": \"card\",\n    \"payment_method_data\": {\n        \"card\": {\n            \"card_number\": \"4242424242424242\",\n            \"card_exp_month\": \"10\",\n            \"card_exp_year\": \"25\",\n            \"card_holder_name\": \"joseph Doe\",\n            \"card_cvc\": \"123\"\n        }\n    },\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"likhin\",\n            \"last_name\":\"bopanna\"\n        }\n    },\n    \"shipping\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"likhin\",\n            \"last_name\":\"bopanna\"        }\n    },\n    \"statement_descriptor_name\": \"joseph\",\n    \"statement_descriptor_suffix\": \"JS\",\n    \"metadata\": {\n        \"udf1\": \"value1\",\n        \"new_customer\": \"true\",\n        \"login_date\": \"2019-09-10T10:11:12Z\"\n    },\n    \"routing\": {\n        \"type\": \"single\",\n        \"data\": \"cybersource\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments"
											]
										},
										"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
									},
									"response": []
								},
								{
									"name": "Payments - Retrieve",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[GET]::/payments/:id - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[GET]::/payments/:id - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[GET]::/payments/:id - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"Succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments/:id - Content check if value for 'status' matches 'succeeded'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/payments/:id?force_sync=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												":id"
											],
											"query": [
												{
													"key": "force_sync",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{payment_id}}",
													"description": "(Required) unique payment id"
												}
											]
										},
										"description": "To retrieve the properties of a Payment. This may be used to get the status of a previously initiated payment or next action for an ongoing payment"
									},
									"response": []
								},
								{
									"name": "Refunds - Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[POST]::/refunds - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/refunds - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set refund_id as variable for jsonData.payment_id",
													"if (jsonData?.refund_id) {",
													"  pm.collectionVariables.set(\"refund_id\", jsonData.refund_id);",
													"  console.log(",
													"    \"- use {{refund_id}} as collection variable for value\",",
													"    jsonData.refund_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{refund_id}}, as jsonData.refund_id is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"pending\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/refunds - Content check if value for 'status' matches 'pending'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"pending\");",
													"    },",
													"  );",
													"}",
													"",
													"// Response body should have value \"6540\" for \"amount\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/refunds - Content check if value for 'amount' matches '6540'\",",
													"    function () {",
													"      pm.expect(jsonData.amount).to.eql(6540);",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"payment_id\":\"{{payment_id}}\",\"amount\":6540,\"reason\":\"Customer returned product\",\"refund_type\":\"instant\",\"metadata\":{\"udf1\":\"value1\",\"new_customer\":\"true\",\"login_date\":\"2019-09-10T10:11:12Z\"}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/refunds",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"refunds"
											]
										},
										"description": "To create a refund against an already processed payment"
									},
									"response": []
								},
								{
									"name": "Refunds - Retrieve",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[GET]::/refunds/:id - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[GET]::/refunds/:id - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set refund_id as variable for jsonData.payment_id",
													"if (jsonData?.refund_id) {",
													"  pm.collectionVariables.set(\"refund_id\", jsonData.refund_id);",
													"  console.log(",
													"    \"- use {{refund_id}} as collection variable for value\",",
													"    jsonData.refund_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{refund_id}}, as jsonData.refund_id is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"pending\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/refunds - Content check if value for 'status' matches 'pending'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"pending\");",
													"    },",
													"  );",
													"}",
													"",
													"// Response body should have value \"6540\" for \"amount\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/refunds - Content check if value for 'amount' matches '6540'\",",
													"    function () {",
													"      pm.expect(jsonData.amount).to.eql(6540);",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/refunds/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"refunds",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{refund_id}}",
													"description": "(Required) unique refund id"
												}
											]
										},
										"description": "To retrieve the properties of a Refund. This may be used to get the status of a previously initiated payment or next action for an ongoing payment"
									},
									"response": []
								}
							]
						},
						{
							"name": "Scenario6a-Partial refund",
							"item": [
								{
									"name": "Payments - Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments - Content check if value for 'status' matches 'succeeded'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 6540,\n    \"currency\": \"USD\",\n    \"confirm\": true,\n    \"capture_method\": \"automatic\",\n    \"capture_on\": \"2022-09-10T10:11:12Z\",\n    \"amount_to_capture\": 6540,\n    \"customer_id\": \"StripeCustomer\",\n    \"email\": \"guest@example.com\",\n    \"name\": \"John Doe\",\n    \"phone\": \"999999999\",\n    \"phone_country_code\": \"+65\",\n    \"description\": \"Its my first payment request\",\n    \"authentication_type\": \"no_three_ds\",\n    \"return_url\": \"https://duck.com\",\n    \"payment_method\": \"card\",\n    \"payment_method_data\": {\n        \"card\": {\n            \"card_number\": \"4242424242424242\",\n            \"card_exp_month\": \"10\",\n            \"card_exp_year\": \"25\",\n            \"card_holder_name\": \"joseph Doe\",\n            \"card_cvc\": \"123\"\n        }\n    },\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"likhin\",\n            \"last_name\":\"bopanna\"\n        }\n    },\n    \"shipping\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"likhin\",\n             \"last_name\":\"bopanna\"\n        }\n    },\n    \"statement_descriptor_name\": \"joseph\",\n    \"statement_descriptor_suffix\": \"JS\",\n    \"metadata\": {\n        \"udf1\": \"value1\",\n        \"new_customer\": \"true\",\n        \"login_date\": \"2019-09-10T10:11:12Z\"\n    },\n    \"routing\": {\n        \"type\": \"single\",\n        \"data\": \"cybersource\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments"
											]
										},
										"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
									},
									"response": []
								},
								{
									"name": "Payments - Retrieve",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[GET]::/payments/:id - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[GET]::/payments/:id - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[GET]::/payments/:id - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"Succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments/:id - Content check if value for 'status' matches 'succeeded'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/payments/:id?force_sync=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												":id"
											],
											"query": [
												{
													"key": "force_sync",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{payment_id}}",
													"description": "(Required) unique payment id"
												}
											]
										},
										"description": "To retrieve the properties of a Payment. This may be used to get the status of a previously initiated payment or next action for an ongoing payment"
									},
									"response": []
								},
								{
									"name": "Refunds - Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[POST]::/refunds - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/refunds - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set refund_id as variable for jsonData.payment_id",
													"if (jsonData?.refund_id) {",
													"  pm.collectionVariables.set(\"refund_id\", jsonData.refund_id);",
													"  console.log(",
													"    \"- use {{refund_id}} as collection variable for value\",",
													"    jsonData.refund_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{refund_id}}, as jsonData.refund_id is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"pending\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/refunds - Content check if value for 'status' matches 'pending'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"pending\");",
													"    },",
													"  );",
													"}",
													"",
													"// Response body should have value \"540\" for \"amount\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/refunds - Content check if value for 'amount' matches '540'\",",
													"    function () {",
													"      pm.expect(jsonData.amount).to.eql(540);",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"payment_id\":\"{{payment_id}}\",\"amount\":540,\"reason\":\"Customer returned product\",\"refund_type\":\"instant\",\"metadata\":{\"udf1\":\"value1\",\"new_customer\":\"true\",\"login_date\":\"2019-09-10T10:11:12Z\"}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/refunds",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"refunds"
											]
										},
										"description": "To create a refund against an already processed payment"
									},
									"response": []
								},
								{
									"name": "Refunds - Retrieve",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[GET]::/refunds/:id - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[GET]::/refunds/:id - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set refund_id as variable for jsonData.payment_id",
													"if (jsonData?.refund_id) {",
													"  pm.collectionVariables.set(\"refund_id\", jsonData.refund_id);",
													"  console.log(",
													"    \"- use {{refund_id}} as collection variable for value\",",
													"    jsonData.refund_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{refund_id}}, as jsonData.refund_id is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"pending\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/refunds - Content check if value for 'status' matches 'pending'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"pending\");",
													"    },",
													"  );",
													"}",
													"",
													"// Response body should have value \"6540\" for \"amount\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/refunds - Content check if value for 'amount' matches '540'\",",
													"    function () {",
													"      pm.expect(jsonData.amount).to.eql(540);",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/refunds/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"refunds",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{refund_id}}",
													"description": "(Required) unique refund id"
												}
											]
										},
										"description": "To retrieve the properties of a Refund. This may be used to get the status of a previously initiated payment or next action for an ongoing payment"
									},
									"response": []
								},
								{
									"name": "Refunds - Create-copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[POST]::/refunds - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/refunds - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set refund_id as variable for jsonData.payment_id",
													"if (jsonData?.refund_id) {",
													"  pm.collectionVariables.set(\"refund_id\", jsonData.refund_id);",
													"  console.log(",
													"    \"- use {{refund_id}} as collection variable for value\",",
													"    jsonData.refund_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{refund_id}}, as jsonData.refund_id is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"pending\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/refunds - Content check if value for 'status' matches 'pending'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"pending\");",
													"    },",
													"  );",
													"}",
													"",
													"// Response body should have value \"1000\" for \"amount\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/refunds - Content check if value for 'amount' matches '1000'\",",
													"    function () {",
													"      pm.expect(jsonData.amount).to.eql(1000);",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"payment_id\":\"{{payment_id}}\",\"amount\":1000,\"reason\":\"Customer returned product\",\"refund_type\":\"instant\",\"metadata\":{\"udf1\":\"value1\",\"new_customer\":\"true\",\"login_date\":\"2019-09-10T10:11:12Z\"}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/refunds",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"refunds"
											]
										},
										"description": "To create a refund against an already processed payment"
									},
									"response": []
								},
								{
									"name": "Refunds - Retrieve-copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[GET]::/refunds/:id - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[GET]::/refunds/:id - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set refund_id as variable for jsonData.payment_id",
													"if (jsonData?.refund_id) {",
													"  pm.collectionVariables.set(\"refund_id\", jsonData.refund_id);",
													"  console.log(",
													"    \"- use {{refund_id}} as collection variable for value\",",
													"    jsonData.refund_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{refund_id}}, as jsonData.refund_id is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"pending\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/refunds - Content check if value for 'status' matches 'pending'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"pending\");",
													"    },",
													"  );",
													"}",
													"",
													"// Response body should have value \"6540\" for \"amount\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/refunds - Content check if value for 'amount' matches '1000'\",",
													"    function () {",
													"      pm.expect(jsonData.amount).to.eql(1000);",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/refunds/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"refunds",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{refund_id}}",
													"description": "(Required) unique refund id"
												}
											]
										},
										"description": "To retrieve the properties of a Refund. This may be used to get the status of a previously initiated payment or next action for an ongoing payment"
									},
									"response": []
								},
								{
									"name": "Payments - Retrieve-copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[GET]::/payments/:id - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[GET]::/payments/:id - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[GET]::/payments/:id - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"Succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments/:id - Content check if value for 'status' matches 'succeeded'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"    },",
													"  );",
													"}",
													"",
													"// Response body should have \"refunds\"",
													"pm.test(\"[POST]::/payments - Content check if 'refunds' exists\", function () {",
													"  pm.expect(typeof jsonData.refunds !== \"undefined\").to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/payments/:id?force_sync=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												":id"
											],
											"query": [
												{
													"key": "force_sync",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{payment_id}}",
													"description": "(Required) unique payment id"
												}
											]
										},
										"description": "To retrieve the properties of a Payment. This may be used to get the status of a previously initiated payment or next action for an ongoing payment"
									},
									"response": []
								}
							]
						},
						{
							"name": "Scenario7-Create a mandate and recurring payment",
							"item": [
								{
									"name": "Payments - Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments - Content check if value for 'status' matches 'succeeded'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"    },",
													"  );",
													"}",
													"",
													"// Response body should have value \"succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments - Content check if value for 'status' matches 'succeeded'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"    },",
													"  );",
													"}",
													"",
													"// Response body should have \"mandate_id\"",
													"pm.test(",
													"  \"[POST]::/payments - Content check if 'mandate_id' exists\",",
													"  function () {",
													"    pm.expect(typeof jsonData.mandate_id !== \"undefined\").to.be.true;",
													"  },",
													");",
													"",
													"// Response body should have \"mandate_data\"",
													"pm.test(",
													"  \"[POST]::/payments - Content check if 'mandate_data' exists\",",
													"  function () {",
													"    pm.expect(typeof jsonData.mandate_data !== \"undefined\").to.be.true;",
													"  },",
													");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 6540,\n    \"currency\": \"USD\",\n    \"confirm\": true,\n    \"capture_method\": \"automatic\",\n    \"capture_on\": \"2022-09-10T10:11:12Z\",\n    \"amount_to_capture\": 6540,\n    \"customer_id\": \"StripeCustomer\",\n    \"email\": \"guest@example.com\",\n    \"name\": \"John Doe\",\n    \"phone\": \"999999999\",\n    \"phone_country_code\": \"+65\",\n    \"description\": \"Its my first payment request\",\n    \"authentication_type\": \"no_three_ds\",\n    \"return_url\": \"https://duck.com\",\n    \"payment_method\": \"card\",\n    \"payment_method_data\": {\n        \"card\": {\n            \"card_number\": \"4242424242424242\",\n            \"card_exp_month\": \"10\",\n            \"card_exp_year\": \"25\",\n            \"card_holder_name\": \"joseph Doe\",\n            \"card_cvc\": \"123\"\n        }\n    },\n    \"setup_future_usage\": \"off_session\",\n    \"mandate_data\": {\n        \"customer_acceptance\": {\n            \"acceptance_type\": \"offline\",\n            \"accepted_at\": \"1963-05-03T04:07:52.723Z\",\n            \"online\": {\n                \"ip_address\": \"127.0.0.1\",\n                \"user_agent\": \"amet irure esse\"\n            }\n        },\n        \"mandate_type\": {\n            \"single_use\": {\n                \"amount\": 7000,\n                \"currency\": \"USD\"\n            }\n        }\n    },\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"likhin\",\n            \"last_name\": \"bopanna\"\n        }\n    },\n    \"shipping\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"likhin\",\n            \"last_name\": \"bopanna\"\n        }\n    },\n    \"statement_descriptor_name\": \"joseph\",\n    \"statement_descriptor_suffix\": \"JS\",\n    \"metadata\": {\n        \"udf1\": \"value1\",\n        \"new_customer\": \"true\",\n        \"login_date\": \"2019-09-10T10:11:12Z\"\n    },\n    \"routing\": {\n        \"type\": \"single\",\n        \"data\": \"cybersource\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments"
											]
										},
										"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
									},
									"response": []
								},
								{
									"name": "Payments - Retrieve",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[GET]::/payments/:id - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[GET]::/payments/:id - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[GET]::/payments/:id - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"Succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments/:id - Content check if value for 'status' matches 'succeeded'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"    },",
													"  );",
													"}",
													"",
													"// Response body should have \"mandate_id\"",
													"pm.test(",
													"  \"[POST]::/payments - Content check if 'mandate_id' exists\",",
													"  function () {",
													"    pm.expect(typeof jsonData.mandate_id !== \"undefined\").to.be.true;",
													"  },",
													");",
													"",
													"// Response body should have \"mandate_data\"",
													"pm.test(",
													"  \"[POST]::/payments - Content check if 'mandate_data' exists\",",
													"  function () {",
													"    pm.expect(typeof jsonData.mandate_data !== \"undefined\").to.be.true;",
													"  },",
													");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/payments/:id?force_sync=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												":id"
											],
											"query": [
												{
													"key": "force_sync",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{payment_id}}",
													"description": "(Required) unique payment id"
												}
											]
										},
										"description": "To retrieve the properties of a Payment. This may be used to get the status of a previously initiated payment or next action for an ongoing payment"
									},
									"response": []
								},
								{
									"name": "Recurring Payments - Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments - Content check if value for 'status' matches 'succeeded'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"    },",
													"  );",
													"}",
													"",
													"// Response body should have \"mandate_id\"",
													"pm.test(",
													"  \"[POST]::/payments - Content check if 'mandate_id' exists\",",
													"  function () {",
													"    pm.expect(typeof jsonData.mandate_id !== \"undefined\").to.be.true;",
													"  },",
													");",
													"",
													"// Response body should have \"mandate_data\"",
													"pm.test(",
													"  \"[POST]::/payments - Content check if 'mandate_data' exists\",",
													"  function () {",
													"    pm.expect(typeof jsonData.mandate_data !== \"undefined\").to.be.true;",
													"  },",
													");",
													"",
													"// Response body should have \"payment_method_data\"",
													"pm.test(",
													"  \"[POST]::/payments - Content check if 'payment_method_data' exists\",",
													"  function () {",
													"    pm.expect(typeof jsonData.payment_method_data !== \"undefined\").to.be.true;",
													"  },",
													");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 6540,\n    \"currency\": \"USD\",\n    \"confirm\": true,\n    \"capture_method\": \"automatic\",\n    \"capture_on\": \"2022-09-10T10:11:12Z\",\n    \"amount_to_capture\": 6540,\n    \"customer_id\": \"StripeCustomer\",\n    \"email\": \"guest@example.com\",\n    \"name\": \"John Doe\",\n    \"phone\": \"999999999\",\n    \"phone_country_code\": \"+65\",\n    \"description\": \"Its my first payment request\",\n    \"authentication_type\": \"no_three_ds\",\n    \"return_url\": \"https://duck.com\",\n    \"mandate_id\": \"{{mandate_id}}\",\n    \"off_session\": true,\n    \"shipping\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"likhin\",\n            \"last_name\": \"bopanna\"\n        }\n    },\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"likhin\",\n            \"last_name\": \"bopanna\"\n        }\n    },\n    \"statement_descriptor_name\": \"joseph\",\n    \"statement_descriptor_suffix\": \"JS\",\n    \"metadata\": {\n        \"udf1\": \"value1\",\n        \"new_customer\": \"true\",\n        \"login_date\": \"2019-09-10T10:11:12Z\"\n    },\n    \"routing\": {\n        \"type\": \"single\",\n        \"data\": \"stripe\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments"
											]
										},
										"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
									},
									"response": []
								},
								{
									"name": "Payments - Retrieve-copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[GET]::/payments/:id - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[GET]::/payments/:id - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[GET]::/payments/:id - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"Succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments/:id - Content check if value for 'status' matches 'succeeded'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"    },",
													"  );",
													"}",
													"",
													"// Response body should have \"mandate_id\"",
													"pm.test(",
													"  \"[POST]::/payments - Content check if 'mandate_id' exists\",",
													"  function () {",
													"    pm.expect(typeof jsonData.mandate_id !== \"undefined\").to.be.true;",
													"  },",
													");",
													"",
													"// Response body should have \"mandate_data\"",
													"pm.test(",
													"  \"[POST]::/payments - Content check if 'mandate_data' exists\",",
													"  function () {",
													"    pm.expect(typeof jsonData.mandate_data !== \"undefined\").to.be.true;",
													"  },",
													");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/payments/:id?force_sync=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												":id"
											],
											"query": [
												{
													"key": "force_sync",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{payment_id}}",
													"description": "(Required) unique payment id"
												}
											]
										},
										"description": "To retrieve the properties of a Payment. This may be used to get the status of a previously initiated payment or next action for an ongoing payment"
									},
									"response": []
								}
							]
						},
						{
							"name": "Scenario8-Refund recurring payment",
							"item": [
								{
									"name": "Payments - Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments - Content check if value for 'status' matches 'succeeded'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"    },",
													"  );",
													"}",
													"",
													"// Response body should have value \"succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments - Content check if value for 'status' matches 'succeeded'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"    },",
													"  );",
													"}",
													"",
													"// Response body should have \"mandate_id\"",
													"pm.test(",
													"  \"[POST]::/payments - Content check if 'mandate_id' exists\",",
													"  function () {",
													"    pm.expect(typeof jsonData.mandate_id !== \"undefined\").to.be.true;",
													"  },",
													");",
													"",
													"// Response body should have \"mandate_data\"",
													"pm.test(",
													"  \"[POST]::/payments - Content check if 'mandate_data' exists\",",
													"  function () {",
													"    pm.expect(typeof jsonData.mandate_data !== \"undefined\").to.be.true;",
													"  },",
													");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 6540,\n    \"currency\": \"USD\",\n    \"confirm\": true,\n    \"capture_method\": \"automatic\",\n    \"capture_on\": \"2022-09-10T10:11:12Z\",\n    \"amount_to_capture\": 6540,\n    \"customer_id\": \"StripeCustomer\",\n    \"email\": \"guest@example.com\",\n    \"name\": \"John Doe\",\n    \"phone\": \"999999999\",\n    \"phone_country_code\": \"+65\",\n    \"description\": \"Its my first payment request\",\n    \"authentication_type\": \"no_three_ds\",\n    \"return_url\": \"https://duck.com\",\n    \"payment_method\": \"card\",\n    \"payment_method_data\": {\n        \"card\": {\n            \"card_number\": \"4242424242424242\",\n            \"card_exp_month\": \"10\",\n            \"card_exp_year\": \"25\",\n            \"card_holder_name\": \"joseph Doe\",\n            \"card_cvc\": \"123\"\n        }\n    },\n    \"setup_future_usage\": \"off_session\",\n    \"mandate_data\": {\n        \"customer_acceptance\": {\n            \"acceptance_type\": \"offline\",\n            \"accepted_at\": \"1963-05-03T04:07:52.723Z\",\n            \"online\": {\n                \"ip_address\": \"127.0.0.1\",\n                \"user_agent\": \"amet irure esse\"\n            }\n        },\n        \"mandate_type\": {\n            \"single_use\": {\n                \"amount\": 7000,\n                \"currency\": \"USD\"\n            }\n        }\n    },\n    \"shipping\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"likhin\",\n            \"last_name\":\"bopanna\"\n        }\n    },\n     \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"likhin\",\n            \"last_name\":\"bopanna\"\n        }\n    },\n    \"statement_descriptor_name\": \"joseph\",\n    \"statement_descriptor_suffix\": \"JS\",\n    \"metadata\": {\n        \"udf1\": \"value1\",\n        \"new_customer\": \"true\",\n        \"login_date\": \"2019-09-10T10:11:12Z\"\n    },\n    \"routing\": {\n        \"type\": \"single\",\n        \"data\": \"cybersource\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments"
											]
										},
										"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
									},
									"response": []
								},
								{
									"name": "Payments - Retrieve",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[GET]::/payments/:id - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[GET]::/payments/:id - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[GET]::/payments/:id - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"Succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments/:id - Content check if value for 'status' matches 'succeeded'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"    },",
													"  );",
													"}",
													"",
													"// Response body should have \"mandate_id\"",
													"pm.test(",
													"  \"[POST]::/payments - Content check if 'mandate_id' exists\",",
													"  function () {",
													"    pm.expect(typeof jsonData.mandate_id !== \"undefined\").to.be.true;",
													"  },",
													");",
													"",
													"// Response body should have \"mandate_data\"",
													"pm.test(",
													"  \"[POST]::/payments - Content check if 'mandate_data' exists\",",
													"  function () {",
													"    pm.expect(typeof jsonData.mandate_data !== \"undefined\").to.be.true;",
													"  },",
													");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/payments/:id?force_sync=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												":id"
											],
											"query": [
												{
													"key": "force_sync",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{payment_id}}",
													"description": "(Required) unique payment id"
												}
											]
										},
										"description": "To retrieve the properties of a Payment. This may be used to get the status of a previously initiated payment or next action for an ongoing payment"
									},
									"response": []
								},
								{
									"name": "Recurring Payments - Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments - Content check if value for 'status' matches 'succeeded'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"    },",
													"  );",
													"}",
													"",
													"// Response body should have value \"succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments - Content check if value for 'status' matches 'succeeded'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"    },",
													"  );",
													"}",
													"",
													"// Response body should have \"mandate_id\"",
													"pm.test(",
													"  \"[POST]::/payments - Content check if 'mandate_id' exists\",",
													"  function () {",
													"    pm.expect(typeof jsonData.mandate_id !== \"undefined\").to.be.true;",
													"  },",
													");",
													"",
													"// Response body should have \"mandate_data\"",
													"pm.test(",
													"  \"[POST]::/payments - Content check if 'mandate_data' exists\",",
													"  function () {",
													"    pm.expect(typeof jsonData.mandate_data !== \"undefined\").to.be.true;",
													"  },",
													");",
													"",
													"// Response body should have \"payment_method_data\"",
													"pm.test(",
													"  \"[POST]::/payments - Content check if 'payment_method_data' exists\",",
													"  function () {",
													"    pm.expect(typeof jsonData.payment_method_data !== \"undefined\").to.be.true;",
													"  },",
													");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 6570,\n    \"currency\": \"USD\",\n    \"confirm\": true,\n    \"capture_method\": \"automatic\",\n    \"capture_on\": \"2022-09-10T10:11:12Z\",\n    \"amount_to_capture\": 6570,\n    \"customer_id\": \"StripeCustomer\",\n    \"email\": \"guest@example.com\",\n    \"name\": \"John Doe\",\n    \"phone\": \"999999999\",\n    \"phone_country_code\": \"+65\",\n    \"description\": \"Its my first payment request\",\n    \"authentication_type\": \"no_three_ds\",\n    \"return_url\": \"https://duck.com\",\n    \"mandate_id\": \"{{mandate_id}}\",\n    \"off_session\": true,\n    \"shipping\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"likhin\",\n            \"last_name\": \"bopanna\"\n        }\n    },\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"likhin\",\n            \"last_name\": \"bopanna\"\n        }\n    },\n    \"statement_descriptor_name\": \"joseph\",\n    \"statement_descriptor_suffix\": \"JS\",\n    \"metadata\": {\n        \"udf1\": \"value1\",\n        \"new_customer\": \"true\",\n        \"login_date\": \"2019-09-10T10:11:12Z\"\n    },\n    \"routing\": {\n        \"type\": \"single\",\n        \"data\": \"stripe\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments"
											]
										},
										"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
									},
									"response": []
								},
								{
									"name": "Payments - Retrieve-copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[GET]::/payments/:id - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[GET]::/payments/:id - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[GET]::/payments/:id - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"Succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments/:id - Content check if value for 'status' matches 'succeeded'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"    },",
													"  );",
													"}",
													"",
													"// Response body should have \"mandate_id\"",
													"pm.test(",
													"  \"[POST]::/payments - Content check if 'mandate_id' exists\",",
													"  function () {",
													"    pm.expect(typeof jsonData.mandate_id !== \"undefined\").to.be.true;",
													"  },",
													");",
													"",
													"// Response body should have \"mandate_data\"",
													"pm.test(",
													"  \"[POST]::/payments - Content check if 'mandate_data' exists\",",
													"  function () {",
													"    pm.expect(typeof jsonData.mandate_data !== \"undefined\").to.be.true;",
													"  },",
													");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/payments/:id?force_sync=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												":id"
											],
											"query": [
												{
													"key": "force_sync",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{payment_id}}",
													"description": "(Required) unique payment id"
												}
											]
										},
										"description": "To retrieve the properties of a Payment. This may be used to get the status of a previously initiated payment or next action for an ongoing payment"
									},
									"response": []
								},
								{
									"name": "Refunds - Create Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[POST]::/refunds - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/refunds - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set refund_id as variable for jsonData.payment_id",
													"if (jsonData?.refund_id) {",
													"  pm.collectionVariables.set(\"refund_id\", jsonData.refund_id);",
													"  console.log(",
													"    \"- use {{refund_id}} as collection variable for value\",",
													"    jsonData.refund_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{refund_id}}, as jsonData.refund_id is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"pending\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/refunds - Content check if value for 'status' matches 'pending'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"pending\");",
													"    },",
													"  );",
													"}",
													"",
													"// Response body should have value \"6540\" for \"amount\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/refunds - Content check if value for 'amount' matches '6540'\",",
													"    function () {",
													"      pm.expect(jsonData.amount).to.eql(6540);",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"payment_id\":\"{{payment_id}}\",\"amount\":6540,\"reason\":\"Customer returned product\",\"refund_type\":\"instant\",\"metadata\":{\"udf1\":\"value1\",\"new_customer\":\"true\",\"login_date\":\"2019-09-10T10:11:12Z\"}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/refunds",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"refunds"
											]
										},
										"description": "To create a refund against an already processed payment"
									},
									"response": []
								},
								{
									"name": "Refunds - Retrieve Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[GET]::/refunds/:id - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[GET]::/refunds/:id - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set refund_id as variable for jsonData.payment_id",
													"if (jsonData?.refund_id) {",
													"  pm.collectionVariables.set(\"refund_id\", jsonData.refund_id);",
													"  console.log(",
													"    \"- use {{refund_id}} as collection variable for value\",",
													"    jsonData.refund_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{refund_id}}, as jsonData.refund_id is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"pending\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/refunds - Content check if value for 'status' matches 'pending'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"pending\");",
													"    },",
													"  );",
													"}",
													"",
													"// Response body should have value \"6540\" for \"amount\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/refunds - Content check if value for 'amount' matches '6540'\",",
													"    function () {",
													"      pm.expect(jsonData.amount).to.eql(6540);",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/refunds/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"refunds",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{refund_id}}",
													"description": "(Required) unique refund id"
												}
											]
										},
										"description": "To retrieve the properties of a Refund. This may be used to get the status of a previously initiated payment or next action for an ongoing payment"
									},
									"response": []
								}
							]
						},
						{
							"name": "Scenario9-Add card flow",
							"item": [
								{
									"name": "Payments - Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx ",
													"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
													"   pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"// Validate if response has JSON Body ",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {jsonData = pm.response.json();}catch(e){}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
													"};",
													"",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
													"};",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
													"};",
													"",
													"if (jsonData?.customer_id) {",
													"   pm.collectionVariables.set(\"customer_id\", jsonData.customer_id);",
													"   console.log(\"- use {{customer_id}} as collection variable for value\",jsonData.customer_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{customer_id}}, as jsonData.customer_id is undefined.');",
													"};",
													"",
													"// Response body should have value \"succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"   pm.test(\"[POST]::/payments/:id/confirm - Content check if value for 'status' matches 'succeeded'\", function() {",
													"     pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"   })};"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 6540,\n    \"currency\": \"USD\",\n    \"confirm\": true,\n    \"capture_method\": \"automatic\",\n    \"capture_on\": \"2022-09-10T10:11:12Z\",\n    \"amount_to_capture\": 6540,\n    \"customer_id\": \"stripesavecard_{{random_number}}\",\n    \"email\": \"guest@example.com\",\n    \"name\": \"John Doe\",\n    \"phone\": \"999999999\",\n    \"phone_country_code\": \"+65\",\n    \"description\": \"Its my first payment request\",\n    \"authentication_type\": \"no_three_ds\",\n    \"return_url\": \"https://google.com\",\n    \"setup_future_usage\": \"on_session\",\n    \"payment_method\": \"card\",\n    \"payment_method_type\": \"credit\",\n    \"payment_method_data\": {\n        \"card\": {\n            \"card_number\": \"4111111111111111\",\n            \"card_exp_month\": \"03\",\n            \"card_exp_year\": \"2030\",\n            \"card_holder_name\": \"joseph Doe\",\n            \"card_cvc\": \"737\"\n        }\n    },\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"joseph\",\n            \"last_name\": \"Doe\"\n        },\n        \"phone\": {\n            \"number\": \"8056594427\",\n            \"country_code\": \"+91\"\n        }\n    },\n    \"shipping\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"joseph\",\n            \"last_name\": \"Doe\"\n        },\n        \"phone\": {\n            \"number\": \"8056594427\",\n            \"country_code\": \"+91\"\n        }\n    },\n    \"routing\": {\n        \"type\": \"single\",\n        \"data\": \"cybersource\"\n    },\n    \"statement_descriptor_name\": \"joseph\",\n    \"statement_descriptor_suffix\": \"JS\",\n    \"metadata\": {\n        \"udf1\": \"value1\",\n        \"new_customer\": \"true\",\n        \"login_date\": \"2019-09-10T10:11:12Z\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments"
											]
										},
										"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
									},
									"response": []
								},
								{
									"name": "List payment methods for a Customer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx ",
													"pm.test(\"[GET]::/payment_methods/:customer_id - Status code is 2xx\", function () {",
													"   pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[GET]::/payment_methods/:customer_id - Content-Type is application/json\", function () {",
													"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {jsonData = pm.response.json();}catch(e){}",
													"",
													"if (jsonData?.customer_payment_methods[0]?.payment_token) {",
													"   pm.collectionVariables.set(\"payment_token\", jsonData.customer_payment_methods[0].payment_token);",
													"   console.log(\"- use {{payment_token}} as collection variable for value\", jsonData.customer_payment_methods[0].payment_token);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{payment_token}}, as jsonData.customer_payment_methods[0].payment_token is undefined.');",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/customers/:customer_id/payment_methods",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"customers",
												":customer_id",
												"payment_methods"
											],
											"query": [
												{
													"key": "accepted_country",
													"value": "co",
													"disabled": true
												},
												{
													"key": "accepted_country",
													"value": "pa",
													"disabled": true
												},
												{
													"key": "accepted_currency",
													"value": "voluptate ea",
													"disabled": true
												},
												{
													"key": "accepted_currency",
													"value": "exercitation",
													"disabled": true
												},
												{
													"key": "minimum_amount",
													"value": "100",
													"disabled": true
												},
												{
													"key": "maximum_amount",
													"value": "10000000",
													"disabled": true
												},
												{
													"key": "recurring_payment_enabled",
													"value": "true",
													"disabled": true
												},
												{
													"key": "installment_payment_enabled",
													"value": "true",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "customer_id",
													"value": "{{customer_id}}",
													"description": "//Pass the customer id"
												}
											]
										},
										"description": "To filter and list the applicable payment methods for a particular Customer ID"
									},
									"response": []
								},
								{
									"name": "Save card payments - Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx ",
													"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
													"   pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"// Validate if response has JSON Body ",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {jsonData = pm.response.json();}catch(e){}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
													"};",
													"",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
													"};",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
													"};",
													"",
													"if (jsonData?.customer_id) {",
													"   pm.collectionVariables.set(\"customer_id\", jsonData.customer_id);",
													"   console.log(\"- use {{customer_id}} as collection variable for value\",jsonData.customer_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{customer_id}}, as jsonData.customer_id is undefined.');",
													"};"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"amount\":6540,\"currency\":\"USD\",\"confirm\":false,\"capture_method\":\"automatic\",\"capture_on\":\"2022-09-10T10:11:12Z\",\"amount_to_capture\":6540,\"customer_id\":\"{{customer_id}}\",\"email\":\"guest@example.com\",\"name\":\"John Doe\",\"phone\":\"999999999\",\"phone_country_code\":\"+65\",\"description\":\"Its my first payment request\",\"authentication_type\":\"no_three_ds\",\"return_url\":\"https://google.com\",\"billing\":{\"address\":{\"line1\":\"1467\",\"line2\":\"Harrison Street\",\"line3\":\"Harrison Street\",\"city\":\"San Fransico\",\"state\":\"California\",\"zip\":\"94122\",\"country\":\"US\",\"first_name\":\"joseph\",\"last_name\":\"Doe\"},\"phone\":{\"number\":\"8056594427\",\"country_code\":\"+91\"}},\"shipping\":{\"address\":{\"line1\":\"1467\",\"line2\":\"Harrison Street\",\"line3\":\"Harrison Street\",\"city\":\"San Fransico\",\"state\":\"California\",\"zip\":\"94122\",\"country\":\"US\",\"first_name\":\"joseph\",\"last_name\":\"Doe\"},\"phone\":{\"number\":\"8056594427\",\"country_code\":\"+91\"}},\"routing\":{\"type\":\"single\",\"data\":\"stripe\"},\"statement_descriptor_name\":\"joseph\",\"statement_descriptor_suffix\":\"JS\",\"metadata\":{\"udf1\":\"value1\",\"new_customer\":\"true\",\"login_date\":\"2019-09-10T10:11:12Z\"}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments"
											]
										},
										"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
									},
									"response": []
								},
								{
									"name": "Save card payments - Confirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[POST]::/payments/:id/confirm - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(",
													"  \"[POST]::/payments/:id/confirm - Content-Type is application/json\",",
													"  function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"      \"application/json\",",
													"    );",
													"  },",
													");",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[POST]::/payments/:id/confirm - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments/:id/confirm - Content check if value for 'status' matches 'succeeded'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"    },",
													"  );",
													"}",
													"",
													"",
													"// Response body should have value \"cybersource\" for \"connector\"",
													"if (jsonData?.connector) {",
													"  pm.test(",
													"    \"[POST]::/payments/:id/confirm - Content check if value for 'connector' matches 'cybersource'\",",
													"    function () {",
													"      pm.expect(jsonData.connector).to.eql(\"cybersource\");",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{publishable_key}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "api-key",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"client_secret\":\"{{client_secret}}\",\"payment_method\":\"card\",\"payment_token\":\"{{payment_token}}\",\"card_cvc\":\"737\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments/:id/confirm",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												":id",
												"confirm"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{payment_id}}",
													"description": "(Required) unique payment id"
												}
											]
										},
										"description": "This API is to confirm the payment request and forward payment to the payment processor. This API provides more granular control upon when the API is forwarded to the payment processor. Alternatively you can confirm the payment within the Payments-Create API"
									},
									"response": []
								},
								{
									"name": "Payments - Retrieve",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[GET]::/payments/:id - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[GET]::/payments/:id - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[GET]::/payments/:id - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/payments/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{payment_id}}",
													"description": "(Required) unique payment id"
												}
											]
										},
										"description": "To retrieve the properties of a Payment. This may be used to get the status of a previously initiated payment or next action for an ongoing payment"
									},
									"response": []
								},
								{
									"name": "Refunds - Create Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[POST]::/refunds - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/refunds - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set refund_id as variable for jsonData.payment_id",
													"if (jsonData?.refund_id) {",
													"  pm.collectionVariables.set(\"refund_id\", jsonData.refund_id);",
													"  console.log(",
													"    \"- use {{refund_id}} as collection variable for value\",",
													"    jsonData.refund_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{refund_id}}, as jsonData.refund_id is undefined.\",",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"payment_id\":\"{{payment_id}}\",\"amount\":600,\"reason\":\"Customer returned product\",\"refund_type\":\"instant\",\"metadata\":{\"udf1\":\"value1\",\"new_customer\":\"true\",\"login_date\":\"2019-09-10T10:11:12Z\"}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/refunds",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"refunds"
											]
										},
										"description": "To create a refund against an already processed payment"
									},
									"response": []
								},
								{
									"name": "Refunds - Retrieve",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[GET]::/refunds/:id - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[GET]::/refunds/:id - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set refund_id as variable for jsonData.payment_id",
													"if (jsonData?.refund_id) {",
													"  pm.collectionVariables.set(\"refund_id\", jsonData.refund_id);",
													"  console.log(",
													"    \"- use {{refund_id}} as collection variable for value\",",
													"    jsonData.refund_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{refund_id}}, as jsonData.refund_id is undefined.\",",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/refunds/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"refunds",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{refund_id}}",
													"description": "(Required) unique refund id"
												}
											]
										},
										"description": "To retrieve the properties of a Refund. This may be used to get the status of a previously initiated payment or next action for an ongoing payment"
									},
									"response": []
								}
							]
						},
						{
							"name": "Scenario10-Don't Pass CVV for save card flow and verifysuccess payment",
							"item": [
								{
									"name": "Payments - Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx ",
													"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
													"   pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"// Validate if response has JSON Body ",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {jsonData = pm.response.json();}catch(e){}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
													"};",
													"",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
													"};",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
													"};",
													"",
													"if (jsonData?.customer_id) {",
													"   pm.collectionVariables.set(\"customer_id\", jsonData.customer_id);",
													"   console.log(\"- use {{customer_id}} as collection variable for value\",jsonData.customer_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{customer_id}}, as jsonData.customer_id is undefined.');",
													"};"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 6540,\n    \"currency\": \"USD\",\n    \"confirm\": true,\n    \"capture_method\": \"automatic\",\n    \"capture_on\": \"2022-09-10T10:11:12Z\",\n    \"amount_to_capture\": 6540,\n    \"customer_id\": \"stripesavecard_{{random_number}}\",\n    \"email\": \"guest@example.com\",\n    \"name\": \"John Doe\",\n    \"phone\": \"999999999\",\n    \"phone_country_code\": \"+65\",\n    \"description\": \"Its my first payment request\",\n    \"authentication_type\": \"no_three_ds\",\n    \"return_url\": \"https://google.com\",\n    \"setup_future_usage\": \"on_session\",\n    \"payment_method\": \"card\",\n    \"payment_method_type\": \"credit\",\n    \"payment_method_data\": {\n        \"card\": {\n            \"card_number\": \"371449635398431\",\n            \"card_exp_month\": \"03\",\n            \"card_exp_year\": \"2030\",\n            \"card_holder_name\": \"joseph Doe\",\n            \"card_cvc\": \"7373\"\n        }\n    },\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"joseph\",\n            \"last_name\": \"Doe\"\n        },\n        \"phone\": {\n            \"number\": \"8056594427\",\n            \"country_code\": \"+91\"\n        }\n    },\n    \"shipping\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"joseph\",\n            \"last_name\": \"Doe\"\n        },\n        \"phone\": {\n            \"number\": \"8056594427\",\n            \"country_code\": \"+91\"\n        }\n    },\n    \"statement_descriptor_name\": \"joseph\",\n    \"statement_descriptor_suffix\": \"JS\",\n    \"metadata\": {\n        \"udf1\": \"value1\",\n        \"new_customer\": \"true\",\n        \"login_date\": \"2019-09-10T10:11:12Z\"\n    },\n    \"routing\": {\n        \"type\": \"single\",\n        \"data\": \"cybersource\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments"
											]
										},
										"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
									},
									"response": []
								},
								{
									"name": "List payment methods for a Customer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx ",
													"pm.test(\"[GET]::/payment_methods/:customer_id - Status code is 2xx\", function () {",
													"   pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[GET]::/payment_methods/:customer_id - Content-Type is application/json\", function () {",
													"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {jsonData = pm.response.json();}catch(e){}",
													"",
													"if (jsonData?.customer_payment_methods[0]?.payment_token) {",
													"   pm.collectionVariables.set(\"payment_token\", jsonData.customer_payment_methods[0].payment_token);",
													"   console.log(\"- use {{payment_token}} as collection variable for value\", jsonData.customer_payment_methods[0].payment_token);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{payment_token}}, as jsonData.customer_payment_methods[0].payment_token is undefined.');",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/customers/:customer_id/payment_methods",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"customers",
												":customer_id",
												"payment_methods"
											],
											"query": [
												{
													"key": "accepted_country",
													"value": "co",
													"disabled": true
												},
												{
													"key": "accepted_country",
													"value": "pa",
													"disabled": true
												},
												{
													"key": "accepted_currency",
													"value": "voluptate ea",
													"disabled": true
												},
												{
													"key": "accepted_currency",
													"value": "exercitation",
													"disabled": true
												},
												{
													"key": "minimum_amount",
													"value": "100",
													"disabled": true
												},
												{
													"key": "maximum_amount",
													"value": "10000000",
													"disabled": true
												},
												{
													"key": "recurring_payment_enabled",
													"value": "true",
													"disabled": true
												},
												{
													"key": "installment_payment_enabled",
													"value": "true",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "customer_id",
													"value": "{{customer_id}}",
													"description": "//Pass the customer id"
												}
											]
										},
										"description": "To filter and list the applicable payment methods for a particular Customer ID"
									},
									"response": []
								},
								{
									"name": "Save card payments - Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx ",
													"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
													"   pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"// Validate if response has JSON Body ",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {jsonData = pm.response.json();}catch(e){}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
													"};",
													"",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
													"};",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
													"};",
													"",
													"if (jsonData?.customer_id) {",
													"   pm.collectionVariables.set(\"customer_id\", jsonData.customer_id);",
													"   console.log(\"- use {{customer_id}} as collection variable for value\",jsonData.customer_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{customer_id}}, as jsonData.customer_id is undefined.');",
													"};"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"amount\":6540,\"currency\":\"USD\",\"confirm\":false,\"capture_method\":\"automatic\",\"capture_on\":\"2022-09-10T10:11:12Z\",\"amount_to_capture\":6540,\"customer_id\":\"{{customer_id}}\",\"email\":\"guest@example.com\",\"name\":\"John Doe\",\"phone\":\"999999999\",\"phone_country_code\":\"+65\",\"description\":\"Its my first payment request\",\"authentication_type\":\"no_three_ds\",\"return_url\":\"https://google.com\",\"billing\":{\"address\":{\"line1\":\"1467\",\"line2\":\"Harrison Street\",\"line3\":\"Harrison Street\",\"city\":\"San Fransico\",\"state\":\"California\",\"zip\":\"94122\",\"country\":\"US\",\"first_name\":\"joseph\",\"last_name\":\"Doe\"},\"phone\":{\"number\":\"8056594427\",\"country_code\":\"+91\"}},\"shipping\":{\"address\":{\"line1\":\"1467\",\"line2\":\"Harrison Street\",\"line3\":\"Harrison Street\",\"city\":\"San Fransico\",\"state\":\"California\",\"zip\":\"94122\",\"country\":\"US\",\"first_name\":\"joseph\",\"last_name\":\"Doe\"},\"phone\":{\"number\":\"8056594427\",\"country_code\":\"+91\"}},\"statement_descriptor_name\":\"joseph\",\"statement_descriptor_suffix\":\"JS\",\"metadata\":{\"udf1\":\"value1\",\"new_customer\":\"true\",\"login_date\":\"2019-09-10T10:11:12Z\"},\"routing\":{\"type\":\"single\",\"data\":\"stripe\"}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments"
											]
										},
										"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
									},
									"response": []
								},
								{
									"name": "Save card payments - Confirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[POST]::/payments/:id/confirm - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(",
													"  \"[POST]::/payments/:id/confirm - Content-Type is application/json\",",
													"  function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"      \"application/json\",",
													"    );",
													"  },",
													");",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[POST]::/payments/:id/confirm - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"cybersource\" for \"connector\"",
													"if (jsonData?.connector) {",
													"  pm.test(",
													"    \"[POST]::/payments/:id/confirm - Content check if value for 'connector' matches 'cybersource'\",",
													"    function () {",
													"      pm.expect(jsonData.connector).to.eql(\"cybersource\");",
													"    },",
													"  );",
													"}",
													"",
													"// Response body should have value \"succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(\"[POST]::/payments/:id/confirm - Content check if value for 'status' matches 'succeeded'\", function() {",
													"    pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"  })};"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{publishable_key}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "api-key",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"client_secret\":\"{{client_secret}}\",\"payment_method\":\"card\",\"payment_token\":\"{{payment_token}}\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments/:id/confirm",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												":id",
												"confirm"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{payment_id}}",
													"description": "(Required) unique payment id"
												}
											]
										},
										"description": "This API is to confirm the payment request and forward payment to the payment processor. This API provides more granular control upon when the API is forwarded to the payment processor. Alternatively you can confirm the payment within the Payments-Create API"
									},
									"response": []
								}
							]
						},
						{
							"name": "Scenario11-Save card payment with manual capture",
							"item": [
								{
									"name": "Payments - Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx ",
													"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
													"   pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"// Validate if response has JSON Body ",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {jsonData = pm.response.json();}catch(e){}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
													"};",
													"",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
													"};",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
													"};",
													"",
													"if (jsonData?.customer_id) {",
													"   pm.collectionVariables.set(\"customer_id\", jsonData.customer_id);",
													"   console.log(\"- use {{customer_id}} as collection variable for value\",jsonData.customer_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{customer_id}}, as jsonData.customer_id is undefined.');",
													"};",
													"",
													"// Response body should have value \"succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments - Content check if value for 'status' matches 'succeeded'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"    },",
													"  );",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"amount\":6540,\"currency\":\"USD\",\"confirm\":true,\"capture_method\":\"automatic\",\"capture_on\":\"2022-09-10T10:11:12Z\",\"amount_to_capture\":6540,\"customer_id\":\"adyensavecard_{{random_number}}\",\"email\":\"guest@example.com\",\"name\":\"John Doe\",\"phone\":\"999999999\",\"phone_country_code\":\"+65\",\"description\":\"Its my first payment request\",\"authentication_type\":\"no_three_ds\",\"return_url\":\"https://google.com\",\"setup_future_usage\":\"on_session\",\"payment_method\":\"card\",\"payment_method_type\":\"credit\",\"payment_method_data\":{\"card\":{\"card_number\":\"371449635398431\",\"card_exp_month\":\"03\",\"card_exp_year\":\"2030\",\"card_holder_name\":\"joseph Doe\",\"card_cvc\":\"7373\"}},\"billing\":{\"address\":{\"line1\":\"1467\",\"line2\":\"Harrison Street\",\"line3\":\"Harrison Street\",\"city\":\"San Fransico\",\"state\":\"California\",\"zip\":\"94122\",\"country\":\"US\",\"first_name\":\"joseph\",\"last_name\":\"Doe\"},\"phone\":{\"number\":\"8056594427\",\"country_code\":\"+91\"}},\"shipping\":{\"address\":{\"line1\":\"1467\",\"line2\":\"Harrison Street\",\"line3\":\"Harrison Street\",\"city\":\"San Fransico\",\"state\":\"California\",\"zip\":\"94122\",\"country\":\"US\",\"first_name\":\"joseph\",\"last_name\":\"Doe\"},\"phone\":{\"number\":\"8056594427\",\"country_code\":\"+91\"}},\"statement_descriptor_name\":\"joseph\",\"statement_descriptor_suffix\":\"JS\",\"metadata\":{\"udf1\":\"value1\",\"new_customer\":\"true\",\"login_date\":\"2019-09-10T10:11:12Z\"},\"routing\":{\"type\":\"single\",\"data\":\"cybersource\"}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments"
											]
										},
										"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
									},
									"response": []
								},
								{
									"name": "Payments - Retrieve",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[GET]::/payments/:id - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[GET]::/payments/:id - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[GET]::/payments/:id - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"Succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments/:id - Content check if value for 'status' matches 'succeeded'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"    },",
													"  );",
													"}",
													"",
													"// Validate the connector",
													"pm.test(\"[POST]::/payments - connector\", function () {",
													"  pm.expect(jsonData.connector).to.eql(\"cybersource\");",
													"});",
													"",
													"// Response body should have value \"6540\" for \"amount\"",
													"if (jsonData?.amount) {",
													"  pm.test(",
													"    \"[post]:://payments/:id/capture - Content check if value for 'amount' matches '6540'\",",
													"    function () {",
													"      pm.expect(jsonData.amount).to.eql(6540);",
													"    },",
													"  );",
													"}",
													"",
													"// Response body should have value \"6000\" for \"amount_received\"",
													"if (jsonData?.amount_received) {",
													"  pm.test(",
													"    \"[POST]::/payments:id/capture - Content check if value for 'amount_received' matches '6000'\",",
													"    function () {",
													"      pm.expect(jsonData.amount_received).to.eql(6540);",
													"    },",
													"  );",
													"}",
													"",
													"// Response body should have value \"6540\" for \"amount_capturable\"",
													"if (jsonData?.amount) {",
													"  pm.test(",
													"    \"[post]:://payments/:id/capture - Content check if value for 'amount_capturable' matches 'amount - 540'\",",
													"    function () {",
													"      pm.expect(jsonData.amount_capturable).to.eql(0);",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/payments/:id?force_sync=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												":id"
											],
											"query": [
												{
													"key": "force_sync",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{payment_id}}",
													"description": "(Required) unique payment id"
												}
											]
										},
										"description": "To retrieve the properties of a Payment. This may be used to get the status of a previously initiated payment or next action for an ongoing payment"
									},
									"response": []
								},
								{
									"name": "List payment methods for a Customer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx ",
													"pm.test(\"[GET]::/payment_methods/:customer_id - Status code is 2xx\", function () {",
													"   pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[GET]::/payment_methods/:customer_id - Content-Type is application/json\", function () {",
													"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {jsonData = pm.response.json();}catch(e){}",
													"",
													"if (jsonData?.customer_payment_methods[0]?.payment_token) {",
													"   pm.collectionVariables.set(\"payment_token\", jsonData.customer_payment_methods[0].payment_token);",
													"   console.log(\"- use {{payment_token}} as collection variable for value\", jsonData.customer_payment_methods[0].payment_token);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{payment_token}}, as jsonData.customer_payment_methods[0].payment_token is undefined.');",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/customers/:customer_id/payment_methods",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"customers",
												":customer_id",
												"payment_methods"
											],
											"query": [
												{
													"key": "accepted_country",
													"value": "co",
													"disabled": true
												},
												{
													"key": "accepted_country",
													"value": "pa",
													"disabled": true
												},
												{
													"key": "accepted_currency",
													"value": "voluptate ea",
													"disabled": true
												},
												{
													"key": "accepted_currency",
													"value": "exercitation",
													"disabled": true
												},
												{
													"key": "minimum_amount",
													"value": "100",
													"disabled": true
												},
												{
													"key": "maximum_amount",
													"value": "10000000",
													"disabled": true
												},
												{
													"key": "recurring_payment_enabled",
													"value": "true",
													"disabled": true
												},
												{
													"key": "installment_payment_enabled",
													"value": "true",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "customer_id",
													"value": "{{customer_id}}",
													"description": "//Pass the customer id"
												}
											]
										},
										"description": "To filter and list the applicable payment methods for a particular Customer ID"
									},
									"response": []
								},
								{
									"name": "Save card payments - Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx ",
													"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
													"   pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"// Validate if response has JSON Body ",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {jsonData = pm.response.json();}catch(e){}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
													"};",
													"",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
													"};",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
													"};",
													"",
													"if (jsonData?.customer_id) {",
													"   pm.collectionVariables.set(\"customer_id\", jsonData.customer_id);",
													"   console.log(\"- use {{customer_id}} as collection variable for value\",jsonData.customer_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{customer_id}}, as jsonData.customer_id is undefined.');",
													"};"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"amount\":6540,\"currency\":\"USD\",\"confirm\":false,\"capture_method\":\"manual\",\"capture_on\":\"2022-09-10T10:11:12Z\",\"amount_to_capture\":6540,\"customer_id\":\"{{customer_id}}\",\"email\":\"guest@example.com\",\"name\":\"John Doe\",\"phone\":\"999999999\",\"phone_country_code\":\"+65\",\"description\":\"Its my first payment request\",\"authentication_type\":\"no_three_ds\",\"return_url\":\"https://google.com\",\"billing\":{\"address\":{\"line1\":\"1467\",\"line2\":\"Harrison Street\",\"line3\":\"Harrison Street\",\"city\":\"San Fransico\",\"state\":\"California\",\"zip\":\"94122\",\"country\":\"US\",\"first_name\":\"joseph\",\"last_name\":\"Doe\"},\"phone\":{\"number\":\"8056594427\",\"country_code\":\"+91\"}},\"shipping\":{\"address\":{\"line1\":\"1467\",\"line2\":\"Harrison Street\",\"line3\":\"Harrison Street\",\"city\":\"San Fransico\",\"state\":\"California\",\"zip\":\"94122\",\"country\":\"US\",\"first_name\":\"joseph\",\"last_name\":\"Doe\"},\"phone\":{\"number\":\"8056594427\",\"country_code\":\"+91\"}},\"statement_descriptor_name\":\"joseph\",\"statement_descriptor_suffix\":\"JS\",\"metadata\":{\"udf1\":\"value1\",\"new_customer\":\"true\",\"login_date\":\"2019-09-10T10:11:12Z\"},\"routing\":{\"type\":\"single\",\"data\":\"stripe\"}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments"
											]
										},
										"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
									},
									"response": []
								},
								{
									"name": "Save card payments - Confirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[POST]::/payments/:id/confirm - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(",
													"  \"[POST]::/payments/:id/confirm - Content-Type is application/json\",",
													"  function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"      \"application/json\",",
													"    );",
													"  },",
													");",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[POST]::/payments/:id/confirm - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"requires_capture\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments/:id/confirm - Content check if value for 'status' matches 'requires_capture'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"requires_capture\");",
													"    },",
													"  );",
													"}",
													"",
													"",
													"// Response body should have value \"cybersource\" for \"connector\"",
													"if (jsonData?.connector) {",
													"  pm.test(",
													"    \"[POST]::/payments/:id/confirm - Content check if value for 'connector' matches 'cybersource'\",",
													"    function () {",
													"      pm.expect(jsonData.connector).to.eql(\"cybersource\");",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{publishable_key}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "api-key",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"client_secret\":\"{{client_secret}}\",\"payment_method\":\"card\",\"payment_token\":\"{{payment_token}}\",\"card_cvc\":\"7373\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments/:id/confirm",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												":id",
												"confirm"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{payment_id}}",
													"description": "(Required) unique payment id"
												}
											]
										},
										"description": "This API is to confirm the payment request and forward payment to the payment processor. This API provides more granular control upon when the API is forwarded to the payment processor. Alternatively you can confirm the payment within the Payments-Create API"
									},
									"response": []
								},
								{
									"name": "Payments - Capture",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[POST]::/payments/:id/capture - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(",
													"  \"[POST]::/payments/:id/capture - Content-Type is application/json\",",
													"  function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"      \"application/json\",",
													"    );",
													"  },",
													");",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[POST]::/payments/:id/capture - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]:://payments/:id/capture - Content check if value for 'status' matches 'succeeded'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"    },",
													"  );",
													"}",
													"",
													"// Validate the connector",
													"pm.test(\"[POST]::/payments - connector\", function () {",
													"  pm.expect(jsonData.connector).to.eql(\"cybersource\");",
													"});",
													"",
													"// Response body should have value \"6540\" for \"amount\"",
													"if (jsonData?.amount) {",
													"  pm.test(",
													"    \"[post]:://payments/:id/capture - Content check if value for 'amount' matches '6540'\",",
													"    function () {",
													"      pm.expect(jsonData.amount).to.eql(6540);",
													"    },",
													"  );",
													"}",
													"",
													"// Response body should have value \"6000\" for \"amount_received\"",
													"if (jsonData?.amount_received) {",
													"  pm.test(",
													"    \"[POST]::/payments:id/capture - Content check if value for 'amount_received' matches '6540'\",",
													"    function () {",
													"      pm.expect(jsonData.amount_received).to.eql(6540);",
													"    },",
													"  );",
													"}",
													"",
													"// Response body should have value \"6540\" for \"amount_capturable\"",
													"if (jsonData?.amount_capturable) {",
													"  pm.test(",
													"    \"[post]:://payments/:id/capture - Content check if value for 'amount_capturable' matches 'amount - 540'\",",
													"    function () {",
													"      pm.expect(jsonData.amount_capturable).to.eql(6540);",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"amount_to_capture\":6540,\"statement_descriptor_name\":\"Joseph\",\"statement_descriptor_suffix\":\"JS\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments/:id/capture",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												":id",
												"capture"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{payment_id}}",
													"description": "(Required) unique payment id"
												}
											]
										},
										"description": "To capture the funds for an uncaptured payment"
									},
									"response": []
								},
								{
									"name": "Payments - Retrieve-copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[GET]::/payments/:id - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[GET]::/payments/:id - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[GET]::/payments/:id - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"Succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments/:id - Content check if value for 'status' matches 'succeeded'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"    },",
													"  );",
													"}",
													"",
													"// Validate the connector",
													"pm.test(\"[POST]::/payments - connector\", function () {",
													"  pm.expect(jsonData.connector).to.eql(\"cybersource\");",
													"});",
													"",
													"// Response body should have value \"6540\" for \"amount\"",
													"if (jsonData?.amount) {",
													"  pm.test(",
													"    \"[post]:://payments/:id/capture - Content check if value for 'amount' matches '6540'\",",
													"    function () {",
													"      pm.expect(jsonData.amount).to.eql(6540);",
													"    },",
													"  );",
													"}",
													"",
													"// Response body should have value \"6000\" for \"amount_received\"",
													"if (jsonData?.amount_received) {",
													"  pm.test(",
													"    \"[POST]::/payments:id/capture - Content check if value for 'amount_received' matches '6540'\",",
													"    function () {",
													"      pm.expect(jsonData.amount_received).to.eql(6540);",
													"    },",
													"  );",
													"}",
													"",
													"// Response body should have value \"6540\" for \"amount_capturable\"",
													"if (jsonData?.amount) {",
													"  pm.test(",
													"    \"[post]:://payments/:id/capture - Content check if value for 'amount_capturable' matches 'amount - 540'\",",
													"    function () {",
													"      pm.expect(jsonData.amount_capturable).to.eql(0);",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/payments/:id?force_sync=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												":id"
											],
											"query": [
												{
													"key": "force_sync",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{payment_id}}",
													"description": "(Required) unique payment id"
												}
											]
										},
										"description": "To retrieve the properties of a Payment. This may be used to get the status of a previously initiated payment or next action for an ongoing payment"
									},
									"response": []
								},
								{
									"name": "Refunds - Create Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[POST]::/refunds - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/refunds - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set refund_id as variable for jsonData.payment_id",
													"if (jsonData?.refund_id) {",
													"  pm.collectionVariables.set(\"refund_id\", jsonData.refund_id);",
													"  console.log(",
													"    \"- use {{refund_id}} as collection variable for value\",",
													"    jsonData.refund_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{refund_id}}, as jsonData.refund_id is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"pending\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/refunds - Content check if value for 'status' matches 'pending'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"pending\");",
													"    },",
													"  );",
													"}",
													"",
													"// Response body should have value \"540\" for \"amount\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/refunds - Content check if value for 'amount' matches '540'\",",
													"    function () {",
													"      pm.expect(jsonData.amount).to.eql(540);",
													"    },",
													"  );",
													"}",
													"",
													"// Validate the connector",
													"pm.test(\"[POST]::/payments - connector\", function () {",
													"  pm.expect(jsonData.connector).to.eql(\"cybersource\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"payment_id\":\"{{payment_id}}\",\"amount\":540,\"reason\":\"Customer returned product\",\"refund_type\":\"instant\",\"metadata\":{\"udf1\":\"value1\",\"new_customer\":\"true\",\"login_date\":\"2019-09-10T10:11:12Z\"}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/refunds",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"refunds"
											]
										},
										"description": "To create a refund against an already processed payment"
									},
									"response": []
								},
								{
									"name": "Refunds - Retrieve Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[GET]::/refunds/:id - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[GET]::/refunds/:id - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set refund_id as variable for jsonData.payment_id",
													"if (jsonData?.refund_id) {",
													"  pm.collectionVariables.set(\"refund_id\", jsonData.refund_id);",
													"  console.log(",
													"    \"- use {{refund_id}} as collection variable for value\",",
													"    jsonData.refund_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{refund_id}}, as jsonData.refund_id is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"pending\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/refunds - Content check if value for 'status' matches 'pending'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"pending\");",
													"    },",
													"  );",
													"}",
													"",
													"// Response body should have value \"6540\" for \"amount\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/refunds - Content check if value for 'amount' matches '540'\",",
													"    function () {",
													"      pm.expect(jsonData.amount).to.eql(540);",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/refunds/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"refunds",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{refund_id}}",
													"description": "(Required) unique refund id"
												}
											]
										},
										"description": "To retrieve the properties of a Refund. This may be used to get the status of a previously initiated payment or next action for an ongoing payment"
									},
									"response": []
								}
							]
						},
						{
							"name": "Scenario12- Zero auth mandates",
							"item": [
								{
									"name": "Mandate Payments - Create Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx ",
													"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
													"   pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"// Validate if response has JSON Body ",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {jsonData = pm.response.json();}catch(e){}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
													"};",
													"",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
													"};",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
													"};",
													"",
													"",
													"// Response body should have value \"requires_payment_method\" for \"status\"",
													"if (jsonData?.status) {",
													"pm.test(\"[POST]::/payments - Content check if value for 'status' matches 'requires_payment_method'\", function() {",
													"  pm.expect(jsonData.status).to.eql(\"requires_payment_method\");",
													"})};",
													"",
													"// Response body should have \"mandate_id\"",
													"pm.test(\"[POST]::/payments - Content check if 'mandate_id' exists\", function() {",
													"   pm.expect((typeof jsonData.mandate_id !== \"undefined\")).to.be.true;",
													"});",
													"",
													"// Response body should have \"mandate_data\"",
													"pm.test(\"[POST]::/payments - Content check if 'mandate_data' exists\", function() {",
													"   pm.expect((typeof jsonData.mandate_data !== \"undefined\")).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{api_key}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "api-key",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 0,\n    \"currency\": \"USD\",\n    \"confirm\": false,\n    \"capture_method\": \"automatic\",\n    \"capture_on\": \"2022-09-10T10:11:12Z\",\n    \"customer_id\": \"stripecustomer\",\n    \"email\": \"guest@example.com\",\n    \"name\": \"John Doe\",\n    \"phone\": \"999999999\",\n    \"phone_country_code\": \"+65\",\n    \"description\": \"Its my first payment request\",\n    \"authentication_type\": \"no_three_ds\",\n    \"return_url\": \"https://google.com\",\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"John\",\n            \"last_name\": \"Doe\"\n        },\n         \"phone\": {\n            \"number\": \"8056594427\",\n            \"country_code\": \"+91\"\n        }\n    },\n    \"shipping\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"John\",\n            \"last_name\": \"Doe\"\n        },\n         \"phone\": {\n            \"number\": \"8056594427\",\n            \"country_code\": \"+91\"\n        }\n    },\n    \"browser_info\": {\n        \"user_agent\": \"Mozilla\\/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit\\/537.36 (KHTML, like Gecko) Chrome\\/70.0.3538.110 Safari\\/537.36\",\n        \"accept_header\": \"text\\/html,application\\/xhtml+xml,application\\/xml;q=0.9,image\\/webp,image\\/apng,*\\/*;q=0.8\",\n        \"language\": \"nl-NL\",\n        \"color_depth\": 24,\n        \"screen_height\": 723,\n        \"screen_width\": 1536,\n        \"time_zone\": 0,\n        \"java_enabled\": true,\n        \"java_script_enabled\": true,\n        \"ip_address\": \"125.0.0.1\"\n    },\n    \"statement_descriptor_name\": \"joseph\",\n    \"statement_descriptor_suffix\": \"JS\",\n    \"metadata\": {},\n    \"order_details\": [\n        {\n            \"product_name\": \"Apple iphone 15\",\n            \"quantity\":1,\n            \"amount\": 0,\n            \"account_name\": \"transaction_processing\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments"
											]
										},
										"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
									},
									"response": []
								},
								{
									"name": "Payments - Confirm Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx ",
													"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
													"   pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"// Validate if response has JSON Body ",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {jsonData = pm.response.json();}catch(e){}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
													"};",
													"",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
													"};",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
													"};",
													"",
													"// Response body should have value \"succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"pm.test(\"[POST]::/payments - Content check if value for 'status' matches 'succeeded'\", function() {",
													"  pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"})};",
													"",
													"// Response body should have \"mandate_id\"",
													"pm.test(\"[POST]::/payments - Content check if 'mandate_id' exists\", function() {",
													"   pm.expect((typeof jsonData.mandate_id !== \"undefined\")).to.be.true;",
													"});",
													"",
													"// Response body should have \"mandate_data\"",
													"pm.test(\"[POST]::/payments - Content check if 'mandate_data' exists\", function() {",
													"   pm.expect((typeof jsonData.mandate_data !== \"undefined\")).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{api_key}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "api-key",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-feature",
												"value": "router-custom",
												"type": "text",
												"disabled": true
											},
											{
												"key": "publishable_key",
												"value": "pk_snd_8798c6a9114646f8b970b93ad5765ddf",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"payment_method\": \"card\",\n    \"payment_method_type\": \"credit\",\n    \"payment_method_data\": {\n        \"card\": {\n            \"card_number\": \"4111111111111111\",\n            \"card_exp_month\": \"03\",\n            \"card_exp_year\": \"2030\",\n            \"card_holder_name\": \"CLBRW1\",\n            \"card_cvc\": \"737\"\n        }\n    },\n    \"setup_future_usage\": \"off_session\",\n    \"payment_type\": \"setup_mandate\",\n    \"mandate_data\": {\n        \"customer_acceptance\": {\n            \"acceptance_type\": \"offline\",\n            \"accepted_at\": \"1963-05-03T04:07:52.723Z\",\n            \"online\": {\n                \"ip_address\": \"125.0.0.1\",\n                \"user_agent\": \"amet irure esse\"\n            }\n        },\n        \"mandate_type\": {\n            \"multi_use\": {\n                \"amount\": 1000,\n                \"currency\": \"USD\",\n                \"start_date\": \"2023-04-21T00:00:00Z\",\n                \"end_date\": \"2023-05-21T00:00:00Z\",\n                \"metadata\": {\n                    \"frequency\": \"13\"\n                }\n            }\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments/:id/confirm",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												":id",
												"confirm"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{payment_id}}"
												}
											]
										},
										"description": "This API is to confirm the payment request and forward payment to the payment processor. This API provides more granular control upon when the API is forwarded to the payment processor. Alternatively you can confirm the payment within the Payments-Create API"
									},
									"response": []
								},
								{
									"name": "Recurring Payments - Create Copy 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx ",
													"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
													"   pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"// Validate if response has JSON Body ",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {jsonData = pm.response.json();}catch(e){}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
													"};",
													"",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
													"};",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
													"};",
													"",
													"",
													"// Response body should have value \"succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"pm.test(\"[POST]::/payments - Content check if value for 'status' matches 'succeeded'\", function() {",
													"  pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"})};",
													"",
													"// Response body should have \"mandate_id\"",
													"pm.test(\"[POST]::/payments - Content check if 'mandate_id' exists\", function() {",
													"   pm.expect((typeof jsonData.mandate_id !== \"undefined\")).to.be.true;",
													"});",
													"",
													"// Response body should have \"mandate_data\"",
													"pm.test(\"[POST]::/payments - Content check if 'mandate_data' exists\", function() {",
													"   pm.expect((typeof jsonData.mandate_data !== \"undefined\")).to.be.true;",
													"});",
													"",
													"// Response body should have \"payment_method_data\"",
													"pm.test(\"[POST]::/payments - Content check if 'payment_method_data' exists\", function() {",
													"   pm.expect((typeof jsonData.payment_method_data !== \"undefined\")).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{api_key}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "api-key",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 1000,\n    \"currency\": \"USD\",\n    \"confirm\": true,\n    \"business_country\": \"US\",\n    \"business_label\": \"default\",\n    \"capture_method\": \"automatic\",\n    \"capture_on\": \"2022-09-10T10:11:12Z\",\n    \"customer_id\": \"stripecustomer\",\n    \"email\": \"guest@example.com\",\n    \"name\": \"John Doe\",\n    \"phone\": \"999999999\",\n    \"phone_country_code\": \"+65\",\n    \"description\": \"Its my first payment request\",\n    \"authentication_type\": \"three_ds\",\n    \"return_url\": \"https://google.com\",\n    \"mandate_id\":\"{{mandate_id}}\",\n    \"off_session\": true,\n    \"billing\": {\n        \"address\": {\n            \"first_name\":\"John\",\n            \"last_name\":\"Doe\",\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\"\n        },\n         \"phone\": {\n            \"number\": \"8056594427\",\n            \"country_code\": \"+91\"\n        }\n    },\n    \"shipping\": {\n        \"address\": {\n            \"first_name\": \"John\",\n            \"last_name\": \"Doe\",\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\"\n        },\n         \"phone\": {\n            \"number\": \"8056594427\",\n            \"country_code\": \"+91\"\n        }\n    },\n    \"browser_info\": {\n        \"user_agent\": \"Mozilla\\/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit\\/537.36 (KHTML, like Gecko) Chrome\\/70.0.3538.110 Safari\\/537.36\",\n        \"accept_header\": \"text\\/html,application\\/xhtml+xml,application\\/xml;q=0.9,image\\/webp,image\\/apng,*\\/*;q=0.8\",\n        \"language\": \"nl-NL\",\n        \"color_depth\": 24,\n        \"screen_height\": 723,\n        \"screen_width\": 1536,\n        \"time_zone\": 0,\n        \"java_enabled\": true,\n        \"java_script_enabled\": true,\n        \"ip_address\": \"125.0.0.1\"\n    },\n    \"metadata\": {\n        \"udf1\": \"value1\",\n        \"new_customer\": \"true\",\n        \"login_date\": \"2019-09-10T10:11:12Z\"\n    },\n    \"order_details\": [\n        {\n            \"product_name\": \"Apple iphone 15\",\n            \"quantity\": 1,\n            \"amount\": 1000,\n            \"account_name\": \"transaction_processing\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments"
											]
										},
										"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
									},
									"response": []
								}
							]
						},
						{
							"name": "Scenario13 Incremental auth",
							"item": [
								{
									"name": "Payments-Create Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx ",
													"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
													"   pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"// Validate if response has JSON Body ",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {jsonData = pm.response.json();}catch(e){}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
													"};",
													"",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
													"};",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
													"};"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{api_key}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "api-key",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-feature",
												"value": "router-custom",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Authorization",
												"value": "",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-feature",
												"value": "integ-custom",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 1000,\n    \"currency\": \"USD\",\n    \"confirm\": true,\n    \"capture_method\": \"manual\",\n    \"customer_id\": \"cus_wKqxfVdHDDLWuiM144\",\n    \"email\": \"p143@example.com\",\n    \"amount_to_capture\": 1000,\n    \"description\": \"Its my first payment request\",\n    \"capture_on\": \"2022-09-10T10:11:12Z\",\n    \"return_url\": \"https://google.com\",\n    \"name\": \"Preetam\",\n    \"phone\": \"999999999\",\n    \"setup_future_usage\": \"on_session\",\n    \"phone_country_code\": \"+65\",\n    \"authentication_type\": \"no_three_ds\",\n    \"payment_method\": \"card\",\n    \"payment_method_type\": \"debit\",\n    \"payment_method_data\": {\n        \"card\": {\n            \"card_number\": \"4111111111111111\",\n            \"card_exp_month\": \"09\",\n            \"card_exp_year\": \"2027\",\n            \"card_holder_name\": \"\",\n            \"card_cvc\": \"975\"\n        }\n    },\n    \"connector_metadata\": {\n        \"noon\": {\n            \"order_category\": \"pay\"\n        }\n    },\n    \"browser_info\": {\n        \"user_agent\": \"Mozilla\\/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit\\/537.36 (KHTML, like Gecko) Chrome\\/70.0.3538.110 Safari\\/537.36\",\n        \"accept_header\": \"text\\/html,application\\/xhtml+xml,application\\/xml;q=0.9,image\\/webp,image\\/apng,*\\/*;q=0.8\",\n        \"language\": \"nl-NL\",\n        \"color_depth\": 24,\n        \"screen_height\": 723,\n        \"screen_width\": 1536,\n        \"time_zone\": 0,\n        \"java_enabled\": true,\n        \"java_script_enabled\": true,\n        \"ip_address\": \"128.0.0.1\"\n    },\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"PL\",\n            \"first_name\": \"preetam\",\n            \"last_name\": \"revankar\"\n        },\n        \"phone\": {\n            \"number\": \"8056594427\",\n            \"country_code\": \"+91\"\n        }\n    },\n    \"shipping\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"PL\",\n            \"first_name\": \"joseph\",\n            \"last_name\": \"Doe\"\n        },\n        \"phone\": {\n            \"number\": \"8056594427\",\n            \"country_code\": \"+91\"\n        }\n    },\n    \"order_details\": [\n        {\n            \"product_name\": \"Apple iphone 15\",\n            \"quantity\": 1,\n            \"amount\": 1000,\n            \"account_name\": \"transaction_processing\"\n        }\n    ],\n    \"statement_descriptor_name\": \"joseph\",\n    \"statement_descriptor_suffix\": \"JS\",\n    \"metadata\": {\n        \"udf1\": \"value1\",\n        \"new_customer\": \"true\",\n        \"login_date\": \"2019-09-10T10:11:12Z\"\n    },\n\n  \"request_incremental_authorization\":true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments"
											]
										},
										"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
									},
									"response": []
								},
								{
									"name": "Incremental Authorization Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"[POST]::/payments:id/incremental_authorizations - Content check if value for 'amount' matches '1001'\", function () {",
													"    // Parse the response JSON",
													"    var jsonData = pm.response.json();",
													"",
													"    // Check if the 'amount' in the response matches the expected value",
													"    pm.expect(jsonData.incremental_authorizations[0].amount).to.eql(1001);",
													"});",
													"",
													"pm.test(\"[POST]::/payments:id/incremental_authorizations - Content check if value for 'status' matches 'success'\", function () {",
													"    // Parse the response JSON",
													"    var jsonData = pm.response.json();",
													"",
													"    // Check if the 'status' in the response matches the expected value",
													"    pm.expect(jsonData.incremental_authorizations[0].status).to.eql(\"success\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{api_key}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "api-key",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 1001\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments/{{payment_id}}/incremental_authorization",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												"{{payment_id}}",
												"incremental_authorization"
											]
										}
									},
									"response": []
								},
								{
									"name": "Payments - Retrieve Copy 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx ",
													"pm.test(\"[GET]::/payments/:id - Status code is 2xx\", function () {",
													"   pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[GET]::/payments/:id - Content-Type is application/json\", function () {",
													"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"// Validate if response has JSON Body ",
													"pm.test(\"[GET]::/payments/:id - Response has JSON Body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {jsonData = pm.response.json();}catch(e){}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
													"};",
													"",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
													"};",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
													"};",
													"",
													"",
													"// Response body should have value \"requires_capture\" for \"status\"",
													"if (jsonData?.status) {",
													"pm.test(\"[POST]::/payments - Content check if value for 'status' matches 'requires_capture'\", function() {",
													"  pm.expect(jsonData.status).to.eql(\"requires_capture\");",
													"})};"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{api_key}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "api-key",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-feature",
												"value": "router-custom",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/payments/:id?expand_attempts=true&force_sync=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												":id"
											],
											"query": [
												{
													"key": "client_secret",
													"value": "pay_1sIy7sTMzo8ibi00iOQB_secret_8wB9Wlfsd02oi0olPjvg",
													"disabled": true
												},
												{
													"key": "expand_attempts",
													"value": "true"
												},
												{
													"key": "force_sync",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{payment_id}}"
												}
											]
										},
										"description": "To retrieve the properties of a Payment. This may be used to get the status of a previously initiated payment or next action for an ongoing payment"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Variation Cases",
					"item": [
						{
							"name": "Scenario1-Create payment with Invalid card details",
							"item": [
								{
									"name": "Payments - Create(Invalid card number)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 4xx",
													"pm.test(\"[POST]::/payments - Status code is 4xx\", function () {",
													"  pm.response.to.be.error;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have \"error\"",
													"pm.test(\"[POST]::/payments - Content check if 'error' exists\", function () {",
													"  pm.expect(typeof jsonData.error !== \"undefined\").to.be.true;",
													"});",
													"",
													"// Response body should have value \"connector error\" for \"error type\"",
													"if (jsonData?.error?.type) {",
													"  pm.test(",
													"    \"[POST]::/payments - Content check if value for 'error.type' matches 'connector_error'\",",
													"    function () {",
													"      pm.expect(jsonData.error.type).to.eql(\"connector_error\");",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 6540,\n    \"currency\": \"USD\",\n    \"confirm\": true,\n    \"capture_method\": \"automatic\",\n    \"capture_on\": \"2022-09-10T10:11:12Z\",\n    \"amount_to_capture\": 6540,\n    \"customer_id\": \"StripeCustomer\",\n    \"email\": \"guest@example.com\",\n    \"name\": \"John Doe\",\n    \"phone\": \"999999999\",\n    \"phone_country_code\": \"+65\",\n    \"description\": \"Its my first payment request\",\n    \"authentication_type\": \"no_three_ds\",\n    \"return_url\": \"https://duck.com\",\n    \"payment_method\": \"card\",\n    \"payment_method_data\": {\n        \"card\": {\n            \"card_number\": \"123456\",\n            \"card_exp_month\": \"10\",\n            \"card_exp_year\": \"25\",\n            \"card_holder_name\": \"joseph Doe\",\n            \"card_cvc\": \"123\"\n        }\n    },\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"united states\",\n            \"first_name\":\"likhin\",\n            \"last_name\":\"bopanna\"\n        }\n    },\n    \"shipping\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"united states\",\n            \"first_name\":\"likhin\",\n            \"last_name\":\"bopanna\"\n        }\n    },\n    \"statement_descriptor_name\": \"joseph\",\n    \"statement_descriptor_suffix\": \"JS\",\n    \"metadata\": {\n        \"udf1\": \"value1\",\n        \"new_customer\": \"true\",\n        \"login_date\": \"2019-09-10T10:11:12Z\"\n    },\n    \"routing\": {\n        \"type\": \"single\",\n        \"data\": \"cybersource\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments"
											]
										},
										"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
									},
									"response": []
								},
								{
									"name": "Payments - Create(Invalid Exp month)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 4xx",
													"pm.test(\"[POST]::/payments - Status code is 4xx\", function () {",
													"  pm.response.to.be.error;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have \"next_action.redirect_to_url\"",
													"pm.test(\"[POST]::/payments - Content check if 'error' exists\", function () {",
													"  pm.expect(typeof jsonData.error !== \"undefined\").to.be.true;",
													"});",
													"",
													"// Response body should have value \"connector error\" for \"error type\"",
													"if (jsonData?.error?.type) {",
													"  pm.test(",
													"    \"[POST]::/payments - Content check if value for 'error.type' matches 'invalid_request'\",",
													"    function () {",
													"      pm.expect(jsonData.error.type).to.eql(\"invalid_request\");",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 6540,\n    \"currency\": \"USD\",\n    \"confirm\": true,\n    \"capture_method\": \"automatic\",\n    \"capture_on\": \"2022-09-10T10:11:12Z\",\n    \"amount_to_capture\": 6540,\n    \"customer_id\": \"StripeCustomer\",\n    \"email\": \"guest@example.com\",\n    \"name\": \"John Doe\",\n    \"phone\": \"999999999\",\n    \"phone_country_code\": \"+65\",\n    \"description\": \"Its my first payment request\",\n    \"authentication_type\": \"no_three_ds\",\n    \"return_url\": \"https://duck.com\",\n    \"payment_method\": \"card\",\n    \"payment_method_data\": {\n        \"card\": {\n            \"card_number\": \"4242424242424242\",\n            \"card_exp_month\": \"01\",\n            \"card_exp_year\": \"2023\",\n            \"card_holder_name\": \"joseph Doe\",\n            \"card_cvc\": \"123\"\n        }\n    },\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n           \"first_name\":\"likhin\",\n            \"last_name\":\"bopanna\"\n        }\n    },\n    \"shipping\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\":\"likhin\",\n            \"last_name\":\"bopanna\"\n        }\n    },\n    \"statement_descriptor_name\": \"joseph\",\n    \"statement_descriptor_suffix\": \"JS\",\n    \"metadata\": {\n        \"udf1\": \"value1\",\n        \"new_customer\": \"true\",\n        \"login_date\": \"2019-09-10T10:11:12Z\"\n    },\n    \"routing\": {\n        \"type\": \"single\",\n        \"data\": \"stripe\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments"
											]
										},
										"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
									},
									"response": []
								},
								{
									"name": "Payments - Create(Invalid Exp Year)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 4xx",
													"pm.test(\"[POST]::/payments - Status code is 4xx\", function () {",
													"  pm.response.to.be.error;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have \"next_action.redirect_to_url\"",
													"pm.test(\"[POST]::/payments - Content check if 'error' exists\", function () {",
													"  pm.expect(typeof jsonData.error !== \"undefined\").to.be.true;",
													"});",
													"",
													"// Response body should have value \"connector error\" for \"error type\"",
													"if (jsonData?.error?.type) {",
													"  pm.test(",
													"    \"[POST]::/payments - Content check if value for 'error.type' matches 'invalid_request'\",",
													"    function () {",
													"      pm.expect(jsonData.error.type).to.eql(\"invalid_request\");",
													"    },",
													"  );",
													"}",
													"",
													"// Response body should have value \"connector error\" for \"error message\"",
													"if (jsonData?.error?.message) {",
													"  pm.test(",
													"    \"[POST]::/payments - Content check if value for 'error.message' matches 'Invalid Expiry Year'\",",
													"    function () {",
													"      pm.expect(jsonData.error.message).to.eql(\"Invalid Expiry Year\");",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 6540,\n    \"currency\": \"USD\",\n    \"confirm\": true,\n    \"capture_method\": \"automatic\",\n    \"capture_on\": \"2022-09-10T10:11:12Z\",\n    \"amount_to_capture\": 6540,\n    \"customer_id\": \"StripeCustomer\",\n    \"email\": \"guest@example.com\",\n    \"name\": \"John Doe\",\n    \"phone\": \"999999999\",\n    \"phone_country_code\": \"+65\",\n    \"description\": \"Its my first payment request\",\n    \"authentication_type\": \"no_three_ds\",\n    \"return_url\": \"https://duck.com\",\n    \"payment_method\": \"card\",\n    \"payment_method_data\": {\n        \"card\": {\n            \"card_number\": \"4242424242424242\",\n            \"card_exp_month\": \"10\",\n            \"card_exp_year\": \"2022\",\n            \"card_holder_name\": \"joseph Doe\",\n            \"card_cvc\": \"123\"\n        }\n    },\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\":\"likhin\",\n            \"last_name\":\"bopanna\"\n        }\n    },\n    \"shipping\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n           \"first_name\":\"likhin\",\n            \"last_name\":\"bopanna\"\n        }\n    },\n    \"statement_descriptor_name\": \"joseph\",\n    \"statement_descriptor_suffix\": \"JS\",\n    \"metadata\": {\n        \"udf1\": \"value1\",\n        \"new_customer\": \"true\",\n        \"login_date\": \"2019-09-10T10:11:12Z\"\n    },\n    \"routing\": {\n        \"type\": \"single\",\n        \"data\": \"cybersource\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments"
											]
										},
										"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
									},
									"response": []
								},
								{
									"name": "Payments - Create(invalid CVV)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 4xx",
													"pm.test(\"[POST]::/payments - Status code is 4xx\", function () {",
													"  pm.response.to.be.error;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have \"error\"",
													"pm.test(\"[POST]::/payments - Content check if 'error' exists\", function () {",
													"  pm.expect(typeof jsonData.error !== \"undefined\").to.be.true;",
													"});",
													"",
													"// Response body should have value \"connector error\" for \"error type\"",
													"if (jsonData?.error?.type) {",
													"  pm.test(",
													"    \"[POST]::/payments - Content check if value for 'error.type' matches 'connector'\",",
													"    function () {",
													"      pm.expect(jsonData.error.type).to.eql(\"connector\");",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 6540,\n    \"currency\": \"USD\",\n    \"confirm\": true,\n    \"capture_method\": \"automatic\",\n    \"capture_on\": \"2022-09-10T10:11:12Z\",\n    \"amount_to_capture\": 6540,\n    \"customer_id\": \"StripeCustomer\",\n    \"email\": \"guest@example.com\",\n    \"name\": \"John Doe\",\n    \"phone\": \"999999999\",\n    \"phone_country_code\": \"+65\",\n    \"description\": \"Its my first payment request\",\n    \"authentication_type\": \"no_three_ds\",\n    \"return_url\": \"https://duck.com\",\n    \"payment_method\": \"card\",\n    \"payment_method_data\": {\n        \"card\": {\n            \"card_number\": \"123456\",\n            \"card_exp_month\": \"10\",\n            \"card_exp_year\": \"25\",\n            \"card_holder_name\": \"joseph Doe\",\n            \"card_cvc\": \"12345\"\n        }\n    },\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\":\"likhin\",\n            \"last_name\":\"bopanna\"\n        }\n    },\n    \"shipping\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\":\"likhin\",\n            \"last_name\":\"bopanna\"\n        }\n    },\n    \"statement_descriptor_name\": \"joseph\",\n    \"statement_descriptor_suffix\": \"JS\",\n    \"metadata\": {\n        \"udf1\": \"value1\",\n        \"new_customer\": \"true\",\n        \"login_date\": \"2019-09-10T10:11:12Z\"\n    },\n    \"routing\": {\n        \"type\": \"single\",\n        \"data\": \"stripe\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments"
											]
										},
										"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
									},
									"response": []
								}
							]
						},
						{
							"name": "Scenario2-Confirming the payment without PMD",
							"item": [
								{
									"name": "Payments - Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"requires_payment_method\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments - Content check if value for 'status' matches 'requires_payment_method'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"requires_payment_method\");",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 6540,\n    \"currency\": \"USD\",\n    \"confirm\": false,\n    \"capture_method\": \"automatic\",\n    \"capture_on\": \"2022-09-10T10:11:12Z\",\n    \"amount_to_capture\": 6540,\n    \"customer_id\": \"StripeCustomer\",\n    \"email\": \"guest@example.com\",\n    \"name\": \"John Doe\",\n    \"phone\": \"999999999\",\n    \"phone_country_code\": \"+65\",\n    \"description\": \"Its my first payment request\",\n    \"authentication_type\": \"no_three_ds\",\n    \"return_url\": \"https://duck.com\",\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"likhin\",\n            \"last_name\": \"bopanna\"\n        }\n    },\n    \"shipping\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"likhin\",\n            \"last_name\": \"bopanna\"\n        }\n    },\n    \"routing\": {\n        \"type\": \"single\",\n        \"data\": \"cybersource\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments"
											]
										},
										"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
									},
									"response": []
								},
								{
									"name": "Payments - Confirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 4xx",
													"pm.test(\"[POST]::/payments - Status code is 4xx\", function () {",
													"  pm.response.to.be.error;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(",
													"  \"[POST]::/payments/:id/confirm - Content-Type is application/json\",",
													"  function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"      \"application/json\",",
													"    );",
													"  },",
													");",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[POST]::/payments/:id/confirm - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have \"error\"",
													"pm.test(",
													"  \"[POST]::/payments/:id/confirm - Content check if 'error' exists\",",
													"  function () {",
													"    pm.expect(typeof jsonData.error !== \"undefined\").to.be.true;",
													"  },",
													");",
													"",
													"// Response body should have value \"connector error\" for \"error type\"",
													"if (jsonData?.error?.type) {",
													"  pm.test(",
													"    \"[POST]::/payments/:id/confirm - Content check if value for 'error.type' matches 'invalid_request'\",",
													"    function () {",
													"      pm.expect(jsonData.error.type).to.eql(\"invalid_request\");",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{publishable_key}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "api-key",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"client_secret\":\"{{client_secret}}\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments/:id/confirm",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												":id",
												"confirm"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{payment_id}}",
													"description": "(Required) unique payment id"
												}
											]
										},
										"description": "This API is to confirm the payment request and forward payment to the payment processor. This API provides more granular control upon when the API is forwarded to the payment processor. Alternatively you can confirm the payment within the Payments-Create API"
									},
									"response": []
								}
							]
						},
						{
							"name": "Scenario3-Capture greater amount",
							"item": [
								{
									"name": "Payments - Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"requires_capture\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments - Content check if value for 'status' matches 'requires_capture'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"requires_capture\");",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 6540,\n    \"currency\": \"USD\",\n    \"confirm\": true,\n    \"capture_method\": \"manual\",\n    \"capture_on\": \"2022-09-10T10:11:12Z\",\n    \"amount_to_capture\": 6540,\n    \"customer_id\": \"StripeCustomer\",\n    \"email\": \"guest@example.com\",\n    \"name\": \"John Doe\",\n    \"phone\": \"999999999\",\n    \"phone_country_code\": \"+65\",\n    \"description\": \"Its my first payment request\",\n    \"authentication_type\": \"no_three_ds\",\n    \"return_url\": \"https://duck.com\",\n    \"payment_method\": \"card\",\n    \"payment_method_data\": {\n        \"card\": {\n            \"card_number\": \"4242424242424242\",\n            \"card_exp_month\": \"10\",\n            \"card_exp_year\": \"25\",\n            \"card_holder_name\": \"joseph Doe\",\n            \"card_cvc\": \"123\"\n        }\n    },\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\":\"likhin\",\n            \"last_name\":\"bopanna\"\n        }\n    },\n    \"shipping\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\":\"likhin\",\n            \"last_name\":\"bopanna\"\n        }\n    },\n    \"statement_descriptor_name\": \"joseph\",\n    \"statement_descriptor_suffix\": \"JS\",\n    \"metadata\": {\n        \"udf1\": \"value1\",\n        \"new_customer\": \"true\",\n        \"login_date\": \"2019-09-10T10:11:12Z\"\n    },\n    \"routing\": {\n        \"type\": \"single\",\n        \"data\": \"cybersource\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments"
											]
										},
										"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
									},
									"response": []
								},
								{
									"name": "Payments - Capture",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 4xx",
													"pm.test(\"[POST]::/payments/:id/capture - Status code is 4xx\", function () {",
													"  pm.response.to.be.error;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(",
													"  \"[POST]::/payments/:id/capture - Content-Type is application/json\",",
													"  function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"      \"application/json\",",
													"    );",
													"  },",
													");",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[POST]::/payments/:id/capture - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have \"error\"",
													"pm.test(",
													"  \"[POST]::/payments/:id/confirm - Content check if 'error' exists\",",
													"  function () {",
													"    pm.expect(typeof jsonData.error !== \"undefined\").to.be.true;",
													"  },",
													");",
													"",
													"// Response body should have value \"connector error\" for \"error type\"",
													"if (jsonData?.error?.type) {",
													"  pm.test(",
													"    \"[POST]::/payments/:id/confirm - Content check if value for 'error.type' matches 'invalid_request'\",",
													"    function () {",
													"      pm.expect(jsonData.error.type).to.eql(\"invalid_request\");",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"amount_to_capture\":7000,\"statement_descriptor_name\":\"Joseph\",\"statement_descriptor_suffix\":\"JS\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments/:id/capture",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												":id",
												"capture"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{payment_id}}",
													"description": "(Required) unique payment id"
												}
											]
										},
										"description": "To capture the funds for an uncaptured payment"
									},
									"response": []
								},
								{
									"name": "Payments - Retrieve",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[GET]::/payments/:id - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[GET]::/payments/:id - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[GET]::/payments/:id - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"requires_capture\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments - Content check if value for 'status' matches 'requires_capture'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"requires_capture\");",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/payments/:id?force_sync=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												":id"
											],
											"query": [
												{
													"key": "force_sync",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{payment_id}}",
													"description": "(Required) unique payment id"
												}
											]
										},
										"description": "To retrieve the properties of a Payment. This may be used to get the status of a previously initiated payment or next action for an ongoing payment"
									},
									"response": []
								}
							]
						},
						{
							"name": "Scenario4-Capture the succeeded payment",
							"item": [
								{
									"name": "Payments - Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments - Content check if value for 'status' matches 'succeeded'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 6540,\n    \"currency\": \"USD\",\n    \"confirm\": true,\n    \"capture_method\": \"automatic\",\n    \"capture_on\": \"2022-09-10T10:11:12Z\",\n    \"amount_to_capture\": 6540,\n    \"customer_id\": \"StripeCustomer\",\n    \"email\": \"guest@example.com\",\n    \"name\": \"John Doe\",\n    \"phone\": \"999999999\",\n    \"phone_country_code\": \"+65\",\n    \"description\": \"Its my first payment request\",\n    \"authentication_type\": \"no_three_ds\",\n    \"return_url\": \"https://duck.com\",\n    \"payment_method\": \"card\",\n    \"payment_method_data\": {\n        \"card\": {\n            \"card_number\": \"4242424242424242\",\n            \"card_exp_month\": \"10\",\n            \"card_exp_year\": \"25\",\n            \"card_holder_name\": \"joseph Doe\",\n            \"card_cvc\": \"123\"\n        }\n    },\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\":\"likhin\",\n            \"last_name\":\"bopanna\"\n        }\n    },\n    \"shipping\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\":\"likhin\",\n            \"last_name\":\"bopanna\"\n        }\n    },\n    \"statement_descriptor_name\": \"joseph\",\n    \"statement_descriptor_suffix\": \"JS\",\n    \"metadata\": {\n        \"udf1\": \"value1\",\n        \"new_customer\": \"true\",\n        \"login_date\": \"2019-09-10T10:11:12Z\"\n    },\n    \"routing\": {\n        \"type\": \"single\",\n        \"data\": \"cybersource\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments"
											]
										},
										"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
									},
									"response": []
								},
								{
									"name": "Payments - Capture",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 4xx",
													"pm.test(\"[POST]::/payments/:id/capture - Status code is 4xx\", function () {",
													"  pm.response.to.be.error;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(",
													"  \"[POST]::/payments/:id/capture - Content-Type is application/json\",",
													"  function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"      \"application/json\",",
													"    );",
													"  },",
													");",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[POST]::/payments/:id/capture - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have \"error\"",
													"pm.test(",
													"  \"[POST]::/payments/:id/confirm - Content check if 'error' exists\",",
													"  function () {",
													"    pm.expect(typeof jsonData.error !== \"undefined\").to.be.true;",
													"  },",
													");",
													"",
													"// Response body should have value \"connector error\" for \"error type\"",
													"if (jsonData?.error?.type) {",
													"  pm.test(",
													"    \"[POST]::/payments/:id/confirm - Content check if value for 'error.type' matches 'invalid_request'\",",
													"    function () {",
													"      pm.expect(jsonData.error.type).to.eql(\"invalid_request\");",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"amount_to_capture\":7000,\"statement_descriptor_name\":\"Joseph\",\"statement_descriptor_suffix\":\"JS\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments/:id/capture",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												":id",
												"capture"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{payment_id}}",
													"description": "(Required) unique payment id"
												}
											]
										},
										"description": "To capture the funds for an uncaptured payment"
									},
									"response": []
								}
							]
						},
						{
							"name": "Scenario5-Void the success_slash_failure payment",
							"item": [
								{
									"name": "Payments - Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments - Content check if value for 'status' matches 'succeeded'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 6540,\n    \"currency\": \"USD\",\n    \"confirm\": true,\n    \"capture_method\": \"automatic\",\n    \"capture_on\": \"2022-09-10T10:11:12Z\",\n    \"amount_to_capture\": 6540,\n    \"customer_id\": \"StripeCustomer\",\n    \"email\": \"guest@example.com\",\n    \"name\": \"John Doe\",\n    \"phone\": \"999999999\",\n    \"phone_country_code\": \"+65\",\n    \"description\": \"Its my first payment request\",\n    \"authentication_type\": \"no_three_ds\",\n    \"return_url\": \"https://duck.com\",\n    \"payment_method\": \"card\",\n    \"payment_method_data\": {\n        \"card\": {\n            \"card_number\": \"4242424242424242\",\n            \"card_exp_month\": \"10\",\n            \"card_exp_year\": \"25\",\n            \"card_holder_name\": \"joseph Doe\",\n            \"card_cvc\": \"123\"\n        }\n    },\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\":\"likhin\",\n            \"last_name\":\"bopanna\"\n        }\n    },\n    \"shipping\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\":\"likhin\",\n            \"last_name\":\"bopanna\"\n        }\n    },\n    \"statement_descriptor_name\": \"joseph\",\n    \"statement_descriptor_suffix\": \"JS\",\n    \"metadata\": {\n        \"udf1\": \"value1\",\n        \"new_customer\": \"true\",\n        \"login_date\": \"2019-09-10T10:11:12Z\"\n    },\n    \"routing\": {\n        \"type\": \"single\",\n        \"data\": \"cybersource\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments"
											]
										},
										"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
									},
									"response": []
								},
								{
									"name": "Payments - Cancel",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 4xx",
													"pm.test(\"[POST]::/payments/:id/cancel - Status code is 4xx\", function () {",
													"  pm.response.to.be.error;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(",
													"  \"[POST]::/payments/:id/cancel - Content-Type is application/json\",",
													"  function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"      \"application/json\",",
													"    );",
													"  },",
													");",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[POST]::/payments/:id/cancel - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have \"error\"",
													"pm.test(",
													"  \"[POST]::/payments/:id/confirm - Content check if 'error' exists\",",
													"  function () {",
													"    pm.expect(typeof jsonData.error !== \"undefined\").to.be.true;",
													"  },",
													");",
													"",
													"// Response body should have value \"connector error\" for \"error type\"",
													"if (jsonData?.error?.type) {",
													"  pm.test(",
													"    \"[POST]::/payments/:id/confirm - Content check if value for 'error.type' matches 'invalid_request'\",",
													"    function () {",
													"      pm.expect(jsonData.error.type).to.eql(\"invalid_request\");",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"cancellation_reason\":\"requested_by_customer\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments/:id/cancel",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												":id",
												"cancel"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{payment_id}}",
													"description": "(Required) unique payment id"
												}
											]
										},
										"description": "A Payment could can be cancelled when it is in one of these statuses: requires_payment_method, requires_capture, requires_confirmation, requires_customer_action"
									},
									"response": []
								}
							]
						},
						{
							"name": "Scenario7-Refund exceeds amount",
							"item": [
								{
									"name": "Payments - Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments - Content check if value for 'status' matches 'succeeded'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 6540,\n    \"currency\": \"USD\",\n    \"confirm\": true,\n    \"capture_method\": \"automatic\",\n    \"capture_on\": \"2022-09-10T10:11:12Z\",\n    \"amount_to_capture\": 6540,\n    \"customer_id\": \"StripeCustomer\",\n    \"email\": \"guest@example.com\",\n    \"name\": \"John Doe\",\n    \"phone\": \"999999999\",\n    \"phone_country_code\": \"+65\",\n    \"description\": \"Its my first payment request\",\n    \"authentication_type\": \"no_three_ds\",\n    \"return_url\": \"https://duck.com\",\n    \"payment_method\": \"card\",\n    \"payment_method_data\": {\n        \"card\": {\n            \"card_number\": \"4242424242424242\",\n            \"card_exp_month\": \"10\",\n            \"card_exp_year\": \"25\",\n            \"card_holder_name\": \"joseph Doe\",\n            \"card_cvc\": \"123\"\n        }\n    },\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\":\"likhin\",\n            \"last_name\":\"bopanna\"\n        }\n    },\n    \"shipping\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\":\"likhin\",\n            \"last_name\":\"bopanna\"\n        }\n    },\n    \"statement_descriptor_name\": \"joseph\",\n    \"statement_descriptor_suffix\": \"JS\",\n    \"metadata\": {\n        \"udf1\": \"value1\",\n        \"new_customer\": \"true\",\n        \"login_date\": \"2019-09-10T10:11:12Z\"\n    },\n    \"routing\": {\n        \"type\": \"single\",\n        \"data\": \"cybersource\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments"
											]
										},
										"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
									},
									"response": []
								},
								{
									"name": "Payments - Retrieve",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[GET]::/payments/:id - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[GET]::/payments/:id - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[GET]::/payments/:id - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"Succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments/:id - Content check if value for 'status' matches 'succeeded'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/payments/:id?force_sync=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												":id"
											],
											"query": [
												{
													"key": "force_sync",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{payment_id}}",
													"description": "(Required) unique payment id"
												}
											]
										},
										"description": "To retrieve the properties of a Payment. This may be used to get the status of a previously initiated payment or next action for an ongoing payment"
									},
									"response": []
								},
								{
									"name": "Refunds - Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 4xx",
													"pm.test(\"[POST]::/refunds - Status code is 4xx\", function () {",
													"  pm.response.to.be.error;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/refunds - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set refund_id as variable for jsonData.payment_id",
													"if (jsonData?.refund_id) {",
													"  pm.collectionVariables.set(\"refund_id\", jsonData.refund_id);",
													"  console.log(",
													"    \"- use {{refund_id}} as collection variable for value\",",
													"    jsonData.refund_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{refund_id}}, as jsonData.refund_id is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have \"error\"",
													"pm.test(",
													"  \"[POST]::/payments/:id/confirm - Content check if 'error' exists\",",
													"  function () {",
													"    pm.expect(typeof jsonData.error !== \"undefined\").to.be.true;",
													"  },",
													");",
													"",
													"// Response body should have value \"connector error\" for \"error type\"",
													"if (jsonData?.error?.type) {",
													"  pm.test(",
													"    \"[POST]::/payments/:id/confirm - Content check if value for 'error.type' matches 'invalid_request'\",",
													"    function () {",
													"      pm.expect(jsonData.error.type).to.eql(\"invalid_request\");",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"payment_id\":\"{{payment_id}}\",\"amount\":7000,\"reason\":\"Customer returned product\",\"refund_type\":\"instant\",\"metadata\":{\"udf1\":\"value1\",\"new_customer\":\"true\",\"login_date\":\"2019-09-10T10:11:12Z\"}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/refunds",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"refunds"
											]
										},
										"description": "To create a refund against an already processed payment"
									},
									"response": []
								}
							]
						},
						{
							"name": "Scenario8-Refund for unsuccessful payment",
							"item": [
								{
									"name": "Payments - Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"requires_confirmation\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments - Content check if value for 'status' matches 'requires_confirmation'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"requires_confirmation\");",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 6540,\n    \"currency\": \"USD\",\n    \"confirm\": false,\n    \"capture_method\": \"automatic\",\n    \"capture_on\": \"2022-09-10T10:11:12Z\",\n    \"amount_to_capture\": 6540,\n    \"customer_id\": \"StripeCustomer\",\n    \"email\": \"guest@example.com\",\n    \"name\": \"John Doe\",\n    \"phone\": \"999999999\",\n    \"phone_country_code\": \"+65\",\n    \"description\": \"Its my first payment request\",\n    \"authentication_type\": \"no_three_ds\",\n    \"return_url\": \"https://duck.com\",\n    \"payment_method\": \"card\",\n    \"payment_method_data\": {\n        \"card\": {\n            \"card_number\": \"4242424242424242\",\n            \"card_exp_month\": \"10\",\n            \"card_exp_year\": \"25\",\n            \"card_holder_name\": \"joseph Doe\",\n            \"card_cvc\": \"123\"\n        }\n    },\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\":\"likhin\",\n            \"last_name\":\"bopanna\"\n        }\n    },\n    \"shipping\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\":\"likhin\",\n            \"last_name\":\"bopanna\"\n        }\n    },\n    \"statement_descriptor_name\": \"joseph\",\n    \"statement_descriptor_suffix\": \"JS\",\n    \"metadata\": {\n        \"udf1\": \"value1\",\n        \"new_customer\": \"true\",\n        \"login_date\": \"2019-09-10T10:11:12Z\"\n    },\n    \"routing\": {\n        \"type\": \"single\",\n        \"data\": \"cybersource\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments"
											]
										},
										"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
									},
									"response": []
								},
								{
									"name": "Payments - Retrieve",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[GET]::/payments/:id - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[GET]::/payments/:id - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[GET]::/payments/:id - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"requires_confirmation\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments/:id - Content check if value for 'status' matches 'requires_confirmation'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"requires_confirmation\");",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/payments/:id?force_sync=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												":id"
											],
											"query": [
												{
													"key": "force_sync",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{payment_id}}",
													"description": "(Required) unique payment id"
												}
											]
										},
										"description": "To retrieve the properties of a Payment. This may be used to get the status of a previously initiated payment or next action for an ongoing payment"
									},
									"response": []
								},
								{
									"name": "Refunds - Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 4xx",
													"pm.test(\"[POST]::/refunds - Status code is 4xx\", function () {",
													"  pm.response.to.be.error;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/refunds - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set refund_id as variable for jsonData.payment_id",
													"if (jsonData?.refund_id) {",
													"  pm.collectionVariables.set(\"refund_id\", jsonData.refund_id);",
													"  console.log(",
													"    \"- use {{refund_id}} as collection variable for value\",",
													"    jsonData.refund_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{refund_id}}, as jsonData.refund_id is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have \"error\"",
													"pm.test(",
													"  \"[POST]::/payments/:id/confirm - Content check if 'error' exists\",",
													"  function () {",
													"    pm.expect(typeof jsonData.error !== \"undefined\").to.be.true;",
													"  },",
													");",
													"",
													"// Response body should have value \"invalid_request\" for \"error type\"",
													"if (jsonData?.error?.type) {",
													"  pm.test(",
													"    \"[POST]::/payments/:id/confirm - Content check if value for 'error.type' matches 'invalid_request'\",",
													"    function () {",
													"      pm.expect(jsonData.error.type).to.eql(\"invalid_request\");",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"payment_id\":\"{{payment_id}}\",\"amount\":540,\"reason\":\"Customer returned product\",\"refund_type\":\"instant\",\"metadata\":{\"udf1\":\"value1\",\"new_customer\":\"true\",\"login_date\":\"2019-09-10T10:11:12Z\"}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/refunds",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"refunds"
											]
										},
										"description": "To create a refund against an already processed payment"
									},
									"response": []
								}
							]
						},
						{
							"name": "Scenario9-Create a recurring payment with greater mandate amount",
							"item": [
								{
									"name": "Payments - Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments - Content check if value for 'status' matches 'succeeded'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"    },",
													"  );",
													"}",
													"",
													"// Response body should have value \"succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments - Content check if value for 'status' matches 'succeeded'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"    },",
													"  );",
													"}",
													"",
													"// Response body should have \"mandate_id\"",
													"pm.test(",
													"  \"[POST]::/payments - Content check if 'mandate_id' exists\",",
													"  function () {",
													"    pm.expect(typeof jsonData.mandate_id !== \"undefined\").to.be.true;",
													"  },",
													");",
													"",
													"// Response body should have \"mandate_data\"",
													"pm.test(",
													"  \"[POST]::/payments - Content check if 'mandate_data' exists\",",
													"  function () {",
													"    pm.expect(typeof jsonData.mandate_data !== \"undefined\").to.be.true;",
													"  },",
													");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 6540,\n    \"currency\": \"USD\",\n    \"confirm\": true,\n    \"capture_method\": \"automatic\",\n    \"capture_on\": \"2022-09-10T10:11:12Z\",\n    \"amount_to_capture\": 6540,\n    \"customer_id\": \"StripeCustomer\",\n    \"email\": \"guest@example.com\",\n    \"name\": \"John Doe\",\n    \"phone\": \"999999999\",\n    \"phone_country_code\": \"+65\",\n    \"description\": \"Its my first payment request\",\n    \"authentication_type\": \"no_three_ds\",\n    \"return_url\": \"https://duck.com\",\n    \"payment_method\": \"card\",\n    \"payment_method_data\": {\n        \"card\": {\n            \"card_number\": \"4242424242424242\",\n            \"card_exp_month\": \"10\",\n            \"card_exp_year\": \"25\",\n            \"card_holder_name\": \"joseph Doe\",\n            \"card_cvc\": \"123\"\n        }\n    },\n    \"setup_future_usage\": \"off_session\",\n    \"mandate_data\": {\n        \"customer_acceptance\": {\n            \"acceptance_type\": \"offline\",\n            \"accepted_at\": \"1963-05-03T04:07:52.723Z\",\n            \"online\": {\n                \"ip_address\": \"127.0.0.1\",\n                \"user_agent\": \"amet irure esse\"\n            }\n        },\n        \"mandate_type\": {\n            \"single_use\": {\n                \"amount\": 7000,\n                \"currency\": \"USD\"\n            }\n        }\n    },\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n           \"first_name\":\"likhin\",\n            \"last_name\":\"bopanna\"\n        }\n    },\n    \"shipping\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\":\"likhin\",\n            \"last_name\":\"bopanna\"\n        }\n    },\n    \"statement_descriptor_name\": \"joseph\",\n    \"statement_descriptor_suffix\": \"JS\",\n    \"metadata\": {\n        \"udf1\": \"value1\",\n        \"new_customer\": \"true\",\n        \"login_date\": \"2019-09-10T10:11:12Z\"\n    },\n    \"routing\": {\n        \"type\": \"single\",\n        \"data\": \"stripe\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments"
											]
										},
										"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
									},
									"response": []
								},
								{
									"name": "Payments - Retrieve",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[GET]::/payments/:id - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[GET]::/payments/:id - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[GET]::/payments/:id - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"Succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments/:id - Content check if value for 'status' matches 'succeeded'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"    },",
													"  );",
													"}",
													"",
													"// Response body should have \"mandate_id\"",
													"pm.test(",
													"  \"[POST]::/payments - Content check if 'mandate_id' exists\",",
													"  function () {",
													"    pm.expect(typeof jsonData.mandate_id !== \"undefined\").to.be.true;",
													"  },",
													");",
													"",
													"// Response body should have \"mandate_data\"",
													"pm.test(",
													"  \"[POST]::/payments - Content check if 'mandate_data' exists\",",
													"  function () {",
													"    pm.expect(typeof jsonData.mandate_data !== \"undefined\").to.be.true;",
													"  },",
													");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/payments/:id?force_sync=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												":id"
											],
											"query": [
												{
													"key": "force_sync",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{payment_id}}",
													"description": "(Required) unique payment id"
												}
											]
										},
										"description": "To retrieve the properties of a Payment. This may be used to get the status of a previously initiated payment or next action for an ongoing payment"
									},
									"response": []
								},
								{
									"name": "Recurring Payments - Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 4xx",
													"pm.test(\"[POST]::/payments - Status code is 4xx\", function () {",
													"  pm.response.to.be.error;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have \"error\"",
													"pm.test(",
													"  \"[POST]::/payments/:id/confirm - Content check if 'error' exists\",",
													"  function () {",
													"    pm.expect(typeof jsonData.error !== \"undefined\").to.be.true;",
													"  },",
													");",
													"",
													"// Response body should have value \"invalid_request\" for \"error type\"",
													"if (jsonData?.error?.type) {",
													"  pm.test(",
													"    \"[POST]::/payments/:id/confirm - Content check if value for 'error.type' matches 'invalid_request'\",",
													"    function () {",
													"      pm.expect(jsonData.error.type).to.eql(\"invalid_request\");",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"amount\":8040,\"currency\":\"USD\",\"confirm\":true,\"capture_method\":\"automatic\",\"capture_on\":\"2022-09-10T10:11:12Z\",\"amount_to_capture\":6540,\"customer_id\":\"StripeCustomer\",\"email\":\"guest@example.com\",\"name\":\"John Doe\",\"phone\":\"999999999\",\"phone_country_code\":\"+65\",\"description\":\"Its my first payment request\",\"authentication_type\":\"no_three_ds\",\"return_url\":\"https://duck.com\",\"mandate_id\":\"{{mandate_id}}\",\"off_session\":true,\"billing\":{\"address\":{\"line1\":\"1467\",\"line2\":\"Harrison Street\",\"line3\":\"Harrison Street\",\"city\":\"San Fransico\",\"state\":\"California\",\"zip\":\"94122\",\"country\":\"US\",\"first_name\":\"sundari\"}},\"shipping\":{\"address\":{\"line1\":\"1467\",\"line2\":\"Harrison Street\",\"line3\":\"Harrison Street\",\"city\":\"San Fransico\",\"state\":\"California\",\"zip\":\"94122\",\"country\":\"US\",\"first_name\":\"sundari\"}},\"statement_descriptor_name\":\"joseph\",\"statement_descriptor_suffix\":\"JS\",\"metadata\":{\"udf1\":\"value1\",\"new_customer\":\"true\",\"login_date\":\"2019-09-10T10:11:12Z\"},\"routing\":{\"type\":\"single\",\"data\":\"stripe\"}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments"
											]
										},
										"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
									},
									"response": []
								}
							]
						},
						{
							"name": "Scenario10-Refund exceeds amount captured",
							"item": [
								{
									"name": "Payments - Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"requires_capture\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments - Content check if value for 'status' matches 'requires_capture'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"requires_capture\");",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 6540,\n    \"currency\": \"USD\",\n    \"confirm\": true,\n    \"capture_method\": \"manual\",\n    \"capture_on\": \"2022-09-10T10:11:12Z\",\n    \"customer_id\": \"StripeCustomer\",\n    \"email\": \"guest@example.com\",\n    \"name\": \"John Doe\",\n    \"phone\": \"999999999\",\n    \"phone_country_code\": \"+65\",\n    \"description\": \"Its my first payment request\",\n    \"authentication_type\": \"no_three_ds\",\n    \"return_url\": \"https://duck.com\",\n    \"payment_method\": \"card\",\n    \"payment_method_data\": {\n        \"card\": {\n            \"card_number\": \"4242424242424242\",\n            \"card_exp_month\": \"10\",\n            \"card_exp_year\": \"25\",\n            \"card_holder_name\": \"joseph Doe\",\n            \"card_cvc\": \"123\"\n        }\n    },\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"likhin\",\n            \"last_name\":\"bopanna\"\n        }\n    },\n    \"shipping\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"likhin\",\n            \"last_name\":\"bopanna\"\n        }\n    },\n    \"statement_descriptor_name\": \"joseph\",\n    \"statement_descriptor_suffix\": \"JS\",\n    \"metadata\": {\n        \"udf1\": \"value1\",\n        \"new_customer\": \"true\",\n        \"login_date\": \"2019-09-10T10:11:12Z\"\n    },\n    \"routing\": {\n        \"type\": \"single\",\n        \"data\": \"cybersource\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments"
											]
										},
										"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
									},
									"response": []
								},
								{
									"name": "Payments - Capture",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[POST]::/payments/:id/capture - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(",
													"  \"[POST]::/payments/:id/capture - Content-Type is application/json\",",
													"  function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"      \"application/json\",",
													"    );",
													"  },",
													");",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[POST]::/payments/:id/capture - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]:://payments/:id/capture - Content check if value for 'status' matches 'partially_captured'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"partially_captured\");",
													"    },",
													"  );",
													"}",
													"",
													"// Response body should have value \"6540\" for \"amount\"",
													"if (jsonData?.amount) {",
													"  pm.test(",
													"    \"[post]:://payments/:id/capture - Content check if value for 'amount' matches '6540'\",",
													"    function () {",
													"      pm.expect(jsonData.amount).to.eql(6540);",
													"    },",
													"  );",
													"}",
													"",
													"// Response body should have value \"6000\" for \"amount_received\"",
													"if (jsonData?.amount_received) {",
													"  pm.test(",
													"    \"[POST]::/payments:id/capture - Content check if value for 'amount_received' matches '6000'\",",
													"    function () {",
													"      pm.expect(jsonData.amount_received).to.eql(6000);",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"amount_to_capture\":6000,\"statement_descriptor_name\":\"Joseph\",\"statement_descriptor_suffix\":\"JS\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments/:id/capture",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												":id",
												"capture"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{payment_id}}",
													"description": "(Required) unique payment id"
												}
											]
										},
										"description": "To capture the funds for an uncaptured payment"
									},
									"response": []
								},
								{
									"name": "Payments - Retrieve",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx",
													"pm.test(\"[GET]::/payments/:id - Status code is 2xx\", function () {",
													"  pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[GET]::/payments/:id - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Validate if response has JSON Body",
													"pm.test(\"[GET]::/payments/:id - Response has JSON Body\", function () {",
													"  pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"  console.log(",
													"    \"- use {{payment_id}} as collection variable for value\",",
													"    jsonData.payment_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"  pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"  console.log(",
													"    \"- use {{mandate_id}} as collection variable for value\",",
													"    jsonData.mandate_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.\",",
													"  );",
													"}",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"  pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"  console.log(",
													"    \"- use {{client_secret}} as collection variable for value\",",
													"    jsonData.client_secret,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have value \"Succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"  pm.test(",
													"    \"[POST]::/payments/:id - Content check if value for 'status' matches 'partially_captured'\",",
													"    function () {",
													"      pm.expect(jsonData.status).to.eql(\"partially_captured\");",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/payments/:id?force_sync=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												":id"
											],
											"query": [
												{
													"key": "force_sync",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{payment_id}}",
													"description": "(Required) unique payment id"
												}
											]
										},
										"description": "To retrieve the properties of a Payment. This may be used to get the status of a previously initiated payment or next action for an ongoing payment"
									},
									"response": []
								},
								{
									"name": "Refunds - Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 4xx",
													"pm.test(\"[POST]::/refunds - Status code is 4xx\", function () {",
													"  pm.response.to.be.error;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/refunds - Content-Type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(",
													"    \"application/json\",",
													"  );",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {",
													"  jsonData = pm.response.json();",
													"} catch (e) {}",
													"",
													"// pm.collectionVariables - Set refund_id as variable for jsonData.payment_id",
													"if (jsonData?.refund_id) {",
													"  pm.collectionVariables.set(\"refund_id\", jsonData.refund_id);",
													"  console.log(",
													"    \"- use {{refund_id}} as collection variable for value\",",
													"    jsonData.refund_id,",
													"  );",
													"} else {",
													"  console.log(",
													"    \"INFO - Unable to assign variable {{refund_id}}, as jsonData.refund_id is undefined.\",",
													"  );",
													"}",
													"",
													"// Response body should have \"error\"",
													"pm.test(",
													"  \"[POST]::/payments/:id/confirm - Content check if 'error' exists\",",
													"  function () {",
													"    pm.expect(typeof jsonData.error !== \"undefined\").to.be.true;",
													"  },",
													");",
													"",
													"// Response body should have value \"invalid_request\" for \"error type\"",
													"if (jsonData?.error?.type) {",
													"  pm.test(",
													"    \"[POST]::/payments/:id/confirm - Content check if value for 'error.type' matches 'invalid_request'\",",
													"    function () {",
													"      pm.expect(jsonData.error.type).to.eql(\"invalid_request\");",
													"    },",
													"  );",
													"}",
													"",
													"// Response body should have value \"The refund amount exceeds the amount captured\" for \"error message\"",
													"if (jsonData?.error?.type) {",
													"  pm.test(",
													"    \"[POST]::/payments/:id/confirm - Content check if value for 'error.message' matches 'The refund amount exceeds the amount captured'\",",
													"    function () {",
													"      pm.expect(jsonData.error.message).to.eql(\"The refund amount exceeds the amount captured\");",
													"    },",
													"  );",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"payment_id\":\"{{payment_id}}\",\"amount\":6540,\"reason\":\"Customer returned product\",\"refund_type\":\"instant\",\"metadata\":{\"udf1\":\"value1\",\"new_customer\":\"true\",\"login_date\":\"2019-09-10T10:11:12Z\"}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/refunds",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"refunds"
											]
										},
										"description": "To create a refund against an already processed payment"
									},
									"response": []
								}
							]
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{api_key}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "api-key",
				"type": "string"
			},
			{
				"key": "in",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set response object as internal variable",
					"let jsonData = {};",
					"try {",
					"  jsonData = pm.response.json();",
					"} catch (e) {}",
					"",
					"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
					"if (jsonData?.payment_id) {",
					"  pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
					"  console.log(\"[LOG]::payment_id - \" + jsonData.payment_id);",
					"}",
					"",
					"console.log(\"[LOG]::x-request-id - \" + pm.response.headers.get(\"x-request-id\"));",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "",
			"type": "string"
		},
		{
			"key": "admin_api_key",
			"value": "",
			"type": "string"
		},
		{
			"key": "api_key",
			"value": "",
			"type": "string"
		},
		{
			"key": "merchant_id",
			"value": ""
		},
		{
			"key": "payment_id",
			"value": ""
		},
		{
			"key": "customer_id",
			"value": ""
		},
		{
			"key": "mandate_id",
			"value": ""
		},
		{
			"key": "payment_method_id",
			"value": ""
		},
		{
			"key": "refund_id",
			"value": ""
		},
		{
			"key": "merchant_connector_id",
			"value": ""
		},
		{
			"key": "client_secret",
			"value": "",
			"type": "string"
		},
		{
			"key": "connector_api_key",
			"value": "",
			"type": "string"
		},
		{
			"key": "publishable_key",
			"value": "",
			"type": "string"
		},
		{
			"key": "api_key_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "payment_token",
			"value": ""
		},
		{
			"key": "gateway_merchant_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "certificate",
			"value": "",
			"type": "string"
		},
		{
			"key": "certificate_keys",
			"value": "",
			"type": "string"
		},
		{
			"key": "connector_key1",
			"value": "",
			"type": "string"
		},
		{
			"key": "connector_api_secret",
			"value": "",
			"type": "string"
		}
	]
}