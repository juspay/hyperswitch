{
  "openapi": "3.0.3",
  "info": {
    "title": "Hyperswitch - API Documentation",
    "description": "\n## Get started\n\nHyperswitch provides a collection of APIs that enable you to process and manage payments.\nOur APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.\n\nYou can consume the APIs directly using your favorite HTTP/REST library.\n\nWe have a testing environment referred to \"sandbox\", which you can setup to test API calls without\naffecting production data.\nCurrently, our sandbox environment is live while our production environment is under development\nand will be available soon.\nYou can sign up on our Dashboard to get API keys to access Hyperswitch API.\n\n### Environment\n\nUse the following base URLs when making requests to the APIs:\n\n| Environment   |  Base URL                          |\n|---------------|------------------------------------|\n| Sandbox       | <https://sandbox.hyperswitch.io>   |\n| Production    | <https://api.hyperswitch.io>       |\n\n## Authentication\n\nWhen you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant\naccount, you are given a secret key (also referred as api-key) and a publishable key.\nYou may authenticate all API requests with Hyperswitch server by providing the appropriate key in\nthe request Authorization header.\n\n| Key             |  Description                                                                                  |\n|-----------------|-----------------------------------------------------------------------------------------------|\n| api-key         | Private key. Used to authenticate all API requests from your merchant server                  |\n| publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |\n\nNever share your secret api keys. Keep them guarded and secure.\n",
    "contact": {
      "name": "Hyperswitch Support",
      "url": "https://hyperswitch.io",
      "email": "hyperswitch@juspay.in"
    },
    "license": {
      "name": "Apache-2.0"
    },
    "version": "0.1.0"
  },
  "servers": [
    {
      "url": "https://sandbox.hyperswitch.io",
      "description": "Sandbox Environment"
    }
  ],
  "paths": {
    "/account/payment_methods": {
      "get": {
        "tags": [
          "Payment Methods"
        ],
        "summary": "List payment methods for a Merchant",
        "description": "List payment methods for a Merchant\n\nLists the applicable payment methods for a particular Merchant ID.\nUse the client secret and publishable key authorization to list all relevant payment methods of the merchant for the payment corresponding to the client secret.",
        "operationId": "List all Payment Methods for a Merchant",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "The unique identifier for the merchant account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accepted_country",
            "in": "query",
            "description": "The two-letter ISO currency code",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "accepted_currency",
            "in": "path",
            "description": "The three-letter ISO currency code",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Currency"
              }
            }
          },
          {
            "name": "minimum_amount",
            "in": "query",
            "description": "The minimum amount accepted for processing by the particular payment method.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "maximum_amount",
            "in": "query",
            "description": "The maximum amount accepted for processing by the particular payment method.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "recurring_payment_enabled",
            "in": "query",
            "description": "Indicates whether the payment method is eligible for recurring payments",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "installment_payment_enabled",
            "in": "query",
            "description": "Indicates whether the payment method is eligible for installment payments",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment Methods retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Data"
          },
          "404": {
            "description": "Payment Methods does not exist in records"
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "publishable_key": []
          }
        ]
      }
    },
    "/account/{account_id}/business_profile": {
      "get": {
        "tags": [
          "Business Profile"
        ],
        "summary": "Business Profile - List",
        "description": "Business Profile - List\n\nLists all the *business profiles* under a merchant",
        "operationId": "List Business Profiles",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Merchant Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Business profiles Retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BusinessProfileResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Business Profile"
        ],
        "summary": "Business Profile - Create",
        "description": "Business Profile - Create\n\nCreates a new *business profile* for a merchant",
        "operationId": "Create A Business Profile",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "The unique identifier for the merchant account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BusinessProfileCreate"
              },
              "examples": {
                "Create a business profile with minimal fields": {
                  "value": {}
                },
                "Create a business profile with profile name": {
                  "value": {
                    "profile_name": "shoe_business"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Business Account Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProfileResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      }
    },
    "/account/{account_id}/business_profile/{profile_id}": {
      "get": {
        "tags": [
          "Business Profile"
        ],
        "summary": "Business Profile - Retrieve",
        "description": "Business Profile - Retrieve\n\nRetrieve existing *business profile*",
        "operationId": "Retrieve a Business Profile",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "The unique identifier for the merchant account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profile_id",
            "in": "path",
            "description": "The unique identifier for the business profile",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Business Profile Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProfileResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Business Profile"
        ],
        "summary": "Business Profile - Update",
        "description": "Business Profile - Update\n\nUpdate the *business profile*",
        "operationId": "Update a Business Profile",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "The unique identifier for the merchant account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profile_id",
            "in": "path",
            "description": "The unique identifier for the business profile",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BusinessProfileCreate"
              },
              "examples": {
                "Update business profile with profile name fields": {
                  "value": {
                    "profile_name": "shoe_business"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Business Profile Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProfileResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Business Profile"
        ],
        "summary": "Business Profile - Delete",
        "description": "Business Profile - Delete\n\nDelete the *business profile*",
        "operationId": "Delete the Business Profile",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "The unique identifier for the merchant account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profile_id",
            "in": "path",
            "description": "The unique identifier for the business profile",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Business profiles Deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/accounts": {
      "post": {
        "tags": [
          "Merchant Account"
        ],
        "summary": "Merchant Account - Create",
        "description": "Merchant Account - Create\n\nCreate a new account for a *merchant* and the *merchant* could be a seller or retailer or client who likes to receive and send payments.",
        "operationId": "Create a Merchant Account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantAccountCreate"
              },
              "examples": {
                "Create a merchant account with minimal fields": {
                  "value": {
                    "merchant_id": "merchant_abc"
                  }
                },
                "Create a merchant account with return url": {
                  "value": {
                    "merchant_id": "merchant_abc",
                    "return_url": "https://example.com"
                  }
                },
                "Create a merchant account with webhook url": {
                  "value": {
                    "merchant_id": "merchant_abc",
                    "webhook_details": {
                      "webhook_url": "https://webhook.site/a5c54f75-1f7e-4545-b781-af525b7e37a0"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Merchant Account Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantAccountResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      }
    },
    "/accounts/{account_id}": {
      "get": {
        "tags": [
          "Merchant Account"
        ],
        "summary": "Merchant Account - Retrieve",
        "description": "Merchant Account - Retrieve\n\nRetrieve a *merchant* account details.",
        "operationId": "Retrieve a Merchant Account",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "The unique identifier for the merchant account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Merchant Account Retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantAccountResponse"
                }
              }
            }
          },
          "404": {
            "description": "Merchant account not found"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Merchant Account"
        ],
        "summary": "Merchant Account - Update",
        "description": "Merchant Account - Update\n\nUpdates details of an existing merchant account. Helpful in updating merchant details such as email, contact details, or other configuration details like webhook, routing algorithm etc",
        "operationId": "Update a Merchant Account",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "The unique identifier for the merchant account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantAccountUpdate"
              },
              "examples": {
                "Update merchant name": {
                  "value": {
                    "merchant_id": "merchant_abc",
                    "merchant_name": "merchant_name"
                  }
                },
                "Update return url": {
                  "value": {
                    "merchant_id": "merchant_abc",
                    "return_url": "https://example.com"
                  }
                },
                "Update webhook url": {
                  "value": {
                    "merchant_id": "merchant_abc",
                    "webhook_details": {
                      "webhook_url": "https://webhook.site/a5c54f75-1f7e-4545-b781-af525b7e37a0"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Merchant Account Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantAccountResponse"
                }
              }
            }
          },
          "404": {
            "description": "Merchant account not found"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Merchant Account"
        ],
        "summary": "Merchant Account - Delete",
        "description": "Merchant Account - Delete\n\nDelete a *merchant* account",
        "operationId": "Delete a Merchant Account",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "The unique identifier for the merchant account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Merchant Account Deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantAccountDeleteResponse"
                }
              }
            }
          },
          "404": {
            "description": "Merchant account not found"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      }
    },
    "/accounts/{account_id}/connectors": {
      "get": {
        "tags": [
          "Merchant Connector Account"
        ],
        "summary": "Merchant Connector - List",
        "description": "Merchant Connector - List\n\nList Merchant Connector Details for the merchant",
        "operationId": "List all Merchant Connectors",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "The unique identifier for the merchant account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Merchant Connector list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MerchantConnectorResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "404": {
            "description": "Merchant Connector does not exist in records"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Merchant Connector Account"
        ],
        "summary": "Merchant Connector - Create",
        "description": "Merchant Connector - Create\n\nCreates a new Merchant Connector for the merchant account. The connector could be a payment processor/facilitator/acquirer or a provider of specialized services like Fraud/Accounting etc.",
        "operationId": "Create a Merchant Connector",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantConnectorCreate"
              },
              "examples": {
                "Create a merchant account with custom connector label": {
                  "value": {
                    "connector_account_details": {
                      "api_key": "{{adyen-api-key}}",
                      "auth_type": "BodyKey",
                      "key1": "{{adyen_merchant_account}}"
                    },
                    "connector_label": "EU_adyen",
                    "connector_name": "adyen",
                    "connector_type": "fiz_operations"
                  }
                },
                "Create a merchant connector account under a specific business profile": {
                  "value": {
                    "connector_account_details": {
                      "api_key": "{{adyen-api-key}}",
                      "auth_type": "BodyKey",
                      "key1": "{{adyen_merchant_account}}"
                    },
                    "connector_name": "adyen",
                    "connector_type": "fiz_operations",
                    "profile_id": "{{profile_id}}"
                  }
                },
                "Create a merchant connector account with minimal fields": {
                  "value": {
                    "connector_account_details": {
                      "api_key": "{{adyen-api-key}}",
                      "auth_type": "BodyKey",
                      "key1": "{{adyen_merchant_account}}"
                    },
                    "connector_name": "adyen",
                    "connector_type": "fiz_operations"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Merchant Connector Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantConnectorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing Mandatory fields"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      }
    },
    "/accounts/{account_id}/connectors/{connector_id}": {
      "get": {
        "tags": [
          "Merchant Connector Account"
        ],
        "summary": "Merchant Connector - Retrieve",
        "description": "Merchant Connector - Retrieve\n\nRetrieves details of a Connector account",
        "operationId": "Retrieve a Merchant Connector",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "The unique identifier for the merchant account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connector_id",
            "in": "path",
            "description": "The unique identifier for the Merchant Connector",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Merchant Connector retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantConnectorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "404": {
            "description": "Merchant Connector does not exist in records"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Merchant Connector Account"
        ],
        "summary": "Merchant Connector - Update",
        "description": "Merchant Connector - Update\n\nTo update an existing Merchant Connector account. Helpful in enabling/disabling different payment methods and other settings for the connector",
        "operationId": "Update a Merchant Connector",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "The unique identifier for the merchant account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connector_id",
            "in": "path",
            "description": "The unique identifier for the Merchant Connector",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantConnectorUpdate"
              },
              "examples": {
                "Enable card payment method": {
                  "value": {
                    "connector_type": "fiz_operations",
                    "payment_methods_enabled": [
                      {
                        "payment_method": "card"
                      }
                    ]
                  }
                },
                "Update webhook secret": {
                  "value": {
                    "connector_webhook_details": {
                      "merchant_secret": "{{webhook_secret}}"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Merchant Connector Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantConnectorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "404": {
            "description": "Merchant Connector does not exist in records"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Merchant Connector Account"
        ],
        "summary": "Merchant Connector - Delete",
        "description": "Merchant Connector - Delete\n\nDelete or Detach a Merchant Connector from Merchant Account",
        "operationId": "Delete a Merchant Connector",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "The unique identifier for the merchant account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connector_id",
            "in": "path",
            "description": "The unique identifier for the Merchant Connector",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Merchant Connector Deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantConnectorDeleteResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "404": {
            "description": "Merchant Connector does not exist in records"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      }
    },
    "/api_keys/{merchant_id)": {
      "post": {
        "tags": [
          "API Key"
        ],
        "summary": "API Key - Create",
        "description": "API Key - Create\n\nCreate a new API Key for accessing our APIs from your servers. The plaintext API Key will be\ndisplayed only once on creation, so ensure you store it securely.",
        "operationId": "Create an API Key",
        "parameters": [
          {
            "name": "merchant_id",
            "in": "path",
            "description": "The unique identifier for the merchant account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateApiKeyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API Key created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateApiKeyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      }
    },
    "/api_keys/{merchant_id)/{key_id}": {
      "delete": {
        "tags": [
          "API Key"
        ],
        "summary": "API Key - Revoke",
        "description": "API Key - Revoke\n\nRevoke the specified API Key. Once revoked, the API Key can no longer be used for\nauthenticating with our APIs.",
        "operationId": "Revoke an API Key",
        "parameters": [
          {
            "name": "merchant_id",
            "in": "path",
            "description": "The unique identifier for the merchant account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key_id",
            "in": "path",
            "description": "The unique identifier for the API Key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API Key revoked",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RevokeApiKeyResponse"
                }
              }
            }
          },
          "404": {
            "description": "API Key not found"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      }
    },
    "/api_keys/{merchant_id}/{key_id}": {
      "get": {
        "tags": [
          "API Key"
        ],
        "summary": "API Key - Retrieve",
        "description": "API Key - Retrieve\n\nRetrieve information about the specified API Key.",
        "operationId": "Retrieve an API Key",
        "parameters": [
          {
            "name": "merchant_id",
            "in": "path",
            "description": "The unique identifier for the merchant account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key_id",
            "in": "path",
            "description": "The unique identifier for the API Key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API Key retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RetrieveApiKeyResponse"
                }
              }
            }
          },
          "404": {
            "description": "API Key not found"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "API Key"
        ],
        "summary": "API Key - Update",
        "description": "API Key - Update\n\nUpdate information for the specified API Key.",
        "operationId": "Update an API Key",
        "parameters": [
          {
            "name": "merchant_id",
            "in": "path",
            "description": "The unique identifier for the merchant account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key_id",
            "in": "path",
            "description": "The unique identifier for the API Key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateApiKeyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API Key updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RetrieveApiKeyResponse"
                }
              }
            }
          },
          "404": {
            "description": "API Key not found"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      }
    },
    "/blocklist": {
      "get": {
        "tags": [
          "Blocklist"
        ],
        "operationId": "List Blocked fingerprints of a particular kind",
        "parameters": [
          {
            "name": "data_kind",
            "in": "query",
            "description": "Kind of the fingerprint list requested",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/BlocklistDataKind"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Blocked Fingerprints",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlocklistResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Data"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Blocklist"
        ],
        "operationId": "Block a Fingerprint",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlocklistRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Fingerprint Blocked",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlocklistResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Data"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Blocklist"
        ],
        "operationId": "Unblock a Fingerprint",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlocklistRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Fingerprint Unblocked",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlocklistResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Data"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/blocklist/toggle": {
      "post": {
        "tags": [
          "Blocklist"
        ],
        "operationId": "Toggle blocklist guard for a particular merchant",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Boolean value to enable/disable blocklist",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Blocklist guard enabled/disabled",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ToggleBlocklistResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Data"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/customers": {
      "post": {
        "tags": [
          "Customers"
        ],
        "summary": "Customers - Create",
        "description": "Customers - Create\n\nCreates a customer object and stores the customer details to be reused for future payments.\nIncase the customer already exists in the system, this API will respond with the customer details.",
        "operationId": "Create a Customer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerRequest"
              },
              "examples": {
                "Update name and email of a customer": {
                  "value": {
                    "email": "guest@example.com",
                    "name": "John Doe"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Customer Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/customers/list": {
      "post": {
        "tags": [
          "Customers List"
        ],
        "summary": "Customers - List",
        "description": "Customers - List\n\nLists all the customers for a particular merchant id.",
        "operationId": "List all Customers for a Merchant",
        "responses": {
          "200": {
            "description": "Customers retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid Data"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/customers/payment_methods": {
      "get": {
        "tags": [
          "Payment Methods"
        ],
        "summary": "List customer saved payment methods for a Payment",
        "description": "List customer saved payment methods for a Payment\n\nLists all the applicable payment methods for a particular payment tied to the `client_secret`.",
        "operationId": "List all Payment Methods for a Customer",
        "parameters": [
          {
            "name": "client-secret",
            "in": "path",
            "description": "A secret known only to your client and the authorization server. Used for client side authentication",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customer_id",
            "in": "path",
            "description": "The unique identifier for the customer account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accepted_country",
            "in": "query",
            "description": "The two-letter ISO currency code",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "accepted_currency",
            "in": "path",
            "description": "The three-letter ISO currency code",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Currency"
              }
            }
          },
          {
            "name": "minimum_amount",
            "in": "query",
            "description": "The minimum amount accepted for processing by the particular payment method.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "maximum_amount",
            "in": "query",
            "description": "The maximum amount accepted for processing by the particular payment method.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "recurring_payment_enabled",
            "in": "query",
            "description": "Indicates whether the payment method is eligible for recurring payments",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "installment_payment_enabled",
            "in": "query",
            "description": "Indicates whether the payment method is eligible for installment payments",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment Methods retrieved for customer tied to its respective client-secret passed in the param",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerPaymentMethodsListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Data"
          },
          "404": {
            "description": "Payment Methods does not exist in records"
          }
        },
        "security": [
          {
            "publishable_key": []
          }
        ]
      }
    },
    "/customers/{customer_id}": {
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Customers - Retrieve",
        "description": "Customers - Retrieve\n\nRetrieves a customer's details.",
        "operationId": "Retrieve a Customer",
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "description": "The unique identifier for the Customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer Retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResponse"
                }
              }
            }
          },
          "404": {
            "description": "Customer was not found"
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "ephemeral_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Customers"
        ],
        "summary": "Customers - Update",
        "description": "Customers - Update\n\nUpdates the customer's details in a customer object.",
        "operationId": "Update a Customer",
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "description": "The unique identifier for the Customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerRequest"
              },
              "examples": {
                "Update name and email of a customer": {
                  "value": {
                    "email": "guest@example.com",
                    "name": "John Doe"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Customer was Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResponse"
                }
              }
            }
          },
          "404": {
            "description": "Customer was not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Customers"
        ],
        "summary": "Customers - Delete",
        "description": "Customers - Delete\n\nDelete a customer record.",
        "operationId": "Delete a Customer",
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "description": "The unique identifier for the Customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer was Deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerDeleteResponse"
                }
              }
            }
          },
          "404": {
            "description": "Customer was not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/customers/{customer_id}/mandates": {
      "post": {
        "tags": [
          "Customers Mandates List"
        ],
        "summary": "Customers - Mandates List",
        "description": "Customers - Mandates List\n\nLists all the mandates for a particular customer id.",
        "operationId": "List all Mandates for a Customer",
        "responses": {
          "200": {
            "description": "List of retrieved mandates for a customer",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MandateResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid Data"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/customers/{customer_id}/payment_methods": {
      "get": {
        "tags": [
          "Payment Methods"
        ],
        "summary": "List payment methods for a Customer",
        "description": "List payment methods for a Customer\n\nLists all the applicable payment methods for a particular Customer ID.",
        "operationId": "List all Payment Methods for a Customer",
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "description": "The unique identifier for the customer account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accepted_country",
            "in": "query",
            "description": "The two-letter ISO currency code",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "accepted_currency",
            "in": "path",
            "description": "The three-letter ISO currency code",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Currency"
              }
            }
          },
          {
            "name": "minimum_amount",
            "in": "query",
            "description": "The minimum amount accepted for processing by the particular payment method.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "maximum_amount",
            "in": "query",
            "description": "The maximum amount accepted for processing by the particular payment method.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "recurring_payment_enabled",
            "in": "query",
            "description": "Indicates whether the payment method is eligible for recurring payments",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "installment_payment_enabled",
            "in": "query",
            "description": "Indicates whether the payment method is eligible for installment payments",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment Methods retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerPaymentMethodsListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Data"
          },
          "404": {
            "description": "Payment Methods does not exist in records"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/disputes/list": {
      "get": {
        "tags": [
          "Disputes"
        ],
        "summary": "Disputes - List Disputes",
        "description": "Disputes - List Disputes\nLists all the Disputes for a merchant",
        "operationId": "List Disputes",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of Dispute Objects to include in the response",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          },
          {
            "name": "dispute_status",
            "in": "query",
            "description": "The status of dispute",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/DisputeStatus"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "dispute_stage",
            "in": "query",
            "description": "The stage of dispute",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/DisputeStage"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "reason",
            "in": "query",
            "description": "The reason for dispute",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "connector",
            "in": "query",
            "description": "The connector linked to dispute",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "received_time",
            "in": "query",
            "description": "The time at which dispute is received",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "received_time.lt",
            "in": "query",
            "description": "Time less than the dispute received time",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "received_time.gt",
            "in": "query",
            "description": "Time greater than the dispute received time",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "received_time.lte",
            "in": "query",
            "description": "Time less than or equals to the dispute received time",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "received_time.gte",
            "in": "query",
            "description": "Time greater than or equals to the dispute received time",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The dispute list was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DisputeResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/disputes/{dispute_id}": {
      "get": {
        "tags": [
          "Disputes"
        ],
        "summary": "Disputes - Retrieve Dispute",
        "description": "Disputes - Retrieve Dispute\nRetrieves a dispute",
        "operationId": "Retrieve a Dispute",
        "parameters": [
          {
            "name": "dispute_id",
            "in": "path",
            "description": "The identifier for dispute",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The dispute was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisputeResponse"
                }
              }
            }
          },
          "404": {
            "description": "Dispute does not exist in our records"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/gsm": {
      "post": {
        "tags": [
          "Gsm"
        ],
        "summary": "Gsm - Create",
        "description": "Gsm - Create\n\nCreates a GSM (Global Status Mapping) Rule. A GSM rule is used to map a connector's error message/error code combination during a particular payments flow/sub-flow to Hyperswitch's unified status/error code/error message combination. It is also used to decide the next action in the flow - retry/requeue/do_default",
        "operationId": "Create Gsm Rule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GsmCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Gsm created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GsmResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing Mandatory fields"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      }
    },
    "/gsm/delete": {
      "post": {
        "tags": [
          "Gsm"
        ],
        "summary": "Gsm - Delete",
        "description": "Gsm - Delete\n\nDeletes a Gsm Rule",
        "operationId": "Delete Gsm Rule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GsmDeleteRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Gsm deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GsmDeleteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing Mandatory fields"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      }
    },
    "/gsm/get": {
      "post": {
        "tags": [
          "Gsm"
        ],
        "summary": "Gsm - Get",
        "description": "Gsm - Get\n\nRetrieves a Gsm Rule",
        "operationId": "Retrieve Gsm Rule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GsmRetrieveRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Gsm retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GsmResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing Mandatory fields"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      }
    },
    "/gsm/update": {
      "post": {
        "tags": [
          "Gsm"
        ],
        "summary": "Gsm - Update",
        "description": "Gsm - Update\n\nUpdates a Gsm Rule",
        "operationId": "Update Gsm Rule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GsmUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Gsm updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GsmResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing Mandatory fields"
          }
        },
        "security": [
          {
            "admin_api_key": []
          }
        ]
      }
    },
    "/mandates/revoke/{mandate_id}": {
      "post": {
        "tags": [
          "Mandates"
        ],
        "summary": "Mandates - Revoke Mandate",
        "description": "Mandates - Revoke Mandate\n\nRevokes a mandate created using the Payments/Create API",
        "operationId": "Revoke a Mandate",
        "parameters": [
          {
            "name": "mandate_id",
            "in": "path",
            "description": "The identifier for a mandate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The mandate was revoked successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MandateRevokedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Mandate does not exist in our records"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/mandates/{mandate_id}": {
      "get": {
        "tags": [
          "Mandates"
        ],
        "summary": "Mandates - Retrieve Mandate",
        "description": "Mandates - Retrieve Mandate\n\nRetrieves a mandate created using the Payments/Create API",
        "operationId": "Retrieve a Mandate",
        "parameters": [
          {
            "name": "mandate_id",
            "in": "path",
            "description": "The identifier for mandate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The mandate was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MandateResponse"
                }
              }
            }
          },
          "404": {
            "description": "Mandate does not exist in our records"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/payment_link/{payment_link_id}": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Payments Link - Retrieve",
        "description": "Payments Link - Retrieve\n\nTo retrieve the properties of a Payment Link. This may be used to get the status of a previously initiated payment or next action for an ongoing payment",
        "operationId": "Retrieve a Payment Link",
        "parameters": [
          {
            "name": "payment_link_id",
            "in": "path",
            "description": "The identifier for payment link",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RetrievePaymentLinkRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Gets details regarding payment link",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RetrievePaymentLinkResponse"
                }
              }
            }
          },
          "404": {
            "description": "No payment link found"
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "publishable_key": []
          }
        ]
      }
    },
    "/payment_methods": {
      "post": {
        "tags": [
          "Payment Methods"
        ],
        "summary": "PaymentMethods - Create",
        "description": "PaymentMethods - Create\n\nCreates and stores a payment method against a customer.\nIn case of cards, this API should be used only by PCI compliant merchants.",
        "operationId": "Create a Payment Method",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentMethodCreate"
              },
              "examples": {
                "Save a card": {
                  "value": {
                    "card": {
                      "card_exp_month": "11",
                      "card_exp_year": "25",
                      "card_holder_name": "John Doe",
                      "card_number": "4242424242424242"
                    },
                    "customer_id": "{{customer_id}}",
                    "payment_method": "card",
                    "payment_method_issuer": "Visa",
                    "payment_method_type": "credit"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payment Method Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Data"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/payment_methods/{method_id}": {
      "get": {
        "tags": [
          "Payment Methods"
        ],
        "summary": "Payment Method - Retrieve",
        "description": "Payment Method - Retrieve\n\nRetrieves a payment method of a customer.",
        "operationId": "Retrieve a Payment method",
        "parameters": [
          {
            "name": "method_id",
            "in": "path",
            "description": "The unique identifier for the Payment Method",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment Method retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodResponse"
                }
              }
            }
          },
          "404": {
            "description": "Payment Method does not exist in records"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Payment Methods"
        ],
        "summary": "Payment Method - Update",
        "description": "Payment Method - Update\n\nUpdate an existing payment method of a customer.\nThis API is useful for use cases such as updating the card number for expired cards to prevent discontinuity in recurring payments.",
        "operationId": "Update a Payment method",
        "parameters": [
          {
            "name": "method_id",
            "in": "path",
            "description": "The unique identifier for the Payment Method",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentMethodUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payment Method updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodResponse"
                }
              }
            }
          },
          "404": {
            "description": "Payment Method does not exist in records"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Payment Methods"
        ],
        "summary": "Payment Method - Delete",
        "description": "Payment Method - Delete\n\nDeletes a payment method of a customer.",
        "operationId": "Delete a Payment method",
        "parameters": [
          {
            "name": "method_id",
            "in": "path",
            "description": "The unique identifier for the Payment Method",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment Method deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodDeleteResponse"
                }
              }
            }
          },
          "404": {
            "description": "Payment Method does not exist in records"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/payments": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Payments - Create",
        "description": "Payments - Create\n\n**Creates a payment object when amount and currency are passed.** This API is also used to create a mandate by passing the `mandate_object`.\n\nTo completely process a payment you will have to create a payment, attach a payment method, confirm and capture funds.\n\nDepending on the user journey you wish to achieve, you may opt to complete all the steps in a single request by attaching a payment method, setting `confirm=true` and `capture_method = automatic` in the *Payments/Create API* request or you could use the following sequence of API requests to achieve the same:\n\n1. Payments - Create\n\n2. Payments - Update\n\n3. Payments - Confirm\n\n4. Payments - Capture.\n\nUse the client secret returned in this API along with your publishable key to make subsequent API calls from your client",
        "operationId": "Create a Payment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentsCreateRequest"
              },
              "examples": {
                "Create a 3DS payment": {
                  "value": {
                    "amount": 6540,
                    "authentication_type": "three_ds",
                    "currency": "USD"
                  }
                },
                "Create a manual capture payment": {
                  "value": {
                    "amount": 6540,
                    "billing": {
                      "address": {
                        "city": "San Fransico",
                        "country": "US",
                        "first_name": "joseph",
                        "last_name": "Doe",
                        "line1": "1467",
                        "line2": "Harrison Street",
                        "line3": "Harrison Street",
                        "state": "California",
                        "zip": "94122"
                      },
                      "phone": {
                        "country_code": "+91",
                        "number": "8056594427"
                      }
                    },
                    "currency": "USD",
                    "customer": {
                      "id": "cus_abcdefgh"
                    }
                  }
                },
                "Create a payment and save the card": {
                  "value": {
                    "amount": 6540,
                    "authentication_type": "no_three_ds",
                    "confirm": true,
                    "currency": "USD",
                    "customer_id": "StripeCustomer123",
                    "payment_method": "card",
                    "payment_method_data": {
                      "card": {
                        "card_cvc": "123",
                        "card_exp_month": "10",
                        "card_exp_year": "25",
                        "card_holder_name": "joseph Doe",
                        "card_number": "4242424242424242"
                      }
                    },
                    "setup_future_usage": "off_session"
                  }
                },
                "Create a payment using an already saved card's token": {
                  "value": {
                    "amount": 6540,
                    "card_cvc": "123",
                    "client_secret": "{{client_secret}}",
                    "confirm": true,
                    "currency": "USD",
                    "payment_method": "card",
                    "payment_token": "{{payment_token}}"
                  }
                },
                "Create a payment with customer details and metadata": {
                  "value": {
                    "amount": 6540,
                    "currency": "USD",
                    "customer": {
                      "email": "john@example.com",
                      "id": "cus_abcdefgh",
                      "name": "John Dough",
                      "phone": "9999999999"
                    },
                    "description": "Its my first payment request",
                    "metadata": {
                      "udf1": "some-value",
                      "udf2": "some-value"
                    },
                    "payment_id": "abcdefghijklmnopqrstuvwxyz",
                    "statement_descriptor_name": "joseph",
                    "statement_descriptor_suffix": "JS"
                  }
                },
                "Create a payment with minimal fields": {
                  "value": {
                    "amount": 6540,
                    "currency": "USD"
                  }
                },
                "Create a recurring payment with mandate_id": {
                  "value": {
                    "amount": 6540,
                    "authentication_type": "no_three_ds",
                    "confirm": true,
                    "currency": "USD",
                    "customer_id": "StripeCustomer",
                    "mandate_id": "{{mandate_id}}",
                    "off_session": true
                  }
                },
                "Create a setup mandate payment": {
                  "value": {
                    "amount": 6540,
                    "authentication_type": "no_three_ds",
                    "confirm": true,
                    "currency": "USD",
                    "customer_id": "StripeCustomer123",
                    "mandate_data": {
                      "customer_acceptance": {
                        "acceptance_type": "offline",
                        "accepted_at": "1963-05-03T04:07:52.723Z",
                        "online": {
                          "ip_address": "127.0.0.1",
                          "user_agent": "amet irure esse"
                        }
                      },
                      "mandate_type": {
                        "single_use": {
                          "amount": 6540,
                          "currency": "USD"
                        }
                      }
                    },
                    "payment_method": "card",
                    "payment_method_data": {
                      "card": {
                        "card_cvc": "123",
                        "card_exp_month": "10",
                        "card_exp_year": "25",
                        "card_holder_name": "joseph Doe",
                        "card_number": "4242424242424242"
                      }
                    },
                    "setup_future_usage": "off_session"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payment created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing Mandatory fields"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/payments/list": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Payments - List",
        "description": "Payments - List\n\nTo list the *payments*",
        "operationId": "List all Payments",
        "parameters": [
          {
            "name": "customer_id",
            "in": "query",
            "description": "The identifier for the customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "starting_after",
            "in": "query",
            "description": "A cursor for use in pagination, fetch the next list after some object",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ending_before",
            "in": "query",
            "description": "A cursor for use in pagination, fetch the previous list before some object",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit on the number of objects to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "created",
            "in": "query",
            "description": "The time at which payment is created",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "created_lt",
            "in": "query",
            "description": "Time less than the payment created time",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "created_gt",
            "in": "query",
            "description": "Time greater than the payment created time",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "created_lte",
            "in": "query",
            "description": "Time less than or equals to the payment created time",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "created_gte",
            "in": "query",
            "description": "Time greater than or equals to the payment created time",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a payment list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentListResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No payments found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/payments/session_tokens": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Payments - Session token",
        "description": "Payments - Session token\n\nCreates a session object or a session token for wallets like Apple Pay, Google Pay, etc. These tokens are used by Hyperswitch's SDK to initiate these wallets' SDK.",
        "operationId": "Create Session tokens for a Payment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentsSessionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payment session object created or session token was retrieved from wallets",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsSessionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing mandatory fields"
          }
        },
        "security": [
          {
            "publishable_key": []
          }
        ]
      }
    },
    "/payments/{payment_id}": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Payments - Retrieve",
        "description": "Payments - Retrieve\n\nRetrieves a Payment. This API can also be used to get the status of a previously initiated payment or next action for an ongoing payment",
        "operationId": "Retrieve a Payment",
        "parameters": [
          {
            "name": "payment_id",
            "in": "path",
            "description": "The identifier for payment",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentRetrieveBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Gets the payment with final status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsResponse"
                }
              }
            }
          },
          "404": {
            "description": "No payment found"
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "publishable_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Payments - Update",
        "description": "Payments - Update\n\nTo update the properties of a *PaymentIntent* object. This may include attaching a payment method, or attaching customer object or metadata fields after the Payment is created",
        "operationId": "Update a Payment",
        "parameters": [
          {
            "name": "payment_id",
            "in": "path",
            "description": "The identifier for payment",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentsUpdateRequest"
              },
              "examples": {
                "Update the payment amount": {
                  "value": {
                    "amount": 7654
                  }
                },
                "Update the shipping address": {
                  "value": {
                    "shipping": {
                      "address": {
                        "city": "San Fransico",
                        "country": "US",
                        "first_name": "joseph",
                        "last_name": "Doe",
                        "line1": "1467",
                        "line2": "Harrison Street",
                        "line3": "Harrison Street",
                        "state": "California",
                        "zip": "94122"
                      },
                      "phone": {
                        "country_code": "+91",
                        "number": "8056594427"
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payment updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing mandatory fields"
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "publishable_key": []
          }
        ]
      }
    },
    "/payments/{payment_id}/cancel": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Payments - Cancel",
        "description": "Payments - Cancel\n\nA Payment could can be cancelled when it is in one of these statuses: `requires_payment_method`, `requires_capture`, `requires_confirmation`, `requires_customer_action`.",
        "operationId": "Cancel a Payment",
        "parameters": [
          {
            "name": "payment_id",
            "in": "path",
            "description": "The identifier for payment",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentsCancelRequest"
              },
              "examples": {
                "Cancel the payment with cancellation reason": {
                  "value": {
                    "cancellation_reason": "requested_by_customer"
                  }
                },
                "Cancel the payment with minimal fields": {
                  "value": {}
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payment canceled"
          },
          "400": {
            "description": "Missing mandatory fields"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/payments/{payment_id}/capture": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Payments - Capture",
        "description": "Payments - Capture\n\nTo capture the funds for an uncaptured payment",
        "operationId": "Capture a Payment",
        "parameters": [
          {
            "name": "payment_id",
            "in": "path",
            "description": "The identifier for payment",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentsCaptureRequest"
              },
              "examples": {
                "Capture partial amount": {
                  "value": {
                    "amount_to_capture": 654
                  }
                },
                "Capture the full amount": {
                  "value": {}
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payment captured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing mandatory fields"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/payments/{payment_id}/confirm": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Payments - Confirm",
        "description": "Payments - Confirm\n\n**Use this API to confirm the payment and forward the payment to the payment processor.**\n\nAlternatively you can confirm the payment within the *Payments/Create* API by setting `confirm=true`. After confirmation, the payment could either:\n\n1. fail with `failed` status or\n\n2. transition to a `requires_customer_action` status with a `next_action` block or\n\n3. succeed with either `succeeded` in case of automatic capture or `requires_capture` in case of manual capture",
        "operationId": "Confirm a Payment",
        "parameters": [
          {
            "name": "payment_id",
            "in": "path",
            "description": "The identifier for payment",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentsConfirmRequest"
              },
              "examples": {
                "Confirm a payment with payment method data": {
                  "value": {
                    "payment_method": "card",
                    "payment_method_data": {
                      "card": {
                        "card_cvc": "123",
                        "card_exp_month": "10",
                        "card_exp_year": "25",
                        "card_holder_name": "joseph Doe",
                        "card_number": "4242424242424242"
                      }
                    },
                    "payment_method_type": "credit"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payment confirmed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing mandatory fields"
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "publishable_key": []
          }
        ]
      }
    },
    "/payments/{payment_id}/incremental_authorization": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Payments - Incremental Authorization",
        "description": "Payments - Incremental Authorization\n\nAuthorized amount for a payment can be incremented if it is in status: requires_capture",
        "operationId": "Increment authorized amount for a Payment",
        "parameters": [
          {
            "name": "payment_id",
            "in": "path",
            "description": "The identifier for payment",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentsIncrementalAuthorizationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payment authorized amount incremented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing mandatory fields"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/payouts/create": {
      "post": {
        "tags": [
          "Payouts"
        ],
        "summary": "Payouts - Create",
        "description": "Payouts - Create",
        "operationId": "Create a Payout",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayoutCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payout created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayoutCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing Mandatory fields"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/payouts/{payout_id}": {
      "get": {
        "tags": [
          "Payouts"
        ],
        "summary": "Payouts - Retrieve",
        "description": "Payouts - Retrieve",
        "operationId": "Retrieve a Payout",
        "parameters": [
          {
            "name": "payout_id",
            "in": "path",
            "description": "The identifier for payout]",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payout retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayoutCreateResponse"
                }
              }
            }
          },
          "404": {
            "description": "Payout does not exist in our records"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Payouts"
        ],
        "summary": "Payouts - Update",
        "description": "Payouts - Update",
        "operationId": "Update a Payout",
        "parameters": [
          {
            "name": "payout_id",
            "in": "path",
            "description": "The identifier for payout]",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayoutCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payout updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayoutCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing Mandatory fields"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/payouts/{payout_id}/cancel": {
      "post": {
        "tags": [
          "Payouts"
        ],
        "summary": "Payouts - Cancel",
        "description": "Payouts - Cancel",
        "operationId": "Cancel a Payout",
        "parameters": [
          {
            "name": "payout_id",
            "in": "path",
            "description": "The identifier for payout",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayoutActionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payout cancelled",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayoutCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing Mandatory fields"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/payouts/{payout_id}/fulfill": {
      "post": {
        "tags": [
          "Payouts"
        ],
        "summary": "Payouts - Fulfill",
        "description": "Payouts - Fulfill",
        "operationId": "Fulfill a Payout",
        "parameters": [
          {
            "name": "payout_id",
            "in": "path",
            "description": "The identifier for payout",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayoutActionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payout fulfilled",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayoutCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing Mandatory fields"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/refunds": {
      "post": {
        "tags": [
          "Refunds"
        ],
        "summary": "Refunds - Create",
        "description": "Refunds - Create\n\nCreates a refund against an already processed payment. In case of some processors, you can even opt to refund only a partial amount multiple times until the original charge amount has been refunded",
        "operationId": "Create a Refund",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundRequest"
              },
              "examples": {
                "Create an instant refund to refund partial amount": {
                  "value": {
                    "amount": 654,
                    "payment_id": "{{payment_id}}",
                    "refund_type": "instant"
                  }
                },
                "Create an instant refund to refund the whole amount": {
                  "value": {
                    "payment_id": "{{payment_id}}",
                    "refund_type": "instant"
                  }
                },
                "Create an instant refund with reason": {
                  "value": {
                    "amount": 6540,
                    "payment_id": "{{payment_id}}",
                    "reason": "Customer returned product",
                    "refund_type": "instant"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Refund created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing Mandatory fields"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/refunds/list": {
      "post": {
        "tags": [
          "Refunds"
        ],
        "summary": "Refunds - List",
        "description": "Refunds - List\n\nLists all the refunds associated with the merchant or a payment_id if payment_id is not provided",
        "operationId": "List all Refunds",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundListRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of refunds",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/refunds/{refund_id}": {
      "get": {
        "tags": [
          "Refunds"
        ],
        "summary": "Refunds - Retrieve",
        "description": "Refunds - Retrieve\n\nRetrieves a Refund. This may be used to get the status of a previously initiated refund",
        "operationId": "Retrieve a Refund",
        "parameters": [
          {
            "name": "refund_id",
            "in": "path",
            "description": "The identifier for refund",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Refund retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundResponse"
                }
              }
            }
          },
          "404": {
            "description": "Refund does not exist in our records"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Refunds"
        ],
        "summary": "Refunds - Update",
        "description": "Refunds - Update\n\nUpdates the properties of a Refund object. This API can be used to attach a reason for the refund or metadata fields",
        "operationId": "Update a Refund",
        "parameters": [
          {
            "name": "refund_id",
            "in": "path",
            "description": "The identifier for refund",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundUpdateRequest"
              },
              "examples": {
                "Update refund reason": {
                  "value": {
                    "reason": "Paid by mistake"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Refund updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing Mandatory fields"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/routing": {
      "get": {
        "tags": [
          "Routing"
        ],
        "summary": "Routing - List",
        "description": "Routing - List\n\nList all routing configs",
        "operationId": "List routing configs",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The number of records to be returned",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true,
              "minimum": 0
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The record offset from which to start gathering of results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true,
              "minimum": 0
            }
          },
          {
            "name": "profile_id",
            "in": "query",
            "description": "The unique identifier for a merchant profile",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched routing configs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoutingKind"
                }
              }
            }
          },
          "404": {
            "description": "Resource missing"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "jwt_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Routing"
        ],
        "summary": "Routing - Create",
        "description": "Routing - Create\n\nCreate a routing config",
        "operationId": "Create a routing config",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoutingConfigRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Routing config created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoutingDictionaryRecord"
                }
              }
            }
          },
          "400": {
            "description": "Request body is malformed"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource missing"
          },
          "422": {
            "description": "Unprocessable request"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "jwt_key": []
          }
        ]
      }
    },
    "/routing/active": {
      "get": {
        "tags": [
          "Routing"
        ],
        "summary": "Routing - Retrieve Config",
        "description": "Routing - Retrieve Config\n\nRetrieve active config",
        "operationId": "Retrieve active config",
        "parameters": [
          {
            "name": "profile_id",
            "in": "query",
            "description": "The unique identifier for a merchant profile",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved active config",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkedRoutingConfigRetrieveResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource missing"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "jwt_key": []
          }
        ]
      }
    },
    "/routing/deactivate": {
      "post": {
        "tags": [
          "Routing"
        ],
        "summary": "Routing - Deactivate",
        "description": "Routing - Deactivate\n\nDeactivates a routing config",
        "operationId": "Deactivate a routing config",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoutingConfigRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully deactivated routing config",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoutingDictionaryRecord"
                }
              }
            }
          },
          "400": {
            "description": "Malformed request"
          },
          "403": {
            "description": "Malformed request"
          },
          "422": {
            "description": "Unprocessable request"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "jwt_key": []
          }
        ]
      }
    },
    "/routing/default": {
      "get": {
        "tags": [
          "Routing"
        ],
        "summary": "Routing - Retrieve Default Config",
        "description": "Routing - Retrieve Default Config\n\nRetrieve default fallback config",
        "operationId": "Retrieve default fallback config",
        "responses": {
          "200": {
            "description": "Successfully retrieved default config",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoutableConnectorChoice"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "jwt_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Routing"
        ],
        "summary": "Routing - Update Default Config",
        "description": "Routing - Update Default Config\n\nUpdate default fallback config",
        "operationId": "Update default fallback config",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoutableConnectorChoice"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated default config",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoutableConnectorChoice"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Malformed request"
          },
          "422": {
            "description": "Unprocessable request"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "jwt_key": []
          }
        ]
      }
    },
    "/routing/default/profile": {
      "get": {
        "tags": [
          "Routing"
        ],
        "summary": "Routing - Retrieve Default For Profile",
        "description": "Routing - Retrieve Default For Profile\n\nRetrieve default config for profiles",
        "operationId": "Retrieve default configs for all profiles",
        "responses": {
          "200": {
            "description": "Successfully retrieved default config",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileDefaultRoutingConfig"
                }
              }
            }
          },
          "404": {
            "description": "Resource missing"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "jwt_key": []
          }
        ]
      }
    },
    "/routing/default/profile/{profile_id}": {
      "post": {
        "tags": [
          "Routing"
        ],
        "summary": "Routing - Update Default For Profile",
        "description": "Routing - Update Default For Profile\n\nUpdate default config for profiles",
        "operationId": "Update default configs for all profiles",
        "parameters": [
          {
            "name": "profile_id",
            "in": "path",
            "description": "The unique identifier for a profile",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoutableConnectorChoice"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated default config for profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileDefaultRoutingConfig"
                }
              }
            }
          },
          "400": {
            "description": "Malformed request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource missing"
          },
          "422": {
            "description": "Unprocessable request"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "jwt_key": []
          }
        ]
      }
    },
    "/routing/{algorithm_id}": {
      "get": {
        "tags": [
          "Routing"
        ],
        "summary": "Routing - Retrieve",
        "description": "Routing - Retrieve\n\nRetrieve a routing algorithm",
        "operationId": "Retrieve a routing config",
        "parameters": [
          {
            "name": "algorithm_id",
            "in": "path",
            "description": "The unique identifier for a config",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched routing config",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantRoutingAlgorithm"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource missing"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "jwt_key": []
          }
        ]
      }
    },
    "/routing/{algorithm_id}/activate": {
      "post": {
        "tags": [
          "Routing"
        ],
        "summary": "Routing - Activate config",
        "description": "Routing - Activate config\n\nActivate a routing config",
        "operationId": "Activate a routing config",
        "parameters": [
          {
            "name": "algorithm_id",
            "in": "path",
            "description": "The unique identifier for a config",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Routing config activated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoutingDictionaryRecord"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Resource missing"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "jwt_key": []
          }
        ]
      }
    },
    "/{customer_id}/payment_methods/{payment_method_id}/default": {
      "get": {
        "tags": [
          "Customer Set Default Payment Method"
        ],
        "summary": "Customers - Set Default Payment Method",
        "description": "Customers - Set Default Payment Method\n\nSet the Payment Method as Default for the Customer.",
        "operationId": "Set the Payment Method as Default",
        "parameters": [
          {
            "name": "method_id",
            "in": "path",
            "description": "Set the Payment Method as Default for the Customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment Method has been set as default",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerDefaultPaymentMethodResponse"
                }
              }
            }
          },
          "400": {
            "description": "Payment Method has already been set as default for that customer"
          },
          "404": {
            "description": "Payment Method not found for the customer"
          }
        },
        "security": [
          {
            "ephemeral_key": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AcceptanceType": {
        "type": "string",
        "description": "This is used to indicate if the mandate was accepted online or offline",
        "enum": [
          "online",
          "offline"
        ]
      },
      "AcceptedCountries": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "type",
              "list"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "enable_only"
                ]
              },
              "list": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CountryAlpha2"
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "list"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "disable_only"
                ]
              },
              "list": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CountryAlpha2"
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "all_accepted"
                ]
              }
            }
          }
        ],
        "description": "Object to filter the customer countries for which the payment method is displayed",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "AcceptedCurrencies": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "type",
              "list"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "enable_only"
                ]
              },
              "list": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Currency"
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "list"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "disable_only"
                ]
              },
              "list": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Currency"
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "all_accepted"
                ]
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "type"
        }
      },
      "AchBankTransfer": {
        "type": "object",
        "required": [
          "bank_account_number",
          "bank_routing_number"
        ],
        "properties": {
          "bank_name": {
            "type": "string",
            "description": "Bank name",
            "example": "Deutsche Bank",
            "nullable": true
          },
          "bank_country_code": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CountryAlpha2"
              }
            ],
            "nullable": true
          },
          "bank_city": {
            "type": "string",
            "description": "Bank city",
            "example": "California",
            "nullable": true
          },
          "bank_account_number": {
            "type": "string",
            "description": "Bank account number is an unique identifier assigned by a bank to a customer.",
            "example": "000123456"
          },
          "bank_routing_number": {
            "type": "string",
            "description": "[9 digits] Routing number - used in USA for identifying a specific bank.",
            "example": "110000000"
          }
        }
      },
      "AchBillingDetails": {
        "type": "object",
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "The Email ID for ACH billing",
            "example": "example@me.com"
          }
        }
      },
      "AchTransfer": {
        "type": "object",
        "required": [
          "account_number",
          "bank_name",
          "routing_number",
          "swift_code"
        ],
        "properties": {
          "account_number": {
            "type": "string",
            "example": "122385736258"
          },
          "bank_name": {
            "type": "string"
          },
          "routing_number": {
            "type": "string",
            "example": "012"
          },
          "swift_code": {
            "type": "string",
            "example": "234"
          }
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressDetails"
              }
            ],
            "nullable": true
          },
          "phone": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneDetails"
              }
            ],
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "AddressDetails": {
        "type": "object",
        "description": "Address details",
        "properties": {
          "city": {
            "type": "string",
            "description": "The address city",
            "example": "New York",
            "nullable": true,
            "maxLength": 50
          },
          "country": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CountryAlpha2"
              }
            ],
            "nullable": true
          },
          "line1": {
            "type": "string",
            "description": "The first line of the address",
            "example": "123, King Street",
            "nullable": true,
            "maxLength": 200
          },
          "line2": {
            "type": "string",
            "description": "The second line of the address",
            "example": "Powelson Avenue",
            "nullable": true,
            "maxLength": 50
          },
          "line3": {
            "type": "string",
            "description": "The third line of the address",
            "example": "Bridgewater",
            "nullable": true,
            "maxLength": 50
          },
          "zip": {
            "type": "string",
            "description": "The zip/postal code for the address",
            "example": "08807",
            "nullable": true,
            "maxLength": 50
          },
          "state": {
            "type": "string",
            "description": "The address state",
            "example": "New York",
            "nullable": true
          },
          "first_name": {
            "type": "string",
            "description": "The first name for the address",
            "example": "John",
            "nullable": true,
            "maxLength": 255
          },
          "last_name": {
            "type": "string",
            "description": "The last name for the address",
            "example": "Doe",
            "nullable": true,
            "maxLength": 255
          }
        }
      },
      "AirwallexData": {
        "type": "object",
        "properties": {
          "payload": {
            "type": "string",
            "description": "payload required by airwallex",
            "nullable": true
          }
        }
      },
      "AlfamartVoucherData": {
        "type": "object",
        "required": [
          "first_name",
          "last_name",
          "email"
        ],
        "properties": {
          "first_name": {
            "type": "string",
            "description": "The billing first name for Alfamart",
            "example": "Jane"
          },
          "last_name": {
            "type": "string",
            "description": "The billing second name for Alfamart",
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "description": "The Email ID for Alfamart",
            "example": "example@me.com"
          }
        }
      },
      "AliPayHkRedirection": {
        "type": "object"
      },
      "AliPayQr": {
        "type": "object"
      },
      "AliPayRedirection": {
        "type": "object"
      },
      "AmountInfo": {
        "type": "object",
        "required": [
          "label",
          "amount"
        ],
        "properties": {
          "label": {
            "type": "string",
            "description": "The label must be the name of the merchant."
          },
          "type": {
            "type": "string",
            "description": "A value that indicates whether the line item(Ex: total, tax, discount, or grand total) is final or pending.",
            "nullable": true
          },
          "amount": {
            "type": "string",
            "description": "The total amount for the payment"
          }
        }
      },
      "ApiKeyExpiration": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "never"
            ]
          },
          {
            "type": "string",
            "format": "date-time"
          }
        ]
      },
      "ApplePayPaymentRequest": {
        "type": "object",
        "required": [
          "country_code",
          "currency_code",
          "total"
        ],
        "properties": {
          "country_code": {
            "$ref": "#/components/schemas/CountryAlpha2"
          },
          "currency_code": {
            "$ref": "#/components/schemas/Currency"
          },
          "total": {
            "$ref": "#/components/schemas/AmountInfo"
          },
          "merchant_capabilities": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of merchant capabilities(ex: whether capable of 3ds or no-3ds)",
            "nullable": true
          },
          "supported_networks": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of supported networks",
            "nullable": true
          },
          "merchant_identifier": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ApplePayRedirectData": {
        "type": "object"
      },
      "ApplePaySessionResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ThirdPartySdkSessionResponse"
          },
          {
            "$ref": "#/components/schemas/NoThirdPartySdkSessionResponse"
          },
          {
            "type": "object",
            "default": null,
            "nullable": true
          }
        ]
      },
      "ApplePayThirdPartySdkData": {
        "type": "object"
      },
      "ApplePayWalletData": {
        "type": "object",
        "required": [
          "payment_data",
          "payment_method",
          "transaction_identifier"
        ],
        "properties": {
          "payment_data": {
            "type": "string",
            "description": "The payment data of Apple pay"
          },
          "payment_method": {
            "$ref": "#/components/schemas/ApplepayPaymentMethod"
          },
          "transaction_identifier": {
            "type": "string",
            "description": "The unique identifier for the transaction"
          }
        }
      },
      "ApplepayConnectorMetadataRequest": {
        "type": "object",
        "properties": {
          "session_token_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SessionTokenInfo"
              }
            ],
            "nullable": true
          }
        }
      },
      "ApplepayPaymentMethod": {
        "type": "object",
        "required": [
          "display_name",
          "network",
          "type"
        ],
        "properties": {
          "display_name": {
            "type": "string",
            "description": "The name to be displayed on Apple Pay button"
          },
          "network": {
            "type": "string",
            "description": "The network of the Apple pay payment method"
          },
          "type": {
            "type": "string",
            "description": "The type of the payment method"
          }
        }
      },
      "ApplepaySessionTokenResponse": {
        "type": "object",
        "required": [
          "session_token_data",
          "connector",
          "delayed_session_token",
          "sdk_next_action"
        ],
        "properties": {
          "session_token_data": {
            "$ref": "#/components/schemas/ApplePaySessionResponse"
          },
          "payment_request_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApplePayPaymentRequest"
              }
            ],
            "nullable": true
          },
          "connector": {
            "type": "string",
            "description": "The session token is w.r.t this connector"
          },
          "delayed_session_token": {
            "type": "boolean",
            "description": "Identifier for the delayed session response"
          },
          "sdk_next_action": {
            "$ref": "#/components/schemas/SdkNextAction"
          },
          "connector_reference_id": {
            "type": "string",
            "description": "The connector transaction id",
            "nullable": true
          },
          "connector_sdk_public_key": {
            "type": "string",
            "description": "The public key id is to invoke third party sdk",
            "nullable": true
          },
          "connector_merchant_id": {
            "type": "string",
            "description": "The connector merchant id",
            "nullable": true
          }
        }
      },
      "AttemptStatus": {
        "type": "string",
        "enum": [
          "started",
          "authentication_failed",
          "router_declined",
          "authentication_pending",
          "authentication_successful",
          "authorized",
          "authorization_failed",
          "charged",
          "authorizing",
          "cod_initiated",
          "voided",
          "void_initiated",
          "capture_initiated",
          "capture_failed",
          "void_failed",
          "auto_refunded",
          "partial_charged",
          "partial_charged_and_chargeable",
          "unresolved",
          "pending",
          "failure",
          "payment_method_awaited",
          "confirmation_awaited",
          "device_data_collection_pending"
        ]
      },
      "AuthenticationConnectorDetails": {
        "type": "object",
        "required": [
          "authentication_connectors",
          "three_ds_requestor_url"
        ],
        "properties": {
          "authentication_connectors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthenticationConnectors"
            },
            "description": "List of authentication connectors"
          },
          "three_ds_requestor_url": {
            "type": "string",
            "description": "URL of the (customer service) website that will be shown to the shopper in case of technical errors during the 3D Secure 2 process."
          }
        }
      },
      "AuthenticationConnectors": {
        "type": "string",
        "enum": [
          "threedsecureio"
        ]
      },
      "AuthenticationStatus": {
        "type": "string",
        "enum": [
          "started",
          "pending",
          "success",
          "failed"
        ]
      },
      "AuthenticationType": {
        "type": "string",
        "enum": [
          "three_ds",
          "no_three_ds"
        ]
      },
      "AuthorizationStatus": {
        "type": "string",
        "enum": [
          "success",
          "failure",
          "processing",
          "unresolved"
        ]
      },
      "BacsBankTransfer": {
        "type": "object",
        "required": [
          "bank_account_number",
          "bank_sort_code"
        ],
        "properties": {
          "bank_name": {
            "type": "string",
            "description": "Bank name",
            "example": "Deutsche Bank",
            "nullable": true
          },
          "bank_country_code": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CountryAlpha2"
              }
            ],
            "nullable": true
          },
          "bank_city": {
            "type": "string",
            "description": "Bank city",
            "example": "California",
            "nullable": true
          },
          "bank_account_number": {
            "type": "string",
            "description": "Bank account number is an unique identifier assigned by a bank to a customer.",
            "example": "000123456"
          },
          "bank_sort_code": {
            "type": "string",
            "description": "[6 digits] Sort Code - used in UK and Ireland for identifying a bank and it's branches.",
            "example": "98-76-54"
          }
        }
      },
      "BacsBankTransferInstructions": {
        "type": "object",
        "required": [
          "account_holder_name",
          "account_number",
          "sort_code"
        ],
        "properties": {
          "account_holder_name": {
            "type": "string",
            "example": "Jane Doe"
          },
          "account_number": {
            "type": "string",
            "example": "10244123908"
          },
          "sort_code": {
            "type": "string",
            "example": "012"
          }
        }
      },
      "Bank": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/AchBankTransfer"
          },
          {
            "$ref": "#/components/schemas/BacsBankTransfer"
          },
          {
            "$ref": "#/components/schemas/SepaBankTransfer"
          }
        ]
      },
      "BankDebitBilling": {
        "type": "object",
        "required": [
          "name",
          "email"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The billing name for bank debits",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "description": "The billing email for bank debits",
            "example": "example@example.com"
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressDetails"
              }
            ],
            "nullable": true
          }
        }
      },
      "BankDebitData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "ach_bank_debit"
            ],
            "properties": {
              "ach_bank_debit": {
                "type": "object",
                "description": "Payment Method data for Ach bank debit",
                "required": [
                  "billing_details",
                  "account_number",
                  "routing_number",
                  "card_holder_name",
                  "bank_account_holder_name",
                  "bank_name",
                  "bank_type",
                  "bank_holder_type"
                ],
                "properties": {
                  "billing_details": {
                    "$ref": "#/components/schemas/BankDebitBilling"
                  },
                  "account_number": {
                    "type": "string",
                    "description": "Account number for ach bank debit payment",
                    "example": "000123456789"
                  },
                  "routing_number": {
                    "type": "string",
                    "description": "Routing number for ach bank debit payment",
                    "example": "110000000"
                  },
                  "card_holder_name": {
                    "type": "string",
                    "example": "John Test"
                  },
                  "bank_account_holder_name": {
                    "type": "string",
                    "example": "John Doe"
                  },
                  "bank_name": {
                    "type": "string",
                    "example": "ACH"
                  },
                  "bank_type": {
                    "type": "string",
                    "example": "Checking"
                  },
                  "bank_holder_type": {
                    "type": "string",
                    "example": "Personal"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "sepa_bank_debit"
            ],
            "properties": {
              "sepa_bank_debit": {
                "type": "object",
                "required": [
                  "billing_details",
                  "iban",
                  "bank_account_holder_name"
                ],
                "properties": {
                  "billing_details": {
                    "$ref": "#/components/schemas/BankDebitBilling"
                  },
                  "iban": {
                    "type": "string",
                    "description": "International bank account number (iban) for SEPA",
                    "example": "DE89370400440532013000"
                  },
                  "bank_account_holder_name": {
                    "type": "string",
                    "description": "Owner name for bank debit",
                    "example": "A. Schneider"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "becs_bank_debit"
            ],
            "properties": {
              "becs_bank_debit": {
                "type": "object",
                "required": [
                  "billing_details",
                  "account_number",
                  "bsb_number"
                ],
                "properties": {
                  "billing_details": {
                    "$ref": "#/components/schemas/BankDebitBilling"
                  },
                  "account_number": {
                    "type": "string",
                    "description": "Account number for Becs payment method",
                    "example": "000123456"
                  },
                  "bsb_number": {
                    "type": "string",
                    "description": "Bank-State-Branch (bsb) number",
                    "example": "000000"
                  },
                  "bank_account_holder_name": {
                    "type": "string",
                    "description": "Owner name for bank debit",
                    "example": "A. Schneider",
                    "nullable": true
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "bacs_bank_debit"
            ],
            "properties": {
              "bacs_bank_debit": {
                "type": "object",
                "required": [
                  "billing_details",
                  "account_number",
                  "sort_code",
                  "bank_account_holder_name"
                ],
                "properties": {
                  "billing_details": {
                    "$ref": "#/components/schemas/BankDebitBilling"
                  },
                  "account_number": {
                    "type": "string",
                    "description": "Account number for Bacs payment method",
                    "example": "00012345"
                  },
                  "sort_code": {
                    "type": "string",
                    "description": "Sort code for Bacs payment method",
                    "example": "108800"
                  },
                  "bank_account_holder_name": {
                    "type": "string",
                    "description": "holder name for bank debit",
                    "example": "A. Schneider"
                  }
                }
              }
            }
          }
        ]
      },
      "BankNames": {
        "type": "string",
        "description": "Name of banks supported by Hyperswitch",
        "enum": [
          "american_express",
          "affin_bank",
          "agro_bank",
          "alliance_bank",
          "am_bank",
          "bank_of_america",
          "bank_islam",
          "bank_muamalat",
          "bank_rakyat",
          "bank_simpanan_nasional",
          "barclays",
          "blik_p_s_p",
          "capital_one",
          "chase",
          "citi",
          "cimb_bank",
          "discover",
          "navy_federal_credit_union",
          "pentagon_federal_credit_union",
          "synchrony_bank",
          "wells_fargo",
          "abn_amro",
          "asn_bank",
          "bunq",
          "handelsbanken",
          "hong_leong_bank",
          "hsbc_bank",
          "ing",
          "knab",
          "kuwait_finance_house",
          "moneyou",
          "rabobank",
          "regiobank",
          "revolut",
          "sns_bank",
          "triodos_bank",
          "van_lanschot",
          "arzte_und_apotheker_bank",
          "austrian_anadi_bank_ag",
          "bank_austria",
          "bank99_ag",
          "bankhaus_carl_spangler",
          "bankhaus_schelhammer_und_schattera_ag",
          "bank_millennium",
          "bank_p_e_k_a_o_s_a",
          "bawag_psk_ag",
          "bks_bank_ag",
          "brull_kallmus_bank_ag",
          "btv_vier_lander_bank",
          "capital_bank_grawe_gruppe_ag",
          "ceska_sporitelna",
          "dolomitenbank",
          "easybank_ag",
          "e_platby_v_u_b",
          "erste_bank_und_sparkassen",
          "friesland_bank",
          "hypo_alpeadriabank_international_ag",
          "hypo_noe_lb_fur_niederosterreich_u_wien",
          "hypo_oberosterreich_salzburg_steiermark",
          "hypo_tirol_bank_ag",
          "hypo_vorarlberg_bank_ag",
          "hypo_bank_burgenland_aktiengesellschaft",
          "komercni_banka",
          "m_bank",
          "marchfelder_bank",
          "maybank",
          "oberbank_ag",
          "osterreichische_arzte_und_apothekerbank",
          "ocbc_bank",
          "pay_with_i_n_g",
          "place_z_i_p_k_o",
          "platnosc_online_karta_platnicza",
          "posojilnica_bank_e_gen",
          "postova_banka",
          "public_bank",
          "raiffeisen_bankengruppe_osterreich",
          "rhb_bank",
          "schelhammer_capital_bank_ag",
          "standard_chartered_bank",
          "schoellerbank_ag",
          "sparda_bank_wien",
          "sporo_pay",
          "santander_przelew24",
          "tatra_pay",
          "viamo",
          "volksbank_gruppe",
          "volkskreditbank_ag",
          "vr_bank_braunau",
          "uob_bank",
          "pay_with_alior_bank",
          "banki_spoldzielcze",
          "pay_with_inteligo",
          "b_n_p_paribas_poland",
          "bank_nowy_s_a",
          "credit_agricole",
          "pay_with_b_o_s",
          "pay_with_citi_handlowy",
          "pay_with_plus_bank",
          "toyota_bank",
          "velo_bank",
          "e_transfer_pocztowy24",
          "plus_bank",
          "etransfer_pocztowy24",
          "banki_spbdzielcze",
          "bank_nowy_bfg_sa",
          "getin_bank",
          "blik",
          "noble_pay",
          "idea_bank",
          "envelo_bank",
          "nest_przelew",
          "mbank_mtransfer",
          "inteligo",
          "pbac_z_ipko",
          "bnp_paribas",
          "bank_pekao_sa",
          "volkswagen_bank",
          "alior_bank",
          "boz",
          "bangkok_bank",
          "krungsri_bank",
          "krung_thai_bank",
          "the_siam_commercial_bank",
          "kasikorn_bank",
          "open_bank_success",
          "open_bank_failure",
          "open_bank_cancelled",
          "aib",
          "bank_of_scotland",
          "danske_bank",
          "first_direct",
          "first_trust",
          "halifax",
          "lloyds",
          "monzo",
          "nat_west",
          "nationwide_bank",
          "royal_bank_of_scotland",
          "starling",
          "tsb_bank",
          "tesco_bank",
          "ulster_bank",
          "yoursafe",
          "n26",
          "nationale_nederlanden"
        ]
      },
      "BankRedirectBilling": {
        "type": "object",
        "required": [
          "billing_name",
          "email"
        ],
        "properties": {
          "billing_name": {
            "type": "string",
            "description": "The name for which billing is issued",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "description": "The billing email for bank redirect",
            "example": "example@example.com"
          }
        }
      },
      "BankRedirectData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "bancontact_card"
            ],
            "properties": {
              "bancontact_card": {
                "type": "object",
                "required": [
                  "card_number",
                  "card_exp_month",
                  "card_exp_year",
                  "card_holder_name"
                ],
                "properties": {
                  "card_number": {
                    "type": "string",
                    "description": "The card number",
                    "example": "4242424242424242"
                  },
                  "card_exp_month": {
                    "type": "string",
                    "description": "The card's expiry month",
                    "example": "24"
                  },
                  "card_exp_year": {
                    "type": "string",
                    "description": "The card's expiry year",
                    "example": "24"
                  },
                  "card_holder_name": {
                    "type": "string",
                    "description": "The card holder's name",
                    "example": "John Test"
                  },
                  "billing_details": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BankRedirectBilling"
                      }
                    ],
                    "nullable": true
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "bizum"
            ],
            "properties": {
              "bizum": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "blik"
            ],
            "properties": {
              "blik": {
                "type": "object",
                "properties": {
                  "blik_code": {
                    "type": "string",
                    "nullable": true
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "eps"
            ],
            "properties": {
              "eps": {
                "type": "object",
                "required": [
                  "bank_name",
                  "country"
                ],
                "properties": {
                  "billing_details": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BankRedirectBilling"
                      }
                    ],
                    "nullable": true
                  },
                  "bank_name": {
                    "$ref": "#/components/schemas/BankNames"
                  },
                  "country": {
                    "$ref": "#/components/schemas/CountryAlpha2"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "giropay"
            ],
            "properties": {
              "giropay": {
                "type": "object",
                "required": [
                  "country"
                ],
                "properties": {
                  "billing_details": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BankRedirectBilling"
                      }
                    ],
                    "nullable": true
                  },
                  "bank_account_bic": {
                    "type": "string",
                    "description": "Bank account details for Giropay\nBank account bic code",
                    "nullable": true
                  },
                  "bank_account_iban": {
                    "type": "string",
                    "description": "Bank account iban",
                    "nullable": true
                  },
                  "country": {
                    "$ref": "#/components/schemas/CountryAlpha2"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "ideal"
            ],
            "properties": {
              "ideal": {
                "type": "object",
                "required": [
                  "bank_name",
                  "country"
                ],
                "properties": {
                  "billing_details": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BankRedirectBilling"
                      }
                    ],
                    "nullable": true
                  },
                  "bank_name": {
                    "$ref": "#/components/schemas/BankNames"
                  },
                  "country": {
                    "$ref": "#/components/schemas/CountryAlpha2"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "interac"
            ],
            "properties": {
              "interac": {
                "type": "object",
                "required": [
                  "country",
                  "email"
                ],
                "properties": {
                  "country": {
                    "$ref": "#/components/schemas/CountryAlpha2"
                  },
                  "email": {
                    "type": "string",
                    "example": "john.doe@example.com"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "online_banking_czech_republic"
            ],
            "properties": {
              "online_banking_czech_republic": {
                "type": "object",
                "required": [
                  "issuer"
                ],
                "properties": {
                  "issuer": {
                    "$ref": "#/components/schemas/BankNames"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "online_banking_finland"
            ],
            "properties": {
              "online_banking_finland": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "nullable": true
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "online_banking_poland"
            ],
            "properties": {
              "online_banking_poland": {
                "type": "object",
                "required": [
                  "issuer"
                ],
                "properties": {
                  "issuer": {
                    "$ref": "#/components/schemas/BankNames"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "online_banking_slovakia"
            ],
            "properties": {
              "online_banking_slovakia": {
                "type": "object",
                "required": [
                  "issuer"
                ],
                "properties": {
                  "issuer": {
                    "$ref": "#/components/schemas/BankNames"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "open_banking_uk"
            ],
            "properties": {
              "open_banking_uk": {
                "type": "object",
                "required": [
                  "issuer",
                  "country"
                ],
                "properties": {
                  "issuer": {
                    "$ref": "#/components/schemas/BankNames"
                  },
                  "country": {
                    "$ref": "#/components/schemas/CountryAlpha2"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "przelewy24"
            ],
            "properties": {
              "przelewy24": {
                "type": "object",
                "required": [
                  "billing_details"
                ],
                "properties": {
                  "bank_name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BankNames"
                      }
                    ],
                    "nullable": true
                  },
                  "billing_details": {
                    "$ref": "#/components/schemas/BankRedirectBilling"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "sofort"
            ],
            "properties": {
              "sofort": {
                "type": "object",
                "required": [
                  "country"
                ],
                "properties": {
                  "billing_details": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BankRedirectBilling"
                      }
                    ],
                    "nullable": true
                  },
                  "country": {
                    "$ref": "#/components/schemas/CountryAlpha2"
                  },
                  "preferred_language": {
                    "type": "string",
                    "description": "The preferred language",
                    "example": "en",
                    "nullable": true
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "trustly"
            ],
            "properties": {
              "trustly": {
                "type": "object",
                "required": [
                  "country"
                ],
                "properties": {
                  "country": {
                    "$ref": "#/components/schemas/CountryAlpha2"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "online_banking_fpx"
            ],
            "properties": {
              "online_banking_fpx": {
                "type": "object",
                "required": [
                  "issuer"
                ],
                "properties": {
                  "issuer": {
                    "$ref": "#/components/schemas/BankNames"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "online_banking_thailand"
            ],
            "properties": {
              "online_banking_thailand": {
                "type": "object",
                "required": [
                  "issuer"
                ],
                "properties": {
                  "issuer": {
                    "$ref": "#/components/schemas/BankNames"
                  }
                }
              }
            }
          }
        ]
      },
      "BankTransferData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "ach_bank_transfer"
            ],
            "properties": {
              "ach_bank_transfer": {
                "type": "object",
                "required": [
                  "billing_details"
                ],
                "properties": {
                  "billing_details": {
                    "$ref": "#/components/schemas/AchBillingDetails"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "sepa_bank_transfer"
            ],
            "properties": {
              "sepa_bank_transfer": {
                "type": "object",
                "required": [
                  "billing_details",
                  "country"
                ],
                "properties": {
                  "billing_details": {
                    "$ref": "#/components/schemas/SepaAndBacsBillingDetails"
                  },
                  "country": {
                    "$ref": "#/components/schemas/CountryAlpha2"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "bacs_bank_transfer"
            ],
            "properties": {
              "bacs_bank_transfer": {
                "type": "object",
                "required": [
                  "billing_details"
                ],
                "properties": {
                  "billing_details": {
                    "$ref": "#/components/schemas/SepaAndBacsBillingDetails"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "multibanco_bank_transfer"
            ],
            "properties": {
              "multibanco_bank_transfer": {
                "type": "object",
                "required": [
                  "billing_details"
                ],
                "properties": {
                  "billing_details": {
                    "$ref": "#/components/schemas/MultibancoBillingDetails"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "permata_bank_transfer"
            ],
            "properties": {
              "permata_bank_transfer": {
                "type": "object",
                "required": [
                  "billing_details"
                ],
                "properties": {
                  "billing_details": {
                    "$ref": "#/components/schemas/DokuBillingDetails"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "bca_bank_transfer"
            ],
            "properties": {
              "bca_bank_transfer": {
                "type": "object",
                "required": [
                  "billing_details"
                ],
                "properties": {
                  "billing_details": {
                    "$ref": "#/components/schemas/DokuBillingDetails"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "bni_va_bank_transfer"
            ],
            "properties": {
              "bni_va_bank_transfer": {
                "type": "object",
                "required": [
                  "billing_details"
                ],
                "properties": {
                  "billing_details": {
                    "$ref": "#/components/schemas/DokuBillingDetails"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "bri_va_bank_transfer"
            ],
            "properties": {
              "bri_va_bank_transfer": {
                "type": "object",
                "required": [
                  "billing_details"
                ],
                "properties": {
                  "billing_details": {
                    "$ref": "#/components/schemas/DokuBillingDetails"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "cimb_va_bank_transfer"
            ],
            "properties": {
              "cimb_va_bank_transfer": {
                "type": "object",
                "required": [
                  "billing_details"
                ],
                "properties": {
                  "billing_details": {
                    "$ref": "#/components/schemas/DokuBillingDetails"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "danamon_va_bank_transfer"
            ],
            "properties": {
              "danamon_va_bank_transfer": {
                "type": "object",
                "required": [
                  "billing_details"
                ],
                "properties": {
                  "billing_details": {
                    "$ref": "#/components/schemas/DokuBillingDetails"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "mandiri_va_bank_transfer"
            ],
            "properties": {
              "mandiri_va_bank_transfer": {
                "type": "object",
                "required": [
                  "billing_details"
                ],
                "properties": {
                  "billing_details": {
                    "$ref": "#/components/schemas/DokuBillingDetails"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "pix"
            ],
            "properties": {
              "pix": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "pse"
            ],
            "properties": {
              "pse": {
                "type": "object"
              }
            }
          }
        ]
      },
      "BankTransferInstructions": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "doku_bank_transfer_instructions"
            ],
            "properties": {
              "doku_bank_transfer_instructions": {
                "$ref": "#/components/schemas/DokuBankTransferInstructions"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "ach_credit_transfer"
            ],
            "properties": {
              "ach_credit_transfer": {
                "$ref": "#/components/schemas/AchTransfer"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "sepa_bank_instructions"
            ],
            "properties": {
              "sepa_bank_instructions": {
                "$ref": "#/components/schemas/SepaBankTransferInstructions"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "bacs_bank_instructions"
            ],
            "properties": {
              "bacs_bank_instructions": {
                "$ref": "#/components/schemas/BacsBankTransferInstructions"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "multibanco"
            ],
            "properties": {
              "multibanco": {
                "$ref": "#/components/schemas/MultibancoTransferInstructions"
              }
            }
          }
        ]
      },
      "BankTransferNextStepsData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BankTransferInstructions"
          },
          {
            "type": "object",
            "properties": {
              "receiver": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ReceiverDetails"
                  }
                ],
                "nullable": true
              }
            }
          }
        ]
      },
      "BlocklistDataKind": {
        "type": "string",
        "enum": [
          "payment_method",
          "card_bin",
          "extended_card_bin"
        ]
      },
      "BlocklistRequest": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "type",
              "data"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "card_bin"
                ]
              },
              "data": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "data"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "fingerprint"
                ]
              },
              "data": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "data"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "extended_card_bin"
                ]
              },
              "data": {
                "type": "string"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "type"
        }
      },
      "BlocklistResponse": {
        "type": "object",
        "required": [
          "fingerprint_id",
          "data_kind",
          "created_at"
        ],
        "properties": {
          "fingerprint_id": {
            "type": "string"
          },
          "data_kind": {
            "$ref": "#/components/schemas/BlocklistDataKind"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "BoletoVoucherData": {
        "type": "object",
        "properties": {
          "social_security_number": {
            "type": "string",
            "description": "The shopper's social security number",
            "nullable": true
          }
        }
      },
      "BrowserInformation": {
        "type": "object",
        "description": "Browser information to be used for 3DS 2.0",
        "properties": {
          "color_depth": {
            "type": "integer",
            "format": "int32",
            "description": "Color depth supported by the browser",
            "nullable": true,
            "minimum": 0
          },
          "java_enabled": {
            "type": "boolean",
            "description": "Whether java is enabled in the browser",
            "nullable": true
          },
          "java_script_enabled": {
            "type": "boolean",
            "description": "Whether javascript is enabled in the browser",
            "nullable": true
          },
          "language": {
            "type": "string",
            "description": "Language supported",
            "nullable": true
          },
          "screen_height": {
            "type": "integer",
            "format": "int32",
            "description": "The screen height in pixels",
            "nullable": true,
            "minimum": 0
          },
          "screen_width": {
            "type": "integer",
            "format": "int32",
            "description": "The screen width in pixels",
            "nullable": true,
            "minimum": 0
          },
          "time_zone": {
            "type": "integer",
            "format": "int32",
            "description": "Time zone of the client",
            "nullable": true
          },
          "ip_address": {
            "type": "string",
            "description": "Ip address of the client",
            "nullable": true
          },
          "accept_header": {
            "type": "string",
            "description": "List of headers that are accepted",
            "example": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8",
            "nullable": true
          },
          "user_agent": {
            "type": "string",
            "description": "User-agent of the browser",
            "nullable": true
          }
        }
      },
      "BusinessPaymentLinkConfig": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentLinkConfigRequest"
          },
          {
            "type": "object",
            "properties": {
              "domain_name": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "BusinessProfileCreate": {
        "type": "object",
        "properties": {
          "profile_name": {
            "type": "string",
            "description": "The name of business profile",
            "nullable": true,
            "maxLength": 64
          },
          "return_url": {
            "type": "string",
            "description": "The URL to redirect after the completion of the operation",
            "example": "https://www.example.com/success",
            "nullable": true,
            "maxLength": 255
          },
          "enable_payment_response_hash": {
            "type": "boolean",
            "description": "A boolean value to indicate if payment response hash needs to be enabled",
            "default": true,
            "example": true,
            "nullable": true
          },
          "payment_response_hash_key": {
            "type": "string",
            "description": "Refers to the hash key used for calculating the signature for webhooks and redirect response. If the value is not provided, a default value is used.",
            "nullable": true
          },
          "redirect_to_merchant_with_http_post": {
            "type": "boolean",
            "description": "A boolean value to indicate if redirect to merchant with http post needs to be enabled",
            "default": false,
            "example": true,
            "nullable": true
          },
          "webhook_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WebhookDetails"
              }
            ],
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "routing_algorithm": {
            "type": "object",
            "description": "The routing algorithm to be used for routing payments to desired connectors",
            "nullable": true
          },
          "intent_fulfillment_time": {
            "type": "integer",
            "format": "int32",
            "description": "Will be used to expire client secret after certain amount of time to be supplied in seconds\n(900) for 15 mins",
            "example": 900,
            "nullable": true,
            "minimum": 0
          },
          "frm_routing_algorithm": {
            "type": "object",
            "description": "The frm routing algorithm to be used for routing payments to desired FRM's",
            "nullable": true
          },
          "payout_routing_algorithm": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RoutingAlgorithm"
              }
            ],
            "nullable": true
          },
          "applepay_verified_domains": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Verified applepay domains for a particular profile",
            "nullable": true
          },
          "session_expiry": {
            "type": "integer",
            "format": "int32",
            "description": "Client Secret Default expiry for all payments created under this business profile",
            "example": 900,
            "nullable": true,
            "minimum": 0
          },
          "payment_link_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BusinessPaymentLinkConfig"
              }
            ],
            "nullable": true
          },
          "authentication_connector_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthenticationConnectorDetails"
              }
            ],
            "nullable": true
          }
        }
      },
      "BusinessProfileResponse": {
        "type": "object",
        "required": [
          "merchant_id",
          "profile_id",
          "profile_name",
          "enable_payment_response_hash",
          "redirect_to_merchant_with_http_post"
        ],
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The identifier for Merchant Account",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 64
          },
          "profile_id": {
            "type": "string",
            "description": "The default business profile that must be used for creating merchant accounts and payments",
            "example": "pro_abcdefghijklmnopqrstuvwxyz",
            "maxLength": 64
          },
          "profile_name": {
            "type": "string",
            "description": "Name of the business profile",
            "maxLength": 64
          },
          "return_url": {
            "type": "string",
            "description": "The URL to redirect after the completion of the operation",
            "example": "https://www.example.com/success",
            "nullable": true,
            "maxLength": 255
          },
          "enable_payment_response_hash": {
            "type": "boolean",
            "description": "A boolean value to indicate if payment response hash needs to be enabled",
            "default": true,
            "example": true
          },
          "payment_response_hash_key": {
            "type": "string",
            "description": "Refers to the hash key used for calculating the signature for webhooks and redirect response. If the value is not provided, a default value is used.",
            "nullable": true
          },
          "redirect_to_merchant_with_http_post": {
            "type": "boolean",
            "description": "A boolean value to indicate if redirect to merchant with http post needs to be enabled",
            "default": false,
            "example": true
          },
          "webhook_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WebhookDetails"
              }
            ],
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "routing_algorithm": {
            "type": "object",
            "description": "The routing algorithm to be used for routing payments to desired connectors",
            "nullable": true
          },
          "intent_fulfillment_time": {
            "type": "integer",
            "format": "int64",
            "description": "Will be used to expire client secret after certain amount of time to be supplied in seconds\n(900) for 15 mins",
            "example": 900,
            "nullable": true
          },
          "frm_routing_algorithm": {
            "type": "object",
            "description": "The routing algorithm to be used to process the incoming request from merchant to outgoing payment processor or payment method. The default is 'Custom'",
            "nullable": true
          },
          "payout_routing_algorithm": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RoutingAlgorithm"
              }
            ],
            "nullable": true
          },
          "applepay_verified_domains": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Verified applepay domains for a particular profile",
            "nullable": true
          },
          "session_expiry": {
            "type": "integer",
            "format": "int64",
            "description": "Client Secret Default expiry for all payments created under this business profile",
            "example": 900,
            "nullable": true
          },
          "payment_link_config": {
            "description": "Default Payment Link config for all payment links created under this business profile",
            "nullable": true
          },
          "authentication_connector_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthenticationConnectorDetails"
              }
            ],
            "nullable": true
          }
        }
      },
      "CaptureMethod": {
        "type": "string",
        "enum": [
          "automatic",
          "manual",
          "manual_multiple",
          "scheduled"
        ]
      },
      "CaptureResponse": {
        "type": "object",
        "required": [
          "capture_id",
          "status",
          "amount",
          "connector",
          "authorized_attempt_id",
          "capture_sequence"
        ],
        "properties": {
          "capture_id": {
            "type": "string",
            "description": "unique identifier for the capture"
          },
          "status": {
            "$ref": "#/components/schemas/CaptureStatus"
          },
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "The capture amount. Amount for the payment in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc.,"
          },
          "currency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Currency"
              }
            ],
            "nullable": true
          },
          "connector": {
            "type": "string",
            "description": "The connector used for the payment"
          },
          "authorized_attempt_id": {
            "type": "string",
            "description": "unique identifier for the parent attempt on which this capture is made"
          },
          "connector_capture_id": {
            "type": "string",
            "description": "A unique identifier for a capture provided by the connector",
            "nullable": true
          },
          "capture_sequence": {
            "type": "integer",
            "format": "int32",
            "description": "sequence number of this capture"
          },
          "error_message": {
            "type": "string",
            "description": "If there was an error while calling the connector the error message is received here",
            "nullable": true
          },
          "error_code": {
            "type": "string",
            "description": "If there was an error while calling the connectors the code is received here",
            "nullable": true
          },
          "error_reason": {
            "type": "string",
            "description": "If there was an error while calling the connectors the reason is received here",
            "nullable": true
          },
          "reference_id": {
            "type": "string",
            "description": "reference to the capture at connector side",
            "nullable": true
          }
        }
      },
      "CaptureStatus": {
        "type": "string",
        "enum": [
          "started",
          "charged",
          "pending",
          "failed"
        ]
      },
      "Card": {
        "type": "object",
        "required": [
          "card_number",
          "expiry_month",
          "expiry_year",
          "card_holder_name"
        ],
        "properties": {
          "card_number": {
            "type": "string",
            "description": "The card number",
            "example": "4242424242424242"
          },
          "expiry_month": {
            "type": "string",
            "description": "The card's expiry month"
          },
          "expiry_year": {
            "type": "string",
            "description": "The card's expiry year"
          },
          "card_holder_name": {
            "type": "string",
            "description": "The card holder's name",
            "example": "John Doe"
          }
        }
      },
      "CardDetail": {
        "type": "object",
        "required": [
          "card_number",
          "card_exp_month",
          "card_exp_year",
          "card_holder_name"
        ],
        "properties": {
          "card_number": {
            "type": "string",
            "description": "Card Number",
            "example": "4111111145551142"
          },
          "card_exp_month": {
            "type": "string",
            "description": "Card Expiry Month",
            "example": "10"
          },
          "card_exp_year": {
            "type": "string",
            "description": "Card Expiry Year",
            "example": "25"
          },
          "card_holder_name": {
            "type": "string",
            "description": "Card Holder Name",
            "example": "John Doe"
          },
          "nick_name": {
            "type": "string",
            "description": "Card Holder's Nick Name",
            "example": "John Doe",
            "nullable": true
          },
          "card_issuing_country": {
            "type": "string",
            "description": "Card Issuing Country",
            "nullable": true
          },
          "card_network": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardNetwork"
              }
            ],
            "nullable": true
          },
          "card_issuer": {
            "type": "string",
            "description": "Issuer Bank for Card",
            "nullable": true
          },
          "card_type": {
            "type": "string",
            "description": "Card Type",
            "nullable": true
          }
        }
      },
      "CardDetailFromLocker": {
        "type": "object",
        "required": [
          "saved_to_locker"
        ],
        "properties": {
          "scheme": {
            "type": "string",
            "nullable": true
          },
          "issuer_country": {
            "type": "string",
            "nullable": true
          },
          "last4_digits": {
            "type": "string",
            "nullable": true
          },
          "expiry_month": {
            "type": "string",
            "nullable": true
          },
          "expiry_year": {
            "type": "string",
            "nullable": true
          },
          "card_token": {
            "type": "string",
            "nullable": true
          },
          "card_holder_name": {
            "type": "string",
            "nullable": true
          },
          "card_fingerprint": {
            "type": "string",
            "nullable": true
          },
          "nick_name": {
            "type": "string",
            "nullable": true
          },
          "card_network": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardNetwork"
              }
            ],
            "nullable": true
          },
          "card_isin": {
            "type": "string",
            "nullable": true
          },
          "card_issuer": {
            "type": "string",
            "nullable": true
          },
          "card_type": {
            "type": "string",
            "nullable": true
          },
          "saved_to_locker": {
            "type": "boolean"
          }
        }
      },
      "CardNetwork": {
        "type": "string",
        "description": "Indicates the card network.",
        "enum": [
          "Visa",
          "Mastercard",
          "AmericanExpress",
          "JCB",
          "DinersClub",
          "Discover",
          "CartesBancaires",
          "UnionPay",
          "Interac",
          "RuPay",
          "Maestro"
        ]
      },
      "CardRedirectData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "knet"
            ],
            "properties": {
              "knet": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "benefit"
            ],
            "properties": {
              "benefit": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "momo_atm"
            ],
            "properties": {
              "momo_atm": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "card_redirect"
            ],
            "properties": {
              "card_redirect": {
                "type": "object"
              }
            }
          }
        ]
      },
      "CardToken": {
        "type": "object",
        "required": [
          "card_holder_name"
        ],
        "properties": {
          "card_holder_name": {
            "type": "string",
            "description": "The card holder's name",
            "example": "John Test"
          },
          "card_cvc": {
            "type": "string",
            "description": "The CVC number for the card",
            "nullable": true
          }
        }
      },
      "CashappQr": {
        "type": "object"
      },
      "Comparison": {
        "type": "object",
        "description": "Represents a single comparison condition.",
        "required": [
          "lhs",
          "comparison",
          "value",
          "metadata"
        ],
        "properties": {
          "lhs": {
            "type": "string",
            "description": "The left hand side which will always be a domain input identifier like \"payment.method.cardtype\""
          },
          "comparison": {
            "$ref": "#/components/schemas/ComparisonType"
          },
          "value": {
            "$ref": "#/components/schemas/ValueType"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata that the Static Analyzer and Backend does not touch.\nThis can be used to store useful information for the frontend and is required for communication\nbetween the static analyzer and the frontend.",
            "additionalProperties": {}
          }
        }
      },
      "ComparisonType": {
        "type": "string",
        "description": "Conditional comparison type",
        "enum": [
          "equal",
          "not_equal",
          "less_than",
          "less_than_equal",
          "greater_than",
          "greater_than_equal"
        ]
      },
      "Connector": {
        "type": "string",
        "description": "A connector is an integration to fulfill payments",
        "enum": [
          "phonypay",
          "fauxpay",
          "pretendpay",
          "stripe_test",
          "adyen_test",
          "checkout_test",
          "paypal_test",
          "aci",
          "adyen",
          "airwallex",
          "authorizedotnet",
          "bambora",
          "bankofamerica",
          "bitpay",
          "bluesnap",
          "boku",
          "braintree",
          "cashtocode",
          "checkout",
          "coinbase",
          "cryptopay",
          "cybersource",
          "dlocal",
          "fiserv",
          "forte",
          "globalpay",
          "globepay",
          "gocardless",
          "helcim",
          "iatapay",
          "klarna",
          "mollie",
          "multisafepay",
          "nexinets",
          "nmi",
          "noon",
          "nuvei",
          "opennode",
          "payme",
          "paypal",
          "payu",
          "placetopay",
          "powertranz",
          "prophetpay",
          "rapyd",
          "shift4",
          "square",
          "stax",
          "stripe",
          "trustpay",
          "tsys",
          "volt",
          "wise",
          "worldline",
          "worldpay",
          "zen",
          "signifyd",
          "plaid",
          "riskified"
        ]
      },
      "ConnectorMetadata": {
        "type": "object",
        "properties": {
          "apple_pay": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApplepayConnectorMetadataRequest"
              }
            ],
            "nullable": true
          },
          "airwallex": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AirwallexData"
              }
            ],
            "nullable": true
          },
          "noon": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NoonData"
              }
            ],
            "nullable": true
          }
        }
      },
      "ConnectorSelection": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "type",
              "data"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "priority"
                ]
              },
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoutableConnectorChoice"
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "data"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "volume_split"
                ]
              },
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ConnectorVolumeSplit"
                }
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "type"
        }
      },
      "ConnectorStatus": {
        "type": "string",
        "enum": [
          "inactive",
          "active"
        ]
      },
      "ConnectorType": {
        "type": "string",
        "description": "Type of the Connector for the financial use case. Could range from Payments to Accounting to Banking.",
        "enum": [
          "payment_processor",
          "payment_vas",
          "fin_operations",
          "fiz_operations",
          "networks",
          "banking_entities",
          "non_banking_finance",
          "payout_processor",
          "payment_method_auth",
          "authentication_processor"
        ]
      },
      "ConnectorVolumeSplit": {
        "type": "object",
        "required": [
          "connector",
          "split"
        ],
        "properties": {
          "connector": {
            "$ref": "#/components/schemas/RoutableConnectorChoice"
          },
          "split": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        }
      },
      "CountryAlpha2": {
        "type": "string",
        "enum": [
          "AF",
          "AX",
          "AL",
          "DZ",
          "AS",
          "AD",
          "AO",
          "AI",
          "AQ",
          "AG",
          "AR",
          "AM",
          "AW",
          "AU",
          "AT",
          "AZ",
          "BS",
          "BH",
          "BD",
          "BB",
          "BY",
          "BE",
          "BZ",
          "BJ",
          "BM",
          "BT",
          "BO",
          "BQ",
          "BA",
          "BW",
          "BV",
          "BR",
          "IO",
          "BN",
          "BG",
          "BF",
          "BI",
          "KH",
          "CM",
          "CA",
          "CV",
          "KY",
          "CF",
          "TD",
          "CL",
          "CN",
          "CX",
          "CC",
          "CO",
          "KM",
          "CG",
          "CD",
          "CK",
          "CR",
          "CI",
          "HR",
          "CU",
          "CW",
          "CY",
          "CZ",
          "DK",
          "DJ",
          "DM",
          "DO",
          "EC",
          "EG",
          "SV",
          "GQ",
          "ER",
          "EE",
          "ET",
          "FK",
          "FO",
          "FJ",
          "FI",
          "FR",
          "GF",
          "PF",
          "TF",
          "GA",
          "GM",
          "GE",
          "DE",
          "GH",
          "GI",
          "GR",
          "GL",
          "GD",
          "GP",
          "GU",
          "GT",
          "GG",
          "GN",
          "GW",
          "GY",
          "HT",
          "HM",
          "VA",
          "HN",
          "HK",
          "HU",
          "IS",
          "IN",
          "ID",
          "IR",
          "IQ",
          "IE",
          "IM",
          "IL",
          "IT",
          "JM",
          "JP",
          "JE",
          "JO",
          "KZ",
          "KE",
          "KI",
          "KP",
          "KR",
          "KW",
          "KG",
          "LA",
          "LV",
          "LB",
          "LS",
          "LR",
          "LY",
          "LI",
          "LT",
          "LU",
          "MO",
          "MK",
          "MG",
          "MW",
          "MY",
          "MV",
          "ML",
          "MT",
          "MH",
          "MQ",
          "MR",
          "MU",
          "YT",
          "MX",
          "FM",
          "MD",
          "MC",
          "MN",
          "ME",
          "MS",
          "MA",
          "MZ",
          "MM",
          "NA",
          "NR",
          "NP",
          "NL",
          "NC",
          "NZ",
          "NI",
          "NE",
          "NG",
          "NU",
          "NF",
          "MP",
          "NO",
          "OM",
          "PK",
          "PW",
          "PS",
          "PA",
          "PG",
          "PY",
          "PE",
          "PH",
          "PN",
          "PL",
          "PT",
          "PR",
          "QA",
          "RE",
          "RO",
          "RU",
          "RW",
          "BL",
          "SH",
          "KN",
          "LC",
          "MF",
          "PM",
          "VC",
          "WS",
          "SM",
          "ST",
          "SA",
          "SN",
          "RS",
          "SC",
          "SL",
          "SG",
          "SX",
          "SK",
          "SI",
          "SB",
          "SO",
          "ZA",
          "GS",
          "SS",
          "ES",
          "LK",
          "SD",
          "SR",
          "SJ",
          "SZ",
          "SE",
          "CH",
          "SY",
          "TW",
          "TJ",
          "TZ",
          "TH",
          "TL",
          "TG",
          "TK",
          "TO",
          "TT",
          "TN",
          "TR",
          "TM",
          "TC",
          "TV",
          "UG",
          "UA",
          "AE",
          "GB",
          "UM",
          "UY",
          "UZ",
          "VU",
          "VE",
          "VN",
          "VG",
          "VI",
          "WF",
          "EH",
          "YE",
          "ZM",
          "ZW",
          "US"
        ]
      },
      "CreateApiKeyRequest": {
        "type": "object",
        "description": "The request body for creating an API Key.",
        "required": [
          "name",
          "expiration"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "A unique name for the API Key to help you identify it.",
            "example": "Sandbox integration key",
            "maxLength": 64
          },
          "description": {
            "type": "string",
            "description": "A description to provide more context about the API Key.",
            "example": "Key used by our developers to integrate with the sandbox environment",
            "nullable": true,
            "maxLength": 256
          },
          "expiration": {
            "$ref": "#/components/schemas/ApiKeyExpiration"
          }
        }
      },
      "CreateApiKeyResponse": {
        "type": "object",
        "description": "The response body for creating an API Key.",
        "required": [
          "key_id",
          "merchant_id",
          "name",
          "api_key",
          "created",
          "expiration"
        ],
        "properties": {
          "key_id": {
            "type": "string",
            "description": "The identifier for the API Key.",
            "example": "5hEEqkgJUyuxgSKGArHA4mWSnX",
            "maxLength": 64
          },
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account.",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 64
          },
          "name": {
            "type": "string",
            "description": "The unique name for the API Key to help you identify it.",
            "example": "Sandbox integration key",
            "maxLength": 64
          },
          "description": {
            "type": "string",
            "description": "The description to provide more context about the API Key.",
            "example": "Key used by our developers to integrate with the sandbox environment",
            "nullable": true,
            "maxLength": 256
          },
          "api_key": {
            "type": "string",
            "description": "The plaintext API Key used for server-side API access. Ensure you store the API Key\nsecurely as you will not be able to see it again.",
            "maxLength": 128
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "The time at which the API Key was created.",
            "example": "2022-09-10T10:11:12Z"
          },
          "expiration": {
            "$ref": "#/components/schemas/ApiKeyExpiration"
          }
        }
      },
      "CryptoData": {
        "type": "object",
        "properties": {
          "pay_currency": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "Currency": {
        "type": "string",
        "description": "The three letter ISO currency code in uppercase. Eg: 'USD' for the United States Dollar.",
        "enum": [
          "AED",
          "ALL",
          "AMD",
          "ANG",
          "AOA",
          "ARS",
          "AUD",
          "AWG",
          "AZN",
          "BAM",
          "BBD",
          "BDT",
          "BGN",
          "BHD",
          "BIF",
          "BMD",
          "BND",
          "BOB",
          "BRL",
          "BSD",
          "BWP",
          "BYN",
          "BZD",
          "CAD",
          "CHF",
          "CLP",
          "CNY",
          "COP",
          "CRC",
          "CUP",
          "CVE",
          "CZK",
          "DJF",
          "DKK",
          "DOP",
          "DZD",
          "EGP",
          "ETB",
          "EUR",
          "FJD",
          "FKP",
          "GBP",
          "GEL",
          "GHS",
          "GIP",
          "GMD",
          "GNF",
          "GTQ",
          "GYD",
          "HKD",
          "HNL",
          "HRK",
          "HTG",
          "HUF",
          "IDR",
          "ILS",
          "INR",
          "IQD",
          "JMD",
          "JOD",
          "JPY",
          "KES",
          "KGS",
          "KHR",
          "KMF",
          "KRW",
          "KWD",
          "KYD",
          "KZT",
          "LAK",
          "LBP",
          "LKR",
          "LRD",
          "LSL",
          "LYD",
          "MAD",
          "MDL",
          "MGA",
          "MKD",
          "MMK",
          "MNT",
          "MOP",
          "MRU",
          "MUR",
          "MVR",
          "MWK",
          "MXN",
          "MYR",
          "MZN",
          "NAD",
          "NGN",
          "NIO",
          "NOK",
          "NPR",
          "NZD",
          "OMR",
          "PAB",
          "PEN",
          "PGK",
          "PHP",
          "PKR",
          "PLN",
          "PYG",
          "QAR",
          "RON",
          "RSD",
          "RUB",
          "RWF",
          "SAR",
          "SBD",
          "SCR",
          "SEK",
          "SGD",
          "SHP",
          "SLE",
          "SLL",
          "SOS",
          "SRD",
          "SSP",
          "STN",
          "SVC",
          "SZL",
          "THB",
          "TND",
          "TOP",
          "TRY",
          "TTD",
          "TWD",
          "TZS",
          "UAH",
          "UGX",
          "USD",
          "UYU",
          "UZS",
          "VES",
          "VND",
          "VUV",
          "WST",
          "XAF",
          "XCD",
          "XOF",
          "XPF",
          "YER",
          "ZAR",
          "ZMW"
        ]
      },
      "CustomerAcceptance": {
        "type": "object",
        "required": [
          "acceptance_type"
        ],
        "properties": {
          "acceptance_type": {
            "$ref": "#/components/schemas/AcceptanceType"
          },
          "accepted_at": {
            "type": "string",
            "format": "date-time",
            "description": "Specifying when the customer acceptance was provided",
            "example": "2022-09-10T10:11:12Z",
            "nullable": true
          },
          "online": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OnlineMandate"
              }
            ],
            "nullable": true
          }
        }
      },
      "CustomerDefaultPaymentMethodResponse": {
        "type": "object",
        "required": [
          "customer_id",
          "payment_method"
        ],
        "properties": {
          "default_payment_method_id": {
            "type": "string",
            "description": "The unique identifier of the Payment method",
            "example": "card_rGK4Vi5iSW70MY7J2mIy",
            "nullable": true
          },
          "customer_id": {
            "type": "string",
            "description": "The unique identifier of the customer.",
            "example": "cus_meowerunwiuwiwqw"
          },
          "payment_method": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "payment_method_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodType"
              }
            ],
            "nullable": true
          }
        }
      },
      "CustomerDeleteResponse": {
        "type": "object",
        "required": [
          "customer_id",
          "customer_deleted",
          "address_deleted",
          "payment_methods_deleted"
        ],
        "properties": {
          "customer_id": {
            "type": "string",
            "description": "The identifier for the customer object",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "customer_deleted": {
            "type": "boolean",
            "description": "Whether customer was deleted or not",
            "example": false
          },
          "address_deleted": {
            "type": "boolean",
            "description": "Whether address was deleted or not",
            "example": false
          },
          "payment_methods_deleted": {
            "type": "boolean",
            "description": "Whether payment methods deleted or not",
            "example": false
          }
        }
      },
      "CustomerDetails": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The identifier for the customer."
          },
          "name": {
            "type": "string",
            "description": "The customer's name",
            "example": "John Doe",
            "nullable": true,
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "description": "The customer's email address",
            "example": "johntest@test.com",
            "nullable": true,
            "maxLength": 255
          },
          "phone": {
            "type": "string",
            "description": "The customer's phone number",
            "example": "3141592653",
            "nullable": true,
            "maxLength": 10
          },
          "phone_country_code": {
            "type": "string",
            "description": "The country code for the customer's phone number",
            "example": "+1",
            "nullable": true,
            "maxLength": 2
          }
        }
      },
      "CustomerPaymentMethod": {
        "type": "object",
        "required": [
          "payment_token",
          "payment_method_id",
          "customer_id",
          "payment_method",
          "recurring_enabled",
          "installment_payment_enabled",
          "requires_cvv",
          "default_payment_method_set"
        ],
        "properties": {
          "payment_token": {
            "type": "string",
            "description": "Token for payment method in temporary card locker which gets refreshed often",
            "example": "7ebf443f-a050-4067-84e5-e6f6d4800aef"
          },
          "payment_method_id": {
            "type": "string",
            "description": "The unique identifier of the customer.",
            "example": "pm_iouuy468iyuowqs"
          },
          "customer_id": {
            "type": "string",
            "description": "The unique identifier of the customer.",
            "example": "cus_meowerunwiuwiwqw"
          },
          "payment_method": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "payment_method_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodType"
              }
            ],
            "nullable": true
          },
          "payment_method_issuer": {
            "type": "string",
            "description": "The name of the bank/ provider issuing the payment method to the end user",
            "example": "Citibank",
            "nullable": true
          },
          "payment_method_issuer_code": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodIssuerCode"
              }
            ],
            "nullable": true
          },
          "recurring_enabled": {
            "type": "boolean",
            "description": "Indicates whether the payment method is eligible for recurring payments",
            "example": true
          },
          "installment_payment_enabled": {
            "type": "boolean",
            "description": "Indicates whether the payment method is eligible for installment payments",
            "example": true
          },
          "payment_experience": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentExperience"
            },
            "description": "Type of payment experience enabled with the connector",
            "example": [
              "redirect_to_url"
            ],
            "nullable": true
          },
          "card": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardDetailFromLocker"
              }
            ],
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "A timestamp (ISO 8601 code) that determines when the customer was created",
            "example": "2023-01-18T11:04:09.922Z",
            "nullable": true
          },
          "bank_transfer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Bank"
              }
            ],
            "nullable": true
          },
          "bank": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MaskedBankDetails"
              }
            ],
            "nullable": true
          },
          "surcharge_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SurchargeDetailsResponse"
              }
            ],
            "nullable": true
          },
          "requires_cvv": {
            "type": "boolean",
            "description": "Whether this payment method requires CVV to be collected",
            "example": true
          },
          "last_used_at": {
            "type": "string",
            "format": "date-time",
            "description": "A timestamp (ISO 8601 code) that determines when the payment method was last used",
            "example": "2024-02-24T11:04:09.922Z",
            "nullable": true
          },
          "default_payment_method_set": {
            "type": "boolean",
            "description": "Indicates if the payment method has been set to default or not",
            "example": true
          }
        }
      },
      "CustomerPaymentMethodsListResponse": {
        "type": "object",
        "required": [
          "customer_payment_methods"
        ],
        "properties": {
          "customer_payment_methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerPaymentMethod"
            },
            "description": "List of payment methods for customer"
          },
          "is_guest_customer": {
            "type": "boolean",
            "description": "Returns whether a customer id is not tied to a payment intent (only when the request is made against a client secret)",
            "nullable": true
          }
        }
      },
      "CustomerRequest": {
        "type": "object",
        "description": "The customer details",
        "properties": {
          "customer_id": {
            "type": "string",
            "description": "The identifier for the customer object. If not provided the customer ID will be autogenerated.",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "name": {
            "type": "string",
            "description": "The customer's name",
            "example": "Jon Test",
            "nullable": true,
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "description": "The customer's email address",
            "example": "JonTest@test.com",
            "nullable": true,
            "maxLength": 255
          },
          "phone": {
            "type": "string",
            "description": "The customer's phone number",
            "example": "9999999999",
            "nullable": true,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "description": "An arbitrary string that you can attach to a customer object.",
            "example": "First Customer",
            "nullable": true,
            "maxLength": 255
          },
          "phone_country_code": {
            "type": "string",
            "description": "The country code for the customer phone number",
            "example": "+65",
            "nullable": true,
            "maxLength": 255
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressDetails"
              }
            ],
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500\ncharacters long. Metadata is useful for storing additional, structured information on an\nobject.",
            "nullable": true
          }
        }
      },
      "CustomerResponse": {
        "type": "object",
        "required": [
          "customer_id",
          "created_at"
        ],
        "properties": {
          "customer_id": {
            "type": "string",
            "description": "The identifier for the customer object. If not provided the customer ID will be autogenerated.",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "name": {
            "type": "string",
            "description": "The customer's name",
            "example": "Jon Test",
            "nullable": true,
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "description": "The customer's email address",
            "example": "JonTest@test.com",
            "nullable": true,
            "maxLength": 255
          },
          "phone": {
            "type": "string",
            "description": "The customer's phone number",
            "example": "9999999999",
            "nullable": true,
            "maxLength": 255
          },
          "phone_country_code": {
            "type": "string",
            "description": "The country code for the customer phone number",
            "example": "+65",
            "nullable": true,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "description": "An arbitrary string that you can attach to a customer object.",
            "example": "First Customer",
            "nullable": true,
            "maxLength": 255
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressDetails"
              }
            ],
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "A timestamp (ISO 8601 code) that determines when the customer was created",
            "example": "2023-01-18T11:04:09.922Z"
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500\ncharacters long. Metadata is useful for storing additional, structured information on an\nobject.",
            "nullable": true
          },
          "default_payment_method_id": {
            "type": "string",
            "description": "The identifier for the default payment method.",
            "example": "pm_djh2837dwduh890123",
            "nullable": true,
            "maxLength": 64
          }
        }
      },
      "DecoupledAuthenticationType": {
        "type": "string",
        "enum": [
          "challenge",
          "frictionless"
        ]
      },
      "DefaultPaymentMethod": {
        "type": "object",
        "required": [
          "customer_id",
          "payment_method_id"
        ],
        "properties": {
          "customer_id": {
            "type": "string"
          },
          "payment_method_id": {
            "type": "string"
          }
        }
      },
      "DeviceChannel": {
        "type": "string",
        "enum": [
          "APP",
          "BRW"
        ]
      },
      "DisputeResponse": {
        "type": "object",
        "required": [
          "dispute_id",
          "payment_id",
          "attempt_id",
          "amount",
          "currency",
          "dispute_stage",
          "dispute_status",
          "connector",
          "connector_status",
          "connector_dispute_id",
          "created_at"
        ],
        "properties": {
          "dispute_id": {
            "type": "string",
            "description": "The identifier for dispute"
          },
          "payment_id": {
            "type": "string",
            "description": "The identifier for payment_intent"
          },
          "attempt_id": {
            "type": "string",
            "description": "The identifier for payment_attempt"
          },
          "amount": {
            "type": "string",
            "description": "The dispute amount"
          },
          "currency": {
            "type": "string",
            "description": "The three-letter ISO currency code"
          },
          "dispute_stage": {
            "$ref": "#/components/schemas/DisputeStage"
          },
          "dispute_status": {
            "$ref": "#/components/schemas/DisputeStatus"
          },
          "connector": {
            "type": "string",
            "description": "connector to which dispute is associated with"
          },
          "connector_status": {
            "type": "string",
            "description": "Status of the dispute sent by connector"
          },
          "connector_dispute_id": {
            "type": "string",
            "description": "Dispute id sent by connector"
          },
          "connector_reason": {
            "type": "string",
            "description": "Reason of dispute sent by connector",
            "nullable": true
          },
          "connector_reason_code": {
            "type": "string",
            "description": "Reason code of dispute sent by connector",
            "nullable": true
          },
          "challenge_required_by": {
            "type": "string",
            "format": "date-time",
            "description": "Evidence deadline of dispute sent by connector",
            "nullable": true
          },
          "connector_created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Dispute created time sent by connector",
            "nullable": true
          },
          "connector_updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Dispute updated time sent by connector",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which dispute is received"
          },
          "profile_id": {
            "type": "string",
            "description": "The `profile_id` associated with the dispute",
            "nullable": true
          },
          "merchant_connector_id": {
            "type": "string",
            "description": "The `merchant_connector_id` of the connector / processor through which the dispute was processed",
            "nullable": true
          }
        }
      },
      "DisputeResponsePaymentsRetrieve": {
        "type": "object",
        "required": [
          "dispute_id",
          "dispute_stage",
          "dispute_status",
          "connector_status",
          "connector_dispute_id",
          "created_at"
        ],
        "properties": {
          "dispute_id": {
            "type": "string",
            "description": "The identifier for dispute"
          },
          "dispute_stage": {
            "$ref": "#/components/schemas/DisputeStage"
          },
          "dispute_status": {
            "$ref": "#/components/schemas/DisputeStatus"
          },
          "connector_status": {
            "type": "string",
            "description": "Status of the dispute sent by connector"
          },
          "connector_dispute_id": {
            "type": "string",
            "description": "Dispute id sent by connector"
          },
          "connector_reason": {
            "type": "string",
            "description": "Reason of dispute sent by connector",
            "nullable": true
          },
          "connector_reason_code": {
            "type": "string",
            "description": "Reason code of dispute sent by connector",
            "nullable": true
          },
          "challenge_required_by": {
            "type": "string",
            "format": "date-time",
            "description": "Evidence deadline of dispute sent by connector",
            "nullable": true
          },
          "connector_created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Dispute created time sent by connector",
            "nullable": true
          },
          "connector_updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Dispute updated time sent by connector",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which dispute is received"
          }
        }
      },
      "DisputeStage": {
        "type": "string",
        "enum": [
          "pre_dispute",
          "dispute",
          "pre_arbitration"
        ]
      },
      "DisputeStatus": {
        "type": "string",
        "enum": [
          "dispute_opened",
          "dispute_expired",
          "dispute_accepted",
          "dispute_cancelled",
          "dispute_challenged",
          "dispute_won",
          "dispute_lost"
        ]
      },
      "DokuBankTransferInstructions": {
        "type": "object",
        "required": [
          "expires_at",
          "reference",
          "instructions_url"
        ],
        "properties": {
          "expires_at": {
            "type": "string",
            "example": "1707091200000"
          },
          "reference": {
            "type": "string",
            "example": "122385736258"
          },
          "instructions_url": {
            "type": "string"
          }
        }
      },
      "DokuBillingDetails": {
        "type": "object",
        "required": [
          "first_name",
          "last_name",
          "email"
        ],
        "properties": {
          "first_name": {
            "type": "string",
            "description": "The billing first name for Doku",
            "example": "Jane"
          },
          "last_name": {
            "type": "string",
            "description": "The billing second name for Doku",
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "description": "The Email ID for Doku billing",
            "example": "example@me.com"
          }
        }
      },
      "EphemeralKeyCreateResponse": {
        "type": "object",
        "required": [
          "customer_id",
          "created_at",
          "expires",
          "secret"
        ],
        "properties": {
          "customer_id": {
            "type": "string",
            "description": "customer_id to which this ephemeral key belongs to"
          },
          "created_at": {
            "type": "integer",
            "format": "int64",
            "description": "time at which this ephemeral key was created"
          },
          "expires": {
            "type": "integer",
            "format": "int64",
            "description": "time at which this ephemeral key would expire"
          },
          "secret": {
            "type": "string",
            "description": "ephemeral key"
          }
        }
      },
      "EventType": {
        "type": "string",
        "enum": [
          "payment_succeeded",
          "payment_failed",
          "payment_processing",
          "payment_cancelled",
          "payment_authorized",
          "payment_captured",
          "action_required",
          "refund_succeeded",
          "refund_failed",
          "dispute_opened",
          "dispute_expired",
          "dispute_accepted",
          "dispute_cancelled",
          "dispute_challenged",
          "dispute_won",
          "dispute_lost",
          "mandate_active",
          "mandate_revoked"
        ]
      },
      "ExternalAuthenticationDetailsResponse": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "authentication_flow": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DecoupledAuthenticationType"
              }
            ],
            "nullable": true
          },
          "electronic_commerce_indicator": {
            "type": "string",
            "description": "Electronic Commerce Indicator (eci)",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/AuthenticationStatus"
          },
          "ds_transaction_id": {
            "type": "string",
            "description": "DS Transaction ID",
            "nullable": true
          },
          "version": {
            "type": "string",
            "description": "Message Version",
            "nullable": true
          },
          "error_code": {
            "type": "string",
            "description": "Error Code",
            "nullable": true
          },
          "error_message": {
            "type": "string",
            "description": "Error Message",
            "nullable": true
          }
        }
      },
      "FeatureMetadata": {
        "type": "object",
        "properties": {
          "redirect_response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RedirectResponse"
              }
            ],
            "nullable": true
          }
        }
      },
      "FieldType": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "user_card_number"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_card_expiry_month"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_card_expiry_year"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_card_cvc"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_full_name"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_email_address"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_phone_number"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_country_code"
            ]
          },
          {
            "type": "object",
            "required": [
              "user_country"
            ],
            "properties": {
              "user_country": {
                "type": "object",
                "required": [
                  "options"
                ],
                "properties": {
                  "options": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "user_currency"
            ],
            "properties": {
              "user_currency": {
                "type": "object",
                "required": [
                  "options"
                ],
                "properties": {
                  "options": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          {
            "type": "string",
            "enum": [
              "user_billing_name"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_address_line1"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_address_line2"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_address_city"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_address_pincode"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_address_state"
            ]
          },
          {
            "type": "object",
            "required": [
              "user_address_country"
            ],
            "properties": {
              "user_address_country": {
                "type": "object",
                "required": [
                  "options"
                ],
                "properties": {
                  "options": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          {
            "type": "string",
            "enum": [
              "user_blik_code"
            ]
          },
          {
            "type": "string",
            "enum": [
              "user_bank"
            ]
          },
          {
            "type": "string",
            "enum": [
              "text"
            ]
          },
          {
            "type": "object",
            "required": [
              "drop_down"
            ],
            "properties": {
              "drop_down": {
                "type": "object",
                "required": [
                  "options"
                ],
                "properties": {
                  "options": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        ],
        "description": "Possible field type of required fields in payment_method_data"
      },
      "FrmAction": {
        "type": "string",
        "enum": [
          "cancel_txn",
          "auto_refund",
          "manual_review"
        ]
      },
      "FrmConfigs": {
        "type": "object",
        "description": "Details of FrmConfigs are mentioned here... it should be passed in payment connector create api call, and stored in merchant_connector_table",
        "required": [
          "gateway",
          "payment_methods"
        ],
        "properties": {
          "gateway": {
            "$ref": "#/components/schemas/ConnectorType"
          },
          "payment_methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FrmPaymentMethod"
            },
            "description": "payment methods that can be used in the payment"
          }
        }
      },
      "FrmMessage": {
        "type": "object",
        "description": "frm message is an object sent inside the payments response...when frm is invoked, its value is Some(...), else its None",
        "required": [
          "frm_name"
        ],
        "properties": {
          "frm_name": {
            "type": "string"
          },
          "frm_transaction_id": {
            "type": "string",
            "nullable": true
          },
          "frm_transaction_type": {
            "type": "string",
            "nullable": true
          },
          "frm_status": {
            "type": "string",
            "nullable": true
          },
          "frm_score": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "frm_reason": {
            "nullable": true
          },
          "frm_error": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "FrmPaymentMethod": {
        "type": "object",
        "description": "Details of FrmPaymentMethod are mentioned here... it should be passed in payment connector create api call, and stored in merchant_connector_table",
        "required": [
          "payment_method",
          "payment_method_types"
        ],
        "properties": {
          "payment_method": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "payment_method_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FrmPaymentMethodType"
            },
            "description": "payment method types(credit, debit) that can be used in the payment"
          }
        }
      },
      "FrmPaymentMethodType": {
        "type": "object",
        "description": "Details of FrmPaymentMethodType are mentioned here... it should be passed in payment connector create api call, and stored in merchant_connector_table",
        "required": [
          "payment_method_type",
          "card_networks",
          "flow",
          "action"
        ],
        "properties": {
          "payment_method_type": {
            "$ref": "#/components/schemas/PaymentMethodType"
          },
          "card_networks": {
            "$ref": "#/components/schemas/CardNetwork"
          },
          "flow": {
            "$ref": "#/components/schemas/FrmPreferredFlowTypes"
          },
          "action": {
            "$ref": "#/components/schemas/FrmAction"
          }
        }
      },
      "FrmPreferredFlowTypes": {
        "type": "string",
        "enum": [
          "pre",
          "post"
        ]
      },
      "FutureUsage": {
        "type": "string",
        "enum": [
          "off_session",
          "on_session"
        ]
      },
      "GcashRedirection": {
        "type": "object"
      },
      "GiftCardData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "givex"
            ],
            "properties": {
              "givex": {
                "$ref": "#/components/schemas/GiftCardDetails"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "pay_safe_card"
            ],
            "properties": {
              "pay_safe_card": {
                "type": "object"
              }
            }
          }
        ]
      },
      "GiftCardDetails": {
        "type": "object",
        "required": [
          "number",
          "cvc"
        ],
        "properties": {
          "number": {
            "type": "string",
            "description": "The gift card number"
          },
          "cvc": {
            "type": "string",
            "description": "The card verification code."
          }
        }
      },
      "GoPayRedirection": {
        "type": "object"
      },
      "GooglePayPaymentMethodInfo": {
        "type": "object",
        "required": [
          "card_network",
          "card_details"
        ],
        "properties": {
          "card_network": {
            "type": "string",
            "description": "The name of the card network"
          },
          "card_details": {
            "type": "string",
            "description": "The details of the card"
          }
        }
      },
      "GooglePayRedirectData": {
        "type": "object"
      },
      "GooglePaySessionResponse": {
        "type": "object",
        "required": [
          "merchant_info",
          "allowed_payment_methods",
          "transaction_info",
          "delayed_session_token",
          "connector",
          "sdk_next_action"
        ],
        "properties": {
          "merchant_info": {
            "$ref": "#/components/schemas/GpayMerchantInfo"
          },
          "allowed_payment_methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GpayAllowedPaymentMethods"
            },
            "description": "List of the allowed payment meythods"
          },
          "transaction_info": {
            "$ref": "#/components/schemas/GpayTransactionInfo"
          },
          "delayed_session_token": {
            "type": "boolean",
            "description": "Identifier for the delayed session response"
          },
          "connector": {
            "type": "string",
            "description": "The name of the connector"
          },
          "sdk_next_action": {
            "$ref": "#/components/schemas/SdkNextAction"
          },
          "secrets": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SecretInfoToInitiateSdk"
              }
            ],
            "nullable": true
          }
        }
      },
      "GooglePayThirdPartySdk": {
        "type": "object",
        "required": [
          "delayed_session_token",
          "connector",
          "sdk_next_action"
        ],
        "properties": {
          "delayed_session_token": {
            "type": "boolean",
            "description": "Identifier for the delayed session response"
          },
          "connector": {
            "type": "string",
            "description": "The name of the connector"
          },
          "sdk_next_action": {
            "$ref": "#/components/schemas/SdkNextAction"
          }
        }
      },
      "GooglePayThirdPartySdkData": {
        "type": "object"
      },
      "GooglePayWalletData": {
        "type": "object",
        "required": [
          "type",
          "description",
          "info",
          "tokenization_data"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of payment method"
          },
          "description": {
            "type": "string",
            "description": "User-facing message to describe the payment method that funds this transaction."
          },
          "info": {
            "$ref": "#/components/schemas/GooglePayPaymentMethodInfo"
          },
          "tokenization_data": {
            "$ref": "#/components/schemas/GpayTokenizationData"
          }
        }
      },
      "GpayAllowedMethodsParameters": {
        "type": "object",
        "required": [
          "allowed_auth_methods",
          "allowed_card_networks"
        ],
        "properties": {
          "allowed_auth_methods": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of allowed auth methods (ex: 3DS, No3DS, PAN_ONLY etc)"
          },
          "allowed_card_networks": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of allowed card networks (ex: AMEX,JCB etc)"
          }
        }
      },
      "GpayAllowedPaymentMethods": {
        "type": "object",
        "required": [
          "type",
          "parameters",
          "tokenization_specification"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of payment method"
          },
          "parameters": {
            "$ref": "#/components/schemas/GpayAllowedMethodsParameters"
          },
          "tokenization_specification": {
            "$ref": "#/components/schemas/GpayTokenizationSpecification"
          }
        }
      },
      "GpayMerchantInfo": {
        "type": "object",
        "required": [
          "merchant_name"
        ],
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The merchant Identifier that needs to be passed while invoking Gpay SDK",
            "nullable": true
          },
          "merchant_name": {
            "type": "string",
            "description": "The name of the merchant that needs to be displayed on Gpay PopUp"
          }
        }
      },
      "GpaySessionTokenResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/GooglePayThirdPartySdk"
          },
          {
            "$ref": "#/components/schemas/GooglePaySessionResponse"
          }
        ]
      },
      "GpayTokenParameters": {
        "type": "object",
        "required": [
          "gateway"
        ],
        "properties": {
          "gateway": {
            "type": "string",
            "description": "The name of the connector"
          },
          "gateway_merchant_id": {
            "type": "string",
            "description": "The merchant ID registered in the connector associated",
            "nullable": true
          },
          "stripe:version": {
            "type": "string",
            "nullable": true
          },
          "stripe:publishableKey": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "GpayTokenizationData": {
        "type": "object",
        "required": [
          "type",
          "token"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of the token"
          },
          "token": {
            "type": "string",
            "description": "Token generated for the wallet"
          }
        }
      },
      "GpayTokenizationSpecification": {
        "type": "object",
        "required": [
          "type",
          "parameters"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The token specification type(ex: PAYMENT_GATEWAY)"
          },
          "parameters": {
            "$ref": "#/components/schemas/GpayTokenParameters"
          }
        }
      },
      "GpayTransactionInfo": {
        "type": "object",
        "required": [
          "country_code",
          "currency_code",
          "total_price_status",
          "total_price"
        ],
        "properties": {
          "country_code": {
            "$ref": "#/components/schemas/CountryAlpha2"
          },
          "currency_code": {
            "$ref": "#/components/schemas/Currency"
          },
          "total_price_status": {
            "type": "string",
            "description": "The total price status (ex: 'FINAL')"
          },
          "total_price": {
            "type": "string",
            "description": "The total price"
          }
        }
      },
      "GsmCreateRequest": {
        "type": "object",
        "required": [
          "connector",
          "flow",
          "sub_flow",
          "code",
          "message",
          "status",
          "decision",
          "step_up_possible"
        ],
        "properties": {
          "connector": {
            "$ref": "#/components/schemas/Connector"
          },
          "flow": {
            "type": "string",
            "description": "The flow in which the code and message occurred for a connector"
          },
          "sub_flow": {
            "type": "string",
            "description": "The sub_flow in which the code and message occurred  for a connector"
          },
          "code": {
            "type": "string",
            "description": "code received from the connector"
          },
          "message": {
            "type": "string",
            "description": "message received from the connector"
          },
          "status": {
            "type": "string",
            "description": "status provided by the router"
          },
          "router_error": {
            "type": "string",
            "description": "optional error provided by the router",
            "nullable": true
          },
          "decision": {
            "$ref": "#/components/schemas/GsmDecision"
          },
          "step_up_possible": {
            "type": "boolean",
            "description": "indicates if step_up retry is possible"
          },
          "unified_code": {
            "type": "string",
            "description": "error code unified across the connectors",
            "nullable": true
          },
          "unified_message": {
            "type": "string",
            "description": "error message unified across the connectors",
            "nullable": true
          }
        }
      },
      "GsmDecision": {
        "type": "string",
        "enum": [
          "retry",
          "requeue",
          "do_default"
        ]
      },
      "GsmDeleteRequest": {
        "type": "object",
        "required": [
          "connector",
          "flow",
          "sub_flow",
          "code",
          "message"
        ],
        "properties": {
          "connector": {
            "type": "string",
            "description": "The connector through which payment has gone through"
          },
          "flow": {
            "type": "string",
            "description": "The flow in which the code and message occurred for a connector"
          },
          "sub_flow": {
            "type": "string",
            "description": "The sub_flow in which the code and message occurred  for a connector"
          },
          "code": {
            "type": "string",
            "description": "code received from the connector"
          },
          "message": {
            "type": "string",
            "description": "message received from the connector"
          }
        }
      },
      "GsmDeleteResponse": {
        "type": "object",
        "required": [
          "gsm_rule_delete",
          "connector",
          "flow",
          "sub_flow",
          "code"
        ],
        "properties": {
          "gsm_rule_delete": {
            "type": "boolean"
          },
          "connector": {
            "type": "string",
            "description": "The connector through which payment has gone through"
          },
          "flow": {
            "type": "string",
            "description": "The flow in which the code and message occurred for a connector"
          },
          "sub_flow": {
            "type": "string",
            "description": "The sub_flow in which the code and message occurred  for a connector"
          },
          "code": {
            "type": "string",
            "description": "code received from the connector"
          }
        }
      },
      "GsmResponse": {
        "type": "object",
        "required": [
          "connector",
          "flow",
          "sub_flow",
          "code",
          "message",
          "status",
          "decision",
          "step_up_possible"
        ],
        "properties": {
          "connector": {
            "type": "string",
            "description": "The connector through which payment has gone through"
          },
          "flow": {
            "type": "string",
            "description": "The flow in which the code and message occurred for a connector"
          },
          "sub_flow": {
            "type": "string",
            "description": "The sub_flow in which the code and message occurred  for a connector"
          },
          "code": {
            "type": "string",
            "description": "code received from the connector"
          },
          "message": {
            "type": "string",
            "description": "message received from the connector"
          },
          "status": {
            "type": "string",
            "description": "status provided by the router"
          },
          "router_error": {
            "type": "string",
            "description": "optional error provided by the router",
            "nullable": true
          },
          "decision": {
            "type": "string",
            "description": "decision to be taken for auto retries flow"
          },
          "step_up_possible": {
            "type": "boolean",
            "description": "indicates if step_up retry is possible"
          },
          "unified_code": {
            "type": "string",
            "description": "error code unified across the connectors",
            "nullable": true
          },
          "unified_message": {
            "type": "string",
            "description": "error message unified across the connectors",
            "nullable": true
          }
        }
      },
      "GsmRetrieveRequest": {
        "type": "object",
        "required": [
          "connector",
          "flow",
          "sub_flow",
          "code",
          "message"
        ],
        "properties": {
          "connector": {
            "$ref": "#/components/schemas/Connector"
          },
          "flow": {
            "type": "string",
            "description": "The flow in which the code and message occurred for a connector"
          },
          "sub_flow": {
            "type": "string",
            "description": "The sub_flow in which the code and message occurred  for a connector"
          },
          "code": {
            "type": "string",
            "description": "code received from the connector"
          },
          "message": {
            "type": "string",
            "description": "message received from the connector"
          }
        }
      },
      "GsmUpdateRequest": {
        "type": "object",
        "required": [
          "connector",
          "flow",
          "sub_flow",
          "code",
          "message"
        ],
        "properties": {
          "connector": {
            "type": "string",
            "description": "The connector through which payment has gone through"
          },
          "flow": {
            "type": "string",
            "description": "The flow in which the code and message occurred for a connector"
          },
          "sub_flow": {
            "type": "string",
            "description": "The sub_flow in which the code and message occurred  for a connector"
          },
          "code": {
            "type": "string",
            "description": "code received from the connector"
          },
          "message": {
            "type": "string",
            "description": "message received from the connector"
          },
          "status": {
            "type": "string",
            "description": "status provided by the router",
            "nullable": true
          },
          "router_error": {
            "type": "string",
            "description": "optional error provided by the router",
            "nullable": true
          },
          "decision": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GsmDecision"
              }
            ],
            "nullable": true
          },
          "step_up_possible": {
            "type": "boolean",
            "description": "indicates if step_up retry is possible",
            "nullable": true
          },
          "unified_code": {
            "type": "string",
            "description": "error code unified across the connectors",
            "nullable": true
          },
          "unified_message": {
            "type": "string",
            "description": "error message unified across the connectors",
            "nullable": true
          }
        }
      },
      "IfStatement": {
        "type": "object",
        "description": "Represents an IF statement with conditions and optional nested IF statements\n\n```text\npayment.method = card {\npayment.method.cardtype = (credit, debit) {\npayment.method.network = (amex, rupay, diners)\n}\n}\n```",
        "required": [
          "condition"
        ],
        "properties": {
          "condition": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comparison"
            }
          },
          "nested": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IfStatement"
            },
            "nullable": true
          }
        }
      },
      "IncrementalAuthorizationResponse": {
        "type": "object",
        "required": [
          "authorization_id",
          "amount",
          "status",
          "previously_authorized_amount"
        ],
        "properties": {
          "authorization_id": {
            "type": "string",
            "description": "The unique identifier of authorization"
          },
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "Amount the authorization has been made for"
          },
          "status": {
            "$ref": "#/components/schemas/AuthorizationStatus"
          },
          "error_code": {
            "type": "string",
            "description": "Error code sent by the connector for authorization",
            "nullable": true
          },
          "error_message": {
            "type": "string",
            "description": "Error message sent by the connector for authorization",
            "nullable": true
          },
          "previously_authorized_amount": {
            "type": "integer",
            "format": "int64",
            "description": "Previously authorized amount for the payment"
          }
        }
      },
      "IndomaretVoucherData": {
        "type": "object",
        "required": [
          "first_name",
          "last_name",
          "email"
        ],
        "properties": {
          "first_name": {
            "type": "string",
            "description": "The billing first name for Alfamart",
            "example": "Jane"
          },
          "last_name": {
            "type": "string",
            "description": "The billing second name for Alfamart",
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "description": "The Email ID for Alfamart",
            "example": "example@me.com"
          }
        }
      },
      "IntentStatus": {
        "type": "string",
        "enum": [
          "succeeded",
          "failed",
          "cancelled",
          "processing",
          "requires_customer_action",
          "requires_merchant_action",
          "requires_payment_method",
          "requires_confirmation",
          "requires_capture",
          "partially_captured",
          "partially_captured_and_capturable"
        ]
      },
      "JCSVoucherData": {
        "type": "object",
        "required": [
          "first_name",
          "last_name",
          "email",
          "phone_number"
        ],
        "properties": {
          "first_name": {
            "type": "string",
            "description": "The billing first name for Japanese convenience stores",
            "example": "Jane"
          },
          "last_name": {
            "type": "string",
            "description": "The billing second name Japanese convenience stores",
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "description": "The Email ID for Japanese convenience stores",
            "example": "example@me.com"
          },
          "phone_number": {
            "type": "string",
            "description": "The telephone number for Japanese convenience stores",
            "example": "9999999999"
          }
        }
      },
      "KakaoPayRedirection": {
        "type": "object"
      },
      "KlarnaSessionTokenResponse": {
        "type": "object",
        "required": [
          "session_token",
          "session_id"
        ],
        "properties": {
          "session_token": {
            "type": "string",
            "description": "The session token for Klarna"
          },
          "session_id": {
            "type": "string",
            "description": "The identifier for the session"
          }
        }
      },
      "LinkedRoutingConfigRetrieveResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/RoutingRetrieveResponse"
          },
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoutingDictionaryRecord"
            }
          }
        ]
      },
      "ListBlocklistQuery": {
        "type": "object",
        "required": [
          "data_kind"
        ],
        "properties": {
          "data_kind": {
            "$ref": "#/components/schemas/BlocklistDataKind"
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        }
      },
      "MandateAmountData": {
        "type": "object",
        "required": [
          "amount",
          "currency"
        ],
        "properties": {
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "The maximum amount to be debited for the mandate transaction",
            "example": 6540
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "description": "Specifying start date of the mandate",
            "example": "2022-09-10T00:00:00Z",
            "nullable": true
          },
          "end_date": {
            "type": "string",
            "format": "date-time",
            "description": "Specifying end date of the mandate",
            "example": "2023-09-10T23:59:59Z",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "Additional details required by mandate",
            "nullable": true
          }
        }
      },
      "MandateCardDetails": {
        "type": "object",
        "properties": {
          "last4_digits": {
            "type": "string",
            "description": "The last 4 digits of card",
            "nullable": true
          },
          "card_exp_month": {
            "type": "string",
            "description": "The expiry month of card",
            "nullable": true
          },
          "card_exp_year": {
            "type": "string",
            "description": "The expiry year of card",
            "nullable": true
          },
          "card_holder_name": {
            "type": "string",
            "description": "The card holder name",
            "nullable": true
          },
          "card_token": {
            "type": "string",
            "description": "The token from card locker",
            "nullable": true
          },
          "scheme": {
            "type": "string",
            "description": "The card scheme network for the particular card",
            "nullable": true
          },
          "issuer_country": {
            "type": "string",
            "description": "The country code in in which the card was issued",
            "nullable": true
          },
          "card_fingerprint": {
            "type": "string",
            "description": "A unique identifier alias to identify a particular card",
            "nullable": true
          },
          "card_isin": {
            "type": "string",
            "description": "The first 6 digits of card",
            "nullable": true
          },
          "card_issuer": {
            "type": "string",
            "description": "The bank that issued the card",
            "nullable": true
          },
          "card_network": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardNetwork"
              }
            ],
            "nullable": true
          },
          "card_type": {
            "type": "string",
            "description": "The type of the payment card",
            "nullable": true
          },
          "nick_name": {
            "type": "string",
            "description": "The nick_name of the card holder",
            "nullable": true
          }
        }
      },
      "MandateData": {
        "type": "object",
        "properties": {
          "update_mandate_id": {
            "type": "string",
            "description": "A way to update the mandate's payment method details",
            "nullable": true
          },
          "customer_acceptance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomerAcceptance"
              }
            ],
            "nullable": true
          },
          "mandate_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MandateType"
              }
            ],
            "nullable": true
          }
        }
      },
      "MandateResponse": {
        "type": "object",
        "required": [
          "mandate_id",
          "status",
          "payment_method_id",
          "payment_method"
        ],
        "properties": {
          "mandate_id": {
            "type": "string",
            "description": "The identifier for mandate"
          },
          "status": {
            "$ref": "#/components/schemas/MandateStatus"
          },
          "payment_method_id": {
            "type": "string",
            "description": "The identifier for payment method"
          },
          "payment_method": {
            "type": "string",
            "description": "The payment method"
          },
          "payment_method_type": {
            "type": "string",
            "description": "The payment method type",
            "nullable": true
          },
          "card": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MandateCardDetails"
              }
            ],
            "nullable": true
          },
          "customer_acceptance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomerAcceptance"
              }
            ],
            "nullable": true
          }
        }
      },
      "MandateRevokedResponse": {
        "type": "object",
        "required": [
          "mandate_id",
          "status"
        ],
        "properties": {
          "mandate_id": {
            "type": "string",
            "description": "The identifier for mandate"
          },
          "status": {
            "$ref": "#/components/schemas/MandateStatus"
          },
          "error_code": {
            "type": "string",
            "description": "If there was an error while calling the connectors the code is received here",
            "example": "E0001",
            "nullable": true
          },
          "error_message": {
            "type": "string",
            "description": "If there was an error while calling the connector the error message is received here",
            "example": "Failed while verifying the card",
            "nullable": true
          }
        }
      },
      "MandateStatus": {
        "type": "string",
        "description": "The status of the mandate, which indicates whether it can be used to initiate a payment.",
        "enum": [
          "active",
          "inactive",
          "pending",
          "revoked"
        ]
      },
      "MandateType": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "single_use"
            ],
            "properties": {
              "single_use": {
                "$ref": "#/components/schemas/MandateAmountData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "multi_use"
            ],
            "properties": {
              "multi_use": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MandateAmountData"
                  }
                ],
                "nullable": true
              }
            }
          }
        ]
      },
      "MaskedBankDetails": {
        "type": "object",
        "required": [
          "mask"
        ],
        "properties": {
          "mask": {
            "type": "string"
          }
        }
      },
      "MbWayRedirection": {
        "type": "object",
        "required": [
          "telephone_number"
        ],
        "properties": {
          "telephone_number": {
            "type": "string",
            "description": "Telephone number of the shopper. Should be Portuguese phone number."
          }
        }
      },
      "MerchantAccountCreate": {
        "type": "object",
        "required": [
          "merchant_id"
        ],
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "merchant_name": {
            "type": "string",
            "description": "Name of the Merchant Account",
            "example": "NewAge Retailer",
            "nullable": true
          },
          "merchant_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantDetails"
              }
            ],
            "nullable": true
          },
          "return_url": {
            "type": "string",
            "description": "The URL to redirect after the completion of the operation",
            "example": "https://www.example.com/success",
            "nullable": true,
            "maxLength": 255
          },
          "webhook_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WebhookDetails"
              }
            ],
            "nullable": true
          },
          "payout_routing_algorithm": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RoutingAlgorithm"
              }
            ],
            "nullable": true
          },
          "sub_merchants_enabled": {
            "type": "boolean",
            "description": "A boolean value to indicate if the merchant is a sub-merchant under a master or a parent merchant. By default, its value is false.",
            "default": false,
            "example": false,
            "nullable": true
          },
          "parent_merchant_id": {
            "type": "string",
            "description": "Refers to the Parent Merchant ID if the merchant being created is a sub-merchant",
            "example": "xkkdf909012sdjki2dkh5sdf",
            "nullable": true,
            "maxLength": 255
          },
          "enable_payment_response_hash": {
            "type": "boolean",
            "description": "A boolean value to indicate if payment response hash needs to be enabled",
            "default": false,
            "example": true,
            "nullable": true
          },
          "payment_response_hash_key": {
            "type": "string",
            "description": "Refers to the hash key used for calculating the signature for webhooks and redirect response. If the value is not provided, a default value is used.",
            "nullable": true
          },
          "redirect_to_merchant_with_http_post": {
            "type": "boolean",
            "description": "A boolean value to indicate if redirect to merchant with http post needs to be enabled.",
            "default": false,
            "example": true,
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "publishable_key": {
            "type": "string",
            "description": "API key that will be used for client side API access. A publishable key has to be always paired with a `client_secret`.\nA `client_secret` can be obtained by creating a payment with `confirm` set to false",
            "example": "AH3423bkjbkjdsfbkj",
            "nullable": true
          },
          "locker_id": {
            "type": "string",
            "description": "An identifier for the vault used to store payment method information.",
            "example": "locker_abc123",
            "nullable": true
          },
          "primary_business_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PrimaryBusinessDetails"
              }
            ],
            "nullable": true
          },
          "frm_routing_algorithm": {
            "type": "object",
            "description": "The frm routing algorithm to be used for routing payments to desired FRM's",
            "nullable": true
          },
          "organization_id": {
            "type": "string",
            "description": "The id of the organization to which the merchant belongs to",
            "nullable": true
          }
        }
      },
      "MerchantAccountDeleteResponse": {
        "type": "object",
        "required": [
          "merchant_id",
          "deleted"
        ],
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "deleted": {
            "type": "boolean",
            "description": "If the connector is deleted or not",
            "example": false
          }
        }
      },
      "MerchantAccountResponse": {
        "type": "object",
        "required": [
          "merchant_id",
          "enable_payment_response_hash",
          "redirect_to_merchant_with_http_post",
          "primary_business_details",
          "organization_id",
          "is_recon_enabled",
          "recon_status"
        ],
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "merchant_name": {
            "type": "string",
            "description": "Name of the Merchant Account",
            "example": "NewAge Retailer",
            "nullable": true
          },
          "return_url": {
            "type": "string",
            "description": "The URL to redirect after completion of the payment",
            "example": "https://www.example.com/success",
            "nullable": true,
            "maxLength": 255
          },
          "enable_payment_response_hash": {
            "type": "boolean",
            "description": "A boolean value to indicate if payment response hash needs to be enabled",
            "default": false,
            "example": true
          },
          "payment_response_hash_key": {
            "type": "string",
            "description": "Refers to the hash key used for calculating the signature for webhooks and redirect response. If the value is not provided, a default value is used.",
            "example": "xkkdf909012sdjki2dkh5sdf",
            "nullable": true,
            "maxLength": 255
          },
          "redirect_to_merchant_with_http_post": {
            "type": "boolean",
            "description": "A boolean value to indicate if redirect to merchant with http post needs to be enabled",
            "default": false,
            "example": true
          },
          "merchant_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantDetails"
              }
            ],
            "nullable": true
          },
          "webhook_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WebhookDetails"
              }
            ],
            "nullable": true
          },
          "payout_routing_algorithm": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RoutingAlgorithm"
              }
            ],
            "nullable": true
          },
          "sub_merchants_enabled": {
            "type": "boolean",
            "description": "A boolean value to indicate if the merchant is a sub-merchant under a master or a parent merchant. By default, its value is false.",
            "default": false,
            "example": false,
            "nullable": true
          },
          "parent_merchant_id": {
            "type": "string",
            "description": "Refers to the Parent Merchant ID if the merchant being created is a sub-merchant",
            "example": "xkkdf909012sdjki2dkh5sdf",
            "nullable": true,
            "maxLength": 255
          },
          "publishable_key": {
            "type": "string",
            "description": "API key that will be used for server side API access",
            "example": "AH3423bkjbkjdsfbkj",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "locker_id": {
            "type": "string",
            "description": "An identifier for the vault used to store payment method information.",
            "example": "locker_abc123",
            "nullable": true
          },
          "primary_business_details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrimaryBusinessDetails"
            },
            "description": "Details about the primary business unit of the merchant account"
          },
          "frm_routing_algorithm": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RoutingAlgorithm"
              }
            ],
            "nullable": true
          },
          "intent_fulfillment_time": {
            "type": "integer",
            "format": "int64",
            "description": "Will be used to expire client secret after certain amount of time to be supplied in seconds\n(900) for 15 mins",
            "nullable": true
          },
          "organization_id": {
            "type": "string",
            "description": "The organization id merchant is associated with"
          },
          "is_recon_enabled": {
            "type": "boolean",
            "description": "A boolean value to indicate if the merchant has recon service is enabled or not, by default value is false"
          },
          "default_profile": {
            "type": "string",
            "description": "The default business profile that must be used for creating merchant accounts and payments",
            "nullable": true,
            "maxLength": 64
          },
          "recon_status": {
            "$ref": "#/components/schemas/ReconStatus"
          }
        }
      },
      "MerchantAccountUpdate": {
        "type": "object",
        "required": [
          "merchant_id"
        ],
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "merchant_name": {
            "type": "string",
            "description": "Name of the Merchant Account",
            "example": "NewAge Retailer",
            "nullable": true
          },
          "merchant_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantDetails"
              }
            ],
            "nullable": true
          },
          "return_url": {
            "type": "string",
            "description": "The URL to redirect after the completion of the operation",
            "example": "https://www.example.com/success",
            "nullable": true,
            "maxLength": 255
          },
          "webhook_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WebhookDetails"
              }
            ],
            "nullable": true
          },
          "payout_routing_algorithm": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RoutingAlgorithm"
              }
            ],
            "nullable": true
          },
          "sub_merchants_enabled": {
            "type": "boolean",
            "description": "A boolean value to indicate if the merchant is a sub-merchant under a master or a parent merchant. By default, its value is false.",
            "default": false,
            "example": false,
            "nullable": true
          },
          "parent_merchant_id": {
            "type": "string",
            "description": "Refers to the Parent Merchant ID if the merchant being created is a sub-merchant",
            "example": "xkkdf909012sdjki2dkh5sdf",
            "nullable": true,
            "maxLength": 255
          },
          "enable_payment_response_hash": {
            "type": "boolean",
            "description": "A boolean value to indicate if payment response hash needs to be enabled",
            "default": false,
            "example": true,
            "nullable": true
          },
          "payment_response_hash_key": {
            "type": "string",
            "description": "Refers to the hash key used for calculating the signature for webhooks and redirect response. If the value is not provided, a default value is used.",
            "nullable": true
          },
          "redirect_to_merchant_with_http_post": {
            "type": "boolean",
            "description": "A boolean value to indicate if redirect to merchant with http post needs to be enabled",
            "default": false,
            "example": true,
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "publishable_key": {
            "type": "string",
            "description": "API key that will be used for server side API access",
            "example": "AH3423bkjbkjdsfbkj",
            "nullable": true
          },
          "locker_id": {
            "type": "string",
            "description": "An identifier for the vault used to store payment method information.",
            "example": "locker_abc123",
            "nullable": true
          },
          "primary_business_details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrimaryBusinessDetails"
            },
            "description": "Details about the primary business unit of the merchant account",
            "nullable": true
          },
          "frm_routing_algorithm": {
            "type": "object",
            "description": "The frm routing algorithm to be used for routing payments to desired FRM's",
            "nullable": true
          },
          "default_profile": {
            "type": "string",
            "description": "The default business profile that must be used for creating merchant accounts and payments\nTo unset this field, pass an empty string",
            "nullable": true,
            "maxLength": 64
          }
        }
      },
      "MerchantConnectorCreate": {
        "type": "object",
        "description": "Create a new Merchant Connector for the merchant account. The connector could be a payment processor / facilitator / acquirer or specialized services like Fraud / Accounting etc.\"",
        "required": [
          "connector_type",
          "connector_name"
        ],
        "properties": {
          "connector_type": {
            "$ref": "#/components/schemas/ConnectorType"
          },
          "connector_name": {
            "$ref": "#/components/schemas/Connector"
          },
          "connector_label": {
            "type": "string",
            "description": "This is an unique label you can generate and pass in order to identify this connector account on your Hyperswitch dashboard and reports. Eg: if your profile label is `default`, connector label can be `stripe_default`",
            "example": "stripe_US_travel",
            "nullable": true
          },
          "profile_id": {
            "type": "string",
            "description": "Identifier for the business profile, if not provided default will be chosen from merchant account",
            "nullable": true
          },
          "connector_account_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantConnectorDetails"
              }
            ],
            "nullable": true
          },
          "payment_methods_enabled": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodsEnabled"
            },
            "description": "An object containing the details about the payment methods that need to be enabled under this merchant connector account",
            "example": [
              {
                "accepted_countries": {
                  "list": [
                    "FR",
                    "DE",
                    "IN"
                  ],
                  "type": "disable_only"
                },
                "accepted_currencies": {
                  "list": [
                    "USD",
                    "EUR"
                  ],
                  "type": "enable_only"
                },
                "installment_payment_enabled": true,
                "maximum_amount": 68607706,
                "minimum_amount": 1,
                "payment_method": "wallet",
                "payment_method_issuers": [
                  "labore magna ipsum",
                  "aute"
                ],
                "payment_method_types": [
                  "upi_collect",
                  "upi_intent"
                ],
                "payment_schemes": [
                  "Discover",
                  "Discover"
                ],
                "recurring_enabled": true
              }
            ],
            "nullable": true
          },
          "connector_webhook_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantConnectorWebhookDetails"
              }
            ],
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "test_mode": {
            "type": "boolean",
            "description": "A boolean value to indicate if the connector is in Test mode. By default, its value is false.",
            "default": false,
            "example": false,
            "nullable": true
          },
          "disabled": {
            "type": "boolean",
            "description": "A boolean value to indicate if the connector is disabled. By default, its value is false.",
            "default": false,
            "example": false,
            "nullable": true
          },
          "frm_configs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FrmConfigs"
            },
            "description": "Contains the frm configs for the merchant connector",
            "example": "\n[{\"gateway\":\"stripe\",\"payment_methods\":[{\"payment_method\":\"card\",\"payment_method_types\":[{\"payment_method_type\":\"credit\",\"card_networks\":[\"Visa\"],\"flow\":\"pre\",\"action\":\"cancel_txn\"},{\"payment_method_type\":\"debit\",\"card_networks\":[\"Visa\"],\"flow\":\"pre\"}]}]}]\n",
            "nullable": true
          },
          "business_country": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CountryAlpha2"
              }
            ],
            "nullable": true
          },
          "business_label": {
            "type": "string",
            "description": "The business label to which the connector account is attached. To be deprecated soon. Use the 'profile_id' instead",
            "nullable": true
          },
          "business_sub_label": {
            "type": "string",
            "description": "The business sublabel to which the connector account is attached. To be deprecated soon. Use the 'profile_id' instead",
            "example": "chase",
            "nullable": true
          },
          "merchant_connector_id": {
            "type": "string",
            "description": "Unique ID of the connector",
            "example": "mca_5apGeP94tMts6rg3U3kR",
            "nullable": true
          },
          "pm_auth_config": {
            "nullable": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConnectorStatus"
              }
            ],
            "nullable": true
          }
        }
      },
      "MerchantConnectorDeleteResponse": {
        "type": "object",
        "required": [
          "merchant_id",
          "merchant_connector_id",
          "deleted"
        ],
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "merchant_connector_id": {
            "type": "string",
            "description": "Unique ID of the connector",
            "example": "mca_5apGeP94tMts6rg3U3kR"
          },
          "deleted": {
            "type": "boolean",
            "description": "If the connector is deleted or not",
            "example": false
          }
        }
      },
      "MerchantConnectorDetails": {
        "type": "object",
        "properties": {
          "connector_account_details": {
            "type": "object",
            "description": "Account details of the Connector. You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          }
        }
      },
      "MerchantConnectorDetailsWrap": {
        "type": "object",
        "required": [
          "creds_identifier"
        ],
        "properties": {
          "creds_identifier": {
            "type": "string",
            "description": "Creds Identifier is to uniquely identify the credentials. Do not send any sensitive info in this field. And do not send the string \"null\"."
          },
          "encoded_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantConnectorDetails"
              }
            ],
            "nullable": true
          }
        }
      },
      "MerchantConnectorId": {
        "type": "object",
        "required": [
          "merchant_id",
          "merchant_connector_id"
        ],
        "properties": {
          "merchant_id": {
            "type": "string"
          },
          "merchant_connector_id": {
            "type": "string"
          }
        }
      },
      "MerchantConnectorResponse": {
        "type": "object",
        "description": "Response of creating a new Merchant Connector for the merchant account.\"",
        "required": [
          "connector_type",
          "connector_name",
          "merchant_connector_id",
          "status"
        ],
        "properties": {
          "connector_type": {
            "$ref": "#/components/schemas/ConnectorType"
          },
          "connector_name": {
            "$ref": "#/components/schemas/Connector"
          },
          "connector_label": {
            "type": "string",
            "description": "A unique label to identify the connector account created under a business profile",
            "example": "stripe_US_travel",
            "nullable": true
          },
          "merchant_connector_id": {
            "type": "string",
            "description": "Unique ID of the merchant connector account",
            "example": "mca_5apGeP94tMts6rg3U3kR"
          },
          "profile_id": {
            "type": "string",
            "description": "Identifier for the business profile, if not provided default will be chosen from merchant account",
            "nullable": true,
            "maxLength": 64
          },
          "connector_account_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantConnectorDetails"
              }
            ],
            "nullable": true
          },
          "payment_methods_enabled": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodsEnabled"
            },
            "description": "An object containing the details about the payment methods that need to be enabled under this merchant connector account",
            "example": [
              {
                "accepted_countries": {
                  "list": [
                    "FR",
                    "DE",
                    "IN"
                  ],
                  "type": "disable_only"
                },
                "accepted_currencies": {
                  "list": [
                    "USD",
                    "EUR"
                  ],
                  "type": "enable_only"
                },
                "installment_payment_enabled": true,
                "maximum_amount": 68607706,
                "minimum_amount": 1,
                "payment_method": "wallet",
                "payment_method_issuers": [
                  "labore magna ipsum",
                  "aute"
                ],
                "payment_method_types": [
                  "upi_collect",
                  "upi_intent"
                ],
                "payment_schemes": [
                  "Discover",
                  "Discover"
                ],
                "recurring_enabled": true
              }
            ],
            "nullable": true
          },
          "connector_webhook_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantConnectorWebhookDetails"
              }
            ],
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "test_mode": {
            "type": "boolean",
            "description": "A boolean value to indicate if the connector is in Test mode. By default, its value is false.",
            "default": false,
            "example": false,
            "nullable": true
          },
          "disabled": {
            "type": "boolean",
            "description": "A boolean value to indicate if the connector is disabled. By default, its value is false.",
            "default": false,
            "example": false,
            "nullable": true
          },
          "frm_configs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FrmConfigs"
            },
            "description": "Contains the frm configs for the merchant connector",
            "example": "\n[{\"gateway\":\"stripe\",\"payment_methods\":[{\"payment_method\":\"card\",\"payment_method_types\":[{\"payment_method_type\":\"credit\",\"card_networks\":[\"Visa\"],\"flow\":\"pre\",\"action\":\"cancel_txn\"},{\"payment_method_type\":\"debit\",\"card_networks\":[\"Visa\"],\"flow\":\"pre\"}]}]}]\n",
            "nullable": true
          },
          "business_country": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CountryAlpha2"
              }
            ],
            "nullable": true
          },
          "business_label": {
            "type": "string",
            "description": "The business label to which the connector account is attached. To be deprecated soon. Use the 'profile_id' instead",
            "example": "travel",
            "nullable": true
          },
          "business_sub_label": {
            "type": "string",
            "description": "The business sublabel to which the connector account is attached. To be deprecated soon. Use the 'profile_id' instead",
            "example": "chase",
            "nullable": true
          },
          "applepay_verified_domains": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "identifier for the verified domains of a particular connector account",
            "nullable": true
          },
          "pm_auth_config": {
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/ConnectorStatus"
          }
        }
      },
      "MerchantConnectorUpdate": {
        "type": "object",
        "description": "Create a new Merchant Connector for the merchant account. The connector could be a payment processor / facilitator / acquirer or specialized services like Fraud / Accounting etc.\"",
        "required": [
          "connector_type",
          "status"
        ],
        "properties": {
          "connector_type": {
            "$ref": "#/components/schemas/ConnectorType"
          },
          "connector_label": {
            "type": "string",
            "description": "This is an unique label you can generate and pass in order to identify this connector account on your Hyperswitch dashboard and reports. Eg: if your profile label is `default`, connector label can be `stripe_default`",
            "example": "stripe_US_travel",
            "nullable": true
          },
          "connector_account_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantConnectorDetails"
              }
            ],
            "nullable": true
          },
          "payment_methods_enabled": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodsEnabled"
            },
            "description": "An object containing the details about the payment methods that need to be enabled under this merchant connector account",
            "example": [
              {
                "accepted_countries": {
                  "list": [
                    "FR",
                    "DE",
                    "IN"
                  ],
                  "type": "disable_only"
                },
                "accepted_currencies": {
                  "list": [
                    "USD",
                    "EUR"
                  ],
                  "type": "enable_only"
                },
                "installment_payment_enabled": true,
                "maximum_amount": 68607706,
                "minimum_amount": 1,
                "payment_method": "wallet",
                "payment_method_issuers": [
                  "labore magna ipsum",
                  "aute"
                ],
                "payment_method_types": [
                  "upi_collect",
                  "upi_intent"
                ],
                "payment_schemes": [
                  "Discover",
                  "Discover"
                ],
                "recurring_enabled": true
              }
            ],
            "nullable": true
          },
          "connector_webhook_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantConnectorWebhookDetails"
              }
            ],
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "test_mode": {
            "type": "boolean",
            "description": "A boolean value to indicate if the connector is in Test mode. By default, its value is false.",
            "default": false,
            "example": false,
            "nullable": true
          },
          "disabled": {
            "type": "boolean",
            "description": "A boolean value to indicate if the connector is disabled. By default, its value is false.",
            "default": false,
            "example": false,
            "nullable": true
          },
          "frm_configs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FrmConfigs"
            },
            "description": "Contains the frm configs for the merchant connector",
            "example": "\n[{\"gateway\":\"stripe\",\"payment_methods\":[{\"payment_method\":\"card\",\"payment_method_types\":[{\"payment_method_type\":\"credit\",\"card_networks\":[\"Visa\"],\"flow\":\"pre\",\"action\":\"cancel_txn\"},{\"payment_method_type\":\"debit\",\"card_networks\":[\"Visa\"],\"flow\":\"pre\"}]}]}]\n",
            "nullable": true
          },
          "pm_auth_config": {
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/ConnectorStatus"
          }
        }
      },
      "MerchantConnectorWebhookDetails": {
        "type": "object",
        "required": [
          "merchant_secret",
          "additional_secret"
        ],
        "properties": {
          "merchant_secret": {
            "type": "string",
            "example": "12345678900987654321"
          },
          "additional_secret": {
            "type": "string",
            "example": "12345678900987654321"
          }
        }
      },
      "MerchantDetails": {
        "type": "object",
        "properties": {
          "primary_contact_person": {
            "type": "string",
            "description": "The merchant's primary contact name",
            "example": "John Doe",
            "nullable": true,
            "maxLength": 255
          },
          "primary_phone": {
            "type": "string",
            "description": "The merchant's primary phone number",
            "example": "999999999",
            "nullable": true,
            "maxLength": 255
          },
          "primary_email": {
            "type": "string",
            "description": "The merchant's primary email address",
            "example": "johndoe@test.com",
            "nullable": true,
            "maxLength": 255
          },
          "secondary_contact_person": {
            "type": "string",
            "description": "The merchant's secondary contact name",
            "example": "John Doe2",
            "nullable": true,
            "maxLength": 255
          },
          "secondary_phone": {
            "type": "string",
            "description": "The merchant's secondary phone number",
            "example": "999999988",
            "nullable": true,
            "maxLength": 255
          },
          "secondary_email": {
            "type": "string",
            "description": "The merchant's secondary email address",
            "example": "johndoe2@test.com",
            "nullable": true,
            "maxLength": 255
          },
          "website": {
            "type": "string",
            "description": "The business website of the merchant",
            "example": "www.example.com",
            "nullable": true,
            "maxLength": 255
          },
          "about_business": {
            "type": "string",
            "description": "A brief description about merchant's business",
            "example": "Online Retail with a wide selection of organic products for North America",
            "nullable": true,
            "maxLength": 255
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressDetails"
              }
            ],
            "nullable": true
          }
        }
      },
      "MerchantRoutingAlgorithm": {
        "type": "object",
        "description": "Routing Algorithm specific to merchants",
        "required": [
          "id",
          "profile_id",
          "name",
          "description",
          "algorithm",
          "created_at",
          "modified_at",
          "algorithm_for"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "profile_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "algorithm": {
            "$ref": "#/components/schemas/RoutingAlgorithm"
          },
          "created_at": {
            "type": "integer",
            "format": "int64"
          },
          "modified_at": {
            "type": "integer",
            "format": "int64"
          },
          "algorithm_for": {
            "$ref": "#/components/schemas/TransactionType"
          }
        }
      },
      "MetadataValue": {
        "type": "object",
        "required": [
          "key",
          "value"
        ],
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "MobilePayRedirection": {
        "type": "object"
      },
      "MomoRedirection": {
        "type": "object"
      },
      "MultibancoBillingDetails": {
        "type": "object",
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "type": "string",
            "example": "example@me.com"
          }
        }
      },
      "MultibancoTransferInstructions": {
        "type": "object",
        "required": [
          "reference",
          "entity"
        ],
        "properties": {
          "reference": {
            "type": "string",
            "example": "122385736258"
          },
          "entity": {
            "type": "string",
            "example": "12345"
          }
        }
      },
      "NextActionCall": {
        "type": "string",
        "enum": [
          "confirm",
          "sync"
        ]
      },
      "NextActionData": {
        "oneOf": [
          {
            "type": "object",
            "description": "Contains the url for redirection flow",
            "required": [
              "redirect_to_url",
              "type"
            ],
            "properties": {
              "redirect_to_url": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "redirect_to_url"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "Informs the next steps for bank transfer and also contains the charges details (ex: amount received, amount charged etc)",
            "required": [
              "bank_transfer_steps_and_charges_details",
              "type"
            ],
            "properties": {
              "bank_transfer_steps_and_charges_details": {
                "$ref": "#/components/schemas/BankTransferNextStepsData"
              },
              "type": {
                "type": "string",
                "enum": [
                  "display_bank_transfer_information"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "Contains third party sdk session token response",
            "required": [
              "type"
            ],
            "properties": {
              "session_token": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SessionToken"
                  }
                ],
                "nullable": true
              },
              "type": {
                "type": "string",
                "enum": [
                  "third_party_sdk_session_token"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "Contains url for Qr code image, this qr code has to be shown in sdk",
            "required": [
              "image_data_url",
              "qr_code_url",
              "type"
            ],
            "properties": {
              "image_data_url": {
                "type": "string",
                "description": "Hyperswitch generated image data source url"
              },
              "display_to_timestamp": {
                "type": "integer",
                "format": "int64",
                "nullable": true
              },
              "qr_code_url": {
                "type": "string",
                "description": "The url for Qr code given by the connector"
              },
              "type": {
                "type": "string",
                "enum": [
                  "qr_code_information"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "Contains the download url and the reference number for transaction",
            "required": [
              "voucher_details",
              "type"
            ],
            "properties": {
              "voucher_details": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "display_voucher_information"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "Contains duration for displaying a wait screen, wait screen with timer is displayed by sdk",
            "required": [
              "display_from_timestamp",
              "type"
            ],
            "properties": {
              "display_from_timestamp": {
                "type": "integer"
              },
              "display_to_timestamp": {
                "type": "integer",
                "nullable": true
              },
              "type": {
                "type": "string",
                "enum": [
                  "wait_screen_information"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "Contains the information regarding three_ds_method_data submission, three_ds authentication, and authorization flows",
            "required": [
              "three_ds_data",
              "type"
            ],
            "properties": {
              "three_ds_data": {
                "$ref": "#/components/schemas/ThreeDsData"
              },
              "type": {
                "type": "string",
                "enum": [
                  "three_ds_invoke"
                ]
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "type"
        }
      },
      "NextActionType": {
        "type": "string",
        "enum": [
          "redirect_to_url",
          "display_qr_code",
          "invoke_sdk_client",
          "trigger_api",
          "display_bank_transfer_information",
          "display_wait_screen"
        ]
      },
      "NoThirdPartySdkSessionResponse": {
        "type": "object",
        "required": [
          "epoch_timestamp",
          "expires_at",
          "merchant_session_identifier",
          "nonce",
          "merchant_identifier",
          "domain_name",
          "display_name",
          "signature",
          "operational_analytics_identifier",
          "retries",
          "psp_id"
        ],
        "properties": {
          "epoch_timestamp": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp at which session is requested",
            "minimum": 0
          },
          "expires_at": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp at which session expires",
            "minimum": 0
          },
          "merchant_session_identifier": {
            "type": "string",
            "description": "The identifier for the merchant session"
          },
          "nonce": {
            "type": "string",
            "description": "Apple pay generated unique ID (UUID) value"
          },
          "merchant_identifier": {
            "type": "string",
            "description": "The identifier for the merchant"
          },
          "domain_name": {
            "type": "string",
            "description": "The domain name of the merchant which is registered in Apple Pay"
          },
          "display_name": {
            "type": "string",
            "description": "The name to be displayed on Apple Pay button"
          },
          "signature": {
            "type": "string",
            "description": "A string which represents the properties of a payment"
          },
          "operational_analytics_identifier": {
            "type": "string",
            "description": "The identifier for the operational analytics"
          },
          "retries": {
            "type": "integer",
            "format": "int32",
            "description": "The number of retries to get the session response",
            "minimum": 0
          },
          "psp_id": {
            "type": "string",
            "description": "The identifier for the connector transaction"
          }
        }
      },
      "NoonData": {
        "type": "object",
        "properties": {
          "order_category": {
            "type": "string",
            "description": "Information about the order category that merchant wants to specify at connector level. (e.g. In Noon Payments it can take values like \"pay\", \"food\", or any other custom string set by the merchant in Noon's Dashboard)",
            "nullable": true
          }
        }
      },
      "NumberComparison": {
        "type": "object",
        "description": "Represents a number comparison for \"NumberComparisonArrayValue\"",
        "required": [
          "comparisonType",
          "number"
        ],
        "properties": {
          "comparisonType": {
            "$ref": "#/components/schemas/ComparisonType"
          },
          "number": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "OnlineMandate": {
        "type": "object",
        "required": [
          "ip_address",
          "user_agent"
        ],
        "properties": {
          "ip_address": {
            "type": "string",
            "description": "Ip address of the customer machine from which the mandate was created",
            "example": "123.32.25.123"
          },
          "user_agent": {
            "type": "string",
            "description": "The user-agent of the customer's browser"
          }
        }
      },
      "OrderDetails": {
        "type": "object",
        "required": [
          "product_name",
          "quantity"
        ],
        "properties": {
          "product_name": {
            "type": "string",
            "description": "Name of the product that is being purchased",
            "example": "shirt",
            "maxLength": 255
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "description": "The quantity of the product to be purchased",
            "example": 1,
            "minimum": 0
          },
          "requires_shipping": {
            "type": "boolean",
            "nullable": true
          },
          "product_img_link": {
            "type": "string",
            "description": "The image URL of the product",
            "nullable": true
          },
          "product_id": {
            "type": "string",
            "description": "ID of the product that is being purchased",
            "nullable": true
          },
          "category": {
            "type": "string",
            "description": "Category of the product that is being purchased",
            "nullable": true
          },
          "brand": {
            "type": "string",
            "description": "Brand of the product that is being purchased",
            "nullable": true
          },
          "product_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductType"
              }
            ],
            "nullable": true
          }
        }
      },
      "OrderDetailsWithAmount": {
        "type": "object",
        "required": [
          "product_name",
          "quantity",
          "amount"
        ],
        "properties": {
          "product_name": {
            "type": "string",
            "description": "Name of the product that is being purchased",
            "example": "shirt",
            "maxLength": 255
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "description": "The quantity of the product to be purchased",
            "example": 1,
            "minimum": 0
          },
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "the amount per quantity of product"
          },
          "requires_shipping": {
            "type": "boolean",
            "nullable": true
          },
          "product_img_link": {
            "type": "string",
            "description": "The image URL of the product",
            "nullable": true
          },
          "product_id": {
            "type": "string",
            "description": "ID of the product that is being purchased",
            "nullable": true
          },
          "category": {
            "type": "string",
            "description": "Category of the product that is being purchased",
            "nullable": true
          },
          "brand": {
            "type": "string",
            "description": "Brand of the product that is being purchased",
            "nullable": true
          },
          "product_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductType"
              }
            ],
            "nullable": true
          }
        }
      },
      "OutgoingWebhook": {
        "type": "object",
        "required": [
          "merchant_id",
          "event_id",
          "event_type",
          "content"
        ],
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The merchant id of the merchant"
          },
          "event_id": {
            "type": "string",
            "description": "The unique event id for each webhook"
          },
          "event_type": {
            "$ref": "#/components/schemas/EventType"
          },
          "content": {
            "$ref": "#/components/schemas/OutgoingWebhookContent"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The time at which webhook was sent"
          }
        }
      },
      "OutgoingWebhookContent": {
        "oneOf": [
          {
            "type": "object",
            "title": "PaymentsResponse",
            "required": [
              "type",
              "object"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "payment_details"
                ]
              },
              "object": {
                "$ref": "#/components/schemas/PaymentsResponse"
              }
            }
          },
          {
            "type": "object",
            "title": "RefundResponse",
            "required": [
              "type",
              "object"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "refund_details"
                ]
              },
              "object": {
                "$ref": "#/components/schemas/RefundResponse"
              }
            }
          },
          {
            "type": "object",
            "title": "DisputeResponse",
            "required": [
              "type",
              "object"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "dispute_details"
                ]
              },
              "object": {
                "$ref": "#/components/schemas/DisputeResponse"
              }
            }
          },
          {
            "type": "object",
            "title": "MandateResponse",
            "required": [
              "type",
              "object"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "mandate_details"
                ]
              },
              "object": {
                "$ref": "#/components/schemas/MandateResponse"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "type"
        }
      },
      "PayLaterData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "klarna_redirect"
            ],
            "properties": {
              "klarna_redirect": {
                "type": "object",
                "description": "For KlarnaRedirect as PayLater Option",
                "required": [
                  "billing_email",
                  "billing_country"
                ],
                "properties": {
                  "billing_email": {
                    "type": "string",
                    "description": "The billing email"
                  },
                  "billing_country": {
                    "$ref": "#/components/schemas/CountryAlpha2"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "klarna_sdk"
            ],
            "properties": {
              "klarna_sdk": {
                "type": "object",
                "description": "For Klarna Sdk as PayLater Option",
                "required": [
                  "token"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The token for the sdk workflow"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "affirm_redirect"
            ],
            "properties": {
              "affirm_redirect": {
                "type": "object",
                "description": "For Affirm redirect as PayLater Option"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "afterpay_clearpay_redirect"
            ],
            "properties": {
              "afterpay_clearpay_redirect": {
                "type": "object",
                "description": "For AfterpayClearpay redirect as PayLater Option",
                "required": [
                  "billing_email",
                  "billing_name"
                ],
                "properties": {
                  "billing_email": {
                    "type": "string",
                    "description": "The billing email"
                  },
                  "billing_name": {
                    "type": "string",
                    "description": "The billing name"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "pay_bright_redirect"
            ],
            "properties": {
              "pay_bright_redirect": {
                "type": "object",
                "description": "For PayBright Redirect as PayLater Option"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "walley_redirect"
            ],
            "properties": {
              "walley_redirect": {
                "type": "object",
                "description": "For WalleyRedirect as PayLater Option"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "alma_redirect"
            ],
            "properties": {
              "alma_redirect": {
                "type": "object",
                "description": "For Alma Redirection as PayLater Option"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "atome_redirect"
            ],
            "properties": {
              "atome_redirect": {
                "type": "object"
              }
            }
          }
        ]
      },
      "PayPalWalletData": {
        "type": "object",
        "required": [
          "token"
        ],
        "properties": {
          "token": {
            "type": "string",
            "description": "Token generated for the Apple pay"
          }
        }
      },
      "PaymentAttemptResponse": {
        "type": "object",
        "required": [
          "attempt_id",
          "status",
          "amount"
        ],
        "properties": {
          "attempt_id": {
            "type": "string",
            "description": "Unique identifier for the attempt"
          },
          "status": {
            "$ref": "#/components/schemas/AttemptStatus"
          },
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "The payment attempt amount. Amount for the payment in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc.,"
          },
          "currency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Currency"
              }
            ],
            "nullable": true
          },
          "connector": {
            "type": "string",
            "description": "The connector used for the payment",
            "nullable": true
          },
          "error_message": {
            "type": "string",
            "description": "If there was an error while calling the connector the error message is received here",
            "nullable": true
          },
          "payment_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethod"
              }
            ],
            "nullable": true
          },
          "connector_transaction_id": {
            "type": "string",
            "description": "A unique identifier for a payment provided by the connector",
            "nullable": true
          },
          "capture_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CaptureMethod"
              }
            ],
            "nullable": true
          },
          "authentication_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthenticationType"
              }
            ],
            "default": "three_ds",
            "nullable": true
          },
          "cancellation_reason": {
            "type": "string",
            "description": "If the payment was cancelled the reason provided here",
            "nullable": true
          },
          "mandate_id": {
            "type": "string",
            "description": "A unique identifier to link the payment to a mandate, can be use instead of payment_method_data",
            "nullable": true
          },
          "error_code": {
            "type": "string",
            "description": "If there was an error while calling the connectors the code is received here",
            "nullable": true
          },
          "payment_token": {
            "type": "string",
            "description": "Provide a reference to a stored payment method",
            "nullable": true
          },
          "connector_metadata": {
            "description": "additional data related to some connectors",
            "nullable": true
          },
          "payment_experience": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentExperience"
              }
            ],
            "nullable": true
          },
          "payment_method_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodType"
              }
            ],
            "nullable": true
          },
          "reference_id": {
            "type": "string",
            "description": "reference to the payment at connector side",
            "example": "993672945374576J",
            "nullable": true
          },
          "unified_code": {
            "type": "string",
            "description": "error code unified across the connectors is received here if there was an error while calling connector",
            "nullable": true
          },
          "unified_message": {
            "type": "string",
            "description": "error message unified across the connectors is received here if there was an error while calling connector",
            "nullable": true
          }
        }
      },
      "PaymentCreatePaymentLinkConfig": {
        "allOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentLinkConfigRequest"
              }
            ],
            "nullable": true
          },
          {
            "type": "object"
          }
        ]
      },
      "PaymentExperience": {
        "type": "string",
        "description": "To indicate the type of payment experience that the customer would go through",
        "enum": [
          "redirect_to_url",
          "invoke_sdk_client",
          "display_qr_code",
          "one_click",
          "link_wallet",
          "invoke_payment_app",
          "display_wait_screen"
        ]
      },
      "PaymentIdType": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "PaymentIntentId"
            ],
            "properties": {
              "PaymentIntentId": {
                "type": "string",
                "description": "The identifier for payment intent"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "ConnectorTransactionId"
            ],
            "properties": {
              "ConnectorTransactionId": {
                "type": "string",
                "description": "The identifier for connector transaction"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "PaymentAttemptId"
            ],
            "properties": {
              "PaymentAttemptId": {
                "type": "string",
                "description": "The identifier for payment attempt"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "PreprocessingId"
            ],
            "properties": {
              "PreprocessingId": {
                "type": "string",
                "description": "The identifier for preprocessing step"
              }
            }
          }
        ]
      },
      "PaymentLinkConfig": {
        "type": "object",
        "required": [
          "theme",
          "logo",
          "seller_name",
          "sdk_layout"
        ],
        "properties": {
          "theme": {
            "type": "string",
            "description": "custom theme for the payment link"
          },
          "logo": {
            "type": "string",
            "description": "merchant display logo"
          },
          "seller_name": {
            "type": "string",
            "description": "Custom merchant name for payment link"
          },
          "sdk_layout": {
            "type": "string",
            "description": "Custom layout for sdk"
          }
        }
      },
      "PaymentLinkConfigRequest": {
        "type": "object",
        "properties": {
          "theme": {
            "type": "string",
            "description": "custom theme for the payment link",
            "example": "#4E6ADD",
            "nullable": true,
            "maxLength": 255
          },
          "logo": {
            "type": "string",
            "description": "merchant display logo",
            "example": "https://i.pinimg.com/736x/4d/83/5c/4d835ca8aafbbb15f84d07d926fda473.jpg",
            "nullable": true,
            "maxLength": 255
          },
          "seller_name": {
            "type": "string",
            "description": "Custom merchant name for payment link",
            "example": "hyperswitch",
            "nullable": true,
            "maxLength": 255
          },
          "sdk_layout": {
            "type": "string",
            "description": "Custom layout for sdk",
            "example": "accordion",
            "nullable": true,
            "maxLength": 255
          }
        }
      },
      "PaymentLinkInitiateRequest": {
        "type": "object",
        "required": [
          "merchant_id",
          "payment_id"
        ],
        "properties": {
          "merchant_id": {
            "type": "string"
          },
          "payment_id": {
            "type": "string"
          }
        }
      },
      "PaymentLinkResponse": {
        "type": "object",
        "required": [
          "link",
          "payment_link_id"
        ],
        "properties": {
          "link": {
            "type": "string"
          },
          "payment_link_id": {
            "type": "string"
          }
        }
      },
      "PaymentLinkStatus": {
        "type": "string",
        "enum": [
          "active",
          "expired"
        ]
      },
      "PaymentListConstraints": {
        "type": "object",
        "properties": {
          "customer_id": {
            "type": "string",
            "description": "The identifier for customer",
            "example": "cus_meowuwunwiuwiwqw",
            "nullable": true
          },
          "starting_after": {
            "type": "string",
            "description": "A cursor for use in pagination, fetch the next list after some object",
            "example": "pay_fafa124123",
            "nullable": true
          },
          "ending_before": {
            "type": "string",
            "description": "A cursor for use in pagination, fetch the previous list before some object",
            "example": "pay_fafa124123",
            "nullable": true
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "description": "limit on the number of objects to return",
            "default": 10,
            "maximum": 100,
            "minimum": 0
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "The time at which payment is created",
            "example": "2022-09-10T10:11:12Z",
            "nullable": true
          },
          "created.lt": {
            "type": "string",
            "format": "date-time",
            "description": "Time less than the payment created time",
            "example": "2022-09-10T10:11:12Z",
            "nullable": true
          },
          "created.gt": {
            "type": "string",
            "format": "date-time",
            "description": "Time greater than the payment created time",
            "example": "2022-09-10T10:11:12Z",
            "nullable": true
          },
          "created.lte": {
            "type": "string",
            "format": "date-time",
            "description": "Time less than or equals to the payment created time",
            "example": "2022-09-10T10:11:12Z",
            "nullable": true
          },
          "created.gte": {
            "type": "string",
            "format": "date-time",
            "description": "Time greater than or equals to the payment created time",
            "example": "2022-09-10T10:11:12Z",
            "nullable": true
          }
        }
      },
      "PaymentListResponse": {
        "type": "object",
        "required": [
          "size",
          "data"
        ],
        "properties": {
          "size": {
            "type": "integer",
            "description": "The number of payments included in the list",
            "minimum": 0
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentsResponse"
            }
          }
        }
      },
      "PaymentMethod": {
        "type": "string",
        "description": "Indicates the type of payment method. Eg: 'card', 'wallet', etc.",
        "enum": [
          "card",
          "card_redirect",
          "pay_later",
          "wallet",
          "bank_redirect",
          "bank_transfer",
          "crypto",
          "bank_debit",
          "reward",
          "upi",
          "voucher",
          "gift_card"
        ]
      },
      "PaymentMethodCreate": {
        "type": "object",
        "required": [
          "payment_method"
        ],
        "properties": {
          "payment_method": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "payment_method_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodType"
              }
            ],
            "nullable": true
          },
          "payment_method_issuer": {
            "type": "string",
            "description": "The name of the bank/ provider issuing the payment method to the end user",
            "example": "Citibank",
            "nullable": true
          },
          "payment_method_issuer_code": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodIssuerCode"
              }
            ],
            "nullable": true
          },
          "card": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardDetail"
              }
            ],
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "customer_id": {
            "type": "string",
            "description": "The unique identifier of the customer.",
            "example": "cus_meowerunwiuwiwqw",
            "nullable": true
          },
          "card_network": {
            "type": "string",
            "description": "The card network",
            "example": "Visa",
            "nullable": true
          },
          "bank_transfer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Bank"
              }
            ],
            "nullable": true
          },
          "wallet": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Wallet"
              }
            ],
            "nullable": true
          }
        }
      },
      "PaymentMethodData": {
        "oneOf": [
          {
            "type": "object",
            "title": "Card",
            "required": [
              "card"
            ],
            "properties": {
              "card": {
                "$ref": "#/components/schemas/Card"
              }
            }
          },
          {
            "type": "object",
            "title": "CardRedirect",
            "required": [
              "card_redirect"
            ],
            "properties": {
              "card_redirect": {
                "$ref": "#/components/schemas/CardRedirectData"
              }
            }
          },
          {
            "type": "object",
            "title": "Wallet",
            "required": [
              "wallet"
            ],
            "properties": {
              "wallet": {
                "$ref": "#/components/schemas/WalletData"
              }
            }
          },
          {
            "type": "object",
            "title": "PayLater",
            "required": [
              "pay_later"
            ],
            "properties": {
              "pay_later": {
                "$ref": "#/components/schemas/PayLaterData"
              }
            }
          },
          {
            "type": "object",
            "title": "BankRedirect",
            "required": [
              "bank_redirect"
            ],
            "properties": {
              "bank_redirect": {
                "$ref": "#/components/schemas/BankRedirectData"
              }
            }
          },
          {
            "type": "object",
            "title": "BankDebit",
            "required": [
              "bank_debit"
            ],
            "properties": {
              "bank_debit": {
                "$ref": "#/components/schemas/BankDebitData"
              }
            }
          },
          {
            "type": "object",
            "title": "BankTransfer",
            "required": [
              "bank_transfer"
            ],
            "properties": {
              "bank_transfer": {
                "$ref": "#/components/schemas/BankTransferData"
              }
            }
          },
          {
            "type": "object",
            "title": "Crypto",
            "required": [
              "crypto"
            ],
            "properties": {
              "crypto": {
                "$ref": "#/components/schemas/CryptoData"
              }
            }
          },
          {
            "type": "string",
            "title": "MandatePayment",
            "enum": [
              "mandate_payment"
            ]
          },
          {
            "type": "string",
            "title": "Reward",
            "enum": [
              "reward"
            ]
          },
          {
            "type": "object",
            "title": "Upi",
            "required": [
              "upi"
            ],
            "properties": {
              "upi": {
                "$ref": "#/components/schemas/UpiData"
              }
            }
          },
          {
            "type": "object",
            "title": "Voucher",
            "required": [
              "voucher"
            ],
            "properties": {
              "voucher": {
                "$ref": "#/components/schemas/VoucherData"
              }
            }
          },
          {
            "type": "object",
            "title": "GiftCard",
            "required": [
              "gift_card"
            ],
            "properties": {
              "gift_card": {
                "$ref": "#/components/schemas/GiftCardData"
              }
            }
          },
          {
            "type": "object",
            "title": "CardToken",
            "required": [
              "card_token"
            ],
            "properties": {
              "card_token": {
                "$ref": "#/components/schemas/CardToken"
              }
            }
          }
        ]
      },
      "PaymentMethodDataRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentMethodData"
          },
          {
            "type": "object",
            "properties": {
              "billing": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ],
                "nullable": true
              }
            }
          }
        ]
      },
      "PaymentMethodDeleteResponse": {
        "type": "object",
        "required": [
          "payment_method_id",
          "deleted"
        ],
        "properties": {
          "payment_method_id": {
            "type": "string",
            "description": "The unique identifier of the Payment method",
            "example": "card_rGK4Vi5iSW70MY7J2mIy"
          },
          "deleted": {
            "type": "boolean",
            "description": "Whether payment method was deleted or not",
            "example": true
          }
        }
      },
      "PaymentMethodIssuerCode": {
        "type": "string",
        "enum": [
          "jp_hdfc",
          "jp_icici",
          "jp_googlepay",
          "jp_applepay",
          "jp_phonepay",
          "jp_wechat",
          "jp_sofort",
          "jp_giropay",
          "jp_sepa",
          "jp_bacs"
        ]
      },
      "PaymentMethodList": {
        "type": "object",
        "required": [
          "payment_method"
        ],
        "properties": {
          "payment_method": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "payment_method_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodType"
            },
            "description": "This is a sub-category of payment method.",
            "example": [
              "credit"
            ],
            "nullable": true
          }
        }
      },
      "PaymentMethodListResponse": {
        "type": "object",
        "required": [
          "currency",
          "payment_methods",
          "mandate_payment",
          "show_surcharge_breakup_screen"
        ],
        "properties": {
          "redirect_url": {
            "type": "string",
            "description": "Redirect URL of the merchant",
            "example": "https://www.google.com",
            "nullable": true
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "payment_methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodList"
            },
            "description": "Information about the payment method",
            "example": [
              {
                "payment_experience": null,
                "payment_method": "wallet",
                "payment_method_issuers": [
                  "labore magna ipsum",
                  "aute"
                ]
              }
            ]
          },
          "mandate_payment": {
            "$ref": "#/components/schemas/MandateType"
          },
          "merchant_name": {
            "type": "string",
            "nullable": true
          },
          "show_surcharge_breakup_screen": {
            "type": "boolean",
            "description": "flag to indicate if surcharge and tax breakup screen should be shown or not"
          },
          "payment_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentType"
              }
            ],
            "nullable": true
          }
        }
      },
      "PaymentMethodResponse": {
        "type": "object",
        "required": [
          "merchant_id",
          "payment_method_id",
          "payment_method",
          "recurring_enabled",
          "installment_payment_enabled"
        ],
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "Unique identifier for a merchant",
            "example": "merchant_1671528864"
          },
          "customer_id": {
            "type": "string",
            "description": "The unique identifier of the customer.",
            "example": "cus_meowerunwiuwiwqw",
            "nullable": true
          },
          "payment_method_id": {
            "type": "string",
            "description": "The unique identifier of the Payment method",
            "example": "card_rGK4Vi5iSW70MY7J2mIy"
          },
          "payment_method": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "payment_method_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodType"
              }
            ],
            "nullable": true
          },
          "card": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardDetailFromLocker"
              }
            ],
            "nullable": true
          },
          "recurring_enabled": {
            "type": "boolean",
            "description": "Indicates whether the payment method is eligible for recurring payments",
            "example": true
          },
          "installment_payment_enabled": {
            "type": "boolean",
            "description": "Indicates whether the payment method is eligible for installment payments",
            "example": true
          },
          "payment_experience": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentExperience"
            },
            "description": "Type of payment experience enabled with the connector",
            "example": [
              "redirect_to_url"
            ],
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "A timestamp (ISO 8601 code) that determines when the customer was created",
            "example": "2023-01-18T11:04:09.922Z",
            "nullable": true
          },
          "bank_transfer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Bank"
              }
            ],
            "nullable": true
          },
          "last_used_at": {
            "type": "string",
            "format": "date-time",
            "example": "2024-02-24T11:04:09.922Z",
            "nullable": true
          }
        }
      },
      "PaymentMethodType": {
        "type": "string",
        "description": "Indicates the sub type of payment method. Eg: 'google_pay' & 'apple_pay' for wallets.",
        "enum": [
          "ach",
          "affirm",
          "afterpay_clearpay",
          "alfamart",
          "ali_pay",
          "ali_pay_hk",
          "alma",
          "apple_pay",
          "atome",
          "bacs",
          "bancontact_card",
          "becs",
          "benefit",
          "bizum",
          "blik",
          "boleto",
          "bca_bank_transfer",
          "bni_va",
          "bri_va",
          "card_redirect",
          "cimb_va",
          "classic",
          "credit",
          "crypto_currency",
          "cashapp",
          "dana",
          "danamon_va",
          "debit",
          "efecty",
          "eps",
          "evoucher",
          "giropay",
          "givex",
          "google_pay",
          "go_pay",
          "gcash",
          "ideal",
          "interac",
          "indomaret",
          "klarna",
          "kakao_pay",
          "mandiri_va",
          "knet",
          "mb_way",
          "mobile_pay",
          "momo",
          "momo_atm",
          "multibanco",
          "online_banking_thailand",
          "online_banking_czech_republic",
          "online_banking_finland",
          "online_banking_fpx",
          "online_banking_poland",
          "online_banking_slovakia",
          "oxxo",
          "pago_efectivo",
          "permata_bank_transfer",
          "open_banking_uk",
          "pay_bright",
          "paypal",
          "pix",
          "pay_safe_card",
          "przelewy24",
          "pse",
          "red_compra",
          "red_pagos",
          "samsung_pay",
          "sepa",
          "sofort",
          "swish",
          "touch_n_go",
          "trustly",
          "twint",
          "upi_collect",
          "vipps",
          "walley",
          "we_chat_pay",
          "seven_eleven",
          "lawson",
          "mini_stop",
          "family_mart",
          "seicomart",
          "pay_easy"
        ]
      },
      "PaymentMethodUpdate": {
        "type": "object",
        "properties": {
          "card": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardDetail"
              }
            ],
            "nullable": true
          },
          "card_network": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardNetwork"
              }
            ],
            "nullable": true
          },
          "bank_transfer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Bank"
              }
            ],
            "nullable": true
          },
          "wallet": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Wallet"
              }
            ],
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          }
        }
      },
      "PaymentMethodsEnabled": {
        "type": "object",
        "description": "Details of all the payment methods enabled for the connector for the given merchant account",
        "required": [
          "payment_method"
        ],
        "properties": {
          "payment_method": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "payment_method_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestPaymentMethodTypes"
            },
            "description": "Subtype of payment method",
            "example": [
              "credit"
            ],
            "nullable": true
          }
        }
      },
      "PaymentRetrieveBody": {
        "type": "object",
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account.",
            "nullable": true
          },
          "force_sync": {
            "type": "boolean",
            "description": "Decider to enable or disable the connector call for retrieve request",
            "nullable": true
          },
          "client_secret": {
            "type": "string",
            "description": "This is a token which expires after 15 minutes, used from the client to authenticate and create sessions from the SDK",
            "nullable": true
          },
          "expand_captures": {
            "type": "boolean",
            "description": "If enabled provides list of captures linked to latest attempt",
            "nullable": true
          },
          "expand_attempts": {
            "type": "boolean",
            "description": "If enabled provides list of attempts linked to payment intent",
            "nullable": true
          }
        }
      },
      "PaymentType": {
        "type": "string",
        "description": "To be used to specify the type of payment. Use 'setup_mandate' in case of zero auth flow.",
        "enum": [
          "normal",
          "new_mandate",
          "setup_mandate",
          "recurring_mandate"
        ]
      },
      "PaymentsCancelRequest": {
        "type": "object",
        "properties": {
          "cancellation_reason": {
            "type": "string",
            "description": "The reason for the payment cancel",
            "nullable": true
          },
          "merchant_connector_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantConnectorDetailsWrap"
              }
            ],
            "nullable": true
          }
        }
      },
      "PaymentsCaptureRequest": {
        "type": "object",
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The unique identifier for the merchant",
            "nullable": true
          },
          "amount_to_capture": {
            "type": "integer",
            "format": "int64",
            "description": "The Amount to be captured/ debited from the user's payment method.",
            "nullable": true
          },
          "refund_uncaptured_amount": {
            "type": "boolean",
            "description": "Decider to refund the uncaptured amount",
            "nullable": true
          },
          "statement_descriptor_suffix": {
            "type": "string",
            "description": "Provides information about a card payment that customers see on their statements.",
            "nullable": true
          },
          "statement_descriptor_prefix": {
            "type": "string",
            "description": "Concatenated with the statement descriptor suffix that’s set on the account to form the complete statement descriptor.",
            "nullable": true
          },
          "merchant_connector_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantConnectorDetailsWrap"
              }
            ],
            "nullable": true
          }
        }
      },
      "PaymentsConfirmRequest": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "The payment amount. Amount for the payment in the lowest denomination of the currency, (i.e) in cents for USD denomination, in yen for JPY denomination etc. E.g., Pass 100 to charge $1.00 and ¥100 since ¥ is a zero-decimal currency",
            "example": 6540,
            "nullable": true,
            "minimum": 0
          },
          "currency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Currency"
              }
            ],
            "nullable": true
          },
          "amount_to_capture": {
            "type": "integer",
            "format": "int64",
            "description": "The Amount to be captured / debited from the users payment method. It shall be in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc., If not provided, the default amount_to_capture will be the payment amount.",
            "example": 6540,
            "nullable": true
          },
          "payment_id": {
            "type": "string",
            "description": "Unique identifier for the payment. This ensures idempotency for multiple payments\nthat have been done by a single merchant. This field is auto generated and is returned in the API response.",
            "example": "pay_mbabizu24mvu3mela5njyhpit4",
            "nullable": true,
            "maxLength": 30,
            "minLength": 30
          },
          "merchant_id": {
            "type": "string",
            "description": "This is an identifier for the merchant account. This is inferred from the API key\nprovided during the request",
            "example": "merchant_1668273825",
            "nullable": true,
            "maxLength": 255
          },
          "routing": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StraightThroughAlgorithm"
              }
            ],
            "nullable": true
          },
          "connector": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Connector"
            },
            "description": "This allows to manually select a connector with which the payment can go through",
            "example": [
              "stripe",
              "adyen"
            ],
            "nullable": true
          },
          "capture_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CaptureMethod"
              }
            ],
            "nullable": true
          },
          "authentication_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthenticationType"
              }
            ],
            "default": "three_ds",
            "nullable": true
          },
          "billing": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "nullable": true
          },
          "capture_on": {
            "type": "string",
            "format": "date-time",
            "description": "A timestamp (ISO 8601 code) that determines when the payment should be captured.\nProviding this field will automatically set `capture` to true",
            "example": "2022-09-10T10:11:12Z",
            "nullable": true
          },
          "confirm": {
            "type": "boolean",
            "description": "Whether to confirm the payment (if applicable)",
            "default": false,
            "example": true,
            "nullable": true
          },
          "customer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomerDetails"
              }
            ],
            "nullable": true
          },
          "customer_id": {
            "type": "string",
            "description": "The identifier for the customer object. This field will be deprecated soon, use the customer object instead",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "nullable": true,
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "description": "The customer's email address This field will be deprecated soon, use the customer object instead",
            "example": "johntest@test.com",
            "nullable": true,
            "maxLength": 255
          },
          "name": {
            "type": "string",
            "description": "The customer's name.\nThis field will be deprecated soon, use the customer object instead.",
            "example": "John Test",
            "nullable": true,
            "maxLength": 255
          },
          "phone": {
            "type": "string",
            "description": "The customer's phone number\nThis field will be deprecated soon, use the customer object instead",
            "example": "3141592653",
            "nullable": true,
            "maxLength": 255
          },
          "phone_country_code": {
            "type": "string",
            "description": "The country code for the customer phone number\nThis field will be deprecated soon, use the customer object instead",
            "example": "+1",
            "nullable": true,
            "maxLength": 255
          },
          "off_session": {
            "type": "boolean",
            "description": "Set to true to indicate that the customer is not in your checkout flow during this payment, and therefore is unable to authenticate. This parameter is intended for scenarios where you collect card details and charge them later. When making a recurring payment by passing a mandate_id, this parameter is mandatory",
            "example": true,
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "A description for the payment",
            "example": "It's my first payment request",
            "nullable": true
          },
          "return_url": {
            "type": "string",
            "description": "The URL to redirect after the completion of the operation",
            "example": "https://hyperswitch.io",
            "nullable": true
          },
          "setup_future_usage": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FutureUsage"
              }
            ],
            "nullable": true
          },
          "payment_method_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodDataRequest"
              }
            ],
            "nullable": true
          },
          "payment_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethod"
              }
            ],
            "nullable": true
          },
          "payment_token": {
            "type": "string",
            "description": "Provide a reference to a stored payment method",
            "example": "187282ab-40ef-47a9-9206-5099ba31e432",
            "nullable": true
          },
          "card_cvc": {
            "type": "string",
            "description": "This is used along with the payment_token field while collecting during saved card payments. This field will be deprecated soon, use the payment_method_data.card_token object instead",
            "deprecated": true,
            "nullable": true
          },
          "shipping": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "nullable": true
          },
          "statement_descriptor_name": {
            "type": "string",
            "description": "For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters.",
            "example": "Hyperswitch Router",
            "nullable": true,
            "maxLength": 255
          },
          "statement_descriptor_suffix": {
            "type": "string",
            "description": "Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.",
            "example": "Payment for shoes purchase",
            "nullable": true,
            "maxLength": 255
          },
          "order_details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderDetailsWithAmount"
            },
            "description": "Use this object to capture the details about the different products for which the payment is being made. The sum of amount across different products here should be equal to the overall payment amount",
            "example": "[{\n        \"product_name\": \"Apple iPhone 16\",\n        \"quantity\": 1,\n        \"amount\" : 69000\n        \"product_img_link\" : \"https://dummy-img-link.com\"\n    }]",
            "nullable": true
          },
          "client_secret": {
            "type": "string",
            "description": "It's a token used for client side verification.",
            "example": "pay_U42c409qyHwOkWo3vK60_secret_el9ksDkiB8hi6j9N78yo",
            "nullable": true
          },
          "mandate_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MandateData"
              }
            ],
            "nullable": true
          },
          "mandate_id": {
            "type": "string",
            "description": "A unique identifier to link the payment to a mandate. To do Recurring payments after a mandate has been created, pass the mandate_id instead of payment_method_data",
            "example": "mandate_iwer89rnjef349dni3",
            "nullable": true,
            "maxLength": 255
          },
          "browser_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrowserInformation"
              }
            ],
            "nullable": true
          },
          "payment_experience": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentExperience"
              }
            ],
            "nullable": true
          },
          "payment_method_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodType"
              }
            ],
            "nullable": true
          },
          "merchant_connector_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantConnectorDetailsWrap"
              }
            ],
            "nullable": true
          },
          "allowed_payment_method_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodType"
            },
            "description": "Use this parameter to restrict the Payment Method Types to show for a given PaymentIntent",
            "nullable": true
          },
          "retry_action": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RetryAction"
              }
            ],
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "connector_metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConnectorMetadata"
              }
            ],
            "nullable": true
          },
          "feature_metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FeatureMetadata"
              }
            ],
            "nullable": true
          },
          "payment_link": {
            "type": "boolean",
            "description": "Whether to get the payment link (if applicable)",
            "default": false,
            "example": true,
            "nullable": true
          },
          "payment_link_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentCreatePaymentLinkConfig"
              }
            ],
            "nullable": true
          },
          "payment_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentType"
              }
            ],
            "nullable": true
          },
          "request_incremental_authorization": {
            "type": "boolean",
            "description": "Request for an incremental authorization",
            "nullable": true
          },
          "session_expiry": {
            "type": "integer",
            "format": "int32",
            "description": "Will be used to expire client secret after certain amount of time to be supplied in seconds\n(900) for 15 mins",
            "example": 900,
            "nullable": true,
            "minimum": 0
          },
          "frm_metadata": {
            "description": "additional data related to some frm connectors",
            "nullable": true
          },
          "request_external_three_ds_authentication": {
            "type": "boolean",
            "description": "Whether to perform external authentication (if applicable)",
            "example": true,
            "nullable": true
          }
        }
      },
      "PaymentsCreateRequest": {
        "type": "object",
        "required": [
          "amount",
          "currency"
        ],
        "properties": {
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "The payment amount. Amount for the payment in the lowest denomination of the currency, (i.e) in cents for USD denomination, in yen for JPY denomination etc. E.g., Pass 100 to charge $1.00 and ¥100 since ¥ is a zero-decimal currency",
            "minimum": 0
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "amount_to_capture": {
            "type": "integer",
            "format": "int64",
            "description": "The Amount to be captured / debited from the users payment method. It shall be in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc., If not provided, the default amount_to_capture will be the payment amount.",
            "example": 6540,
            "nullable": true
          },
          "payment_id": {
            "type": "string",
            "description": "Unique identifier for the payment. This ensures idempotency for multiple payments\nthat have been done by a single merchant. This field is auto generated and is returned in the API response.",
            "example": "pay_mbabizu24mvu3mela5njyhpit4",
            "nullable": true,
            "maxLength": 30,
            "minLength": 30
          },
          "merchant_id": {
            "type": "string",
            "description": "This is an identifier for the merchant account. This is inferred from the API key\nprovided during the request",
            "example": "merchant_1668273825",
            "nullable": true,
            "maxLength": 255
          },
          "routing": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StraightThroughAlgorithm"
              }
            ],
            "nullable": true
          },
          "connector": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Connector"
            },
            "description": "This allows to manually select a connector with which the payment can go through",
            "example": [
              "stripe",
              "adyen"
            ],
            "nullable": true
          },
          "capture_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CaptureMethod"
              }
            ],
            "nullable": true
          },
          "authentication_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthenticationType"
              }
            ],
            "default": "three_ds",
            "nullable": true
          },
          "billing": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "nullable": true
          },
          "capture_on": {
            "type": "string",
            "format": "date-time",
            "description": "A timestamp (ISO 8601 code) that determines when the payment should be captured.\nProviding this field will automatically set `capture` to true",
            "example": "2022-09-10T10:11:12Z",
            "nullable": true
          },
          "confirm": {
            "type": "boolean",
            "description": "Whether to confirm the payment (if applicable)",
            "default": false,
            "example": true,
            "nullable": true
          },
          "customer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomerDetails"
              }
            ],
            "nullable": true
          },
          "customer_id": {
            "type": "string",
            "description": "The identifier for the customer object. This field will be deprecated soon, use the customer object instead",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "nullable": true,
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "description": "The customer's email address This field will be deprecated soon, use the customer object instead",
            "example": "johntest@test.com",
            "nullable": true,
            "maxLength": 255
          },
          "name": {
            "type": "string",
            "description": "The customer's name.\nThis field will be deprecated soon, use the customer object instead.",
            "example": "John Test",
            "nullable": true,
            "maxLength": 255
          },
          "phone": {
            "type": "string",
            "description": "The customer's phone number\nThis field will be deprecated soon, use the customer object instead",
            "example": "3141592653",
            "nullable": true,
            "maxLength": 255
          },
          "phone_country_code": {
            "type": "string",
            "description": "The country code for the customer phone number\nThis field will be deprecated soon, use the customer object instead",
            "example": "+1",
            "nullable": true,
            "maxLength": 255
          },
          "off_session": {
            "type": "boolean",
            "description": "Set to true to indicate that the customer is not in your checkout flow during this payment, and therefore is unable to authenticate. This parameter is intended for scenarios where you collect card details and charge them later. When making a recurring payment by passing a mandate_id, this parameter is mandatory",
            "example": true,
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "A description for the payment",
            "example": "It's my first payment request",
            "nullable": true
          },
          "return_url": {
            "type": "string",
            "description": "The URL to redirect after the completion of the operation",
            "example": "https://hyperswitch.io",
            "nullable": true
          },
          "setup_future_usage": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FutureUsage"
              }
            ],
            "nullable": true
          },
          "payment_method_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodDataRequest"
              }
            ],
            "nullable": true
          },
          "payment_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethod"
              }
            ],
            "nullable": true
          },
          "payment_token": {
            "type": "string",
            "description": "Provide a reference to a stored payment method",
            "example": "187282ab-40ef-47a9-9206-5099ba31e432",
            "nullable": true
          },
          "card_cvc": {
            "type": "string",
            "description": "This is used along with the payment_token field while collecting during saved card payments. This field will be deprecated soon, use the payment_method_data.card_token object instead",
            "deprecated": true,
            "nullable": true
          },
          "shipping": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "nullable": true
          },
          "statement_descriptor_name": {
            "type": "string",
            "description": "For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters.",
            "example": "Hyperswitch Router",
            "nullable": true,
            "maxLength": 255
          },
          "statement_descriptor_suffix": {
            "type": "string",
            "description": "Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.",
            "example": "Payment for shoes purchase",
            "nullable": true,
            "maxLength": 255
          },
          "order_details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderDetailsWithAmount"
            },
            "description": "Use this object to capture the details about the different products for which the payment is being made. The sum of amount across different products here should be equal to the overall payment amount",
            "example": "[{\n        \"product_name\": \"Apple iPhone 16\",\n        \"quantity\": 1,\n        \"amount\" : 69000\n        \"product_img_link\" : \"https://dummy-img-link.com\"\n    }]",
            "nullable": true
          },
          "mandate_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MandateData"
              }
            ],
            "nullable": true
          },
          "mandate_id": {
            "type": "string",
            "description": "A unique identifier to link the payment to a mandate. To do Recurring payments after a mandate has been created, pass the mandate_id instead of payment_method_data",
            "example": "mandate_iwer89rnjef349dni3",
            "nullable": true,
            "maxLength": 255
          },
          "browser_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrowserInformation"
              }
            ],
            "nullable": true
          },
          "payment_experience": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentExperience"
              }
            ],
            "nullable": true
          },
          "payment_method_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodType"
              }
            ],
            "nullable": true
          },
          "business_country": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CountryAlpha2"
              }
            ],
            "nullable": true
          },
          "business_label": {
            "type": "string",
            "description": "Business label of the merchant for this payment.\nTo be deprecated soon. Pass the profile_id instead",
            "example": "food",
            "nullable": true
          },
          "merchant_connector_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantConnectorDetailsWrap"
              }
            ],
            "nullable": true
          },
          "allowed_payment_method_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodType"
            },
            "description": "Use this parameter to restrict the Payment Method Types to show for a given PaymentIntent",
            "nullable": true
          },
          "retry_action": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RetryAction"
              }
            ],
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "connector_metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConnectorMetadata"
              }
            ],
            "nullable": true
          },
          "feature_metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FeatureMetadata"
              }
            ],
            "nullable": true
          },
          "payment_link": {
            "type": "boolean",
            "description": "Whether to get the payment link (if applicable)",
            "default": false,
            "example": true,
            "nullable": true
          },
          "payment_link_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentCreatePaymentLinkConfig"
              }
            ],
            "nullable": true
          },
          "profile_id": {
            "type": "string",
            "description": "The business profile to use for this payment, if not passed the default business profile\nassociated with the merchant account will be used.",
            "nullable": true
          },
          "surcharge_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RequestSurchargeDetails"
              }
            ],
            "nullable": true
          },
          "payment_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentType"
              }
            ],
            "nullable": true
          },
          "request_incremental_authorization": {
            "type": "boolean",
            "description": "Request for an incremental authorization",
            "nullable": true
          },
          "session_expiry": {
            "type": "integer",
            "format": "int32",
            "description": "Will be used to expire client secret after certain amount of time to be supplied in seconds\n(900) for 15 mins",
            "example": 900,
            "nullable": true,
            "minimum": 0
          },
          "frm_metadata": {
            "description": "additional data related to some frm connectors",
            "nullable": true
          },
          "request_external_three_ds_authentication": {
            "type": "boolean",
            "description": "Whether to perform external authentication (if applicable)",
            "example": true,
            "nullable": true
          }
        }
      },
      "PaymentsExternalAuthenticationRequest": {
        "type": "object",
        "required": [
          "client_secret",
          "device_channel",
          "threeds_method_comp_ind"
        ],
        "properties": {
          "client_secret": {
            "type": "string",
            "description": "Client Secret"
          },
          "sdk_information": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SdkInformation"
              }
            ],
            "nullable": true
          },
          "device_channel": {
            "$ref": "#/components/schemas/DeviceChannel"
          },
          "threeds_method_comp_ind": {
            "$ref": "#/components/schemas/ThreeDsCompletionIndicator"
          }
        }
      },
      "PaymentsExternalAuthenticationResponse": {
        "type": "object",
        "required": [
          "trans_status"
        ],
        "properties": {
          "trans_status": {
            "$ref": "#/components/schemas/TransactionStatus"
          },
          "acs_url": {
            "type": "string",
            "description": "Access Server URL to be used for challenge submission",
            "nullable": true
          },
          "challenge_request": {
            "type": "string",
            "description": "Challenge request which should be sent to acs_url",
            "nullable": true
          },
          "acs_reference_number": {
            "type": "string",
            "description": "Unique identifier assigned by the EMVCo",
            "nullable": true
          },
          "acs_trans_id": {
            "type": "string",
            "description": "Unique identifier assigned by the ACS to identify a single transaction",
            "nullable": true
          },
          "three_dsserver_trans_id": {
            "type": "string",
            "description": "Unique identifier assigned by the 3DS Server to identify a single transaction",
            "nullable": true
          },
          "acs_signed_content": {
            "type": "string",
            "description": "Contains the JWS object created by the ACS for the ARes message",
            "nullable": true
          }
        }
      },
      "PaymentsIncrementalAuthorizationRequest": {
        "type": "object",
        "required": [
          "amount"
        ],
        "properties": {
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "The total amount including previously authorized amount and additional amount",
            "example": 6540
          },
          "reason": {
            "type": "string",
            "description": "Reason for incremental authorization",
            "nullable": true
          }
        }
      },
      "PaymentsRequest": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "The payment amount. Amount for the payment in the lowest denomination of the currency, (i.e) in cents for USD denomination, in yen for JPY denomination etc. E.g., Pass 100 to charge $1.00 and ¥100 since ¥ is a zero-decimal currency",
            "example": 6540,
            "nullable": true,
            "minimum": 0
          },
          "currency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Currency"
              }
            ],
            "nullable": true
          },
          "amount_to_capture": {
            "type": "integer",
            "format": "int64",
            "description": "The Amount to be captured / debited from the users payment method. It shall be in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc., If not provided, the default amount_to_capture will be the payment amount.",
            "example": 6540,
            "nullable": true
          },
          "payment_id": {
            "type": "string",
            "description": "Unique identifier for the payment. This ensures idempotency for multiple payments\nthat have been done by a single merchant. This field is auto generated and is returned in the API response.",
            "example": "pay_mbabizu24mvu3mela5njyhpit4",
            "nullable": true,
            "maxLength": 30,
            "minLength": 30
          },
          "merchant_id": {
            "type": "string",
            "description": "This is an identifier for the merchant account. This is inferred from the API key\nprovided during the request",
            "example": "merchant_1668273825",
            "nullable": true,
            "maxLength": 255
          },
          "routing": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StraightThroughAlgorithm"
              }
            ],
            "nullable": true
          },
          "connector": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Connector"
            },
            "description": "This allows to manually select a connector with which the payment can go through",
            "example": [
              "stripe",
              "adyen"
            ],
            "nullable": true
          },
          "capture_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CaptureMethod"
              }
            ],
            "nullable": true
          },
          "authentication_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthenticationType"
              }
            ],
            "default": "three_ds",
            "nullable": true
          },
          "billing": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "nullable": true
          },
          "capture_on": {
            "type": "string",
            "format": "date-time",
            "description": "A timestamp (ISO 8601 code) that determines when the payment should be captured.\nProviding this field will automatically set `capture` to true",
            "example": "2022-09-10T10:11:12Z",
            "nullable": true
          },
          "confirm": {
            "type": "boolean",
            "description": "Whether to confirm the payment (if applicable)",
            "default": false,
            "example": true,
            "nullable": true
          },
          "customer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomerDetails"
              }
            ],
            "nullable": true
          },
          "customer_id": {
            "type": "string",
            "description": "The identifier for the customer object. This field will be deprecated soon, use the customer object instead",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "nullable": true,
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "description": "The customer's email address This field will be deprecated soon, use the customer object instead",
            "example": "johntest@test.com",
            "nullable": true,
            "maxLength": 255
          },
          "name": {
            "type": "string",
            "description": "The customer's name.\nThis field will be deprecated soon, use the customer object instead.",
            "example": "John Test",
            "nullable": true,
            "maxLength": 255
          },
          "phone": {
            "type": "string",
            "description": "The customer's phone number\nThis field will be deprecated soon, use the customer object instead",
            "example": "3141592653",
            "nullable": true,
            "maxLength": 255
          },
          "phone_country_code": {
            "type": "string",
            "description": "The country code for the customer phone number\nThis field will be deprecated soon, use the customer object instead",
            "example": "+1",
            "nullable": true,
            "maxLength": 255
          },
          "off_session": {
            "type": "boolean",
            "description": "Set to true to indicate that the customer is not in your checkout flow during this payment, and therefore is unable to authenticate. This parameter is intended for scenarios where you collect card details and charge them later. When making a recurring payment by passing a mandate_id, this parameter is mandatory",
            "example": true,
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "A description for the payment",
            "example": "It's my first payment request",
            "nullable": true
          },
          "return_url": {
            "type": "string",
            "description": "The URL to redirect after the completion of the operation",
            "example": "https://hyperswitch.io",
            "nullable": true
          },
          "setup_future_usage": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FutureUsage"
              }
            ],
            "nullable": true
          },
          "payment_method_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodDataRequest"
              }
            ],
            "nullable": true
          },
          "payment_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethod"
              }
            ],
            "nullable": true
          },
          "payment_token": {
            "type": "string",
            "description": "Provide a reference to a stored payment method",
            "example": "187282ab-40ef-47a9-9206-5099ba31e432",
            "nullable": true
          },
          "card_cvc": {
            "type": "string",
            "description": "This is used along with the payment_token field while collecting during saved card payments. This field will be deprecated soon, use the payment_method_data.card_token object instead",
            "deprecated": true,
            "nullable": true
          },
          "shipping": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "nullable": true
          },
          "statement_descriptor_name": {
            "type": "string",
            "description": "For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters.",
            "example": "Hyperswitch Router",
            "nullable": true,
            "maxLength": 255
          },
          "statement_descriptor_suffix": {
            "type": "string",
            "description": "Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.",
            "example": "Payment for shoes purchase",
            "nullable": true,
            "maxLength": 255
          },
          "order_details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderDetailsWithAmount"
            },
            "description": "Use this object to capture the details about the different products for which the payment is being made. The sum of amount across different products here should be equal to the overall payment amount",
            "example": "[{\n        \"product_name\": \"Apple iPhone 16\",\n        \"quantity\": 1,\n        \"amount\" : 69000\n        \"product_img_link\" : \"https://dummy-img-link.com\"\n    }]",
            "nullable": true
          },
          "client_secret": {
            "type": "string",
            "description": "It's a token used for client side verification.",
            "example": "pay_U42c409qyHwOkWo3vK60_secret_el9ksDkiB8hi6j9N78yo",
            "nullable": true
          },
          "mandate_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MandateData"
              }
            ],
            "nullable": true
          },
          "mandate_id": {
            "type": "string",
            "description": "A unique identifier to link the payment to a mandate. To do Recurring payments after a mandate has been created, pass the mandate_id instead of payment_method_data",
            "example": "mandate_iwer89rnjef349dni3",
            "nullable": true,
            "maxLength": 255
          },
          "browser_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrowserInformation"
              }
            ],
            "nullable": true
          },
          "payment_experience": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentExperience"
              }
            ],
            "nullable": true
          },
          "payment_method_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodType"
              }
            ],
            "nullable": true
          },
          "business_country": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CountryAlpha2"
              }
            ],
            "nullable": true
          },
          "business_label": {
            "type": "string",
            "description": "Business label of the merchant for this payment.\nTo be deprecated soon. Pass the profile_id instead",
            "example": "food",
            "nullable": true
          },
          "merchant_connector_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantConnectorDetailsWrap"
              }
            ],
            "nullable": true
          },
          "allowed_payment_method_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodType"
            },
            "description": "Use this parameter to restrict the Payment Method Types to show for a given PaymentIntent",
            "nullable": true
          },
          "business_sub_label": {
            "type": "string",
            "description": "Business sub label for the payment",
            "nullable": true
          },
          "retry_action": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RetryAction"
              }
            ],
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "connector_metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConnectorMetadata"
              }
            ],
            "nullable": true
          },
          "feature_metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FeatureMetadata"
              }
            ],
            "nullable": true
          },
          "payment_link": {
            "type": "boolean",
            "description": "Whether to get the payment link (if applicable)",
            "default": false,
            "example": true,
            "nullable": true
          },
          "payment_link_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentCreatePaymentLinkConfig"
              }
            ],
            "nullable": true
          },
          "profile_id": {
            "type": "string",
            "description": "The business profile to use for this payment, if not passed the default business profile\nassociated with the merchant account will be used.",
            "nullable": true
          },
          "surcharge_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RequestSurchargeDetails"
              }
            ],
            "nullable": true
          },
          "payment_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentType"
              }
            ],
            "nullable": true
          },
          "request_incremental_authorization": {
            "type": "boolean",
            "description": "Request for an incremental authorization",
            "nullable": true
          },
          "session_expiry": {
            "type": "integer",
            "format": "int32",
            "description": "Will be used to expire client secret after certain amount of time to be supplied in seconds\n(900) for 15 mins",
            "example": 900,
            "nullable": true,
            "minimum": 0
          },
          "frm_metadata": {
            "description": "additional data related to some frm connectors",
            "nullable": true
          },
          "request_external_three_ds_authentication": {
            "type": "boolean",
            "description": "Whether to perform external authentication (if applicable)",
            "example": true,
            "nullable": true
          }
        }
      },
      "PaymentsResponse": {
        "type": "object",
        "required": [
          "status",
          "amount",
          "net_amount",
          "currency",
          "payment_method",
          "attempt_count"
        ],
        "properties": {
          "payment_id": {
            "type": "string",
            "description": "Unique identifier for the payment. This ensures idempotency for multiple payments\nthat have been done by a single merchant.",
            "example": "pay_mbabizu24mvu3mela5njyhpit4",
            "nullable": true,
            "maxLength": 30,
            "minLength": 30
          },
          "merchant_id": {
            "type": "string",
            "description": "This is an identifier for the merchant account. This is inferred from the API key\nprovided during the request",
            "example": "merchant_1668273825",
            "nullable": true,
            "maxLength": 255
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IntentStatus"
              }
            ],
            "default": "requires_confirmation"
          },
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "The payment amount. Amount for the payment in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc.,",
            "example": 100
          },
          "net_amount": {
            "type": "integer",
            "format": "int64",
            "description": "The payment net amount. net_amount = amount + surcharge_details.surcharge_amount + surcharge_details.tax_amount,\nIf no surcharge_details, net_amount = amount",
            "example": 110
          },
          "amount_capturable": {
            "type": "integer",
            "format": "int64",
            "description": "The maximum amount that could be captured from the payment",
            "example": 6540,
            "nullable": true,
            "minimum": 100
          },
          "amount_received": {
            "type": "integer",
            "format": "int64",
            "description": "The amount which is already captured from the payment",
            "example": 6540,
            "nullable": true,
            "minimum": 100
          },
          "connector": {
            "type": "string",
            "description": "The connector used for the payment",
            "example": "stripe",
            "nullable": true
          },
          "client_secret": {
            "type": "string",
            "description": "It's a token used for client side verification.",
            "example": "pay_U42c409qyHwOkWo3vK60_secret_el9ksDkiB8hi6j9N78yo",
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the payment was created",
            "example": "2022-09-10T10:11:12Z",
            "nullable": true
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "customer_id": {
            "type": "string",
            "description": "The identifier for the customer object. If not provided the customer ID will be autogenerated.",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "nullable": true,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "description": "A description of the payment",
            "example": "It's my first payment request",
            "nullable": true
          },
          "refunds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RefundResponse"
            },
            "description": "List of refund that happened on this intent",
            "nullable": true
          },
          "disputes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DisputeResponsePaymentsRetrieve"
            },
            "description": "List of dispute that happened on this intent",
            "nullable": true
          },
          "attempts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentAttemptResponse"
            },
            "description": "List of attempts that happened on this intent",
            "nullable": true
          },
          "captures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CaptureResponse"
            },
            "description": "List of captures done on latest attempt",
            "nullable": true
          },
          "mandate_id": {
            "type": "string",
            "description": "A unique identifier to link the payment to a mandate, can be use instead of payment_method_data",
            "example": "mandate_iwer89rnjef349dni3",
            "nullable": true,
            "maxLength": 255
          },
          "mandate_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MandateData"
              }
            ],
            "nullable": true
          },
          "setup_future_usage": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FutureUsage"
              }
            ],
            "nullable": true
          },
          "off_session": {
            "type": "boolean",
            "description": "Set to true to indicate that the customer is not in your checkout flow during this payment, and therefore is unable to authenticate. This parameter is intended for scenarios where you collect card details and charge them later. This parameter can only be used with confirm=true.",
            "example": true,
            "nullable": true
          },
          "capture_on": {
            "type": "string",
            "format": "date-time",
            "description": "A timestamp (ISO 8601 code) that determines when the payment should be captured.\nProviding this field will automatically set `capture` to true",
            "example": "2022-09-10T10:11:12Z",
            "nullable": true
          },
          "capture_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CaptureMethod"
              }
            ],
            "nullable": true
          },
          "payment_method": {
            "$ref": "#/components/schemas/PaymentMethodType"
          },
          "payment_method_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethod"
              }
            ],
            "nullable": true
          },
          "payment_token": {
            "type": "string",
            "description": "Provide a reference to a stored payment method",
            "example": "187282ab-40ef-47a9-9206-5099ba31e432",
            "nullable": true
          },
          "shipping": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "nullable": true
          },
          "billing": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "nullable": true
          },
          "order_details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderDetailsWithAmount"
            },
            "description": "Information about the product , quantity and amount for connectors. (e.g. Klarna)",
            "example": "[{\n        \"product_name\": \"gillete creme\",\n        \"quantity\": 15,\n        \"amount\" : 900\n    }]",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "description: The customer's email address",
            "example": "johntest@test.com",
            "nullable": true,
            "maxLength": 255
          },
          "name": {
            "type": "string",
            "description": "description: The customer's name",
            "example": "John Test",
            "nullable": true,
            "maxLength": 255
          },
          "phone": {
            "type": "string",
            "description": "The customer's phone number",
            "example": "3141592653",
            "nullable": true,
            "maxLength": 255
          },
          "return_url": {
            "type": "string",
            "description": "The URL to redirect after the completion of the operation",
            "example": "https://hyperswitch.io",
            "nullable": true
          },
          "authentication_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthenticationType"
              }
            ],
            "default": "three_ds",
            "nullable": true
          },
          "statement_descriptor_name": {
            "type": "string",
            "description": "For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters.",
            "example": "Hyperswitch Router",
            "nullable": true,
            "maxLength": 255
          },
          "statement_descriptor_suffix": {
            "type": "string",
            "description": "Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 255 characters for the concatenated descriptor.",
            "example": "Payment for shoes purchase",
            "nullable": true,
            "maxLength": 255
          },
          "next_action": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NextActionData"
              }
            ],
            "nullable": true
          },
          "cancellation_reason": {
            "type": "string",
            "description": "If the payment was cancelled the reason provided here",
            "nullable": true
          },
          "error_code": {
            "type": "string",
            "description": "If there was an error while calling the connectors the code is received here",
            "example": "E0001",
            "nullable": true
          },
          "error_message": {
            "type": "string",
            "description": "If there was an error while calling the connector the error message is received here",
            "example": "Failed while verifying the card",
            "nullable": true
          },
          "unified_code": {
            "type": "string",
            "description": "error code unified across the connectors is received here if there was an error while calling connector",
            "nullable": true
          },
          "unified_message": {
            "type": "string",
            "description": "error message unified across the connectors is received here if there was an error while calling connector",
            "nullable": true
          },
          "payment_experience": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentExperience"
              }
            ],
            "nullable": true
          },
          "payment_method_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodType"
              }
            ],
            "nullable": true
          },
          "connector_label": {
            "type": "string",
            "description": "The connector used for this payment along with the country and business details",
            "example": "stripe_US_food",
            "nullable": true
          },
          "business_country": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CountryAlpha2"
              }
            ],
            "nullable": true
          },
          "business_label": {
            "type": "string",
            "description": "The business label of merchant for this payment",
            "nullable": true
          },
          "business_sub_label": {
            "type": "string",
            "description": "The business_sub_label for this payment",
            "nullable": true
          },
          "allowed_payment_method_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodType"
            },
            "description": "Allowed Payment Method Types for a given PaymentIntent",
            "nullable": true
          },
          "ephemeral_key": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EphemeralKeyCreateResponse"
              }
            ],
            "nullable": true
          },
          "manual_retry_allowed": {
            "type": "boolean",
            "description": "If true the payment can be retried with same or different payment method which means the confirm call can be made again.",
            "nullable": true
          },
          "connector_transaction_id": {
            "type": "string",
            "description": "A unique identifier for a payment provided by the connector",
            "example": "993672945374576J",
            "nullable": true
          },
          "frm_message": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FrmMessage"
              }
            ],
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "connector_metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConnectorMetadata"
              }
            ],
            "nullable": true
          },
          "feature_metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FeatureMetadata"
              }
            ],
            "nullable": true
          },
          "reference_id": {
            "type": "string",
            "description": "reference to the payment at connector side",
            "example": "993672945374576J",
            "nullable": true
          },
          "payment_link": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentLinkResponse"
              }
            ],
            "nullable": true
          },
          "profile_id": {
            "type": "string",
            "description": "The business profile that is associated with this payment",
            "nullable": true
          },
          "surcharge_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RequestSurchargeDetails"
              }
            ],
            "nullable": true
          },
          "attempt_count": {
            "type": "integer",
            "format": "int32",
            "description": "total number of attempts associated with this payment"
          },
          "merchant_decision": {
            "type": "string",
            "description": "Denotes the action(approve or reject) taken by merchant in case of manual review. Manual review can occur when the transaction is marked as risky by the frm_processor, payment processor or when there is underpayment/over payment incase of crypto payment",
            "nullable": true
          },
          "merchant_connector_id": {
            "type": "string",
            "description": "Identifier of the connector ( merchant connector account ) which was chosen to make the payment",
            "nullable": true
          },
          "incremental_authorization_allowed": {
            "type": "boolean",
            "description": "If true incremental authorization can be performed on this payment",
            "nullable": true
          },
          "authorization_count": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of authorizations happened in an incremental_authorization payment",
            "nullable": true
          },
          "incremental_authorizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IncrementalAuthorizationResponse"
            },
            "description": "List of incremental authorizations happened to the payment",
            "nullable": true
          },
          "external_authentication_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalAuthenticationDetailsResponse"
              }
            ],
            "nullable": true
          },
          "request_external_3ds_authentication": {
            "type": "boolean",
            "description": "Flag indicating if external 3ds authentication is made or not",
            "nullable": true
          },
          "expires_on": {
            "type": "string",
            "format": "date-time",
            "description": "Date Time expiry of the payment",
            "example": "2022-09-10T10:11:12Z",
            "nullable": true
          },
          "fingerprint": {
            "type": "string",
            "description": "Payment Fingerprint",
            "nullable": true
          }
        }
      },
      "PaymentsRetrieveRequest": {
        "type": "object",
        "required": [
          "resource_id",
          "force_sync"
        ],
        "properties": {
          "resource_id": {
            "$ref": "#/components/schemas/PaymentIdType"
          },
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account.",
            "nullable": true
          },
          "force_sync": {
            "type": "boolean",
            "description": "Decider to enable or disable the connector call for retrieve request"
          },
          "param": {
            "type": "string",
            "description": "The parameters passed to a retrieve request",
            "nullable": true
          },
          "connector": {
            "type": "string",
            "description": "The name of the connector",
            "nullable": true
          },
          "merchant_connector_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantConnectorDetailsWrap"
              }
            ],
            "nullable": true
          },
          "client_secret": {
            "type": "string",
            "description": "This is a token which expires after 15 minutes, used from the client to authenticate and create sessions from the SDK",
            "nullable": true
          },
          "expand_captures": {
            "type": "boolean",
            "description": "If enabled provides list of captures linked to latest attempt",
            "nullable": true
          },
          "expand_attempts": {
            "type": "boolean",
            "description": "If enabled provides list of attempts linked to payment intent",
            "nullable": true
          }
        }
      },
      "PaymentsSessionRequest": {
        "type": "object",
        "required": [
          "payment_id",
          "client_secret",
          "wallets"
        ],
        "properties": {
          "payment_id": {
            "type": "string",
            "description": "The identifier for the payment"
          },
          "client_secret": {
            "type": "string",
            "description": "This is a token which expires after 15 minutes, used from the client to authenticate and create sessions from the SDK"
          },
          "wallets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodType"
            },
            "description": "The list of the supported wallets"
          },
          "merchant_connector_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantConnectorDetailsWrap"
              }
            ],
            "nullable": true
          }
        }
      },
      "PaymentsSessionResponse": {
        "type": "object",
        "required": [
          "payment_id",
          "client_secret",
          "session_token"
        ],
        "properties": {
          "payment_id": {
            "type": "string",
            "description": "The identifier for the payment"
          },
          "client_secret": {
            "type": "string",
            "description": "This is a token which expires after 15 minutes, used from the client to authenticate and create sessions from the SDK"
          },
          "session_token": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SessionToken"
            },
            "description": "The list of session token object"
          }
        }
      },
      "PaymentsStartRequest": {
        "type": "object",
        "required": [
          "payment_id",
          "merchant_id",
          "attempt_id"
        ],
        "properties": {
          "payment_id": {
            "type": "string",
            "description": "Unique identifier for the payment. This ensures idempotency for multiple payments\nthat have been done by a single merchant. This field is auto generated and is returned in the API response."
          },
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account."
          },
          "attempt_id": {
            "type": "string",
            "description": "The identifier for the payment transaction"
          }
        }
      },
      "PaymentsUpdateRequest": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "The payment amount. Amount for the payment in the lowest denomination of the currency, (i.e) in cents for USD denomination, in yen for JPY denomination etc. E.g., Pass 100 to charge $1.00 and ¥100 since ¥ is a zero-decimal currency",
            "example": 6540,
            "nullable": true,
            "minimum": 0
          },
          "currency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Currency"
              }
            ],
            "nullable": true
          },
          "amount_to_capture": {
            "type": "integer",
            "format": "int64",
            "description": "The Amount to be captured / debited from the users payment method. It shall be in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc., If not provided, the default amount_to_capture will be the payment amount.",
            "example": 6540,
            "nullable": true
          },
          "payment_id": {
            "type": "string",
            "description": "Unique identifier for the payment. This ensures idempotency for multiple payments\nthat have been done by a single merchant. This field is auto generated and is returned in the API response.",
            "example": "pay_mbabizu24mvu3mela5njyhpit4",
            "nullable": true,
            "maxLength": 30,
            "minLength": 30
          },
          "merchant_id": {
            "type": "string",
            "description": "This is an identifier for the merchant account. This is inferred from the API key\nprovided during the request",
            "example": "merchant_1668273825",
            "nullable": true,
            "maxLength": 255
          },
          "routing": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StraightThroughAlgorithm"
              }
            ],
            "nullable": true
          },
          "connector": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Connector"
            },
            "description": "This allows to manually select a connector with which the payment can go through",
            "example": [
              "stripe",
              "adyen"
            ],
            "nullable": true
          },
          "capture_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CaptureMethod"
              }
            ],
            "nullable": true
          },
          "authentication_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthenticationType"
              }
            ],
            "default": "three_ds",
            "nullable": true
          },
          "billing": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "nullable": true
          },
          "capture_on": {
            "type": "string",
            "format": "date-time",
            "description": "A timestamp (ISO 8601 code) that determines when the payment should be captured.\nProviding this field will automatically set `capture` to true",
            "example": "2022-09-10T10:11:12Z",
            "nullable": true
          },
          "confirm": {
            "type": "boolean",
            "description": "Whether to confirm the payment (if applicable)",
            "default": false,
            "example": true,
            "nullable": true
          },
          "customer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomerDetails"
              }
            ],
            "nullable": true
          },
          "customer_id": {
            "type": "string",
            "description": "The identifier for the customer object. This field will be deprecated soon, use the customer object instead",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "nullable": true,
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "description": "The customer's email address This field will be deprecated soon, use the customer object instead",
            "example": "johntest@test.com",
            "nullable": true,
            "maxLength": 255
          },
          "name": {
            "type": "string",
            "description": "The customer's name.\nThis field will be deprecated soon, use the customer object instead.",
            "example": "John Test",
            "nullable": true,
            "maxLength": 255
          },
          "phone": {
            "type": "string",
            "description": "The customer's phone number\nThis field will be deprecated soon, use the customer object instead",
            "example": "3141592653",
            "nullable": true,
            "maxLength": 255
          },
          "phone_country_code": {
            "type": "string",
            "description": "The country code for the customer phone number\nThis field will be deprecated soon, use the customer object instead",
            "example": "+1",
            "nullable": true,
            "maxLength": 255
          },
          "off_session": {
            "type": "boolean",
            "description": "Set to true to indicate that the customer is not in your checkout flow during this payment, and therefore is unable to authenticate. This parameter is intended for scenarios where you collect card details and charge them later. When making a recurring payment by passing a mandate_id, this parameter is mandatory",
            "example": true,
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "A description for the payment",
            "example": "It's my first payment request",
            "nullable": true
          },
          "return_url": {
            "type": "string",
            "description": "The URL to redirect after the completion of the operation",
            "example": "https://hyperswitch.io",
            "nullable": true
          },
          "setup_future_usage": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FutureUsage"
              }
            ],
            "nullable": true
          },
          "payment_method_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodDataRequest"
              }
            ],
            "nullable": true
          },
          "payment_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethod"
              }
            ],
            "nullable": true
          },
          "payment_token": {
            "type": "string",
            "description": "Provide a reference to a stored payment method",
            "example": "187282ab-40ef-47a9-9206-5099ba31e432",
            "nullable": true
          },
          "card_cvc": {
            "type": "string",
            "description": "This is used along with the payment_token field while collecting during saved card payments. This field will be deprecated soon, use the payment_method_data.card_token object instead",
            "deprecated": true,
            "nullable": true
          },
          "shipping": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "nullable": true
          },
          "statement_descriptor_name": {
            "type": "string",
            "description": "For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters.",
            "example": "Hyperswitch Router",
            "nullable": true,
            "maxLength": 255
          },
          "statement_descriptor_suffix": {
            "type": "string",
            "description": "Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.",
            "example": "Payment for shoes purchase",
            "nullable": true,
            "maxLength": 255
          },
          "order_details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderDetailsWithAmount"
            },
            "description": "Use this object to capture the details about the different products for which the payment is being made. The sum of amount across different products here should be equal to the overall payment amount",
            "example": "[{\n        \"product_name\": \"Apple iPhone 16\",\n        \"quantity\": 1,\n        \"amount\" : 69000\n        \"product_img_link\" : \"https://dummy-img-link.com\"\n    }]",
            "nullable": true
          },
          "mandate_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MandateData"
              }
            ],
            "nullable": true
          },
          "browser_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrowserInformation"
              }
            ],
            "nullable": true
          },
          "payment_experience": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentExperience"
              }
            ],
            "nullable": true
          },
          "payment_method_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodType"
              }
            ],
            "nullable": true
          },
          "merchant_connector_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantConnectorDetailsWrap"
              }
            ],
            "nullable": true
          },
          "allowed_payment_method_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodType"
            },
            "description": "Use this parameter to restrict the Payment Method Types to show for a given PaymentIntent",
            "nullable": true
          },
          "retry_action": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RetryAction"
              }
            ],
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "connector_metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConnectorMetadata"
              }
            ],
            "nullable": true
          },
          "feature_metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FeatureMetadata"
              }
            ],
            "nullable": true
          },
          "payment_link": {
            "type": "boolean",
            "description": "Whether to get the payment link (if applicable)",
            "default": false,
            "example": true,
            "nullable": true
          },
          "payment_link_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentCreatePaymentLinkConfig"
              }
            ],
            "nullable": true
          },
          "surcharge_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RequestSurchargeDetails"
              }
            ],
            "nullable": true
          },
          "payment_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentType"
              }
            ],
            "nullable": true
          },
          "request_incremental_authorization": {
            "type": "boolean",
            "description": "Request for an incremental authorization",
            "nullable": true
          },
          "session_expiry": {
            "type": "integer",
            "format": "int32",
            "description": "Will be used to expire client secret after certain amount of time to be supplied in seconds\n(900) for 15 mins",
            "example": 900,
            "nullable": true,
            "minimum": 0
          },
          "frm_metadata": {
            "description": "additional data related to some frm connectors",
            "nullable": true
          },
          "request_external_three_ds_authentication": {
            "type": "boolean",
            "description": "Whether to perform external authentication (if applicable)",
            "example": true,
            "nullable": true
          }
        }
      },
      "PayoutActionRequest": {
        "type": "object",
        "required": [
          "payout_id"
        ],
        "properties": {
          "payout_id": {
            "type": "string",
            "description": "Unique identifier for the payout. This ensures idempotency for multiple payouts\nthat have been done by a single merchant. This field is auto generated and is returned in the API response.",
            "example": "payout_mbabizu24mvu3mela5njyhpit4",
            "maxLength": 30,
            "minLength": 30
          }
        }
      },
      "PayoutConnectors": {
        "type": "string",
        "enum": [
          "adyen",
          "wise"
        ]
      },
      "PayoutCreateRequest": {
        "type": "object",
        "required": [
          "merchant_id",
          "currency",
          "confirm",
          "payout_type",
          "customer_id",
          "auto_fulfill",
          "client_secret",
          "return_url",
          "business_country",
          "description",
          "entity_type"
        ],
        "properties": {
          "payout_id": {
            "type": "string",
            "description": "Unique identifier for the payout. This ensures idempotency for multiple payouts\nthat have been done by a single merchant. This field is auto generated and is returned in the API response.",
            "example": "payout_mbabizu24mvu3mela5njyhpit4",
            "nullable": true,
            "maxLength": 30,
            "minLength": 30
          },
          "merchant_id": {
            "type": "string",
            "description": "This is an identifier for the merchant account. This is inferred from the API key\nprovided during the request",
            "example": "merchant_1668273825",
            "maxLength": 255
          },
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "The payout amount. Amount for the payout in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc.,",
            "example": 1000
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "routing": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RoutingAlgorithm"
              }
            ],
            "nullable": true
          },
          "connector": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Connector"
            },
            "description": "This allows the merchant to manually select a connector with which the payout can go through",
            "example": [
              "wise",
              "adyen"
            ],
            "nullable": true
          },
          "confirm": {
            "type": "boolean",
            "description": "The boolean value to create payout with connector",
            "default": false,
            "example": true
          },
          "payout_type": {
            "$ref": "#/components/schemas/PayoutType"
          },
          "payout_method_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutMethodData"
              }
            ],
            "nullable": true
          },
          "billing": {
            "type": "object",
            "description": "The billing address for the payout",
            "nullable": true
          },
          "customer_id": {
            "type": "string",
            "description": "The identifier for the customer object. If not provided the customer ID will be autogenerated.",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "auto_fulfill": {
            "type": "boolean",
            "description": "Set to true to confirm the payout without review, no further action required",
            "default": false,
            "example": true
          },
          "email": {
            "type": "string",
            "description": "description: The customer's email address",
            "example": "johntest@test.com",
            "nullable": true,
            "maxLength": 255
          },
          "name": {
            "type": "string",
            "description": "description: The customer's name",
            "example": "John Test",
            "nullable": true,
            "maxLength": 255
          },
          "phone": {
            "type": "string",
            "description": "The customer's phone number",
            "example": "3141592653",
            "nullable": true,
            "maxLength": 255
          },
          "phone_country_code": {
            "type": "string",
            "description": "The country code for the customer phone number",
            "example": "+1",
            "nullable": true,
            "maxLength": 255
          },
          "client_secret": {
            "type": "string",
            "description": "It's a token used for client side verification.",
            "example": "pay_U42c409qyHwOkWo3vK60_secret_el9ksDkiB8hi6j9N78yo"
          },
          "return_url": {
            "type": "string",
            "description": "The URL to redirect after the completion of the operation",
            "example": "https://hyperswitch.io"
          },
          "business_country": {
            "$ref": "#/components/schemas/CountryAlpha2"
          },
          "business_label": {
            "type": "string",
            "description": "Business label of the merchant for this payout",
            "example": "food",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "A description of the payout",
            "example": "It's my first payout request"
          },
          "entity_type": {
            "$ref": "#/components/schemas/PayoutEntityType"
          },
          "recurring": {
            "type": "boolean",
            "description": "Specifies whether or not the payout request is recurring",
            "default": false,
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "payout_token": {
            "type": "string",
            "description": "Provide a reference to a stored payment method",
            "example": "187282ab-40ef-47a9-9206-5099ba31e432",
            "nullable": true
          },
          "profile_id": {
            "type": "string",
            "description": "The business profile to use for this payment, if not passed the default business profile\nassociated with the merchant account will be used.",
            "nullable": true
          }
        }
      },
      "PayoutCreateResponse": {
        "type": "object",
        "required": [
          "payout_id",
          "merchant_id",
          "amount",
          "currency",
          "payout_type",
          "customer_id",
          "auto_fulfill",
          "client_secret",
          "return_url",
          "business_country",
          "description",
          "entity_type",
          "status",
          "error_message",
          "error_code",
          "profile_id"
        ],
        "properties": {
          "payout_id": {
            "type": "string",
            "description": "Unique identifier for the payout. This ensures idempotency for multiple payouts\nthat have been done by a single merchant. This field is auto generated and is returned in the API response.",
            "example": "payout_mbabizu24mvu3mela5njyhpit4",
            "maxLength": 30,
            "minLength": 30
          },
          "merchant_id": {
            "type": "string",
            "description": "This is an identifier for the merchant account. This is inferred from the API key\nprovided during the request",
            "example": "merchant_1668273825",
            "maxLength": 255
          },
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "The payout amount. Amount for the payout in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc.,",
            "example": 1000
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "connector": {
            "type": "string",
            "description": "The connector used for the payout",
            "example": "wise",
            "nullable": true
          },
          "payout_type": {
            "$ref": "#/components/schemas/PayoutType"
          },
          "billing": {
            "type": "object",
            "description": "The billing address for the payout",
            "nullable": true
          },
          "customer_id": {
            "type": "string",
            "description": "The identifier for the customer object. If not provided the customer ID will be autogenerated.",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "auto_fulfill": {
            "type": "boolean",
            "description": "Set to true to confirm the payout without review, no further action required",
            "default": false,
            "example": true
          },
          "email": {
            "type": "string",
            "description": "description: The customer's email address",
            "example": "johntest@test.com",
            "nullable": true,
            "maxLength": 255
          },
          "name": {
            "type": "string",
            "description": "description: The customer's name",
            "example": "John Test",
            "nullable": true,
            "maxLength": 255
          },
          "phone": {
            "type": "string",
            "description": "The customer's phone number",
            "example": "3141592653",
            "nullable": true,
            "maxLength": 255
          },
          "phone_country_code": {
            "type": "string",
            "description": "The country code for the customer phone number",
            "example": "+1",
            "nullable": true,
            "maxLength": 255
          },
          "client_secret": {
            "type": "string",
            "description": "It's a token used for client side verification.",
            "example": "pay_U42c409qyHwOkWo3vK60_secret_el9ksDkiB8hi6j9N78yo"
          },
          "return_url": {
            "type": "string",
            "description": "The URL to redirect after the completion of the operation",
            "example": "https://hyperswitch.io"
          },
          "business_country": {
            "$ref": "#/components/schemas/CountryAlpha2"
          },
          "business_label": {
            "type": "string",
            "description": "Business label of the merchant for this payout",
            "example": "food",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "A description of the payout",
            "example": "It's my first payout request"
          },
          "entity_type": {
            "$ref": "#/components/schemas/PayoutEntityType"
          },
          "recurring": {
            "type": "boolean",
            "description": "Specifies whether or not the payout request is recurring",
            "default": false,
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/PayoutStatus"
          },
          "error_message": {
            "type": "string",
            "description": "If there was an error while calling the connector the error message is received here",
            "example": "Failed while verifying the card"
          },
          "error_code": {
            "type": "string",
            "description": "If there was an error while calling the connectors the code is received here",
            "example": "E0001"
          },
          "profile_id": {
            "type": "string",
            "description": "The business profile that is associated with this payment"
          }
        }
      },
      "PayoutEntityType": {
        "type": "string",
        "enum": [
          "Individual",
          "Company",
          "NonProfit",
          "PublicSector",
          "NaturalPerson",
          "lowercase",
          "Personal"
        ]
      },
      "PayoutMethodData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "card"
            ],
            "properties": {
              "card": {
                "$ref": "#/components/schemas/Card"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "bank"
            ],
            "properties": {
              "bank": {
                "$ref": "#/components/schemas/Bank"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "wallet"
            ],
            "properties": {
              "wallet": {
                "$ref": "#/components/schemas/Wallet"
              }
            }
          }
        ]
      },
      "PayoutRequest": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "PayoutActionRequest"
            ],
            "properties": {
              "PayoutActionRequest": {
                "$ref": "#/components/schemas/PayoutActionRequest"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "PayoutCreateRequest"
            ],
            "properties": {
              "PayoutCreateRequest": {
                "$ref": "#/components/schemas/PayoutCreateRequest"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "PayoutRetrieveRequest"
            ],
            "properties": {
              "PayoutRetrieveRequest": {
                "$ref": "#/components/schemas/PayoutRetrieveRequest"
              }
            }
          }
        ]
      },
      "PayoutRetrieveBody": {
        "type": "object",
        "properties": {
          "force_sync": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "PayoutRetrieveRequest": {
        "type": "object",
        "required": [
          "payout_id"
        ],
        "properties": {
          "payout_id": {
            "type": "string",
            "description": "Unique identifier for the payout. This ensures idempotency for multiple payouts\nthat have been done by a single merchant. This field is auto generated and is returned in the API response.",
            "example": "payout_mbabizu24mvu3mela5njyhpit4",
            "maxLength": 30,
            "minLength": 30
          },
          "force_sync": {
            "type": "boolean",
            "description": "`force_sync` with the connector to get payout details\n(defaults to false)",
            "default": false,
            "example": true,
            "nullable": true
          }
        }
      },
      "PayoutStatus": {
        "type": "string",
        "enum": [
          "success",
          "failed",
          "cancelled",
          "pending",
          "ineligible",
          "requires_creation",
          "requires_payout_method_data",
          "requires_fulfillment"
        ]
      },
      "PayoutType": {
        "type": "string",
        "enum": [
          "card",
          "bank",
          "wallet"
        ]
      },
      "Paypal": {
        "type": "object",
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "Email linked with paypal account",
            "example": "john.doe@example.com"
          }
        }
      },
      "PaypalRedirection": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "paypal's email address",
            "example": "johntest@test.com",
            "nullable": true,
            "maxLength": 255
          }
        }
      },
      "PaypalSessionTokenResponse": {
        "type": "object",
        "required": [
          "session_token"
        ],
        "properties": {
          "session_token": {
            "type": "string",
            "description": "The session token for PayPal"
          }
        }
      },
      "PhoneDetails": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "The contact number",
            "example": "9999999999",
            "nullable": true
          },
          "country_code": {
            "type": "string",
            "description": "The country code attached to the number",
            "example": "+1",
            "nullable": true
          }
        }
      },
      "PrimaryBusinessDetails": {
        "type": "object",
        "required": [
          "country",
          "business"
        ],
        "properties": {
          "country": {
            "$ref": "#/components/schemas/CountryAlpha2"
          },
          "business": {
            "type": "string",
            "example": "food"
          }
        }
      },
      "ProductType": {
        "type": "string",
        "enum": [
          "physical",
          "digital",
          "travel",
          "ride",
          "event",
          "accommodation"
        ]
      },
      "ProfileDefaultRoutingConfig": {
        "type": "object",
        "required": [
          "profile_id",
          "connectors"
        ],
        "properties": {
          "profile_id": {
            "type": "string"
          },
          "connectors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoutableConnectorChoice"
            }
          }
        }
      },
      "ProgramConnectorSelection": {
        "type": "object",
        "description": "The program, having a default connector selection and\na bunch of rules. Also can hold arbitrary metadata.",
        "required": [
          "defaultSelection",
          "rules",
          "metadata"
        ],
        "properties": {
          "defaultSelection": {
            "$ref": "#/components/schemas/ConnectorSelection"
          },
          "rules": {
            "$ref": "#/components/schemas/RuleConnectorSelection"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {}
          }
        }
      },
      "ReceiverDetails": {
        "type": "object",
        "required": [
          "amount_received"
        ],
        "properties": {
          "amount_received": {
            "type": "integer",
            "format": "int64",
            "description": "The amount received by receiver"
          },
          "amount_charged": {
            "type": "integer",
            "format": "int64",
            "description": "The amount charged by ACH",
            "nullable": true
          },
          "amount_remaining": {
            "type": "integer",
            "format": "int64",
            "description": "The amount remaining to be sent via ACH",
            "nullable": true
          }
        }
      },
      "ReconStatus": {
        "type": "string",
        "enum": [
          "not_requested",
          "requested",
          "active",
          "disabled"
        ]
      },
      "RedirectResponse": {
        "type": "object",
        "properties": {
          "param": {
            "type": "string",
            "nullable": true
          },
          "json_payload": {
            "type": "object",
            "nullable": true
          }
        }
      },
      "RefundListRequest": {
        "allOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/TimeRange"
              }
            ],
            "nullable": true
          },
          {
            "type": "object",
            "properties": {
              "payment_id": {
                "type": "string",
                "description": "The identifier for the payment",
                "nullable": true
              },
              "refund_id": {
                "type": "string",
                "description": "The identifier for the refund",
                "nullable": true
              },
              "profile_id": {
                "type": "string",
                "description": "The identifier for business profile",
                "nullable": true
              },
              "limit": {
                "type": "integer",
                "format": "int64",
                "description": "Limit on the number of objects to return",
                "nullable": true
              },
              "offset": {
                "type": "integer",
                "format": "int64",
                "description": "The starting point within a list of objects",
                "nullable": true
              },
              "connector": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "The list of connectors to filter refunds list",
                "nullable": true
              },
              "currency": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Currency"
                },
                "description": "The list of currencies to filter refunds list",
                "nullable": true
              },
              "refund_status": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RefundStatus"
                },
                "description": "The list of refund statuses to filter refunds list",
                "nullable": true
              }
            }
          }
        ]
      },
      "RefundListResponse": {
        "type": "object",
        "required": [
          "count",
          "total_count",
          "data"
        ],
        "properties": {
          "count": {
            "type": "integer",
            "description": "The number of refunds included in the list",
            "minimum": 0
          },
          "total_count": {
            "type": "integer",
            "format": "int64",
            "description": "The total number of refunds in the list"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RefundResponse"
            },
            "description": "The List of refund response object"
          }
        }
      },
      "RefundRequest": {
        "type": "object",
        "required": [
          "payment_id"
        ],
        "properties": {
          "payment_id": {
            "type": "string",
            "description": "The payment id against which refund is to be intiated",
            "example": "pay_mbabizu24mvu3mela5njyhpit4",
            "maxLength": 30,
            "minLength": 30
          },
          "refund_id": {
            "type": "string",
            "description": "Unique Identifier for the Refund. This is to ensure idempotency for multiple partial refunds initiated against the same payment. If this is not passed by the merchant, this field shall be auto generated and provided in the API response. It is recommended to generate uuid(v4) as the refund_id.",
            "example": "ref_mbabizu24mvu3mela5njyhpit4",
            "nullable": true,
            "maxLength": 30,
            "minLength": 30
          },
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "nullable": true,
            "maxLength": 255
          },
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "Total amount for which the refund is to be initiated. Amount for the payment in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc., If not provided, this will default to the full payment amount",
            "example": 6540,
            "nullable": true,
            "minimum": 100
          },
          "reason": {
            "type": "string",
            "description": "Reason for the refund. Often useful for displaying to users and your customer support executive. In case the payment went through Stripe, this field needs to be passed with one of these enums: `duplicate`, `fraudulent`, or `requested_by_customer`",
            "example": "Customer returned the product",
            "nullable": true,
            "maxLength": 255
          },
          "refund_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RefundType"
              }
            ],
            "default": "Instant",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "merchant_connector_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantConnectorDetailsWrap"
              }
            ],
            "nullable": true
          }
        }
      },
      "RefundResponse": {
        "type": "object",
        "required": [
          "refund_id",
          "payment_id",
          "amount",
          "currency",
          "status",
          "connector"
        ],
        "properties": {
          "refund_id": {
            "type": "string",
            "description": "Unique Identifier for the refund"
          },
          "payment_id": {
            "type": "string",
            "description": "The payment id against which refund is intiated"
          },
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "The refund amount, which should be less than or equal to the total payment amount. Amount for the payment in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc"
          },
          "currency": {
            "type": "string",
            "description": "The three-letter ISO currency code"
          },
          "status": {
            "$ref": "#/components/schemas/RefundStatus"
          },
          "reason": {
            "type": "string",
            "description": "An arbitrary string attached to the object. Often useful for displaying to users and your customer support executive",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object",
            "nullable": true
          },
          "error_message": {
            "type": "string",
            "description": "The error message",
            "nullable": true
          },
          "error_code": {
            "type": "string",
            "description": "The code for the error",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp at which refund is created",
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp at which refund is updated",
            "nullable": true
          },
          "connector": {
            "type": "string",
            "description": "The connector used for the refund and the corresponding payment",
            "example": "stripe"
          },
          "profile_id": {
            "type": "string",
            "description": "The id of business profile for this refund",
            "nullable": true
          },
          "merchant_connector_id": {
            "type": "string",
            "description": "The merchant_connector_id of the processor through which this payment went through",
            "nullable": true
          }
        }
      },
      "RefundStatus": {
        "type": "string",
        "description": "The status for refunds",
        "enum": [
          "succeeded",
          "failed",
          "pending",
          "review"
        ]
      },
      "RefundType": {
        "type": "string",
        "description": "To indicate whether to refund needs to be instant or scheduled",
        "enum": [
          "scheduled",
          "instant"
        ]
      },
      "RefundUpdateRequest": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "An arbitrary string attached to the object. Often useful for displaying to users and your customer support executive",
            "example": "Customer returned the product",
            "nullable": true,
            "maxLength": 255
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          }
        }
      },
      "RequestPaymentMethodTypes": {
        "type": "object",
        "required": [
          "payment_method_type",
          "recurring_enabled",
          "installment_payment_enabled"
        ],
        "properties": {
          "payment_method_type": {
            "$ref": "#/components/schemas/PaymentMethodType"
          },
          "payment_experience": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentExperience"
              }
            ],
            "nullable": true
          },
          "card_networks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CardNetwork"
            },
            "nullable": true
          },
          "accepted_currencies": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AcceptedCurrencies"
              }
            ],
            "nullable": true
          },
          "accepted_countries": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AcceptedCountries"
              }
            ],
            "nullable": true
          },
          "minimum_amount": {
            "type": "integer",
            "format": "int32",
            "description": "Minimum amount supported by the processor. To be represented in the lowest denomination of the target currency (For example, for USD it should be in cents)",
            "example": 1,
            "nullable": true
          },
          "maximum_amount": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum amount supported by the processor. To be represented in the lowest denomination of\nthe target currency (For example, for USD it should be in cents)",
            "example": 1313,
            "nullable": true
          },
          "recurring_enabled": {
            "type": "boolean",
            "description": "Boolean to enable recurring payments / mandates. Default is true.",
            "default": true,
            "example": false
          },
          "installment_payment_enabled": {
            "type": "boolean",
            "description": "Boolean to enable installment / EMI / BNPL payments. Default is true.",
            "default": true,
            "example": false
          }
        }
      },
      "RequestSurchargeDetails": {
        "type": "object",
        "required": [
          "surcharge_amount"
        ],
        "properties": {
          "surcharge_amount": {
            "type": "integer",
            "format": "int64"
          },
          "tax_amount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        }
      },
      "RequiredFieldInfo": {
        "type": "object",
        "description": "Required fields info used while listing the payment_method_data",
        "required": [
          "required_field",
          "display_name",
          "field_type"
        ],
        "properties": {
          "required_field": {
            "type": "string",
            "description": "Required field for a payment_method through a payment_method_type"
          },
          "display_name": {
            "type": "string",
            "description": "Display name of the required field in the front-end"
          },
          "field_type": {
            "$ref": "#/components/schemas/FieldType"
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "RetrieveApiKeyResponse": {
        "type": "object",
        "description": "The response body for retrieving an API Key.",
        "required": [
          "key_id",
          "merchant_id",
          "name",
          "prefix",
          "created",
          "expiration"
        ],
        "properties": {
          "key_id": {
            "type": "string",
            "description": "The identifier for the API Key.",
            "example": "5hEEqkgJUyuxgSKGArHA4mWSnX",
            "maxLength": 64
          },
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account.",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 64
          },
          "name": {
            "type": "string",
            "description": "The unique name for the API Key to help you identify it.",
            "example": "Sandbox integration key",
            "maxLength": 64
          },
          "description": {
            "type": "string",
            "description": "The description to provide more context about the API Key.",
            "example": "Key used by our developers to integrate with the sandbox environment",
            "nullable": true,
            "maxLength": 256
          },
          "prefix": {
            "type": "string",
            "description": "The first few characters of the plaintext API Key to help you identify it.",
            "maxLength": 64
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "The time at which the API Key was created.",
            "example": "2022-09-10T10:11:12Z"
          },
          "expiration": {
            "$ref": "#/components/schemas/ApiKeyExpiration"
          }
        }
      },
      "RetrievePaymentLinkRequest": {
        "type": "object",
        "properties": {
          "client_secret": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "RetrievePaymentLinkResponse": {
        "type": "object",
        "required": [
          "payment_link_id",
          "merchant_id",
          "link_to_pay",
          "amount",
          "created_at",
          "status"
        ],
        "properties": {
          "payment_link_id": {
            "type": "string"
          },
          "merchant_id": {
            "type": "string"
          },
          "link_to_pay": {
            "type": "string"
          },
          "amount": {
            "type": "integer",
            "format": "int64"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "expiry": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/PaymentLinkStatus"
          },
          "currency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Currency"
              }
            ],
            "nullable": true
          }
        }
      },
      "RetryAction": {
        "type": "string",
        "enum": [
          "manual_retry",
          "requeue"
        ]
      },
      "RevokeApiKeyResponse": {
        "type": "object",
        "description": "The response body for revoking an API Key.",
        "required": [
          "merchant_id",
          "key_id",
          "revoked"
        ],
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account.",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 64
          },
          "key_id": {
            "type": "string",
            "description": "The identifier for the API Key.",
            "example": "5hEEqkgJUyuxgSKGArHA4mWSnX",
            "maxLength": 64
          },
          "revoked": {
            "type": "boolean",
            "description": "Indicates whether the API key was revoked or not.",
            "example": "true"
          }
        }
      },
      "RewardData": {
        "type": "object",
        "required": [
          "merchant_id"
        ],
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The merchant ID with which we have to call the connector"
          }
        }
      },
      "RoutableChoiceKind": {
        "type": "string",
        "enum": [
          "OnlyConnector",
          "FullStruct"
        ]
      },
      "RoutableConnectorChoice": {
        "type": "object",
        "description": "Routable Connector chosen for a payment",
        "required": [
          "connector"
        ],
        "properties": {
          "connector": {
            "$ref": "#/components/schemas/RoutableConnectors"
          },
          "merchant_connector_id": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "RoutableConnectors": {
        "type": "string",
        "description": "Connectors eligible for payments routing",
        "enum": [
          "phonypay",
          "fauxpay",
          "pretendpay",
          "stripe_test",
          "adyen_test",
          "checkout_test",
          "paypal_test",
          "aci",
          "adyen",
          "airwallex",
          "authorizedotnet",
          "bankofamerica",
          "bitpay",
          "bambora",
          "bluesnap",
          "boku",
          "braintree",
          "cashtocode",
          "checkout",
          "coinbase",
          "cryptopay",
          "cybersource",
          "dlocal",
          "fiserv",
          "forte",
          "globalpay",
          "globepay",
          "gocardless",
          "helcim",
          "iatapay",
          "klarna",
          "mollie",
          "multisafepay",
          "nexinets",
          "nmi",
          "noon",
          "nuvei",
          "opennode",
          "payme",
          "paypal",
          "payu",
          "placetopay",
          "powertranz",
          "prophetpay",
          "rapyd",
          "riskified",
          "shift4",
          "signifyd",
          "square",
          "stax",
          "stripe",
          "trustpay",
          "tsys",
          "volt",
          "wise",
          "worldline",
          "worldpay",
          "zen"
        ]
      },
      "RoutingAlgorithm": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "type",
              "data"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "single"
                ]
              },
              "data": {
                "$ref": "#/components/schemas/RoutableConnectorChoice"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "data"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "priority"
                ]
              },
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoutableConnectorChoice"
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "data"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "volume_split"
                ]
              },
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ConnectorVolumeSplit"
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "data"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "advanced"
                ]
              },
              "data": {
                "$ref": "#/components/schemas/ProgramConnectorSelection"
              }
            }
          }
        ],
        "description": "Routing Algorithm kind",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "RoutingAlgorithmKind": {
        "type": "string",
        "enum": [
          "single",
          "priority",
          "volume_split",
          "advanced"
        ]
      },
      "RoutingConfigRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "algorithm": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RoutingAlgorithm"
              }
            ],
            "nullable": true
          },
          "profile_id": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "RoutingDictionary": {
        "type": "object",
        "required": [
          "merchant_id",
          "records"
        ],
        "properties": {
          "merchant_id": {
            "type": "string"
          },
          "active_id": {
            "type": "string",
            "nullable": true
          },
          "records": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoutingDictionaryRecord"
            }
          }
        }
      },
      "RoutingDictionaryRecord": {
        "type": "object",
        "required": [
          "id",
          "profile_id",
          "name",
          "kind",
          "description",
          "created_at",
          "modified_at"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "profile_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "kind": {
            "$ref": "#/components/schemas/RoutingAlgorithmKind"
          },
          "description": {
            "type": "string"
          },
          "created_at": {
            "type": "integer",
            "format": "int64"
          },
          "modified_at": {
            "type": "integer",
            "format": "int64"
          },
          "algorithm_for": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionType"
              }
            ],
            "nullable": true
          }
        }
      },
      "RoutingKind": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/RoutingDictionary"
          },
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoutingDictionaryRecord"
            }
          }
        ]
      },
      "RoutingRetrieveResponse": {
        "type": "object",
        "description": "Response of the retrieved routing configs for a merchant account",
        "properties": {
          "algorithm": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantRoutingAlgorithm"
              }
            ],
            "nullable": true
          }
        }
      },
      "RuleConnectorSelection": {
        "type": "object",
        "description": "Represents a rule\n\n```text\nrule_name: [stripe, adyen, checkout]\n{\npayment.method = card {\npayment.method.cardtype = (credit, debit) {\npayment.method.network = (amex, rupay, diners)\n}\n\npayment.method.cardtype = credit\n}\n}\n```",
        "required": [
          "name",
          "connectorSelection",
          "statements"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "connectorSelection": {
            "$ref": "#/components/schemas/ConnectorSelection"
          },
          "statements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IfStatement"
            }
          }
        }
      },
      "SamsungPayWalletData": {
        "type": "object",
        "required": [
          "token"
        ],
        "properties": {
          "token": {
            "type": "string",
            "description": "The encrypted payment token from Samsung"
          }
        }
      },
      "SdkInformation": {
        "type": "object",
        "required": [
          "sdk_app_id",
          "sdk_enc_data",
          "sdk_ephem_pub_key",
          "sdk_trans_id",
          "sdk_reference_number",
          "sdk_max_timeout"
        ],
        "properties": {
          "sdk_app_id": {
            "type": "string",
            "description": "Unique ID created on installations of the 3DS Requestor App on a Consumer Device"
          },
          "sdk_enc_data": {
            "type": "string",
            "description": "JWE Object containing data encrypted by the SDK for the DS to decrypt"
          },
          "sdk_ephem_pub_key": {
            "type": "object",
            "description": "Public key component of the ephemeral key pair generated by the 3DS SDK",
            "additionalProperties": {
              "type": "string"
            }
          },
          "sdk_trans_id": {
            "type": "string",
            "description": "Unique transaction identifier assigned by the 3DS SDK"
          },
          "sdk_reference_number": {
            "type": "string",
            "description": "Identifies the vendor and version for the 3DS SDK that is integrated in a 3DS Requestor App"
          },
          "sdk_max_timeout": {
            "type": "integer",
            "format": "int32",
            "description": "Indicates maximum amount of time in minutes",
            "minimum": 0
          }
        }
      },
      "SdkNextAction": {
        "type": "object",
        "required": [
          "next_action"
        ],
        "properties": {
          "next_action": {
            "$ref": "#/components/schemas/NextActionCall"
          }
        }
      },
      "SecretInfoToInitiateSdk": {
        "type": "object",
        "required": [
          "display",
          "payment"
        ],
        "properties": {
          "display": {
            "type": "string"
          },
          "payment": {
            "type": "string"
          }
        }
      },
      "SepaAndBacsBillingDetails": {
        "type": "object",
        "required": [
          "email",
          "name"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "The Email ID for SEPA and BACS billing",
            "example": "example@me.com"
          },
          "name": {
            "type": "string",
            "description": "The billing name for SEPA and BACS billing",
            "example": "Jane Doe"
          }
        }
      },
      "SepaBankTransfer": {
        "type": "object",
        "required": [
          "iban",
          "bic"
        ],
        "properties": {
          "bank_name": {
            "type": "string",
            "description": "Bank name",
            "example": "Deutsche Bank",
            "nullable": true
          },
          "bank_country_code": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CountryAlpha2"
              }
            ],
            "nullable": true
          },
          "bank_city": {
            "type": "string",
            "description": "Bank city",
            "example": "California",
            "nullable": true
          },
          "iban": {
            "type": "string",
            "description": "International Bank Account Number (iban) - used in many countries for identifying a bank along with it's customer.",
            "example": "DE89370400440532013000"
          },
          "bic": {
            "type": "string",
            "description": "[8 / 11 digits] Bank Identifier Code (bic) / Swift Code - used in many countries for identifying a bank and it's branches",
            "example": "HSBCGB2LXXX"
          }
        }
      },
      "SepaBankTransferInstructions": {
        "type": "object",
        "required": [
          "account_holder_name",
          "bic",
          "country",
          "iban"
        ],
        "properties": {
          "account_holder_name": {
            "type": "string",
            "example": "Jane Doe"
          },
          "bic": {
            "type": "string",
            "example": "1024419982"
          },
          "country": {
            "type": "string"
          },
          "iban": {
            "type": "string",
            "example": "123456789"
          }
        }
      },
      "SessionToken": {
        "oneOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/GpaySessionTokenResponse"
              },
              {
                "type": "object",
                "required": [
                  "wallet_name"
                ],
                "properties": {
                  "wallet_name": {
                    "type": "string",
                    "enum": [
                      "google_pay"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/KlarnaSessionTokenResponse"
              },
              {
                "type": "object",
                "required": [
                  "wallet_name"
                ],
                "properties": {
                  "wallet_name": {
                    "type": "string",
                    "enum": [
                      "klarna"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaypalSessionTokenResponse"
              },
              {
                "type": "object",
                "required": [
                  "wallet_name"
                ],
                "properties": {
                  "wallet_name": {
                    "type": "string",
                    "enum": [
                      "paypal"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApplepaySessionTokenResponse"
              },
              {
                "type": "object",
                "required": [
                  "wallet_name"
                ],
                "properties": {
                  "wallet_name": {
                    "type": "string",
                    "enum": [
                      "apple_pay"
                    ]
                  }
                }
              }
            ]
          },
          {
            "type": "object",
            "required": [
              "wallet_name"
            ],
            "properties": {
              "wallet_name": {
                "type": "string",
                "enum": [
                  "no_session_token_received"
                ]
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "wallet_name"
        }
      },
      "SessionTokenInfo": {
        "type": "object",
        "required": [
          "certificate",
          "certificate_keys",
          "merchant_identifier",
          "display_name",
          "initiative",
          "initiative_context"
        ],
        "properties": {
          "certificate": {
            "type": "string"
          },
          "certificate_keys": {
            "type": "string"
          },
          "merchant_identifier": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "initiative": {
            "type": "string"
          },
          "initiative_context": {
            "type": "string"
          }
        }
      },
      "StraightThroughAlgorithm": {
        "oneOf": [
          {
            "type": "object",
            "title": "Single",
            "required": [
              "type",
              "data"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "single"
                ]
              },
              "data": {
                "$ref": "#/components/schemas/RoutableConnectorChoice"
              }
            }
          },
          {
            "type": "object",
            "title": "Priority",
            "required": [
              "type",
              "data"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "priority"
                ]
              },
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoutableConnectorChoice"
                }
              }
            }
          },
          {
            "type": "object",
            "title": "VolumeSplit",
            "required": [
              "type",
              "data"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "volume_split"
                ]
              },
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ConnectorVolumeSplit"
                }
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "type"
        }
      },
      "SurchargeDetailsResponse": {
        "type": "object",
        "required": [
          "surcharge",
          "display_surcharge_amount",
          "display_tax_on_surcharge_amount",
          "display_total_surcharge_amount",
          "display_final_amount"
        ],
        "properties": {
          "surcharge": {
            "$ref": "#/components/schemas/SurchargeResponse"
          },
          "tax_on_surcharge": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SurchargePercentage"
              }
            ],
            "nullable": true
          },
          "display_surcharge_amount": {
            "type": "number",
            "format": "double",
            "description": "surcharge amount for this payment"
          },
          "display_tax_on_surcharge_amount": {
            "type": "number",
            "format": "double",
            "description": "tax on surcharge amount for this payment"
          },
          "display_total_surcharge_amount": {
            "type": "number",
            "format": "double",
            "description": "sum of display_surcharge_amount and display_tax_on_surcharge_amount"
          },
          "display_final_amount": {
            "type": "number",
            "format": "double",
            "description": "sum of original amount,"
          }
        }
      },
      "SurchargePercentage": {
        "type": "object",
        "required": [
          "percentage"
        ],
        "properties": {
          "percentage": {
            "type": "number",
            "format": "float"
          }
        }
      },
      "SurchargeResponse": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "type",
              "value"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "fixed"
                ]
              },
              "value": {
                "type": "integer",
                "format": "int64",
                "description": "Fixed Surcharge value"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "value"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "rate"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/SurchargePercentage"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "type"
        }
      },
      "SwishQrData": {
        "type": "object"
      },
      "ThirdPartySdkSessionResponse": {
        "type": "object",
        "required": [
          "secrets"
        ],
        "properties": {
          "secrets": {
            "$ref": "#/components/schemas/SecretInfoToInitiateSdk"
          }
        }
      },
      "ThreeDsCompletionIndicator": {
        "type": "string",
        "enum": [
          "Y",
          "N",
          "U"
        ]
      },
      "ThreeDsData": {
        "type": "object",
        "required": [
          "three_ds_authentication_url",
          "three_ds_authorize_url",
          "three_ds_method_details"
        ],
        "properties": {
          "three_ds_authentication_url": {
            "type": "string",
            "description": "ThreeDS authentication url - to initiate authentication"
          },
          "three_ds_authorize_url": {
            "type": "string",
            "description": "ThreeDS authorize url - to complete the payment authorization after authentication"
          },
          "three_ds_method_details": {
            "$ref": "#/components/schemas/ThreeDsMethodData"
          }
        }
      },
      "ThreeDsMethodData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "three_ds_method_data_submission",
              "three_ds_method_data",
              "three_ds_method_key"
            ],
            "properties": {
              "three_ds_method_data_submission": {
                "type": "boolean",
                "description": "Whether ThreeDS method data submission is required"
              },
              "three_ds_method_data": {
                "type": "string",
                "description": "ThreeDS method data"
              },
              "three_ds_method_url": {
                "type": "string",
                "description": "ThreeDS method url",
                "nullable": true
              },
              "three_ds_method_key": {
                "type": "string",
                "enum": [
                  "threeDSMethodData"
                ]
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "three_ds_method_key"
        }
      },
      "TimeRange": {
        "type": "object",
        "required": [
          "start_time"
        ],
        "properties": {
          "start_time": {
            "type": "string",
            "format": "date-time",
            "description": "The start time to filter payments list or to get list of filters. To get list of filters start time is needed to be passed"
          },
          "end_time": {
            "type": "string",
            "format": "date-time",
            "description": "The end time to filter payments list or to get list of filters. If not passed the default time is now",
            "nullable": true
          }
        }
      },
      "ToggleBlocklistResponse": {
        "type": "object",
        "required": [
          "blocklist_guard_status"
        ],
        "properties": {
          "blocklist_guard_status": {
            "type": "string"
          }
        }
      },
      "TouchNGoRedirection": {
        "type": "object"
      },
      "TransactionStatus": {
        "type": "string",
        "enum": [
          "Y",
          "N",
          "U",
          "A",
          "R",
          "C",
          "D",
          "I"
        ]
      },
      "TransactionType": {
        "type": "string",
        "enum": [
          "payment"
        ]
      },
      "UpdateApiKeyRequest": {
        "type": "object",
        "description": "The request body for updating an API Key.",
        "properties": {
          "name": {
            "type": "string",
            "description": "A unique name for the API Key to help you identify it.",
            "example": "Sandbox integration key",
            "nullable": true,
            "maxLength": 64
          },
          "description": {
            "type": "string",
            "description": "A description to provide more context about the API Key.",
            "example": "Key used by our developers to integrate with the sandbox environment",
            "nullable": true,
            "maxLength": 256
          },
          "expiration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiKeyExpiration"
              }
            ],
            "nullable": true
          }
        }
      },
      "UpiData": {
        "type": "object",
        "properties": {
          "vpa_id": {
            "type": "string",
            "example": "successtest@iata",
            "nullable": true
          }
        }
      },
      "ValueType": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "type",
              "value"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "number"
                ]
              },
              "value": {
                "type": "integer",
                "format": "int64",
                "description": "Represents a number literal"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "value"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "enum_variant"
                ]
              },
              "value": {
                "type": "string",
                "description": "Represents an enum variant"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "value"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "metadata_variant"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/MetadataValue"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "value"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "str_value"
                ]
              },
              "value": {
                "type": "string",
                "description": "Represents a arbitrary String value"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "value"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "number_array"
                ]
              },
              "value": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                },
                "description": "Represents an array of numbers. This is basically used for\n\"one of the given numbers\" operations\neg: payment.method.amount = (1, 2, 3)"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "value"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "enum_variant_array"
                ]
              },
              "value": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Similar to NumberArray but for enum variants\neg: payment.method.cardtype = (debit, credit)"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "value"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "number_comparison_array"
                ]
              },
              "value": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NumberComparison"
                },
                "description": "Like a number array but can include comparisons. Useful for\nconditions like \"500 < amount < 1000\"\neg: payment.amount = (> 500, < 1000)"
              }
            }
          }
        ],
        "description": "Represents a value in the DSL",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "VoucherData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "boleto"
            ],
            "properties": {
              "boleto": {
                "$ref": "#/components/schemas/BoletoVoucherData"
              }
            }
          },
          {
            "type": "string",
            "enum": [
              "efecty"
            ]
          },
          {
            "type": "string",
            "enum": [
              "pago_efectivo"
            ]
          },
          {
            "type": "string",
            "enum": [
              "red_compra"
            ]
          },
          {
            "type": "string",
            "enum": [
              "red_pagos"
            ]
          },
          {
            "type": "object",
            "required": [
              "alfamart"
            ],
            "properties": {
              "alfamart": {
                "$ref": "#/components/schemas/AlfamartVoucherData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "indomaret"
            ],
            "properties": {
              "indomaret": {
                "$ref": "#/components/schemas/IndomaretVoucherData"
              }
            }
          },
          {
            "type": "string",
            "enum": [
              "oxxo"
            ]
          },
          {
            "type": "object",
            "required": [
              "seven_eleven"
            ],
            "properties": {
              "seven_eleven": {
                "$ref": "#/components/schemas/JCSVoucherData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "lawson"
            ],
            "properties": {
              "lawson": {
                "$ref": "#/components/schemas/JCSVoucherData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "mini_stop"
            ],
            "properties": {
              "mini_stop": {
                "$ref": "#/components/schemas/JCSVoucherData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "family_mart"
            ],
            "properties": {
              "family_mart": {
                "$ref": "#/components/schemas/JCSVoucherData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "seicomart"
            ],
            "properties": {
              "seicomart": {
                "$ref": "#/components/schemas/JCSVoucherData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "pay_easy"
            ],
            "properties": {
              "pay_easy": {
                "$ref": "#/components/schemas/JCSVoucherData"
              }
            }
          }
        ]
      },
      "Wallet": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "paypal"
            ],
            "properties": {
              "paypal": {
                "$ref": "#/components/schemas/Paypal"
              }
            }
          }
        ]
      },
      "WalletData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "ali_pay_qr"
            ],
            "properties": {
              "ali_pay_qr": {
                "$ref": "#/components/schemas/AliPayQr"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "ali_pay_redirect"
            ],
            "properties": {
              "ali_pay_redirect": {
                "$ref": "#/components/schemas/AliPayRedirection"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "ali_pay_hk_redirect"
            ],
            "properties": {
              "ali_pay_hk_redirect": {
                "$ref": "#/components/schemas/AliPayHkRedirection"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "momo_redirect"
            ],
            "properties": {
              "momo_redirect": {
                "$ref": "#/components/schemas/MomoRedirection"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "kakao_pay_redirect"
            ],
            "properties": {
              "kakao_pay_redirect": {
                "$ref": "#/components/schemas/KakaoPayRedirection"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "go_pay_redirect"
            ],
            "properties": {
              "go_pay_redirect": {
                "$ref": "#/components/schemas/GoPayRedirection"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "gcash_redirect"
            ],
            "properties": {
              "gcash_redirect": {
                "$ref": "#/components/schemas/GcashRedirection"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "apple_pay"
            ],
            "properties": {
              "apple_pay": {
                "$ref": "#/components/schemas/ApplePayWalletData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "apple_pay_redirect"
            ],
            "properties": {
              "apple_pay_redirect": {
                "$ref": "#/components/schemas/ApplePayRedirectData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "apple_pay_third_party_sdk"
            ],
            "properties": {
              "apple_pay_third_party_sdk": {
                "$ref": "#/components/schemas/ApplePayThirdPartySdkData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "dana_redirect"
            ],
            "properties": {
              "dana_redirect": {
                "type": "object",
                "description": "Wallet data for DANA redirect flow"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "google_pay"
            ],
            "properties": {
              "google_pay": {
                "$ref": "#/components/schemas/GooglePayWalletData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "google_pay_redirect"
            ],
            "properties": {
              "google_pay_redirect": {
                "$ref": "#/components/schemas/GooglePayRedirectData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "google_pay_third_party_sdk"
            ],
            "properties": {
              "google_pay_third_party_sdk": {
                "$ref": "#/components/schemas/GooglePayThirdPartySdkData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "mb_way_redirect"
            ],
            "properties": {
              "mb_way_redirect": {
                "$ref": "#/components/schemas/MbWayRedirection"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "mobile_pay_redirect"
            ],
            "properties": {
              "mobile_pay_redirect": {
                "$ref": "#/components/schemas/MobilePayRedirection"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "paypal_redirect"
            ],
            "properties": {
              "paypal_redirect": {
                "$ref": "#/components/schemas/PaypalRedirection"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "paypal_sdk"
            ],
            "properties": {
              "paypal_sdk": {
                "$ref": "#/components/schemas/PayPalWalletData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "samsung_pay"
            ],
            "properties": {
              "samsung_pay": {
                "$ref": "#/components/schemas/SamsungPayWalletData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "twint_redirect"
            ],
            "properties": {
              "twint_redirect": {
                "type": "object",
                "description": "Wallet data for Twint Redirection"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "vipps_redirect"
            ],
            "properties": {
              "vipps_redirect": {
                "type": "object",
                "description": "Wallet data for Vipps Redirection"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "touch_n_go_redirect"
            ],
            "properties": {
              "touch_n_go_redirect": {
                "$ref": "#/components/schemas/TouchNGoRedirection"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "we_chat_pay_redirect"
            ],
            "properties": {
              "we_chat_pay_redirect": {
                "$ref": "#/components/schemas/WeChatPayRedirection"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "we_chat_pay_qr"
            ],
            "properties": {
              "we_chat_pay_qr": {
                "$ref": "#/components/schemas/WeChatPayQr"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "cashapp_qr"
            ],
            "properties": {
              "cashapp_qr": {
                "$ref": "#/components/schemas/CashappQr"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "swish_qr"
            ],
            "properties": {
              "swish_qr": {
                "$ref": "#/components/schemas/SwishQrData"
              }
            }
          }
        ]
      },
      "WeChatPay": {
        "type": "object"
      },
      "WeChatPayQr": {
        "type": "object"
      },
      "WeChatPayRedirection": {
        "type": "object"
      },
      "WebhookDetails": {
        "type": "object",
        "properties": {
          "webhook_version": {
            "type": "string",
            "description": "The version for Webhook",
            "example": "1.0.2",
            "nullable": true,
            "maxLength": 255
          },
          "webhook_username": {
            "type": "string",
            "description": "The user name for Webhook login",
            "example": "ekart_retail",
            "nullable": true,
            "maxLength": 255
          },
          "webhook_password": {
            "type": "string",
            "description": "The password for Webhook login",
            "example": "ekart@123",
            "nullable": true,
            "maxLength": 255
          },
          "webhook_url": {
            "type": "string",
            "description": "The url for the webhook endpoint",
            "example": "www.ekart.com/webhooks",
            "nullable": true
          },
          "payment_created_enabled": {
            "type": "boolean",
            "description": "If this property is true, a webhook message is posted whenever a new payment is created",
            "example": true,
            "nullable": true
          },
          "payment_succeeded_enabled": {
            "type": "boolean",
            "description": "If this property is true, a webhook message is posted whenever a payment is successful",
            "example": true,
            "nullable": true
          },
          "payment_failed_enabled": {
            "type": "boolean",
            "description": "If this property is true, a webhook message is posted whenever a payment fails",
            "example": true,
            "nullable": true
          }
        }
      }
    },
    "securitySchemes": {
      "admin_api_key": {
        "type": "apiKey",
        "in": "header",
        "name": "api-key",
        "description": "Admin API keys allow you to perform some privileged actions such as creating a merchant account and Merchant Connector account."
      },
      "api_key": {
        "type": "apiKey",
        "in": "header",
        "name": "api-key",
        "description": "Use the API key created under your merchant account from the HyperSwitch dashboard. API key is used to authenticate API requests from your merchant server only. Don't expose this key on a website or embed it in a mobile application."
      },
      "ephemeral_key": {
        "type": "apiKey",
        "in": "header",
        "name": "api-key",
        "description": "Ephemeral keys provide temporary access to singular data, such as access to a single customer object for a short period of time."
      },
      "publishable_key": {
        "type": "apiKey",
        "in": "header",
        "name": "api-key",
        "description": "Publishable keys are a type of keys that can be public and have limited scope of usage."
      }
    }
  },
  "tags": [
    {
      "name": "Merchant Account",
      "description": "Create and manage merchant accounts"
    },
    {
      "name": "Merchant Connector Account",
      "description": "Create and manage merchant connector accounts"
    },
    {
      "name": "Payments",
      "description": "Create and manage one-time payments, recurring payments and mandates"
    },
    {
      "name": "Refunds",
      "description": "Create and manage refunds for successful payments"
    },
    {
      "name": "Mandates",
      "description": "Manage mandates"
    },
    {
      "name": "Customers",
      "description": "Create and manage customers"
    },
    {
      "name": "Payment Methods",
      "description": "Create and manage payment methods of customers"
    },
    {
      "name": "Disputes",
      "description": "Manage disputes"
    },
    {
      "name": "API Key",
      "description": "Create and manage API Keys"
    },
    {
      "name": "Payouts",
      "description": "Create and manage payouts"
    },
    {
      "name": "payment link",
      "description": "Create payment link"
    },
    {
      "name": "Routing",
      "description": "Create and manage routing configurations"
    }
  ]
}