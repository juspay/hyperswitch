{
  "openapi": "3.0.3",
  "info": {
    "title": "Hyperswitch - API Documentation",
    "description": "\n## Get started\n\nHyperswitch provides a collection of APIs that enable you to process and manage payments.\nOur APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.\n\nYou can consume the APIs directly using your favorite HTTP/REST library.\n\nWe have a testing environment referred to \"sandbox\", which you can setup to test API calls without\naffecting production data.\nCurrently, our sandbox environment is live while our production environment is under development\nand will be available soon.\nYou can sign up on our Dashboard to get API keys to access Hyperswitch API.\n\n### Environment\n\nUse the following base URLs when making requests to the APIs:\n\n| Environment   |  Base URL                          |\n|---------------|------------------------------------|\n| Sandbox       | <https://sandbox.hyperswitch.io>   |\n| Production    | <https://api.hyperswitch.io>       |\n\n## Authentication\n\nWhen you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant\naccount, you are given a secret key (also referred as api-key) and a publishable key.\nYou may authenticate all API requests with Hyperswitch server by providing the appropriate key in\nthe request Authorization header.\n\n| Key             |  Description                                                                                  |\n|-----------------|-----------------------------------------------------------------------------------------------|\n| api-key         | Private key. Used to authenticate all API requests from your merchant server                  |\n| publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |\n\nNever share your secret api keys. Keep them guarded and secure.\n",
    "contact": {
      "name": "Hyperswitch Support",
      "url": "https://hyperswitch.io",
      "email": "hyperswitch@juspay.in"
    },
    "license": {
      "name": "Apache-2.0"
    },
    "version": "0.2.0"
  },
  "servers": [
    {
      "url": "https://sandbox.hyperswitch.io",
      "description": "Sandbox Environment"
    }
  ],
  "paths": {
    "/account/payment_methods": {
      "get": {
        "tags": [
          "Payment Methods"
        ],
        "summary": "List payment methods for a Merchant",
        "description": "List payment methods for a Merchant\n\nTo filter and list the applicable payment methods for a particular Merchant ID",
        "operationId": "List all Payment Methods for a Merchant",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "The unique identifier for the merchant account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accepted_country",
            "in": "query",
            "description": "The two-letter ISO currency code",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "accepted_currency",
            "in": "path",
            "description": "The three-letter ISO currency code",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Currency"
              }
            }
          },
          {
            "name": "minimum_amount",
            "in": "query",
            "description": "The minimum amount accepted for processing by the particular payment method.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "maximum_amount",
            "in": "query",
            "description": "The maximum amount amount accepted for processing by the particular payment method.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "recurring_payment_enabled",
            "in": "query",
            "description": "Indicates whether the payment method is eligible for recurring payments",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "installment_payment_enabled",
            "in": "query",
            "description": "Indicates whether the payment method is eligible for installment payments",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment Methods retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Data"
          },
          "404": {
            "description": "Payment Methods does not exist in records"
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "publishable_key": []
          }
        ]
      }
    },
    "/customer/{customer_id}/payment_methods": {
      "get": {
        "tags": [
          "Payment Methods"
        ],
        "summary": "List payment methods for a Customer",
        "description": "List payment methods for a Customer\n\nTo filter and list the applicable payment methods for a particular Customer ID",
        "operationId": "List all Payment Methods for a Customer",
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "description": "The unique identifier for the customer account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accepted_country",
            "in": "query",
            "description": "The two-letter ISO currency code",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "accepted_currency",
            "in": "path",
            "description": "The three-letter ISO currency code",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Currency"
              }
            }
          },
          {
            "name": "minimum_amount",
            "in": "query",
            "description": "The minimum amount accepted for processing by the particular payment method.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "maximum_amount",
            "in": "query",
            "description": "The maximum amount amount accepted for processing by the particular payment method.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "recurring_payment_enabled",
            "in": "query",
            "description": "Indicates whether the payment method is eligible for recurring payments",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "installment_payment_enabled",
            "in": "query",
            "description": "Indicates whether the payment method is eligible for installment payments",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment Methods retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerPaymentMethodsListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Data"
          },
          "404": {
            "description": "Payment Methods does not exist in records"
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "ephemeral_key": []
          }
        ]
      }
    },
    "/customers": {
      "post": {
        "tags": [
          "Customers"
        ],
        "summary": "Create Customer",
        "description": "Create Customer\n\nCreate a customer object and store the customer details to be reused for future payments. Incase the customer already exists in the system, this API will respond with the customer details.",
        "operationId": "Create a Customer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Customer Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/customers/{customer_id}": {
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Retrieve Customer",
        "description": "Retrieve Customer\n\nRetrieve a customer's details.",
        "operationId": "Retrieve a Customer",
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "description": "The unique identifier for the Customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer Retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResponse"
                }
              }
            }
          },
          "404": {
            "description": "Customer was not found"
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "ephemeral_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Customers"
        ],
        "summary": "Update Customer",
        "description": "Update Customer\n\nUpdates the customer's details in a customer object.",
        "operationId": "Update a Customer",
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "description": "The unique identifier for the Customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Customer was Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResponse"
                }
              }
            }
          },
          "404": {
            "description": "Customer was not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Customers"
        ],
        "summary": "Delete Customer",
        "description": "Delete Customer\n\nDelete a customer record.",
        "operationId": "Delete a Customer",
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "description": "The unique identifier for the Customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer was Deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerDeleteResponse"
                }
              }
            }
          },
          "404": {
            "description": "Customer was not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/disputes/list": {
      "get": {
        "tags": [
          "Disputes"
        ],
        "summary": "Disputes - List Disputes",
        "description": "Disputes - List Disputes",
        "operationId": "List Disputes",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of Dispute Objects to include in the response",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          },
          {
            "name": "dispute_status",
            "in": "query",
            "description": "The status of dispute",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/DisputeStatus"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "dispute_stage",
            "in": "query",
            "description": "The stage of dispute",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/DisputeStage"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "reason",
            "in": "query",
            "description": "The reason for dispute",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "connector",
            "in": "query",
            "description": "The connector linked to dispute",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "received_time",
            "in": "query",
            "description": "The time at which dispute is received",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "received_time.lt",
            "in": "query",
            "description": "Time less than the dispute received time",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "received_time.gt",
            "in": "query",
            "description": "Time greater than the dispute received time",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "received_time.lte",
            "in": "query",
            "description": "Time less than or equals to the dispute received time",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "received_time.gte",
            "in": "query",
            "description": "Time greater than or equals to the dispute received time",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The dispute list was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DisputeResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/disputes/{dispute_id}": {
      "get": {
        "tags": [
          "Disputes"
        ],
        "summary": "Disputes - Retrieve Dispute",
        "description": "Disputes - Retrieve Dispute",
        "operationId": "Retrieve a Dispute",
        "parameters": [
          {
            "name": "dispute_id",
            "in": "path",
            "description": "The identifier for dispute",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The dispute was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisputeResponse"
                }
              }
            }
          },
          "404": {
            "description": "Dispute does not exist in our records"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/mandates/revoke/{mandate_id}": {
      "post": {
        "tags": [
          "Mandates"
        ],
        "summary": "Mandates - Revoke Mandate",
        "description": "Mandates - Revoke Mandate\n\nRevoke a mandate",
        "operationId": "Revoke a Mandate",
        "parameters": [
          {
            "name": "mandate_id",
            "in": "path",
            "description": "The identifier for mandate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The mandate was revoked successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MandateRevokedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Mandate does not exist in our records"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/mandates/{mandate_id}": {
      "get": {
        "tags": [
          "Mandates"
        ],
        "summary": "Mandates - Retrieve Mandate",
        "description": "Mandates - Retrieve Mandate\n\nRetrieve a mandate",
        "operationId": "Retrieve a Mandate",
        "parameters": [
          {
            "name": "mandate_id",
            "in": "path",
            "description": "The identifier for mandate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The mandate was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MandateResponse"
                }
              }
            }
          },
          "404": {
            "description": "Mandate does not exist in our records"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/payment_methods": {
      "post": {
        "tags": [
          "Payment Methods"
        ],
        "summary": "PaymentMethods - Create",
        "description": "PaymentMethods - Create\n\nTo create a payment method against a customer object. In case of cards, this API could be used only by PCI compliant merchants",
        "operationId": "Create a Payment Method",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentMethodCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payment Method Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Data"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/payment_methods/{method_id}": {
      "get": {
        "tags": [
          "Payment Methods"
        ],
        "summary": "Payment Method - Retrieve",
        "description": "Payment Method - Retrieve\n\nTo retrieve a payment method",
        "operationId": "Retrieve a Payment method",
        "parameters": [
          {
            "name": "method_id",
            "in": "path",
            "description": "The unique identifier for the Payment Method",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment Method retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodResponse"
                }
              }
            }
          },
          "404": {
            "description": "Payment Method does not exist in records"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Payment Methods"
        ],
        "summary": "Payment Method - Update",
        "description": "Payment Method - Update\n\nTo update an existing payment method attached to a customer object. This API is useful for use cases such as updating the card number for expired cards to prevent discontinuity in recurring payments",
        "operationId": "Update a Payment method",
        "parameters": [
          {
            "name": "method_id",
            "in": "path",
            "description": "The unique identifier for the Payment Method",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentMethodUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payment Method updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodResponse"
                }
              }
            }
          },
          "404": {
            "description": "Payment Method does not exist in records"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Payment Methods"
        ],
        "summary": "Payment Method - Delete",
        "description": "Payment Method - Delete\n\nDelete payment method",
        "operationId": "Delete a Payment method",
        "parameters": [
          {
            "name": "method_id",
            "in": "path",
            "description": "The unique identifier for the Payment Method",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment Method deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodDeleteResponse"
                }
              }
            }
          },
          "404": {
            "description": "Payment Method does not exist in records"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/payments": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Payments - Create",
        "description": "Payments - Create\n\nTo process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture",
        "operationId": "Create a Payment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentsCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payment created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing Mandatory fields"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/payments/list": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Payments - List",
        "description": "Payments - List\n\nTo list the payments",
        "operationId": "List all Payments",
        "parameters": [
          {
            "name": "customer_id",
            "in": "query",
            "description": "The identifier for the customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "starting_after",
            "in": "query",
            "description": "A cursor for use in pagination, fetch the next list after some object",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ending_before",
            "in": "query",
            "description": "A cursor for use in pagination, fetch the previous list before some object",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit on the number of objects to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "created",
            "in": "query",
            "description": "The time at which payment is created",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "created_lt",
            "in": "query",
            "description": "Time less than the payment created time",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "created_gt",
            "in": "query",
            "description": "Time greater than the payment created time",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "created_lte",
            "in": "query",
            "description": "Time less than or equals to the payment created time",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "created_gte",
            "in": "query",
            "description": "Time greater than or equals to the payment created time",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Received payment list"
          },
          "404": {
            "description": "No payments found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/payments/session_tokens": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Payments - Session token",
        "description": "Payments - Session token\n\nTo create the session object or to get session token for wallets",
        "operationId": "Create Session tokens for a Payment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentsSessionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payment session object created or session token was retrieved from wallets",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsSessionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing mandatory fields"
          }
        },
        "security": [
          {
            "publishable_key": []
          }
        ]
      }
    },
    "/payments/{payment_id}": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Payments - Retrieve",
        "description": "Payments - Retrieve\n\nTo retrieve the properties of a Payment. This may be used to get the status of a previously initiated payment or next action for an ongoing payment",
        "operationId": "Retrieve a Payment",
        "parameters": [
          {
            "name": "payment_id",
            "in": "path",
            "description": "The identifier for payment",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentRetrieveBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Gets the payment with final status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsResponse"
                }
              }
            }
          },
          "404": {
            "description": "No payment found"
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "publishable_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Payments - Update",
        "description": "Payments - Update\n\nTo update the properties of a PaymentIntent object. This may include attaching a payment method, or attaching customer object or metadata fields after the Payment is created",
        "operationId": "Update a Payment",
        "parameters": [
          {
            "name": "payment_id",
            "in": "path",
            "description": "The identifier for payment",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payment updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing mandatory fields"
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "publishable_key": []
          }
        ]
      }
    },
    "/payments/{payment_id}/cancel": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Payments - Cancel",
        "description": "Payments - Cancel\n\nA Payment could can be cancelled when it is in one of these statuses: requires_payment_method, requires_capture, requires_confirmation, requires_customer_action",
        "operationId": "Cancel a Payment",
        "parameters": [
          {
            "name": "payment_id",
            "in": "path",
            "description": "The identifier for payment",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentsCancelRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payment canceled"
          },
          "400": {
            "description": "Missing mandatory fields"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/payments/{payment_id}/capture": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Payments - Capture",
        "description": "Payments - Capture\n\nTo capture the funds for an uncaptured payment",
        "operationId": "Capture a Payment",
        "parameters": [
          {
            "name": "payment_id",
            "in": "path",
            "description": "The identifier for payment",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentsCaptureRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payment captured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing mandatory fields"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/payments/{payment_id}/confirm": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Payments - Confirm",
        "description": "Payments - Confirm\n\nThis API is to confirm the payment request and forward payment to the payment processor. This API provides more granular control upon when the API is forwarded to the payment processor. Alternatively you can confirm the payment within the Payments Create API",
        "operationId": "Confirm a Payment",
        "parameters": [
          {
            "name": "payment_id",
            "in": "path",
            "description": "The identifier for payment",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payment confirmed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing mandatory fields"
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "publishable_key": []
          }
        ]
      }
    },
    "/refunds": {
      "post": {
        "tags": [
          "Refunds"
        ],
        "summary": "Refunds - Create",
        "description": "Refunds - Create\n\nTo create a refund against an already processed payment",
        "operationId": "Create a Refund",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Refund created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing Mandatory fields"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/refunds/list": {
      "post": {
        "tags": [
          "Refunds"
        ],
        "summary": "Refunds - List",
        "description": "Refunds - List\n\nTo list the refunds associated with a payment_id or with the merchant, if payment_id is not provided",
        "operationId": "List all Refunds",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundListRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of refunds",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/refunds/{refund_id}": {
      "get": {
        "tags": [
          "Refunds"
        ],
        "summary": "Refunds - Retrieve (GET)",
        "description": "Refunds - Retrieve (GET)\n\nTo retrieve the properties of a Refund. This may be used to get the status of a previously initiated payment or next action for an ongoing payment",
        "operationId": "Retrieve a Refund",
        "parameters": [
          {
            "name": "refund_id",
            "in": "path",
            "description": "The identifier for refund",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Refund retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundResponse"
                }
              }
            }
          },
          "404": {
            "description": "Refund does not exist in our records"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Refunds"
        ],
        "summary": "Refunds - Update",
        "description": "Refunds - Update\n\nTo update the properties of a Refund object. This may include attaching a reason for the refund or metadata fields",
        "operationId": "Update a Refund",
        "parameters": [
          {
            "name": "refund_id",
            "in": "path",
            "description": "The identifier for refund",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Refund updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing Mandatory fields"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AcceptanceType": {
        "type": "string",
        "enum": [
          "online",
          "offline"
        ]
      },
      "AcceptedCountries": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "type",
              "list"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "enable_only"
                ]
              },
              "list": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CountryAlpha2"
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "list"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "disable_only"
                ]
              },
              "list": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CountryAlpha2"
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "all_accepted"
                ]
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "type"
        }
      },
      "AcceptedCurrencies": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "type",
              "list"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "enable_only"
                ]
              },
              "list": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Currency"
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "list"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "disable_only"
                ]
              },
              "list": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Currency"
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "all_accepted"
                ]
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "type"
        }
      },
      "AchBillingDetails": {
        "type": "object",
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "The Email ID for ACH billing",
            "example": "example@me.com"
          }
        }
      },
      "AchTransfer": {
        "type": "object",
        "required": [
          "account_number",
          "bank_name",
          "routing_number",
          "swift_code"
        ],
        "properties": {
          "account_number": {
            "type": "string",
            "example": "122385736258"
          },
          "bank_name": {
            "type": "string"
          },
          "routing_number": {
            "type": "string",
            "example": "012"
          },
          "swift_code": {
            "type": "string",
            "example": "234"
          }
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressDetails"
              }
            ],
            "nullable": true
          },
          "phone": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneDetails"
              }
            ],
            "nullable": true
          }
        }
      },
      "AddressDetails": {
        "type": "object",
        "properties": {
          "city": {
            "type": "string",
            "description": "The address city",
            "example": "New York",
            "nullable": true,
            "maxLength": 50
          },
          "country": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CountryAlpha2"
              }
            ],
            "nullable": true
          },
          "line1": {
            "type": "string",
            "description": "The first line of the address",
            "example": "123, King Street",
            "nullable": true,
            "maxLength": 200
          },
          "line2": {
            "type": "string",
            "description": "The second line of the address",
            "example": "Powelson Avenue",
            "nullable": true,
            "maxLength": 50
          },
          "line3": {
            "type": "string",
            "description": "The third line of the address",
            "example": "Bridgewater",
            "nullable": true,
            "maxLength": 50
          },
          "zip": {
            "type": "string",
            "description": "The zip/postal code for the address",
            "example": "08807",
            "nullable": true,
            "maxLength": 50
          },
          "state": {
            "type": "string",
            "description": "The address state",
            "example": "New York",
            "nullable": true
          },
          "first_name": {
            "type": "string",
            "description": "The first name for the address",
            "example": "John",
            "nullable": true,
            "maxLength": 255
          },
          "last_name": {
            "type": "string",
            "description": "The last name for the address",
            "example": "Doe",
            "nullable": true,
            "maxLength": 255
          }
        }
      },
      "AirwallexData": {
        "type": "object",
        "properties": {
          "payload": {
            "type": "string",
            "description": "payload required by airwallex",
            "nullable": true
          }
        }
      },
      "AliPayHkRedirection": {
        "type": "object"
      },
      "AliPayRedirection": {
        "type": "object"
      },
      "AmountInfo": {
        "type": "object",
        "required": [
          "label",
          "amount"
        ],
        "properties": {
          "label": {
            "type": "string",
            "description": "The label must be the name of the merchant."
          },
          "type": {
            "type": "string",
            "description": "A value that indicates whether the line item(Ex: total, tax, discount, or grand total) is final or pending.",
            "nullable": true
          },
          "amount": {
            "type": "string",
            "description": "The total amount for the payment"
          }
        }
      },
      "ApiKeyExpiration": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "never"
            ]
          },
          {
            "type": "string",
            "format": "date-time"
          }
        ]
      },
      "ApplePayPaymentRequest": {
        "type": "object",
        "required": [
          "country_code",
          "currency_code",
          "total",
          "merchant_capabilities",
          "supported_networks"
        ],
        "properties": {
          "country_code": {
            "$ref": "#/components/schemas/CountryAlpha2"
          },
          "currency_code": {
            "$ref": "#/components/schemas/Currency"
          },
          "total": {
            "$ref": "#/components/schemas/AmountInfo"
          },
          "merchant_capabilities": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of merchant capabilities(ex: whether capable of 3ds or no-3ds)"
          },
          "supported_networks": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of supported networks"
          },
          "merchant_identifier": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ApplePayRedirectData": {
        "type": "object"
      },
      "ApplePaySessionResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ThirdPartySdkSessionResponse"
          },
          {
            "$ref": "#/components/schemas/NoThirdPartySdkSessionResponse"
          },
          {
            "type": "object",
            "default": null,
            "nullable": true
          }
        ]
      },
      "ApplePayThirdPartySdkData": {
        "type": "object"
      },
      "ApplePayWalletData": {
        "type": "object",
        "required": [
          "payment_data",
          "payment_method",
          "transaction_identifier"
        ],
        "properties": {
          "payment_data": {
            "type": "string",
            "description": "The payment data of Apple pay"
          },
          "payment_method": {
            "$ref": "#/components/schemas/ApplepayPaymentMethod"
          },
          "transaction_identifier": {
            "type": "string",
            "description": "The unique identifier for the transaction"
          }
        }
      },
      "ApplepayConnectorMetadataRequest": {
        "type": "object",
        "properties": {
          "session_token_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SessionTokenInfo"
              }
            ],
            "nullable": true
          }
        }
      },
      "ApplepayPaymentMethod": {
        "type": "object",
        "required": [
          "display_name",
          "network",
          "type"
        ],
        "properties": {
          "display_name": {
            "type": "string",
            "description": "The name to be displayed on Apple Pay button"
          },
          "network": {
            "type": "string",
            "description": "The network of the Apple pay payment method"
          },
          "type": {
            "type": "string",
            "description": "The type of the payment method"
          }
        }
      },
      "ApplepaySessionTokenResponse": {
        "type": "object",
        "required": [
          "session_token_data",
          "connector",
          "delayed_session_token",
          "sdk_next_action"
        ],
        "properties": {
          "session_token_data": {
            "$ref": "#/components/schemas/ApplePaySessionResponse"
          },
          "payment_request_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApplePayPaymentRequest"
              }
            ],
            "nullable": true
          },
          "connector": {
            "type": "string",
            "description": "The session token is w.r.t this connector"
          },
          "delayed_session_token": {
            "type": "boolean",
            "description": "Identifier for the delayed session response"
          },
          "sdk_next_action": {
            "$ref": "#/components/schemas/SdkNextAction"
          }
        }
      },
      "AuthenticationType": {
        "type": "string",
        "enum": [
          "three_ds",
          "no_three_ds"
        ]
      },
      "BacsBankTransferInstructions": {
        "type": "object",
        "required": [
          "account_holder_name",
          "account_number",
          "sort_code"
        ],
        "properties": {
          "account_holder_name": {
            "type": "string",
            "example": "Jane Doe"
          },
          "account_number": {
            "type": "string",
            "example": "10244123908"
          },
          "sort_code": {
            "type": "string",
            "example": "012"
          }
        }
      },
      "BankDebitBilling": {
        "type": "object",
        "required": [
          "name",
          "email"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The billing name for bank debits",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "description": "The billing email for bank debits",
            "example": "example@example.com"
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressDetails"
              }
            ],
            "nullable": true
          }
        }
      },
      "BankDebitData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "ach_bank_debit"
            ],
            "properties": {
              "ach_bank_debit": {
                "type": "object",
                "description": "Payment Method data for Ach bank debit",
                "required": [
                  "billing_details",
                  "account_number",
                  "routing_number",
                  "card_holder_name",
                  "bank_account_holder_name"
                ],
                "properties": {
                  "billing_details": {
                    "$ref": "#/components/schemas/BankDebitBilling"
                  },
                  "account_number": {
                    "type": "string",
                    "description": "Account number for ach bank debit payment",
                    "example": "000123456789"
                  },
                  "routing_number": {
                    "type": "string",
                    "description": "Routing number for ach bank debit payment",
                    "example": "110000000"
                  },
                  "card_holder_name": {
                    "type": "string",
                    "example": "John Test"
                  },
                  "bank_account_holder_name": {
                    "type": "string",
                    "example": "John Doe"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "sepa_bank_debit"
            ],
            "properties": {
              "sepa_bank_debit": {
                "type": "object",
                "required": [
                  "billing_details",
                  "iban",
                  "bank_account_holder_name"
                ],
                "properties": {
                  "billing_details": {
                    "$ref": "#/components/schemas/BankDebitBilling"
                  },
                  "iban": {
                    "type": "string",
                    "description": "International bank account number (iban) for SEPA",
                    "example": "DE89370400440532013000"
                  },
                  "bank_account_holder_name": {
                    "type": "string",
                    "description": "Owner name for bank debit",
                    "example": "A. Schneider"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "becs_bank_debit"
            ],
            "properties": {
              "becs_bank_debit": {
                "type": "object",
                "required": [
                  "billing_details",
                  "account_number",
                  "bsb_number"
                ],
                "properties": {
                  "billing_details": {
                    "$ref": "#/components/schemas/BankDebitBilling"
                  },
                  "account_number": {
                    "type": "string",
                    "description": "Account number for Becs payment method",
                    "example": "000123456"
                  },
                  "bsb_number": {
                    "type": "string",
                    "description": "Bank-State-Branch (bsb) number",
                    "example": "000000"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "bacs_bank_debit"
            ],
            "properties": {
              "bacs_bank_debit": {
                "type": "object",
                "required": [
                  "billing_details",
                  "account_number",
                  "sort_code",
                  "bank_account_holder_name"
                ],
                "properties": {
                  "billing_details": {
                    "$ref": "#/components/schemas/BankDebitBilling"
                  },
                  "account_number": {
                    "type": "string",
                    "description": "Account number for Bacs payment method",
                    "example": "00012345"
                  },
                  "sort_code": {
                    "type": "string",
                    "description": "Sort code for Bacs payment method",
                    "example": "108800"
                  },
                  "bank_account_holder_name": {
                    "type": "string",
                    "description": "holder name for bank debit",
                    "example": "A. Schneider"
                  }
                }
              }
            }
          }
        ]
      },
      "BankNames": {
        "type": "string",
        "description": "Name of banks supported by Hyperswitch",
        "enum": [
          "american_express",
          "bank_of_america",
          "barclays",
          "blik_p_s_p",
          "capital_one",
          "chase",
          "citi",
          "discover",
          "navy_federal_credit_union",
          "pentagon_federal_credit_union",
          "synchrony_bank",
          "wells_fargo",
          "abn_amro",
          "asn_bank",
          "bunq",
          "handelsbanken",
          "ing",
          "knab",
          "moneyou",
          "rabobank",
          "regiobank",
          "revolut",
          "sns_bank",
          "triodos_bank",
          "van_lanschot",
          "arzte_und_apotheker_bank",
          "austrian_anadi_bank_ag",
          "bank_austria",
          "bank99_ag",
          "bankhaus_carl_spangler",
          "bankhaus_schelhammer_und_schattera_ag",
          "bank_millennium",
          "bank_p_e_k_a_o_s_a",
          "bawag_psk_ag",
          "bks_bank_ag",
          "brull_kallmus_bank_ag",
          "btv_vier_lander_bank",
          "capital_bank_grawe_gruppe_ag",
          "ceska_sporitelna",
          "dolomitenbank",
          "easybank_ag",
          "e_platby_v_u_b",
          "erste_bank_und_sparkassen",
          "friesland_bank",
          "hypo_alpeadriabank_international_ag",
          "hypo_noe_lb_fur_niederosterreich_u_wien",
          "hypo_oberosterreich_salzburg_steiermark",
          "hypo_tirol_bank_ag",
          "hypo_vorarlberg_bank_ag",
          "hypo_bank_burgenland_aktiengesellschaft",
          "komercni_banka",
          "m_bank",
          "marchfelder_bank",
          "oberbank_ag",
          "osterreichische_arzte_und_apothekerbank",
          "pay_with_i_n_g",
          "place_z_i_p_k_o",
          "platnosc_online_karta_platnicza",
          "posojilnica_bank_e_gen",
          "postova_banka",
          "raiffeisen_bankengruppe_osterreich",
          "schelhammer_capital_bank_ag",
          "schoellerbank_ag",
          "sparda_bank_wien",
          "sporo_pay",
          "santander_przelew24",
          "tatra_pay",
          "viamo",
          "volksbank_gruppe",
          "volkskreditbank_ag",
          "vr_bank_braunau",
          "pay_with_alior_bank",
          "banki_spoldzielcze",
          "pay_with_inteligo",
          "b_n_p_paribas_poland",
          "bank_nowy_s_a",
          "credit_agricole",
          "pay_with_b_o_s",
          "pay_with_citi_handlowy",
          "pay_with_plus_bank",
          "toyota_bank",
          "velo_bank",
          "e_transfer_pocztowy24",
          "plus_bank",
          "etransfer_pocztowy24",
          "banki_spbdzielcze",
          "bank_nowy_bfg_sa",
          "getin_bank",
          "blik",
          "noble_pay",
          "idea_bank",
          "envelo_bank",
          "nest_przelew",
          "mbank_mtransfer",
          "inteligo",
          "pbac_z_ipko",
          "bnp_paribas",
          "bank_pekao_sa",
          "volkswagen_bank",
          "alior_bank",
          "boz"
        ]
      },
      "BankRedirectBilling": {
        "type": "object",
        "required": [
          "billing_name",
          "email"
        ],
        "properties": {
          "billing_name": {
            "type": "string",
            "description": "The name for which billing is issued",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "description": "The billing email for bank redirect",
            "example": "example@example.com"
          }
        }
      },
      "BankRedirectData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "bancontact_card"
            ],
            "properties": {
              "bancontact_card": {
                "type": "object",
                "required": [
                  "card_number",
                  "card_exp_month",
                  "card_exp_year",
                  "card_holder_name"
                ],
                "properties": {
                  "card_number": {
                    "type": "string",
                    "description": "The card number",
                    "example": "4242424242424242"
                  },
                  "card_exp_month": {
                    "type": "string",
                    "description": "The card's expiry month",
                    "example": "24"
                  },
                  "card_exp_year": {
                    "type": "string",
                    "description": "The card's expiry year",
                    "example": "24"
                  },
                  "card_holder_name": {
                    "type": "string",
                    "description": "The card holder's name",
                    "example": "John Test"
                  },
                  "billing_details": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BankRedirectBilling"
                      }
                    ],
                    "nullable": true
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "blik"
            ],
            "properties": {
              "blik": {
                "type": "object",
                "required": [
                  "blik_code"
                ],
                "properties": {
                  "blik_code": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "eps"
            ],
            "properties": {
              "eps": {
                "type": "object",
                "required": [
                  "billing_details",
                  "bank_name"
                ],
                "properties": {
                  "billing_details": {
                    "$ref": "#/components/schemas/BankRedirectBilling"
                  },
                  "bank_name": {
                    "$ref": "#/components/schemas/BankNames"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "giropay"
            ],
            "properties": {
              "giropay": {
                "type": "object",
                "required": [
                  "billing_details"
                ],
                "properties": {
                  "billing_details": {
                    "$ref": "#/components/schemas/BankRedirectBilling"
                  },
                  "bank_account_bic": {
                    "type": "string",
                    "description": "Bank account details for Giropay\nBank account bic code",
                    "nullable": true
                  },
                  "bank_account_iban": {
                    "type": "string",
                    "description": "Bank account iban",
                    "nullable": true
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "ideal"
            ],
            "properties": {
              "ideal": {
                "type": "object",
                "required": [
                  "billing_details",
                  "bank_name"
                ],
                "properties": {
                  "billing_details": {
                    "$ref": "#/components/schemas/BankRedirectBilling"
                  },
                  "bank_name": {
                    "$ref": "#/components/schemas/BankNames"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "interac"
            ],
            "properties": {
              "interac": {
                "type": "object",
                "required": [
                  "country",
                  "email"
                ],
                "properties": {
                  "country": {
                    "$ref": "#/components/schemas/CountryAlpha2"
                  },
                  "email": {
                    "type": "string",
                    "example": "john.doe@example.com"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "online_banking_czech_republic"
            ],
            "properties": {
              "online_banking_czech_republic": {
                "type": "object",
                "required": [
                  "issuer"
                ],
                "properties": {
                  "issuer": {
                    "$ref": "#/components/schemas/BankNames"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "online_banking_finland"
            ],
            "properties": {
              "online_banking_finland": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "nullable": true
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "online_banking_poland"
            ],
            "properties": {
              "online_banking_poland": {
                "type": "object",
                "required": [
                  "issuer"
                ],
                "properties": {
                  "issuer": {
                    "$ref": "#/components/schemas/BankNames"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "online_banking_slovakia"
            ],
            "properties": {
              "online_banking_slovakia": {
                "type": "object",
                "required": [
                  "issuer"
                ],
                "properties": {
                  "issuer": {
                    "$ref": "#/components/schemas/BankNames"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "przelewy24"
            ],
            "properties": {
              "przelewy24": {
                "type": "object",
                "required": [
                  "billing_details"
                ],
                "properties": {
                  "bank_name": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/BankNames"
                      }
                    ],
                    "nullable": true
                  },
                  "billing_details": {
                    "$ref": "#/components/schemas/BankRedirectBilling"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "sofort"
            ],
            "properties": {
              "sofort": {
                "type": "object",
                "required": [
                  "billing_details",
                  "country",
                  "preferred_language"
                ],
                "properties": {
                  "billing_details": {
                    "$ref": "#/components/schemas/BankRedirectBilling"
                  },
                  "country": {
                    "$ref": "#/components/schemas/CountryAlpha2"
                  },
                  "preferred_language": {
                    "type": "string",
                    "description": "The preferred language",
                    "example": "en"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "swish"
            ],
            "properties": {
              "swish": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "trustly"
            ],
            "properties": {
              "trustly": {
                "type": "object",
                "required": [
                  "country"
                ],
                "properties": {
                  "country": {
                    "$ref": "#/components/schemas/CountryAlpha2"
                  }
                }
              }
            }
          }
        ]
      },
      "BankTransferData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "ach_bank_transfer"
            ],
            "properties": {
              "ach_bank_transfer": {
                "type": "object",
                "required": [
                  "billing_details"
                ],
                "properties": {
                  "billing_details": {
                    "$ref": "#/components/schemas/AchBillingDetails"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "sepa_bank_transfer"
            ],
            "properties": {
              "sepa_bank_transfer": {
                "type": "object",
                "required": [
                  "billing_details",
                  "country"
                ],
                "properties": {
                  "billing_details": {
                    "$ref": "#/components/schemas/SepaAndBacsBillingDetails"
                  },
                  "country": {
                    "$ref": "#/components/schemas/CountryAlpha2"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "bacs_bank_transfer"
            ],
            "properties": {
              "bacs_bank_transfer": {
                "type": "object",
                "required": [
                  "billing_details"
                ],
                "properties": {
                  "billing_details": {
                    "$ref": "#/components/schemas/SepaAndBacsBillingDetails"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "multibanco_bank_transfer"
            ],
            "properties": {
              "multibanco_bank_transfer": {
                "type": "object",
                "required": [
                  "billing_details"
                ],
                "properties": {
                  "billing_details": {
                    "$ref": "#/components/schemas/MultibancoBillingDetails"
                  }
                }
              }
            }
          }
        ]
      },
      "BankTransferInstructions": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "ach_credit_transfer"
            ],
            "properties": {
              "ach_credit_transfer": {
                "$ref": "#/components/schemas/AchTransfer"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "sepa_bank_instructions"
            ],
            "properties": {
              "sepa_bank_instructions": {
                "$ref": "#/components/schemas/SepaBankTransferInstructions"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "bacs_bank_instructions"
            ],
            "properties": {
              "bacs_bank_instructions": {
                "$ref": "#/components/schemas/BacsBankTransferInstructions"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "multibanco"
            ],
            "properties": {
              "multibanco": {
                "$ref": "#/components/schemas/MultibancoTransferInstructions"
              }
            }
          }
        ]
      },
      "BankTransferNextStepsData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BankTransferInstructions"
          },
          {
            "type": "object",
            "required": [
              "receiver"
            ],
            "properties": {
              "receiver": {
                "$ref": "#/components/schemas/ReceiverDetails"
              }
            }
          }
        ]
      },
      "CaptureMethod": {
        "type": "string",
        "enum": [
          "automatic",
          "manual",
          "manual_multiple",
          "scheduled"
        ]
      },
      "Card": {
        "type": "object",
        "required": [
          "card_number",
          "card_exp_month",
          "card_exp_year",
          "card_holder_name",
          "card_cvc"
        ],
        "properties": {
          "card_number": {
            "type": "string",
            "description": "The card number",
            "example": "4242424242424242"
          },
          "card_exp_month": {
            "type": "string",
            "description": "The card's expiry month",
            "example": "24"
          },
          "card_exp_year": {
            "type": "string",
            "description": "The card's expiry year",
            "example": "24"
          },
          "card_holder_name": {
            "type": "string",
            "description": "The card holder's name",
            "example": "John Test"
          },
          "card_cvc": {
            "type": "string",
            "description": "The CVC number for the card",
            "example": "242"
          },
          "card_issuer": {
            "type": "string",
            "description": "The name of the issuer of card",
            "example": "chase",
            "nullable": true
          },
          "card_network": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardNetwork"
              }
            ],
            "nullable": true
          },
          "card_type": {
            "type": "string",
            "example": "CREDIT",
            "nullable": true
          },
          "card_issuing_country": {
            "type": "string",
            "example": "INDIA",
            "nullable": true
          },
          "bank_code": {
            "type": "string",
            "example": "JP_AMEX",
            "nullable": true
          },
          "nick_name": {
            "type": "string",
            "description": "The card holder's nick name",
            "example": "John Test",
            "nullable": true
          }
        }
      },
      "CardDetail": {
        "type": "object",
        "required": [
          "card_number",
          "card_exp_month",
          "card_exp_year",
          "card_holder_name"
        ],
        "properties": {
          "card_number": {
            "type": "string",
            "description": "Card Number",
            "example": "4111111145551142"
          },
          "card_exp_month": {
            "type": "string",
            "description": "Card Expiry Month",
            "example": "10"
          },
          "card_exp_year": {
            "type": "string",
            "description": "Card Expiry Year",
            "example": "25"
          },
          "card_holder_name": {
            "type": "string",
            "description": "Card Holder Name",
            "example": "John Doe"
          },
          "nick_name": {
            "type": "string",
            "description": "Card Holder's Nick Name",
            "example": "John Doe",
            "nullable": true
          }
        }
      },
      "CardDetailFromLocker": {
        "type": "object",
        "properties": {
          "scheme": {
            "type": "string",
            "nullable": true
          },
          "issuer_country": {
            "type": "string",
            "nullable": true
          },
          "last4_digits": {
            "type": "string",
            "nullable": true
          },
          "expiry_month": {
            "type": "string",
            "nullable": true
          },
          "expiry_year": {
            "type": "string",
            "nullable": true
          },
          "card_token": {
            "type": "string",
            "nullable": true
          },
          "card_holder_name": {
            "type": "string",
            "nullable": true
          },
          "card_fingerprint": {
            "type": "string",
            "nullable": true
          },
          "nick_name": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CardNetwork": {
        "type": "string",
        "enum": [
          "Visa",
          "Mastercard",
          "AmericanExpress",
          "JCB",
          "DinersClub",
          "Discover",
          "CartesBancaires",
          "UnionPay",
          "Interac",
          "RuPay",
          "Maestro"
        ]
      },
      "Connector": {
        "type": "string",
        "enum": [
          "aci",
          "adyen",
          "airwallex",
          "authorizedotnet",
          "bitpay",
          "bluesnap",
          "braintree",
          "cashtocode",
          "checkout",
          "coinbase",
          "cryptopay",
          "cybersource",
          "iatapay",
          "phonypay",
          "fauxpay",
          "pretendpay",
          "stripe_test",
          "adyen_test",
          "checkout_test",
          "paypal_test",
          "bambora",
          "dlocal",
          "fiserv",
          "forte",
          "globalpay",
          "klarna",
          "mollie",
          "multisafepay",
          "nexinets",
          "nmi",
          "noon",
          "nuvei",
          "opennode",
          "payme",
          "paypal",
          "payu",
          "rapyd",
          "shift4",
          "stripe",
          "trustpay",
          "worldline",
          "worldpay",
          "zen"
        ]
      },
      "ConnectorMetadata": {
        "type": "object",
        "properties": {
          "apple_pay": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApplepayConnectorMetadataRequest"
              }
            ],
            "nullable": true
          },
          "airwallex": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AirwallexData"
              }
            ],
            "nullable": true
          },
          "noon": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NoonData"
              }
            ],
            "nullable": true
          }
        }
      },
      "ConnectorType": {
        "type": "string",
        "enum": [
          "payment_processor",
          "payment_vas",
          "fin_operations",
          "fiz_operations",
          "networks",
          "banking_entities",
          "non_banking_finance"
        ]
      },
      "CountryAlpha2": {
        "type": "string",
        "enum": [
          "AF",
          "AX",
          "AL",
          "DZ",
          "AS",
          "AD",
          "AO",
          "AI",
          "AQ",
          "AG",
          "AR",
          "AM",
          "AW",
          "AU",
          "AT",
          "AZ",
          "BS",
          "BH",
          "BD",
          "BB",
          "BY",
          "BE",
          "BZ",
          "BJ",
          "BM",
          "BT",
          "BO",
          "BQ",
          "BA",
          "BW",
          "BV",
          "BR",
          "IO",
          "BN",
          "BG",
          "BF",
          "BI",
          "KH",
          "CM",
          "CA",
          "CV",
          "KY",
          "CF",
          "TD",
          "CL",
          "CN",
          "CX",
          "CC",
          "CO",
          "KM",
          "CG",
          "CD",
          "CK",
          "CR",
          "CI",
          "HR",
          "CU",
          "CW",
          "CY",
          "CZ",
          "DK",
          "DJ",
          "DM",
          "DO",
          "EC",
          "EG",
          "SV",
          "GQ",
          "ER",
          "EE",
          "ET",
          "FK",
          "FO",
          "FJ",
          "FI",
          "FR",
          "GF",
          "PF",
          "TF",
          "GA",
          "GM",
          "GE",
          "DE",
          "GH",
          "GI",
          "GR",
          "GL",
          "GD",
          "GP",
          "GU",
          "GT",
          "GG",
          "GN",
          "GW",
          "GY",
          "HT",
          "HM",
          "VA",
          "HN",
          "HK",
          "HU",
          "IS",
          "IN",
          "ID",
          "IR",
          "IQ",
          "IE",
          "IM",
          "IL",
          "IT",
          "JM",
          "JP",
          "JE",
          "JO",
          "KZ",
          "KE",
          "KI",
          "KP",
          "KR",
          "KW",
          "KG",
          "LA",
          "LV",
          "LB",
          "LS",
          "LR",
          "LY",
          "LI",
          "LT",
          "LU",
          "MO",
          "MK",
          "MG",
          "MW",
          "MY",
          "MV",
          "ML",
          "MT",
          "MH",
          "MQ",
          "MR",
          "MU",
          "YT",
          "MX",
          "FM",
          "MD",
          "MC",
          "MN",
          "ME",
          "MS",
          "MA",
          "MZ",
          "MM",
          "NA",
          "NR",
          "NP",
          "NL",
          "NC",
          "NZ",
          "NI",
          "NE",
          "NG",
          "NU",
          "NF",
          "MP",
          "NO",
          "OM",
          "PK",
          "PW",
          "PS",
          "PA",
          "PG",
          "PY",
          "PE",
          "PH",
          "PN",
          "PL",
          "PT",
          "PR",
          "QA",
          "RE",
          "RO",
          "RU",
          "RW",
          "BL",
          "SH",
          "KN",
          "LC",
          "MF",
          "PM",
          "VC",
          "WS",
          "SM",
          "ST",
          "SA",
          "SN",
          "RS",
          "SC",
          "SL",
          "SG",
          "SX",
          "SK",
          "SI",
          "SB",
          "SO",
          "ZA",
          "GS",
          "SS",
          "ES",
          "LK",
          "SD",
          "SR",
          "SJ",
          "SZ",
          "SE",
          "CH",
          "SY",
          "TW",
          "TJ",
          "TZ",
          "TH",
          "TL",
          "TG",
          "TK",
          "TO",
          "TT",
          "TN",
          "TR",
          "TM",
          "TC",
          "TV",
          "UG",
          "UA",
          "AE",
          "GB",
          "UM",
          "UY",
          "UZ",
          "VU",
          "VE",
          "VN",
          "VG",
          "VI",
          "WF",
          "EH",
          "YE",
          "ZM",
          "ZW",
          "US"
        ]
      },
      "CreateApiKeyRequest": {
        "type": "object",
        "description": "The request body for creating an API Key.",
        "required": [
          "name",
          "expiration"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "A unique name for the API Key to help you identify it.",
            "example": "Sandbox integration key",
            "maxLength": 64
          },
          "description": {
            "type": "string",
            "description": "A description to provide more context about the API Key.",
            "example": "Key used by our developers to integrate with the sandbox environment",
            "nullable": true,
            "maxLength": 256
          },
          "expiration": {
            "$ref": "#/components/schemas/ApiKeyExpiration"
          }
        }
      },
      "CreateApiKeyResponse": {
        "type": "object",
        "description": "The response body for creating an API Key.",
        "required": [
          "key_id",
          "merchant_id",
          "name",
          "api_key",
          "created",
          "expiration"
        ],
        "properties": {
          "key_id": {
            "type": "string",
            "description": "The identifier for the API Key.",
            "example": "5hEEqkgJUyuxgSKGArHA4mWSnX",
            "maxLength": 64
          },
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account.",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 64
          },
          "name": {
            "type": "string",
            "description": "The unique name for the API Key to help you identify it.",
            "example": "Sandbox integration key",
            "maxLength": 64
          },
          "description": {
            "type": "string",
            "description": "The description to provide more context about the API Key.",
            "example": "Key used by our developers to integrate with the sandbox environment",
            "nullable": true,
            "maxLength": 256
          },
          "api_key": {
            "type": "string",
            "description": "The plaintext API Key used for server-side API access. Ensure you store the API Key\nsecurely as you will not be able to see it again.",
            "maxLength": 128
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "The time at which the API Key was created.",
            "example": "2022-09-10T10:11:12Z"
          },
          "expiration": {
            "$ref": "#/components/schemas/ApiKeyExpiration"
          }
        }
      },
      "CryptoData": {
        "type": "object",
        "properties": {
          "pay_currency": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "Currency": {
        "type": "string",
        "enum": [
          "AED",
          "ALL",
          "AMD",
          "ANG",
          "ARS",
          "AUD",
          "AWG",
          "AZN",
          "BBD",
          "BDT",
          "BHD",
          "BMD",
          "BND",
          "BOB",
          "BRL",
          "BSD",
          "BWP",
          "BZD",
          "CAD",
          "CHF",
          "CNY",
          "COP",
          "CRC",
          "CUP",
          "CZK",
          "DKK",
          "DOP",
          "DZD",
          "EGP",
          "ETB",
          "EUR",
          "FJD",
          "GBP",
          "GHS",
          "GIP",
          "GMD",
          "GTQ",
          "GYD",
          "HKD",
          "HNL",
          "HRK",
          "HTG",
          "HUF",
          "IDR",
          "ILS",
          "INR",
          "JMD",
          "JOD",
          "JPY",
          "KES",
          "KGS",
          "KHR",
          "KRW",
          "KWD",
          "KYD",
          "KZT",
          "LAK",
          "LBP",
          "LKR",
          "LRD",
          "LSL",
          "MAD",
          "MDL",
          "MKD",
          "MMK",
          "MNT",
          "MOP",
          "MUR",
          "MVR",
          "MWK",
          "MXN",
          "MYR",
          "NAD",
          "NGN",
          "NIO",
          "NOK",
          "NPR",
          "NZD",
          "OMR",
          "PEN",
          "PGK",
          "PHP",
          "PKR",
          "PLN",
          "QAR",
          "RON",
          "RUB",
          "SAR",
          "SCR",
          "SEK",
          "SGD",
          "SLL",
          "SOS",
          "SSP",
          "SVC",
          "SZL",
          "THB",
          "TRY",
          "TTD",
          "TWD",
          "TZS",
          "USD",
          "UYU",
          "UZS",
          "YER",
          "ZAR"
        ]
      },
      "CustomerAcceptance": {
        "type": "object",
        "required": [
          "acceptance_type"
        ],
        "properties": {
          "acceptance_type": {
            "$ref": "#/components/schemas/AcceptanceType"
          },
          "accepted_at": {
            "type": "string",
            "format": "date-time",
            "description": "Specifying when the customer acceptance was provided",
            "example": "2022-09-10T10:11:12Z",
            "nullable": true
          },
          "online": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OnlineMandate"
              }
            ],
            "nullable": true
          }
        }
      },
      "CustomerDeleteResponse": {
        "type": "object",
        "required": [
          "customer_id",
          "customer_deleted",
          "address_deleted",
          "payment_methods_deleted"
        ],
        "properties": {
          "customer_id": {
            "type": "string",
            "description": "The identifier for the customer object",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "customer_deleted": {
            "type": "boolean",
            "description": "Whether customer was deleted or not",
            "example": false
          },
          "address_deleted": {
            "type": "boolean",
            "description": "Whether address was deleted or not",
            "example": false
          },
          "payment_methods_deleted": {
            "type": "boolean",
            "description": "Whether payment methods deleted or not",
            "example": false
          }
        }
      },
      "CustomerDetails": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The identifier for the customer."
          },
          "name": {
            "type": "string",
            "description": "The customer's name",
            "example": "John Doe",
            "nullable": true,
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "description": "The customer's email address",
            "example": "johntest@test.com",
            "nullable": true,
            "maxLength": 255
          },
          "phone": {
            "type": "string",
            "description": "The customer's phone number",
            "example": "3141592653",
            "nullable": true,
            "maxLength": 10
          },
          "phone_country_code": {
            "type": "string",
            "description": "The country code for the customer's phone number",
            "example": "+1",
            "nullable": true,
            "maxLength": 2
          }
        }
      },
      "CustomerPaymentMethod": {
        "type": "object",
        "required": [
          "payment_token",
          "customer_id",
          "payment_method",
          "recurring_enabled",
          "installment_payment_enabled"
        ],
        "properties": {
          "payment_token": {
            "type": "string",
            "description": "Token for payment method in temporary card locker which gets refreshed often",
            "example": "7ebf443f-a050-4067-84e5-e6f6d4800aef"
          },
          "customer_id": {
            "type": "string",
            "description": "The unique identifier of the customer.",
            "example": "cus_meowerunwiuwiwqw"
          },
          "payment_method": {
            "$ref": "#/components/schemas/PaymentMethodType"
          },
          "payment_method_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodType"
              }
            ],
            "nullable": true
          },
          "payment_method_issuer": {
            "type": "string",
            "description": "The name of the bank/ provider issuing the payment method to the end user",
            "example": "Citibank",
            "nullable": true
          },
          "payment_method_issuer_code": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodIssuerCode"
              }
            ],
            "nullable": true
          },
          "recurring_enabled": {
            "type": "boolean",
            "description": "Indicates whether the payment method is eligible for recurring payments",
            "example": true
          },
          "installment_payment_enabled": {
            "type": "boolean",
            "description": "Indicates whether the payment method is eligible for installment payments",
            "example": true
          },
          "payment_experience": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentExperience"
            },
            "description": "Type of payment experience enabled with the connector",
            "example": [
              "redirect_to_url"
            ],
            "nullable": true
          },
          "card": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardDetailFromLocker"
              }
            ],
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "A timestamp (ISO 8601 code) that determines when the customer was created",
            "example": "2023-01-18T11:04:09.922Z",
            "nullable": true
          }
        }
      },
      "CustomerPaymentMethodsListResponse": {
        "type": "object",
        "required": [
          "customer_payment_methods"
        ],
        "properties": {
          "customer_payment_methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerPaymentMethod"
            },
            "description": "List of payment methods for customer"
          }
        }
      },
      "CustomerRequest": {
        "type": "object",
        "description": "The customer details",
        "properties": {
          "customer_id": {
            "type": "string",
            "description": "The identifier for the customer object. If not provided the customer ID will be autogenerated.",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "name": {
            "type": "string",
            "description": "The customer's name",
            "example": "Jon Test",
            "nullable": true,
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "description": "The customer's email address",
            "example": "JonTest@test.com",
            "nullable": true,
            "maxLength": 255
          },
          "phone": {
            "type": "string",
            "description": "The customer's phone number",
            "example": "9999999999",
            "nullable": true,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "description": "An arbitrary string that you can attach to a customer object.",
            "example": "First Customer",
            "nullable": true,
            "maxLength": 255
          },
          "phone_country_code": {
            "type": "string",
            "description": "The country code for the customer phone number",
            "example": "+65",
            "nullable": true,
            "maxLength": 255
          },
          "address": {
            "type": "object",
            "description": "The address for the customer",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500\ncharacters long. Metadata is useful for storing additional, structured information on an\nobject.",
            "nullable": true
          }
        }
      },
      "CustomerResponse": {
        "type": "object",
        "required": [
          "customer_id",
          "created_at"
        ],
        "properties": {
          "customer_id": {
            "type": "string",
            "description": "The identifier for the customer object. If not provided the customer ID will be autogenerated.",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "name": {
            "type": "string",
            "description": "The customer's name",
            "example": "Jon Test",
            "nullable": true,
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "description": "The customer's email address",
            "example": "JonTest@test.com",
            "nullable": true,
            "maxLength": 255
          },
          "phone": {
            "type": "string",
            "description": "The customer's phone number",
            "example": "9999999999",
            "nullable": true,
            "maxLength": 255
          },
          "phone_country_code": {
            "type": "string",
            "description": "The country code for the customer phone number",
            "example": "+65",
            "nullable": true,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "description": "An arbitrary string that you can attach to a customer object.",
            "example": "First Customer",
            "nullable": true,
            "maxLength": 255
          },
          "address": {
            "type": "object",
            "description": "The address for the customer",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "A timestamp (ISO 8601 code) that determines when the customer was created",
            "example": "2023-01-18T11:04:09.922Z"
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500\ncharacters long. Metadata is useful for storing additional, structured information on an\nobject.",
            "nullable": true
          }
        }
      },
      "DisputeResponse": {
        "type": "object",
        "required": [
          "dispute_id",
          "payment_id",
          "attempt_id",
          "amount",
          "currency",
          "dispute_stage",
          "dispute_status",
          "connector",
          "connector_status",
          "connector_dispute_id",
          "created_at"
        ],
        "properties": {
          "dispute_id": {
            "type": "string",
            "description": "The identifier for dispute"
          },
          "payment_id": {
            "type": "string",
            "description": "The identifier for payment_intent"
          },
          "attempt_id": {
            "type": "string",
            "description": "The identifier for payment_attempt"
          },
          "amount": {
            "type": "string",
            "description": "The dispute amount"
          },
          "currency": {
            "type": "string",
            "description": "The three-letter ISO currency code"
          },
          "dispute_stage": {
            "$ref": "#/components/schemas/DisputeStage"
          },
          "dispute_status": {
            "$ref": "#/components/schemas/DisputeStatus"
          },
          "connector": {
            "type": "string",
            "description": "connector to which dispute is associated with"
          },
          "connector_status": {
            "type": "string",
            "description": "Status of the dispute sent by connector"
          },
          "connector_dispute_id": {
            "type": "string",
            "description": "Dispute id sent by connector"
          },
          "connector_reason": {
            "type": "string",
            "description": "Reason of dispute sent by connector",
            "nullable": true
          },
          "connector_reason_code": {
            "type": "string",
            "description": "Reason code of dispute sent by connector",
            "nullable": true
          },
          "challenge_required_by": {
            "type": "string",
            "format": "date-time",
            "description": "Evidence deadline of dispute sent by connector",
            "nullable": true
          },
          "connector_created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Dispute created time sent by connector",
            "nullable": true
          },
          "connector_updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Dispute updated time sent by connector",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which dispute is received"
          }
        }
      },
      "DisputeResponsePaymentsRetrieve": {
        "type": "object",
        "required": [
          "dispute_id",
          "dispute_stage",
          "dispute_status",
          "connector_status",
          "connector_dispute_id",
          "created_at"
        ],
        "properties": {
          "dispute_id": {
            "type": "string",
            "description": "The identifier for dispute"
          },
          "dispute_stage": {
            "$ref": "#/components/schemas/DisputeStage"
          },
          "dispute_status": {
            "$ref": "#/components/schemas/DisputeStatus"
          },
          "connector_status": {
            "type": "string",
            "description": "Status of the dispute sent by connector"
          },
          "connector_dispute_id": {
            "type": "string",
            "description": "Dispute id sent by connector"
          },
          "connector_reason": {
            "type": "string",
            "description": "Reason of dispute sent by connector",
            "nullable": true
          },
          "connector_reason_code": {
            "type": "string",
            "description": "Reason code of dispute sent by connector",
            "nullable": true
          },
          "challenge_required_by": {
            "type": "string",
            "format": "date-time",
            "description": "Evidence deadline of dispute sent by connector",
            "nullable": true
          },
          "connector_created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Dispute created time sent by connector",
            "nullable": true
          },
          "connector_updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Dispute updated time sent by connector",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which dispute is received"
          }
        }
      },
      "DisputeStage": {
        "type": "string",
        "enum": [
          "pre_dispute",
          "dispute",
          "pre_arbitration"
        ]
      },
      "DisputeStatus": {
        "type": "string",
        "enum": [
          "dispute_opened",
          "dispute_expired",
          "dispute_accepted",
          "dispute_cancelled",
          "dispute_challenged",
          "dispute_won",
          "dispute_lost"
        ]
      },
      "EphemeralKeyCreateResponse": {
        "type": "object",
        "required": [
          "customer_id",
          "created_at",
          "expires",
          "secret"
        ],
        "properties": {
          "customer_id": {
            "type": "string",
            "description": "customer_id to which this ephemeral key belongs to"
          },
          "created_at": {
            "type": "integer",
            "format": "int64",
            "description": "time at which this ephemeral key was created"
          },
          "expires": {
            "type": "integer",
            "format": "int64",
            "description": "time at which this ephemeral key would expire"
          },
          "secret": {
            "type": "string",
            "description": "ephemeral key"
          }
        }
      },
      "FeatureMetadata": {
        "type": "object",
        "properties": {
          "redirect_response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RedirectResponse"
              }
            ],
            "nullable": true
          }
        }
      },
      "FieldType": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "text"
            ]
          },
          {
            "type": "object",
            "required": [
              "drop_down"
            ],
            "properties": {
              "drop_down": {
                "type": "object",
                "required": [
                  "options"
                ],
                "properties": {
                  "options": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        ],
        "description": "Possible field type of required fields in payment_method_data"
      },
      "FrmAction": {
        "type": "string",
        "enum": [
          "cancel_txn",
          "auto_refund",
          "manual_review"
        ]
      },
      "FrmConfigs": {
        "type": "object",
        "description": "Details of FrmConfigs are mentioned here... it should be passed in payment connector create api call, and stored in merchant_connector_table",
        "required": [
          "frm_action",
          "frm_preferred_flow_type"
        ],
        "properties": {
          "frm_enabled_pms": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "frm_enabled_pm_types": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "frm_enabled_gateways": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "frm_action": {
            "$ref": "#/components/schemas/FrmAction"
          },
          "frm_preferred_flow_type": {
            "$ref": "#/components/schemas/FrmPreferredFlowTypes"
          }
        }
      },
      "FrmPreferredFlowTypes": {
        "type": "string",
        "enum": [
          "pre",
          "post"
        ]
      },
      "FutureUsage": {
        "type": "string",
        "enum": [
          "off_session",
          "on_session"
        ]
      },
      "GooglePayPaymentMethodInfo": {
        "type": "object",
        "required": [
          "card_network",
          "card_details"
        ],
        "properties": {
          "card_network": {
            "type": "string",
            "description": "The name of the card network"
          },
          "card_details": {
            "type": "string",
            "description": "The details of the card"
          }
        }
      },
      "GooglePayRedirectData": {
        "type": "object"
      },
      "GooglePaySessionResponse": {
        "type": "object",
        "required": [
          "merchant_info",
          "allowed_payment_methods",
          "transaction_info",
          "delayed_session_token",
          "connector",
          "sdk_next_action"
        ],
        "properties": {
          "merchant_info": {
            "$ref": "#/components/schemas/GpayMerchantInfo"
          },
          "allowed_payment_methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GpayAllowedPaymentMethods"
            },
            "description": "List of the allowed payment meythods"
          },
          "transaction_info": {
            "$ref": "#/components/schemas/GpayTransactionInfo"
          },
          "delayed_session_token": {
            "type": "boolean",
            "description": "Identifier for the delayed session response"
          },
          "connector": {
            "type": "string",
            "description": "The name of the connector"
          },
          "sdk_next_action": {
            "$ref": "#/components/schemas/SdkNextAction"
          },
          "secrets": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SecretInfoToInitiateSdk"
              }
            ],
            "nullable": true
          }
        }
      },
      "GooglePayThirdPartySdk": {
        "type": "object",
        "required": [
          "delayed_session_token",
          "connector",
          "sdk_next_action"
        ],
        "properties": {
          "delayed_session_token": {
            "type": "boolean",
            "description": "Identifier for the delayed session response"
          },
          "connector": {
            "type": "string",
            "description": "The name of the connector"
          },
          "sdk_next_action": {
            "$ref": "#/components/schemas/SdkNextAction"
          }
        }
      },
      "GooglePayThirdPartySdkData": {
        "type": "object"
      },
      "GooglePayWalletData": {
        "type": "object",
        "required": [
          "type",
          "description",
          "info",
          "tokenization_data"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of payment method"
          },
          "description": {
            "type": "string",
            "description": "User-facing message to describe the payment method that funds this transaction."
          },
          "info": {
            "$ref": "#/components/schemas/GooglePayPaymentMethodInfo"
          },
          "tokenization_data": {
            "$ref": "#/components/schemas/GpayTokenizationData"
          }
        }
      },
      "GpayAllowedMethodsParameters": {
        "type": "object",
        "required": [
          "allowed_auth_methods",
          "allowed_card_networks"
        ],
        "properties": {
          "allowed_auth_methods": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of allowed auth methods (ex: 3DS, No3DS, PAN_ONLY etc)"
          },
          "allowed_card_networks": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of allowed card networks (ex: AMEX,JCB etc)"
          }
        }
      },
      "GpayAllowedPaymentMethods": {
        "type": "object",
        "required": [
          "type",
          "parameters",
          "tokenization_specification"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of payment method"
          },
          "parameters": {
            "$ref": "#/components/schemas/GpayAllowedMethodsParameters"
          },
          "tokenization_specification": {
            "$ref": "#/components/schemas/GpayTokenizationSpecification"
          }
        }
      },
      "GpayMerchantInfo": {
        "type": "object",
        "required": [
          "merchant_name"
        ],
        "properties": {
          "merchant_name": {
            "type": "string",
            "description": "The name of the merchant"
          }
        }
      },
      "GpaySessionTokenResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/GooglePayThirdPartySdk"
          },
          {
            "$ref": "#/components/schemas/GooglePaySessionResponse"
          }
        ]
      },
      "GpayTokenParameters": {
        "type": "object",
        "required": [
          "gateway"
        ],
        "properties": {
          "gateway": {
            "type": "string",
            "description": "The name of the connector"
          },
          "gateway_merchant_id": {
            "type": "string",
            "description": "The merchant ID registered in the connector associated",
            "nullable": true
          },
          "stripe:version": {
            "type": "string",
            "nullable": true
          },
          "stripe:publishableKey": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "GpayTokenizationData": {
        "type": "object",
        "required": [
          "type",
          "token"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of the token"
          },
          "token": {
            "type": "string",
            "description": "Token generated for the wallet"
          }
        }
      },
      "GpayTokenizationSpecification": {
        "type": "object",
        "required": [
          "type",
          "parameters"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The token specification type(ex: PAYMENT_GATEWAY)"
          },
          "parameters": {
            "$ref": "#/components/schemas/GpayTokenParameters"
          }
        }
      },
      "GpayTransactionInfo": {
        "type": "object",
        "required": [
          "country_code",
          "currency_code",
          "total_price_status",
          "total_price"
        ],
        "properties": {
          "country_code": {
            "$ref": "#/components/schemas/CountryAlpha2"
          },
          "currency_code": {
            "$ref": "#/components/schemas/Currency"
          },
          "total_price_status": {
            "type": "string",
            "description": "The total price status (ex: 'FINAL')"
          },
          "total_price": {
            "type": "string",
            "description": "The total price"
          }
        }
      },
      "IntentStatus": {
        "type": "string",
        "enum": [
          "succeeded",
          "failed",
          "cancelled",
          "processing",
          "requires_customer_action",
          "requires_merchant_action",
          "requires_payment_method",
          "requires_confirmation",
          "requires_capture"
        ]
      },
      "KlarnaSessionTokenResponse": {
        "type": "object",
        "required": [
          "session_token",
          "session_id"
        ],
        "properties": {
          "session_token": {
            "type": "string",
            "description": "The session token for Klarna"
          },
          "session_id": {
            "type": "string",
            "description": "The identifier for the session"
          }
        }
      },
      "MandateAmountData": {
        "type": "object",
        "required": [
          "amount",
          "currency"
        ],
        "properties": {
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "The maximum amount to be debited for the mandate transaction",
            "example": 6540
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "description": "Specifying start date of the mandate",
            "example": "2022-09-10T00:00:00Z",
            "nullable": true
          },
          "end_date": {
            "type": "string",
            "format": "date-time",
            "description": "Specifying end date of the mandate",
            "example": "2023-09-10T23:59:59Z",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "Additional details required by mandate",
            "nullable": true
          }
        }
      },
      "MandateCardDetails": {
        "type": "object",
        "properties": {
          "last4_digits": {
            "type": "string",
            "description": "The last 4 digits of card",
            "nullable": true
          },
          "card_exp_month": {
            "type": "string",
            "description": "The expiry month of card",
            "nullable": true
          },
          "card_exp_year": {
            "type": "string",
            "description": "The expiry year of card",
            "nullable": true
          },
          "card_holder_name": {
            "type": "string",
            "description": "The card holder name",
            "nullable": true
          },
          "card_token": {
            "type": "string",
            "description": "The token from card locker",
            "nullable": true
          },
          "scheme": {
            "type": "string",
            "description": "The card scheme network for the particular card",
            "nullable": true
          },
          "issuer_country": {
            "type": "string",
            "description": "The country code in in which the card was issued",
            "nullable": true
          },
          "card_fingerprint": {
            "type": "string",
            "description": "A unique identifier alias to identify a particular card",
            "nullable": true
          }
        }
      },
      "MandateData": {
        "type": "object",
        "properties": {
          "customer_acceptance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomerAcceptance"
              }
            ],
            "nullable": true
          },
          "mandate_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MandateType"
              }
            ],
            "nullable": true
          }
        }
      },
      "MandateResponse": {
        "type": "object",
        "required": [
          "mandate_id",
          "status",
          "payment_method_id",
          "payment_method"
        ],
        "properties": {
          "mandate_id": {
            "type": "string",
            "description": "The identifier for mandate"
          },
          "status": {
            "$ref": "#/components/schemas/MandateStatus"
          },
          "payment_method_id": {
            "type": "string",
            "description": "The identifier for payment method"
          },
          "payment_method": {
            "type": "string",
            "description": "The payment method"
          },
          "card": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MandateCardDetails"
              }
            ],
            "nullable": true
          },
          "customer_acceptance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomerAcceptance"
              }
            ],
            "nullable": true
          }
        }
      },
      "MandateRevokedResponse": {
        "type": "object",
        "required": [
          "mandate_id",
          "status"
        ],
        "properties": {
          "mandate_id": {
            "type": "string",
            "description": "The identifier for mandate"
          },
          "status": {
            "$ref": "#/components/schemas/MandateStatus"
          }
        }
      },
      "MandateStatus": {
        "type": "string",
        "description": "The status of the mandate, which indicates whether it can be used to initiate a payment",
        "enum": [
          "active",
          "inactive",
          "pending",
          "revoked"
        ]
      },
      "MandateType": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "single_use"
            ],
            "properties": {
              "single_use": {
                "$ref": "#/components/schemas/MandateAmountData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "multi_use"
            ],
            "properties": {
              "multi_use": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MandateAmountData"
                  }
                ],
                "nullable": true
              }
            }
          }
        ]
      },
      "MbWayRedirection": {
        "type": "object",
        "required": [
          "telephone_number"
        ],
        "properties": {
          "telephone_number": {
            "type": "string",
            "description": "Telephone number of the shopper. Should be Portuguese phone number."
          }
        }
      },
      "MerchantAccountCreate": {
        "type": "object",
        "required": [
          "merchant_id"
        ],
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "merchant_name": {
            "type": "string",
            "description": "Name of the Merchant Account",
            "example": "NewAge Retailer",
            "nullable": true
          },
          "merchant_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantDetails"
              }
            ],
            "nullable": true
          },
          "return_url": {
            "type": "string",
            "description": "The URL to redirect after the completion of the operation",
            "example": "https://www.example.com/success",
            "nullable": true,
            "maxLength": 255
          },
          "webhook_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WebhookDetails"
              }
            ],
            "nullable": true
          },
          "routing_algorithm": {
            "type": "object",
            "description": "The routing algorithm to be used for routing payments to desired connectors",
            "nullable": true
          },
          "sub_merchants_enabled": {
            "type": "boolean",
            "description": "A boolean value to indicate if the merchant is a sub-merchant under a master or a parent merchant. By default, its value is false.",
            "default": false,
            "example": false,
            "nullable": true
          },
          "parent_merchant_id": {
            "type": "string",
            "description": "Refers to the Parent Merchant ID if the merchant being created is a sub-merchant",
            "example": "xkkdf909012sdjki2dkh5sdf",
            "nullable": true,
            "maxLength": 255
          },
          "enable_payment_response_hash": {
            "type": "boolean",
            "description": "A boolean value to indicate if payment response hash needs to be enabled",
            "default": false,
            "example": true,
            "nullable": true
          },
          "payment_response_hash_key": {
            "type": "string",
            "description": "Refers to the hash key used for payment response",
            "nullable": true
          },
          "redirect_to_merchant_with_http_post": {
            "type": "boolean",
            "description": "A boolean value to indicate if redirect to merchant with http post needs to be enabled",
            "default": false,
            "example": true,
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "publishable_key": {
            "type": "string",
            "description": "API key that will be used for server side API access",
            "example": "AH3423bkjbkjdsfbkj",
            "nullable": true
          },
          "locker_id": {
            "type": "string",
            "description": "An identifier for the vault used to store payment method information.",
            "example": "locker_abc123",
            "nullable": true
          },
          "primary_business_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PrimaryBusinessDetails"
              }
            ],
            "nullable": true
          },
          "frm_routing_algorithm": {
            "type": "object",
            "description": "The frm routing algorithm to be used for routing payments to desired FRM's",
            "nullable": true
          },
          "intent_fulfillment_time": {
            "type": "integer",
            "format": "int32",
            "description": "Will be used to expire client secret after certain amount of time to be supplied in seconds\n(900) for 15 mins",
            "example": 900,
            "nullable": true,
            "minimum": 0.0
          }
        }
      },
      "MerchantAccountDeleteResponse": {
        "type": "object",
        "required": [
          "merchant_id",
          "deleted"
        ],
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "deleted": {
            "type": "boolean",
            "description": "If the connector is deleted or not",
            "example": false
          }
        }
      },
      "MerchantAccountResponse": {
        "type": "object",
        "required": [
          "merchant_id",
          "enable_payment_response_hash",
          "redirect_to_merchant_with_http_post",
          "primary_business_details"
        ],
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "merchant_name": {
            "type": "string",
            "description": "Name of the Merchant Account",
            "example": "NewAge Retailer",
            "nullable": true
          },
          "return_url": {
            "type": "string",
            "description": "The URL to redirect after the completion of the operation",
            "example": "https://www.example.com/success",
            "nullable": true,
            "maxLength": 255
          },
          "enable_payment_response_hash": {
            "type": "boolean",
            "description": "A boolean value to indicate if payment response hash needs to be enabled",
            "default": false,
            "example": true
          },
          "payment_response_hash_key": {
            "type": "string",
            "description": "Refers to the Parent Merchant ID if the merchant being created is a sub-merchant",
            "example": "xkkdf909012sdjki2dkh5sdf",
            "nullable": true,
            "maxLength": 255
          },
          "redirect_to_merchant_with_http_post": {
            "type": "boolean",
            "description": "A boolean value to indicate if redirect to merchant with http post needs to be enabled",
            "default": false,
            "example": true
          },
          "merchant_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantDetails"
              }
            ],
            "nullable": true
          },
          "webhook_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WebhookDetails"
              }
            ],
            "nullable": true
          },
          "routing_algorithm": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RoutingAlgorithm"
              }
            ],
            "nullable": true
          },
          "sub_merchants_enabled": {
            "type": "boolean",
            "description": "A boolean value to indicate if the merchant is a sub-merchant under a master or a parent merchant. By default, its value is false.",
            "default": false,
            "example": false,
            "nullable": true
          },
          "parent_merchant_id": {
            "type": "string",
            "description": "Refers to the Parent Merchant ID if the merchant being created is a sub-merchant",
            "example": "xkkdf909012sdjki2dkh5sdf",
            "nullable": true,
            "maxLength": 255
          },
          "publishable_key": {
            "type": "string",
            "description": "API key that will be used for server side API access",
            "example": "AH3423bkjbkjdsfbkj",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "locker_id": {
            "type": "string",
            "description": "An identifier for the vault used to store payment method information.",
            "example": "locker_abc123",
            "nullable": true
          },
          "primary_business_details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrimaryBusinessDetails"
            },
            "description": "Default business details for connector routing"
          },
          "frm_routing_algorithm": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RoutingAlgorithm"
              }
            ],
            "nullable": true
          },
          "intent_fulfillment_time": {
            "type": "integer",
            "format": "int64",
            "description": "Will be used to expire client secret after certain amount of time to be supplied in seconds\n(900) for 15 mins",
            "nullable": true
          }
        }
      },
      "MerchantAccountUpdate": {
        "type": "object",
        "required": [
          "merchant_id"
        ],
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "merchant_name": {
            "type": "string",
            "description": "Name of the Merchant Account",
            "example": "NewAge Retailer",
            "nullable": true
          },
          "merchant_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantDetails"
              }
            ],
            "nullable": true
          },
          "return_url": {
            "type": "string",
            "description": "The URL to redirect after the completion of the operation",
            "example": "https://www.example.com/success",
            "nullable": true,
            "maxLength": 255
          },
          "webhook_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WebhookDetails"
              }
            ],
            "nullable": true
          },
          "routing_algorithm": {
            "type": "object",
            "description": "The routing algorithm to be used for routing payments to desired connectors",
            "nullable": true
          },
          "sub_merchants_enabled": {
            "type": "boolean",
            "description": "A boolean value to indicate if the merchant is a sub-merchant under a master or a parent merchant. By default, its value is false.",
            "default": false,
            "example": false,
            "nullable": true
          },
          "parent_merchant_id": {
            "type": "string",
            "description": "Refers to the Parent Merchant ID if the merchant being created is a sub-merchant",
            "example": "xkkdf909012sdjki2dkh5sdf",
            "nullable": true,
            "maxLength": 255
          },
          "enable_payment_response_hash": {
            "type": "boolean",
            "description": "A boolean value to indicate if payment response hash needs to be enabled",
            "default": false,
            "example": true,
            "nullable": true
          },
          "payment_response_hash_key": {
            "type": "string",
            "description": "Refers to the hash key used for payment response",
            "nullable": true
          },
          "redirect_to_merchant_with_http_post": {
            "type": "boolean",
            "description": "A boolean value to indicate if redirect to merchant with http post needs to be enabled",
            "default": false,
            "example": true,
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "publishable_key": {
            "type": "string",
            "description": "API key that will be used for server side API access",
            "example": "AH3423bkjbkjdsfbkj",
            "nullable": true
          },
          "locker_id": {
            "type": "string",
            "description": "An identifier for the vault used to store payment method information.",
            "example": "locker_abc123",
            "nullable": true
          },
          "primary_business_details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrimaryBusinessDetails"
            },
            "description": "Default business details for connector routing",
            "nullable": true
          },
          "frm_routing_algorithm": {
            "type": "object",
            "description": "The frm routing algorithm to be used for routing payments to desired FRM's",
            "nullable": true
          },
          "intent_fulfillment_time": {
            "type": "integer",
            "format": "int32",
            "description": "Will be used to expire client secret after certain amount of time to be supplied in seconds\n(900) for 15 mins",
            "nullable": true,
            "minimum": 0.0
          }
        }
      },
      "MerchantConnectorCreate": {
        "type": "object",
        "description": "Create a new Merchant Connector for the merchant account. The connector could be a payment processor / facilitator / acquirer or specialized services like Fraud / Accounting etc.\"",
        "required": [
          "connector_type",
          "connector_name",
          "connector_label"
        ],
        "properties": {
          "connector_type": {
            "$ref": "#/components/schemas/ConnectorType"
          },
          "connector_name": {
            "$ref": "#/components/schemas/Connector"
          },
          "connector_label": {
            "type": "string",
            "example": "stripe_US_travel"
          },
          "merchant_connector_id": {
            "type": "string",
            "description": "Unique ID of the connector",
            "example": "mca_5apGeP94tMts6rg3U3kR",
            "nullable": true
          },
          "connector_account_details": {
            "type": "object",
            "description": "Account details of the Connector. You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "test_mode": {
            "type": "boolean",
            "description": "A boolean value to indicate if the connector is in Test mode. By default, its value is false.",
            "default": false,
            "example": false,
            "nullable": true
          },
          "disabled": {
            "type": "boolean",
            "description": "A boolean value to indicate if the connector is disabled. By default, its value is false.",
            "default": false,
            "example": false,
            "nullable": true
          },
          "payment_methods_enabled": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodsEnabled"
            },
            "description": "Refers to the Parent Merchant ID if the merchant being created is a sub-merchant",
            "example": [
              {
                "payment_method": "wallet",
                "payment_method_types": [
                  "upi_collect",
                  "upi_intent"
                ],
                "payment_method_issuers": [
                  "labore magna ipsum",
                  "aute"
                ],
                "payment_schemes": [
                  "Discover",
                  "Discover"
                ],
                "accepted_currencies": {
                  "type": "enable_only",
                  "list": [
                    "USD",
                    "EUR"
                  ]
                },
                "accepted_countries": {
                  "type": "disable_only",
                  "list": [
                    "FR",
                    "DE",
                    "IN"
                  ]
                },
                "minimum_amount": 1,
                "maximum_amount": 68607706,
                "recurring_enabled": true,
                "installment_payment_enabled": true
              }
            ],
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "frm_configs": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FrmConfigs"
              }
            ],
            "nullable": true
          },
          "business_country": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CountryAlpha2"
              }
            ],
            "nullable": true
          },
          "business_label": {
            "type": "string",
            "nullable": true
          },
          "business_sub_label": {
            "type": "string",
            "description": "Business Sub label of the merchant",
            "example": "chase",
            "nullable": true
          }
        }
      },
      "MerchantConnectorDeleteResponse": {
        "type": "object",
        "required": [
          "merchant_id",
          "merchant_connector_id",
          "deleted"
        ],
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "merchant_connector_id": {
            "type": "string",
            "description": "Unique ID of the connector",
            "example": "mca_5apGeP94tMts6rg3U3kR"
          },
          "deleted": {
            "type": "boolean",
            "description": "If the connector is deleted or not",
            "example": false
          }
        }
      },
      "MerchantConnectorDetails": {
        "type": "object",
        "properties": {
          "connector_account_details": {
            "type": "object",
            "description": "Account details of the Connector. You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          }
        }
      },
      "MerchantConnectorDetailsWrap": {
        "type": "object",
        "required": [
          "creds_identifier"
        ],
        "properties": {
          "creds_identifier": {
            "type": "string",
            "description": "Creds Identifier is to uniquely identify the credentials. Do not send any sensitive info in this field. And do not send the string \"null\"."
          },
          "encoded_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantConnectorDetails"
              }
            ],
            "nullable": true
          }
        }
      },
      "MerchantConnectorId": {
        "type": "object",
        "required": [
          "merchant_id",
          "merchant_connector_id"
        ],
        "properties": {
          "merchant_id": {
            "type": "string"
          },
          "merchant_connector_id": {
            "type": "string"
          }
        }
      },
      "MerchantConnectorResponse": {
        "type": "object",
        "description": "Response of creating a new Merchant Connector for the merchant account.\"",
        "required": [
          "connector_type",
          "connector_name",
          "connector_label",
          "merchant_connector_id",
          "business_country",
          "business_label"
        ],
        "properties": {
          "connector_type": {
            "$ref": "#/components/schemas/ConnectorType"
          },
          "connector_name": {
            "type": "string",
            "description": "Name of the Connector",
            "example": "stripe"
          },
          "connector_label": {
            "type": "string",
            "example": "stripe_US_travel"
          },
          "merchant_connector_id": {
            "type": "string",
            "description": "Unique ID of the connector",
            "example": "mca_5apGeP94tMts6rg3U3kR"
          },
          "connector_account_details": {
            "type": "object",
            "description": "Account details of the Connector. You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "test_mode": {
            "type": "boolean",
            "description": "A boolean value to indicate if the connector is in Test mode. By default, its value is false.",
            "default": false,
            "example": false,
            "nullable": true
          },
          "disabled": {
            "type": "boolean",
            "description": "A boolean value to indicate if the connector is disabled. By default, its value is false.",
            "default": false,
            "example": false,
            "nullable": true
          },
          "payment_methods_enabled": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodsEnabled"
            },
            "description": "Refers to the Parent Merchant ID if the merchant being created is a sub-merchant",
            "example": [
              {
                "payment_method": "wallet",
                "payment_method_types": [
                  "upi_collect",
                  "upi_intent"
                ],
                "payment_method_issuers": [
                  "labore magna ipsum",
                  "aute"
                ],
                "payment_schemes": [
                  "Discover",
                  "Discover"
                ],
                "accepted_currencies": {
                  "type": "enable_only",
                  "list": [
                    "USD",
                    "EUR"
                  ]
                },
                "accepted_countries": {
                  "type": "disable_only",
                  "list": [
                    "FR",
                    "DE",
                    "IN"
                  ]
                },
                "minimum_amount": 1,
                "maximum_amount": 68607706,
                "recurring_enabled": true,
                "installment_payment_enabled": true
              }
            ],
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "business_country": {
            "$ref": "#/components/schemas/CountryAlpha2"
          },
          "business_label": {
            "type": "string",
            "description": "Business Type of the merchant",
            "example": "travel"
          },
          "business_sub_label": {
            "type": "string",
            "description": "Business Sub label of the merchant",
            "example": "chase",
            "nullable": true
          },
          "frm_configs": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FrmConfigs"
              }
            ],
            "nullable": true
          }
        }
      },
      "MerchantConnectorUpdate": {
        "type": "object",
        "description": "Create a new Merchant Connector for the merchant account. The connector could be a payment processor / facilitator / acquirer or specialized services like Fraud / Accounting etc.\"",
        "required": [
          "connector_type"
        ],
        "properties": {
          "connector_type": {
            "$ref": "#/components/schemas/ConnectorType"
          },
          "connector_account_details": {
            "type": "object",
            "description": "Account details of the Connector. You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "test_mode": {
            "type": "boolean",
            "description": "A boolean value to indicate if the connector is in Test mode. By default, its value is false.",
            "default": false,
            "example": false,
            "nullable": true
          },
          "disabled": {
            "type": "boolean",
            "description": "A boolean value to indicate if the connector is disabled. By default, its value is false.",
            "default": false,
            "example": false,
            "nullable": true
          },
          "payment_methods_enabled": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodsEnabled"
            },
            "description": "Refers to the Parent Merchant ID if the merchant being created is a sub-merchant",
            "example": [
              {
                "payment_method": "wallet",
                "payment_method_types": [
                  "upi_collect",
                  "upi_intent"
                ],
                "payment_method_issuers": [
                  "labore magna ipsum",
                  "aute"
                ],
                "payment_schemes": [
                  "Discover",
                  "Discover"
                ],
                "accepted_currencies": {
                  "type": "enable_only",
                  "list": [
                    "USD",
                    "EUR"
                  ]
                },
                "accepted_countries": {
                  "type": "disable_only",
                  "list": [
                    "FR",
                    "DE",
                    "IN"
                  ]
                },
                "minimum_amount": 1,
                "maximum_amount": 68607706,
                "recurring_enabled": true,
                "installment_payment_enabled": true
              }
            ],
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "frm_configs": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FrmConfigs"
              }
            ],
            "nullable": true
          }
        }
      },
      "MerchantDetails": {
        "type": "object",
        "properties": {
          "primary_contact_person": {
            "type": "string",
            "description": "The merchant's primary contact name",
            "example": "John Doe",
            "nullable": true,
            "maxLength": 255
          },
          "primary_phone": {
            "type": "string",
            "description": "The merchant's primary phone number",
            "example": "999999999",
            "nullable": true,
            "maxLength": 255
          },
          "primary_email": {
            "type": "string",
            "description": "The merchant's primary email address",
            "example": "johndoe@test.com",
            "nullable": true,
            "maxLength": 255
          },
          "secondary_contact_person": {
            "type": "string",
            "description": "The merchant's secondary contact name",
            "example": "John Doe2",
            "nullable": true,
            "maxLength": 255
          },
          "secondary_phone": {
            "type": "string",
            "description": "The merchant's secondary phone number",
            "example": "999999988",
            "nullable": true,
            "maxLength": 255
          },
          "secondary_email": {
            "type": "string",
            "description": "The merchant's secondary email address",
            "example": "johndoe2@test.com",
            "nullable": true,
            "maxLength": 255
          },
          "website": {
            "type": "string",
            "description": "The business website of the merchant",
            "example": "www.example.com",
            "nullable": true,
            "maxLength": 255
          },
          "about_business": {
            "type": "string",
            "description": "A brief description about merchant's business",
            "example": "Online Retail with a wide selection of organic products for North America",
            "nullable": true,
            "maxLength": 255
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressDetails"
              }
            ],
            "nullable": true
          }
        }
      },
      "MobilePayRedirection": {
        "type": "object"
      },
      "MultibancoBillingDetails": {
        "type": "object",
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "type": "string",
            "example": "example@me.com"
          }
        }
      },
      "MultibancoTransferInstructions": {
        "type": "object",
        "required": [
          "reference",
          "entity"
        ],
        "properties": {
          "reference": {
            "type": "string",
            "example": "122385736258"
          },
          "entity": {
            "type": "string",
            "example": "12345"
          }
        }
      },
      "NextActionCall": {
        "type": "string",
        "enum": [
          "confirm",
          "sync"
        ]
      },
      "NextActionData": {
        "oneOf": [
          {
            "type": "object",
            "description": "Contains the url for redirection flow",
            "required": [
              "redirect_to_url",
              "type"
            ],
            "properties": {
              "redirect_to_url": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "redirect_to_url"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "Informs the next steps for bank transfer and also contains the charges details (ex: amount received, amount charged etc)",
            "required": [
              "bank_transfer_steps_and_charges_details",
              "type"
            ],
            "properties": {
              "bank_transfer_steps_and_charges_details": {
                "$ref": "#/components/schemas/BankTransferNextStepsData"
              },
              "type": {
                "type": "string",
                "enum": [
                  "display_bank_transfer_information"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "Contains third party sdk session token response",
            "required": [
              "type"
            ],
            "properties": {
              "session_token": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SessionToken"
                  }
                ],
                "nullable": true
              },
              "type": {
                "type": "string",
                "enum": [
                  "third_party_sdk_session_token"
                ]
              }
            }
          },
          {
            "type": "object",
            "description": "Contains url for Qr code image, this qr code has to be shown in sdk",
            "required": [
              "image_data_url",
              "type"
            ],
            "properties": {
              "image_data_url": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "qr_code_information"
                ]
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "type"
        }
      },
      "NextActionType": {
        "type": "string",
        "enum": [
          "redirect_to_url",
          "display_qr_code",
          "invoke_sdk_client",
          "trigger_api",
          "display_bank_transfer_information"
        ]
      },
      "NoThirdPartySdkSessionResponse": {
        "type": "object",
        "required": [
          "epoch_timestamp",
          "expires_at",
          "merchant_session_identifier",
          "nonce",
          "merchant_identifier",
          "domain_name",
          "display_name",
          "signature",
          "operational_analytics_identifier",
          "retries",
          "psp_id"
        ],
        "properties": {
          "epoch_timestamp": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp at which session is requested",
            "minimum": 0.0
          },
          "expires_at": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp at which session expires",
            "minimum": 0.0
          },
          "merchant_session_identifier": {
            "type": "string",
            "description": "The identifier for the merchant session"
          },
          "nonce": {
            "type": "string",
            "description": "Apple pay generated unique ID (UUID) value"
          },
          "merchant_identifier": {
            "type": "string",
            "description": "The identifier for the merchant"
          },
          "domain_name": {
            "type": "string",
            "description": "The domain name of the merchant which is registered in Apple Pay"
          },
          "display_name": {
            "type": "string",
            "description": "The name to be displayed on Apple Pay button"
          },
          "signature": {
            "type": "string",
            "description": "A string which represents the properties of a payment"
          },
          "operational_analytics_identifier": {
            "type": "string",
            "description": "The identifier for the operational analytics"
          },
          "retries": {
            "type": "integer",
            "format": "int32",
            "description": "The number of retries to get the session response",
            "minimum": 0.0
          },
          "psp_id": {
            "type": "string",
            "description": "The identifier for the connector transaction"
          }
        }
      },
      "NoonData": {
        "type": "object",
        "properties": {
          "order_category": {
            "type": "string",
            "description": "Information about the order category that merchant wants to specify at connector level. (e.g. In Noon Payments it can take values like \"pay\", \"food\", or any other custom string set by the merchant in Noon's Dashboard)",
            "nullable": true
          }
        }
      },
      "OnlineMandate": {
        "type": "object",
        "required": [
          "ip_address",
          "user_agent"
        ],
        "properties": {
          "ip_address": {
            "type": "string",
            "description": "Ip address of the customer machine from which the mandate was created",
            "example": "123.32.25.123"
          },
          "user_agent": {
            "type": "string",
            "description": "The user-agent of the customer's browser"
          }
        }
      },
      "OrderDetails": {
        "type": "object",
        "required": [
          "product_name",
          "quantity"
        ],
        "properties": {
          "product_name": {
            "type": "string",
            "description": "Name of the product that is being purchased",
            "example": "shirt",
            "maxLength": 255
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "description": "The quantity of the product to be purchased",
            "example": 1,
            "minimum": 0.0
          }
        }
      },
      "OrderDetailsWithAmount": {
        "type": "object",
        "required": [
          "product_name",
          "quantity",
          "amount"
        ],
        "properties": {
          "product_name": {
            "type": "string",
            "description": "Name of the product that is being purchased",
            "example": "shirt",
            "maxLength": 255
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "description": "The quantity of the product to be purchased",
            "example": 1,
            "minimum": 0.0
          },
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "the amount per quantity of product"
          }
        }
      },
      "PayLaterData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "klarna_redirect"
            ],
            "properties": {
              "klarna_redirect": {
                "type": "object",
                "description": "For KlarnaRedirect as PayLater Option",
                "required": [
                  "billing_email",
                  "billing_country"
                ],
                "properties": {
                  "billing_email": {
                    "type": "string",
                    "description": "The billing email"
                  },
                  "billing_country": {
                    "$ref": "#/components/schemas/CountryAlpha2"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "klarna_sdk"
            ],
            "properties": {
              "klarna_sdk": {
                "type": "object",
                "description": "For Klarna Sdk as PayLater Option",
                "required": [
                  "token"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The token for the sdk workflow"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "affirm_redirect"
            ],
            "properties": {
              "affirm_redirect": {
                "type": "object",
                "description": "For Affirm redirect as PayLater Option"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "afterpay_clearpay_redirect"
            ],
            "properties": {
              "afterpay_clearpay_redirect": {
                "type": "object",
                "description": "For AfterpayClearpay redirect as PayLater Option",
                "required": [
                  "billing_email",
                  "billing_name"
                ],
                "properties": {
                  "billing_email": {
                    "type": "string",
                    "description": "The billing email"
                  },
                  "billing_name": {
                    "type": "string",
                    "description": "The billing name"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "pay_bright_redirect"
            ],
            "properties": {
              "pay_bright_redirect": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "walley_redirect"
            ],
            "properties": {
              "walley_redirect": {
                "type": "object"
              }
            }
          }
        ]
      },
      "PayPalWalletData": {
        "type": "object",
        "required": [
          "token"
        ],
        "properties": {
          "token": {
            "type": "string",
            "description": "Token generated for the Apple pay"
          }
        }
      },
      "PaymentExperience": {
        "type": "string",
        "enum": [
          "redirect_to_url",
          "invoke_sdk_client",
          "display_qr_code",
          "one_click",
          "link_wallet",
          "invoke_payment_app"
        ]
      },
      "PaymentIdType": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "PaymentIntentId"
            ],
            "properties": {
              "PaymentIntentId": {
                "type": "string",
                "description": "The identifier for payment intent"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "ConnectorTransactionId"
            ],
            "properties": {
              "ConnectorTransactionId": {
                "type": "string",
                "description": "The identifier for connector transaction"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "PaymentAttemptId"
            ],
            "properties": {
              "PaymentAttemptId": {
                "type": "string",
                "description": "The identifier for payment attempt"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "PreprocessingId"
            ],
            "properties": {
              "PreprocessingId": {
                "type": "string",
                "description": "The identifier for preprocessing step"
              }
            }
          }
        ]
      },
      "PaymentListConstraints": {
        "type": "object",
        "properties": {
          "customer_id": {
            "type": "string",
            "description": "The identifier for customer",
            "example": "cus_meowuwunwiuwiwqw",
            "nullable": true
          },
          "starting_after": {
            "type": "string",
            "description": "A cursor for use in pagination, fetch the next list after some object",
            "example": "pay_fafa124123",
            "nullable": true
          },
          "ending_before": {
            "type": "string",
            "description": "A cursor for use in pagination, fetch the previous list before some object",
            "example": "pay_fafa124123",
            "nullable": true
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "description": "limit on the number of objects to return",
            "default": 10
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "The time at which payment is created",
            "example": "2022-09-10T10:11:12Z",
            "nullable": true
          },
          "created.lt": {
            "type": "string",
            "format": "date-time",
            "description": "Time less than the payment created time",
            "example": "2022-09-10T10:11:12Z",
            "nullable": true
          },
          "created.gt": {
            "type": "string",
            "format": "date-time",
            "description": "Time greater than the payment created time",
            "example": "2022-09-10T10:11:12Z",
            "nullable": true
          },
          "created.lte": {
            "type": "string",
            "format": "date-time",
            "description": "Time less than or equals to the payment created time",
            "example": "2022-09-10T10:11:12Z",
            "nullable": true
          },
          "created.gte": {
            "type": "string",
            "format": "date-time",
            "description": "Time greater than or equals to the payment created time",
            "example": "2022-09-10T10:11:12Z",
            "nullable": true
          }
        }
      },
      "PaymentListResponse": {
        "type": "object",
        "required": [
          "size",
          "data"
        ],
        "properties": {
          "size": {
            "type": "integer",
            "description": "The number of payments included in the list",
            "minimum": 0.0
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentsResponse"
            }
          }
        }
      },
      "PaymentMethod": {
        "type": "string",
        "enum": [
          "card",
          "pay_later",
          "wallet",
          "bank_redirect",
          "bank_transfer",
          "crypto",
          "bank_debit",
          "reward",
          "upi"
        ]
      },
      "PaymentMethodCreate": {
        "type": "object",
        "required": [
          "payment_method"
        ],
        "properties": {
          "payment_method": {
            "$ref": "#/components/schemas/PaymentMethodType"
          },
          "payment_method_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodType"
              }
            ],
            "nullable": true
          },
          "payment_method_issuer": {
            "type": "string",
            "description": "The name of the bank/ provider issuing the payment method to the end user",
            "example": "Citibank",
            "nullable": true
          },
          "payment_method_issuer_code": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodIssuerCode"
              }
            ],
            "nullable": true
          },
          "card": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardDetail"
              }
            ],
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "customer_id": {
            "type": "string",
            "description": "The unique identifier of the customer.",
            "example": "cus_meowerunwiuwiwqw",
            "nullable": true
          },
          "card_network": {
            "type": "string",
            "description": "The card network",
            "example": "Visa",
            "nullable": true
          }
        }
      },
      "PaymentMethodData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "card"
            ],
            "properties": {
              "card": {
                "$ref": "#/components/schemas/Card"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "wallet"
            ],
            "properties": {
              "wallet": {
                "$ref": "#/components/schemas/WalletData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "pay_later"
            ],
            "properties": {
              "pay_later": {
                "$ref": "#/components/schemas/PayLaterData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "bank_redirect"
            ],
            "properties": {
              "bank_redirect": {
                "$ref": "#/components/schemas/BankRedirectData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "bank_debit"
            ],
            "properties": {
              "bank_debit": {
                "$ref": "#/components/schemas/BankDebitData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "bank_transfer"
            ],
            "properties": {
              "bank_transfer": {
                "$ref": "#/components/schemas/BankTransferData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "crypto"
            ],
            "properties": {
              "crypto": {
                "$ref": "#/components/schemas/CryptoData"
              }
            }
          },
          {
            "type": "string",
            "enum": [
              "mandate_payment"
            ]
          },
          {
            "type": "object",
            "required": [
              "reward"
            ],
            "properties": {
              "reward": {
                "$ref": "#/components/schemas/RewardData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "upi"
            ],
            "properties": {
              "upi": {
                "$ref": "#/components/schemas/UpiData"
              }
            }
          }
        ]
      },
      "PaymentMethodDeleteResponse": {
        "type": "object",
        "required": [
          "payment_method_id",
          "deleted"
        ],
        "properties": {
          "payment_method_id": {
            "type": "string",
            "description": "The unique identifier of the Payment method",
            "example": "card_rGK4Vi5iSW70MY7J2mIy"
          },
          "deleted": {
            "type": "boolean",
            "description": "Whether payment method was deleted or not",
            "example": true
          }
        }
      },
      "PaymentMethodIssuerCode": {
        "type": "string",
        "enum": [
          "jp_hdfc",
          "jp_icici",
          "jp_googlepay",
          "jp_applepay",
          "jp_phonepay",
          "jp_wechat",
          "jp_sofort",
          "jp_giropay",
          "jp_sepa",
          "jp_bacs"
        ]
      },
      "PaymentMethodList": {
        "type": "object",
        "required": [
          "payment_method"
        ],
        "properties": {
          "payment_method": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "payment_method_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodType"
            },
            "description": "This is a sub-category of payment method.",
            "example": [
              "credit"
            ],
            "nullable": true
          }
        }
      },
      "PaymentMethodListResponse": {
        "type": "object",
        "required": [
          "payment_methods",
          "mandate_payment"
        ],
        "properties": {
          "redirect_url": {
            "type": "string",
            "description": "Redirect URL of the merchant",
            "example": "https://www.google.com",
            "nullable": true
          },
          "payment_methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodList"
            },
            "description": "Information about the payment method",
            "example": [
              {
                "payment_method": "wallet",
                "payment_experience": null,
                "payment_method_issuers": [
                  "labore magna ipsum",
                  "aute"
                ]
              }
            ]
          },
          "mandate_payment": {
            "$ref": "#/components/schemas/MandateType"
          },
          "merchant_name": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "PaymentMethodResponse": {
        "type": "object",
        "required": [
          "merchant_id",
          "payment_method_id",
          "payment_method",
          "recurring_enabled",
          "installment_payment_enabled"
        ],
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "Unique identifier for a merchant",
            "example": "merchant_1671528864"
          },
          "customer_id": {
            "type": "string",
            "description": "The unique identifier of the customer.",
            "example": "cus_meowerunwiuwiwqw",
            "nullable": true
          },
          "payment_method_id": {
            "type": "string",
            "description": "The unique identifier of the Payment method",
            "example": "card_rGK4Vi5iSW70MY7J2mIy"
          },
          "payment_method": {
            "$ref": "#/components/schemas/PaymentMethodType"
          },
          "payment_method_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodType"
              }
            ],
            "nullable": true
          },
          "card": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardDetailFromLocker"
              }
            ],
            "nullable": true
          },
          "recurring_enabled": {
            "type": "boolean",
            "description": "Indicates whether the payment method is eligible for recurring payments",
            "example": true
          },
          "installment_payment_enabled": {
            "type": "boolean",
            "description": "Indicates whether the payment method is eligible for installment payments",
            "example": true
          },
          "payment_experience": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentExperience"
            },
            "description": "Type of payment experience enabled with the connector",
            "example": [
              "redirect_to_url"
            ],
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "A timestamp (ISO 8601 code) that determines when the customer was created",
            "example": "2023-01-18T11:04:09.922Z",
            "nullable": true
          }
        }
      },
      "PaymentMethodType": {
        "type": "string",
        "enum": [
          "ach",
          "affirm",
          "afterpay_clearpay",
          "ali_pay",
          "ali_pay_hk",
          "apple_pay",
          "bacs",
          "bancontact_card",
          "becs",
          "blik",
          "classic",
          "credit",
          "crypto_currency",
          "debit",
          "eps",
          "evoucher",
          "giropay",
          "google_pay",
          "ideal",
          "interac",
          "klarna",
          "mb_way",
          "mobile_pay",
          "multibanco",
          "online_banking_czech_republic",
          "online_banking_finland",
          "online_banking_poland",
          "online_banking_slovakia",
          "pay_bright",
          "paypal",
          "przelewy24",
          "samsung_pay",
          "sepa",
          "sofort",
          "swish",
          "trustly",
          "upi_collect",
          "walley",
          "we_chat_pay"
        ]
      },
      "PaymentMethodUpdate": {
        "type": "object",
        "properties": {
          "card": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardDetail"
              }
            ],
            "nullable": true
          },
          "card_network": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardNetwork"
              }
            ],
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          }
        }
      },
      "PaymentMethodsEnabled": {
        "type": "object",
        "description": "Details of all the payment methods enabled for the connector for the given merchant account",
        "required": [
          "payment_method"
        ],
        "properties": {
          "payment_method": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "payment_method_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodType"
            },
            "description": "Subtype of payment method",
            "example": [
              "credit"
            ],
            "nullable": true
          }
        }
      },
      "PaymentRetrieveBody": {
        "type": "object",
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account.",
            "nullable": true
          },
          "force_sync": {
            "type": "boolean",
            "description": "Decider to enable or disable the connector call for retrieve request",
            "nullable": true
          }
        }
      },
      "PaymentsCancelRequest": {
        "type": "object",
        "required": [
          "merchant_connector_details"
        ],
        "properties": {
          "cancellation_reason": {
            "type": "string",
            "description": "The reason for the payment cancel",
            "nullable": true
          },
          "merchant_connector_details": {
            "$ref": "#/components/schemas/MerchantConnectorDetailsWrap"
          }
        }
      },
      "PaymentsCaptureRequest": {
        "type": "object",
        "properties": {
          "payment_id": {
            "type": "string",
            "description": "The unique identifier for the payment",
            "nullable": true
          },
          "merchant_id": {
            "type": "string",
            "description": "The unique identifier for the merchant",
            "nullable": true
          },
          "amount_to_capture": {
            "type": "integer",
            "format": "int64",
            "description": "The Amount to be captured/ debited from the user's payment method.",
            "nullable": true
          },
          "refund_uncaptured_amount": {
            "type": "boolean",
            "description": "Decider to refund the uncaptured amount",
            "nullable": true
          },
          "statement_descriptor_suffix": {
            "type": "string",
            "description": "Provides information about a card payment that customers see on their statements.",
            "nullable": true
          },
          "statement_descriptor_prefix": {
            "type": "string",
            "description": "Concatenated with the statement descriptor suffix that’s set on the account to form the complete statement descriptor.",
            "nullable": true
          },
          "merchant_connector_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantConnectorDetailsWrap"
              }
            ],
            "nullable": true
          }
        }
      },
      "PaymentsCreateRequest": {
        "type": "object",
        "required": [
          "amount",
          "currency"
        ],
        "properties": {
          "payment_id": {
            "type": "string",
            "description": "Unique identifier for the payment. This ensures idempotency for multiple payments\nthat have been done by a single merchant. This field is auto generated and is returned in the API response.",
            "example": "pay_mbabizu24mvu3mela5njyhpit4",
            "nullable": true,
            "maxLength": 30,
            "minLength": 30
          },
          "merchant_id": {
            "type": "string",
            "description": "This is an identifier for the merchant account. This is inferred from the API key\nprovided during the request",
            "example": "merchant_1668273825",
            "nullable": true,
            "maxLength": 255
          },
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "The payment amount. Amount for the payment in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc.,",
            "example": 6540,
            "nullable": true,
            "minimum": 0.0
          },
          "routing": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RoutingAlgorithm"
              }
            ],
            "nullable": true
          },
          "connector": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Connector"
            },
            "description": "This allows the merchant to manually select a connector with which the payment can go through",
            "example": [
              "stripe",
              "adyen"
            ],
            "nullable": true
          },
          "currency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Currency"
              }
            ],
            "nullable": true
          },
          "capture_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CaptureMethod"
              }
            ],
            "nullable": true
          },
          "amount_to_capture": {
            "type": "integer",
            "format": "int64",
            "description": "The Amount to be captured/ debited from the users payment method. It shall be in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc.,\nIf not provided, the default amount_to_capture will be the payment amount.",
            "example": 6540,
            "nullable": true
          },
          "capture_on": {
            "type": "string",
            "format": "date-time",
            "description": "A timestamp (ISO 8601 code) that determines when the payment should be captured.\nProviding this field will automatically set `capture` to true",
            "example": "2022-09-10T10:11:12Z",
            "nullable": true
          },
          "confirm": {
            "type": "boolean",
            "description": "Whether to confirm the payment (if applicable)",
            "default": false,
            "example": true,
            "nullable": true
          },
          "customer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomerDetails"
              }
            ],
            "nullable": true
          },
          "customer_id": {
            "type": "string",
            "description": "The identifier for the customer object.\nThis field will be deprecated soon, use the customer object instead",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "nullable": true,
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "description": "The customer's email address\nThis field will be deprecated soon, use the customer object instead",
            "example": "johntest@test.com",
            "nullable": true,
            "maxLength": 255
          },
          "name": {
            "type": "string",
            "description": "description: The customer's name\nThis field will be deprecated soon, use the customer object instead",
            "example": "John Test",
            "nullable": true,
            "maxLength": 255
          },
          "phone": {
            "type": "string",
            "description": "The customer's phone number\nThis field will be deprecated soon, use the customer object instead",
            "example": "3141592653",
            "nullable": true,
            "maxLength": 255
          },
          "phone_country_code": {
            "type": "string",
            "description": "The country code for the customer phone number\nThis field will be deprecated soon, use the customer object instead",
            "example": "+1",
            "nullable": true,
            "maxLength": 255
          },
          "off_session": {
            "type": "boolean",
            "description": "Set to true to indicate that the customer is not in your checkout flow during this payment, and therefore is unable to authenticate. This parameter is intended for scenarios where you collect card details and charge them later. This parameter can only be used with `confirm: true`.",
            "example": true,
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "A description of the payment",
            "example": "It's my first payment request",
            "nullable": true
          },
          "return_url": {
            "type": "string",
            "description": "The URL to redirect after the completion of the operation",
            "example": "https://hyperswitch.io",
            "nullable": true
          },
          "setup_future_usage": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FutureUsage"
              }
            ],
            "nullable": true
          },
          "authentication_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthenticationType"
              }
            ],
            "nullable": true
          },
          "payment_method_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodData"
              }
            ],
            "nullable": true
          },
          "payment_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethod"
              }
            ],
            "nullable": true
          },
          "payment_token": {
            "type": "string",
            "description": "Provide a reference to a stored payment method",
            "example": "187282ab-40ef-47a9-9206-5099ba31e432",
            "nullable": true
          },
          "card_cvc": {
            "type": "string",
            "description": "This is used when payment is to be confirmed and the card is not saved",
            "nullable": true
          },
          "shipping": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "nullable": true
          },
          "billing": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "nullable": true
          },
          "statement_descriptor_name": {
            "type": "string",
            "description": "For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters.",
            "example": "Hyperswitch Router",
            "nullable": true,
            "maxLength": 255
          },
          "statement_descriptor_suffix": {
            "type": "string",
            "description": "Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.",
            "example": "Payment for shoes purchase",
            "nullable": true,
            "maxLength": 255
          },
          "order_details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderDetailsWithAmount"
            },
            "description": "Information about the product , quantity and amount for connectors. (e.g. Klarna)",
            "example": "[{\n        \"product_name\": \"gillete creme\",\n        \"quantity\": 15,\n        \"amount\" : 900\n    }]",
            "nullable": true
          },
          "client_secret": {
            "type": "string",
            "description": "It's a token used for client side verification.",
            "example": "pay_U42c409qyHwOkWo3vK60_secret_el9ksDkiB8hi6j9N78yo",
            "nullable": true
          },
          "mandate_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MandateData"
              }
            ],
            "nullable": true
          },
          "mandate_id": {
            "type": "string",
            "description": "A unique identifier to link the payment to a mandate, can be use instead of payment_method_data",
            "example": "mandate_iwer89rnjef349dni3",
            "nullable": true,
            "maxLength": 255
          },
          "browser_info": {
            "type": "object",
            "description": "Additional details required by 3DS 2.0",
            "nullable": true
          },
          "payment_experience": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentExperience"
              }
            ],
            "nullable": true
          },
          "payment_method_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodType"
              }
            ],
            "nullable": true
          },
          "business_country": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CountryAlpha2"
              }
            ],
            "nullable": true
          },
          "business_label": {
            "type": "string",
            "description": "Business label of the merchant for this payment",
            "example": "food",
            "nullable": true
          },
          "merchant_connector_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantConnectorDetailsWrap"
              }
            ],
            "nullable": true
          },
          "allowed_payment_method_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodType"
            },
            "description": "Allowed Payment Method Types for a given PaymentIntent",
            "nullable": true
          },
          "business_sub_label": {
            "type": "string",
            "description": "Business sub label for the payment",
            "nullable": true
          },
          "retry_action": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RetryAction"
              }
            ],
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "connector_metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConnectorMetadata"
              }
            ],
            "nullable": true
          },
          "feature_metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FeatureMetadata"
              }
            ],
            "nullable": true
          }
        }
      },
      "PaymentsRequest": {
        "type": "object",
        "properties": {
          "payment_id": {
            "type": "string",
            "description": "Unique identifier for the payment. This ensures idempotency for multiple payments\nthat have been done by a single merchant. This field is auto generated and is returned in the API response.",
            "example": "pay_mbabizu24mvu3mela5njyhpit4",
            "nullable": true,
            "maxLength": 30,
            "minLength": 30
          },
          "merchant_id": {
            "type": "string",
            "description": "This is an identifier for the merchant account. This is inferred from the API key\nprovided during the request",
            "example": "merchant_1668273825",
            "nullable": true,
            "maxLength": 255
          },
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "The payment amount. Amount for the payment in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc.,",
            "example": 6540,
            "nullable": true,
            "minimum": 0.0
          },
          "routing": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RoutingAlgorithm"
              }
            ],
            "nullable": true
          },
          "connector": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Connector"
            },
            "description": "This allows the merchant to manually select a connector with which the payment can go through",
            "example": [
              "stripe",
              "adyen"
            ],
            "nullable": true
          },
          "currency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Currency"
              }
            ],
            "nullable": true
          },
          "capture_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CaptureMethod"
              }
            ],
            "nullable": true
          },
          "amount_to_capture": {
            "type": "integer",
            "format": "int64",
            "description": "The Amount to be captured/ debited from the users payment method. It shall be in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc.,\nIf not provided, the default amount_to_capture will be the payment amount.",
            "example": 6540,
            "nullable": true
          },
          "capture_on": {
            "type": "string",
            "format": "date-time",
            "description": "A timestamp (ISO 8601 code) that determines when the payment should be captured.\nProviding this field will automatically set `capture` to true",
            "example": "2022-09-10T10:11:12Z",
            "nullable": true
          },
          "confirm": {
            "type": "boolean",
            "description": "Whether to confirm the payment (if applicable)",
            "default": false,
            "example": true,
            "nullable": true
          },
          "customer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomerDetails"
              }
            ],
            "nullable": true
          },
          "customer_id": {
            "type": "string",
            "description": "The identifier for the customer object.\nThis field will be deprecated soon, use the customer object instead",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "nullable": true,
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "description": "The customer's email address\nThis field will be deprecated soon, use the customer object instead",
            "example": "johntest@test.com",
            "nullable": true,
            "maxLength": 255
          },
          "name": {
            "type": "string",
            "description": "description: The customer's name\nThis field will be deprecated soon, use the customer object instead",
            "example": "John Test",
            "nullable": true,
            "maxLength": 255
          },
          "phone": {
            "type": "string",
            "description": "The customer's phone number\nThis field will be deprecated soon, use the customer object instead",
            "example": "3141592653",
            "nullable": true,
            "maxLength": 255
          },
          "phone_country_code": {
            "type": "string",
            "description": "The country code for the customer phone number\nThis field will be deprecated soon, use the customer object instead",
            "example": "+1",
            "nullable": true,
            "maxLength": 255
          },
          "off_session": {
            "type": "boolean",
            "description": "Set to true to indicate that the customer is not in your checkout flow during this payment, and therefore is unable to authenticate. This parameter is intended for scenarios where you collect card details and charge them later. This parameter can only be used with `confirm: true`.",
            "example": true,
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "A description of the payment",
            "example": "It's my first payment request",
            "nullable": true
          },
          "return_url": {
            "type": "string",
            "description": "The URL to redirect after the completion of the operation",
            "example": "https://hyperswitch.io",
            "nullable": true
          },
          "setup_future_usage": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FutureUsage"
              }
            ],
            "nullable": true
          },
          "authentication_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthenticationType"
              }
            ],
            "nullable": true
          },
          "payment_method_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodData"
              }
            ],
            "nullable": true
          },
          "payment_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethod"
              }
            ],
            "nullable": true
          },
          "payment_token": {
            "type": "string",
            "description": "Provide a reference to a stored payment method",
            "example": "187282ab-40ef-47a9-9206-5099ba31e432",
            "nullable": true
          },
          "card_cvc": {
            "type": "string",
            "description": "This is used when payment is to be confirmed and the card is not saved",
            "nullable": true
          },
          "shipping": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "nullable": true
          },
          "billing": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "nullable": true
          },
          "statement_descriptor_name": {
            "type": "string",
            "description": "For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters.",
            "example": "Hyperswitch Router",
            "nullable": true,
            "maxLength": 255
          },
          "statement_descriptor_suffix": {
            "type": "string",
            "description": "Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.",
            "example": "Payment for shoes purchase",
            "nullable": true,
            "maxLength": 255
          },
          "order_details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderDetailsWithAmount"
            },
            "description": "Information about the product , quantity and amount for connectors. (e.g. Klarna)",
            "example": "[{\n        \"product_name\": \"gillete creme\",\n        \"quantity\": 15,\n        \"amount\" : 900\n    }]",
            "nullable": true
          },
          "client_secret": {
            "type": "string",
            "description": "It's a token used for client side verification.",
            "example": "pay_U42c409qyHwOkWo3vK60_secret_el9ksDkiB8hi6j9N78yo",
            "nullable": true
          },
          "mandate_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MandateData"
              }
            ],
            "nullable": true
          },
          "mandate_id": {
            "type": "string",
            "description": "A unique identifier to link the payment to a mandate, can be use instead of payment_method_data",
            "example": "mandate_iwer89rnjef349dni3",
            "nullable": true,
            "maxLength": 255
          },
          "browser_info": {
            "type": "object",
            "description": "Additional details required by 3DS 2.0",
            "nullable": true
          },
          "payment_experience": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentExperience"
              }
            ],
            "nullable": true
          },
          "payment_method_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodType"
              }
            ],
            "nullable": true
          },
          "business_country": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CountryAlpha2"
              }
            ],
            "nullable": true
          },
          "business_label": {
            "type": "string",
            "description": "Business label of the merchant for this payment",
            "example": "food",
            "nullable": true
          },
          "merchant_connector_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantConnectorDetailsWrap"
              }
            ],
            "nullable": true
          },
          "allowed_payment_method_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodType"
            },
            "description": "Allowed Payment Method Types for a given PaymentIntent",
            "nullable": true
          },
          "business_sub_label": {
            "type": "string",
            "description": "Business sub label for the payment",
            "nullable": true
          },
          "retry_action": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RetryAction"
              }
            ],
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "connector_metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConnectorMetadata"
              }
            ],
            "nullable": true
          },
          "feature_metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FeatureMetadata"
              }
            ],
            "nullable": true
          }
        }
      },
      "PaymentsResponse": {
        "type": "object",
        "required": [
          "status",
          "amount",
          "currency",
          "payment_method",
          "business_country",
          "business_label"
        ],
        "properties": {
          "payment_id": {
            "type": "string",
            "description": "Unique identifier for the payment. This ensures idempotency for multiple payments\nthat have been done by a single merchant.",
            "example": "pay_mbabizu24mvu3mela5njyhpit4",
            "nullable": true,
            "maxLength": 30,
            "minLength": 30
          },
          "merchant_id": {
            "type": "string",
            "description": "This is an identifier for the merchant account. This is inferred from the API key\nprovided during the request",
            "example": "merchant_1668273825",
            "nullable": true,
            "maxLength": 255
          },
          "status": {
            "$ref": "#/components/schemas/IntentStatus"
          },
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "The payment amount. Amount for the payment in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc.,",
            "example": 100
          },
          "amount_capturable": {
            "type": "integer",
            "format": "int64",
            "description": "The maximum amount that could be captured from the payment",
            "example": 6540,
            "nullable": true,
            "minimum": 100.0
          },
          "amount_received": {
            "type": "integer",
            "format": "int64",
            "description": "The amount which is already captured from the payment",
            "example": 6540,
            "nullable": true,
            "minimum": 100.0
          },
          "connector": {
            "type": "string",
            "description": "The connector used for the payment",
            "example": "stripe",
            "nullable": true
          },
          "client_secret": {
            "type": "string",
            "description": "It's a token used for client side verification.",
            "example": "pay_U42c409qyHwOkWo3vK60_secret_el9ksDkiB8hi6j9N78yo",
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the payment was created",
            "example": "2022-09-10T10:11:12Z",
            "nullable": true
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "customer_id": {
            "type": "string",
            "description": "The identifier for the customer object. If not provided the customer ID will be autogenerated.",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "nullable": true,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "description": "A description of the payment",
            "example": "It's my first payment request",
            "nullable": true
          },
          "refunds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RefundResponse"
            },
            "description": "List of refund that happened on this intent",
            "nullable": true
          },
          "disputes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DisputeResponsePaymentsRetrieve"
            },
            "description": "List of dispute that happened on this intent",
            "nullable": true
          },
          "mandate_id": {
            "type": "string",
            "description": "A unique identifier to link the payment to a mandate, can be use instead of payment_method_data",
            "example": "mandate_iwer89rnjef349dni3",
            "nullable": true,
            "maxLength": 255
          },
          "mandate_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MandateData"
              }
            ],
            "nullable": true
          },
          "setup_future_usage": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FutureUsage"
              }
            ],
            "nullable": true
          },
          "off_session": {
            "type": "boolean",
            "description": "Set to true to indicate that the customer is not in your checkout flow during this payment, and therefore is unable to authenticate. This parameter is intended for scenarios where you collect card details and charge them later. This parameter can only be used with confirm=true.",
            "example": true,
            "nullable": true
          },
          "capture_on": {
            "type": "string",
            "format": "date-time",
            "description": "A timestamp (ISO 8601 code) that determines when the payment should be captured.\nProviding this field will automatically set `capture` to true",
            "example": "2022-09-10T10:11:12Z",
            "nullable": true
          },
          "capture_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CaptureMethod"
              }
            ],
            "nullable": true
          },
          "payment_method": {
            "$ref": "#/components/schemas/PaymentMethodType"
          },
          "payment_method_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethod"
              }
            ],
            "nullable": true
          },
          "payment_token": {
            "type": "string",
            "description": "Provide a reference to a stored payment method",
            "example": "187282ab-40ef-47a9-9206-5099ba31e432",
            "nullable": true
          },
          "shipping": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "nullable": true
          },
          "billing": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "nullable": true
          },
          "order_details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderDetailsWithAmount"
            },
            "description": "Information about the product , quantity and amount for connectors. (e.g. Klarna)",
            "example": "[{\n        \"product_name\": \"gillete creme\",\n        \"quantity\": 15,\n        \"amount\" : 900\n    }]",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "description: The customer's email address",
            "example": "johntest@test.com",
            "nullable": true,
            "maxLength": 255
          },
          "name": {
            "type": "string",
            "description": "description: The customer's name",
            "example": "John Test",
            "nullable": true,
            "maxLength": 255
          },
          "phone": {
            "type": "string",
            "description": "The customer's phone number",
            "example": "3141592653",
            "nullable": true,
            "maxLength": 255
          },
          "return_url": {
            "type": "string",
            "description": "The URL to redirect after the completion of the operation",
            "example": "https://hyperswitch.io",
            "nullable": true
          },
          "authentication_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthenticationType"
              }
            ],
            "nullable": true
          },
          "statement_descriptor_name": {
            "type": "string",
            "description": "For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters.",
            "example": "Hyperswitch Router",
            "nullable": true,
            "maxLength": 255
          },
          "statement_descriptor_suffix": {
            "type": "string",
            "description": "Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 255 characters for the concatenated descriptor.",
            "example": "Payment for shoes purchase",
            "nullable": true,
            "maxLength": 255
          },
          "next_action": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NextActionData"
              }
            ],
            "nullable": true
          },
          "cancellation_reason": {
            "type": "string",
            "description": "If the payment was cancelled the reason provided here",
            "nullable": true
          },
          "error_code": {
            "type": "string",
            "description": "If there was an error while calling the connectors the code is received here",
            "example": "E0001",
            "nullable": true
          },
          "error_message": {
            "type": "string",
            "description": "If there was an error while calling the connector the error message is received here",
            "example": "Failed while verifying the card",
            "nullable": true
          },
          "payment_experience": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentExperience"
              }
            ],
            "nullable": true
          },
          "payment_method_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodType"
              }
            ],
            "nullable": true
          },
          "connector_label": {
            "type": "string",
            "description": "The connector used for this payment along with the country and business details",
            "example": "stripe_US_food",
            "nullable": true
          },
          "business_country": {
            "$ref": "#/components/schemas/CountryAlpha2"
          },
          "business_label": {
            "type": "string",
            "description": "The business label of merchant for this payment"
          },
          "business_sub_label": {
            "type": "string",
            "description": "The business_sub_label for this payment",
            "nullable": true
          },
          "allowed_payment_method_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodType"
            },
            "description": "Allowed Payment Method Types for a given PaymentIntent",
            "nullable": true
          },
          "ephemeral_key": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EphemeralKeyCreateResponse"
              }
            ],
            "nullable": true
          },
          "manual_retry_allowed": {
            "type": "boolean",
            "description": "If true the payment can be retried with same or different payment method which means the confirm call can be made again.",
            "nullable": true
          },
          "connector_transaction_id": {
            "type": "string",
            "description": "A unique identifier for a payment provided by the connector",
            "example": "993672945374576J",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "connector_metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConnectorMetadata"
              }
            ],
            "nullable": true
          },
          "feature_metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FeatureMetadata"
              }
            ],
            "nullable": true
          }
        }
      },
      "PaymentsRetrieveRequest": {
        "type": "object",
        "required": [
          "resource_id",
          "force_sync"
        ],
        "properties": {
          "resource_id": {
            "$ref": "#/components/schemas/PaymentIdType"
          },
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account.",
            "nullable": true
          },
          "force_sync": {
            "type": "boolean",
            "description": "Decider to enable or disable the connector call for retrieve request"
          },
          "param": {
            "type": "string",
            "description": "The parameters passed to a retrieve request",
            "nullable": true
          },
          "connector": {
            "type": "string",
            "description": "The name of the connector",
            "nullable": true
          },
          "merchant_connector_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantConnectorDetailsWrap"
              }
            ],
            "nullable": true
          }
        }
      },
      "PaymentsSessionRequest": {
        "type": "object",
        "required": [
          "payment_id",
          "client_secret",
          "wallets"
        ],
        "properties": {
          "payment_id": {
            "type": "string",
            "description": "The identifier for the payment"
          },
          "client_secret": {
            "type": "string",
            "description": "This is a token which expires after 15 minutes, used from the client to authenticate and create sessions from the SDK"
          },
          "wallets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodType"
            },
            "description": "The list of the supported wallets"
          },
          "merchant_connector_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantConnectorDetailsWrap"
              }
            ],
            "nullable": true
          }
        }
      },
      "PaymentsSessionResponse": {
        "type": "object",
        "required": [
          "payment_id",
          "client_secret",
          "session_token"
        ],
        "properties": {
          "payment_id": {
            "type": "string",
            "description": "The identifier for the payment"
          },
          "client_secret": {
            "type": "string",
            "description": "This is a token which expires after 15 minutes, used from the client to authenticate and create sessions from the SDK"
          },
          "session_token": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SessionToken"
            },
            "description": "The list of session token object"
          }
        }
      },
      "PaymentsStartRequest": {
        "type": "object",
        "required": [
          "payment_id",
          "merchant_id",
          "attempt_id"
        ],
        "properties": {
          "payment_id": {
            "type": "string",
            "description": "Unique identifier for the payment. This ensures idempotency for multiple payments\nthat have been done by a single merchant. This field is auto generated and is returned in the API response."
          },
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account."
          },
          "attempt_id": {
            "type": "string",
            "description": "The identifier for the payment transaction"
          }
        }
      },
      "PaypalRedirection": {
        "type": "object"
      },
      "PaypalSessionTokenResponse": {
        "type": "object",
        "required": [
          "session_token"
        ],
        "properties": {
          "session_token": {
            "type": "string",
            "description": "The session token for PayPal"
          }
        }
      },
      "PhoneDetails": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "The contact number",
            "example": "9999999999",
            "nullable": true
          },
          "country_code": {
            "type": "string",
            "description": "The country code attached to the number",
            "example": "+1",
            "nullable": true
          }
        }
      },
      "PrimaryBusinessDetails": {
        "type": "object",
        "required": [
          "country",
          "business"
        ],
        "properties": {
          "country": {
            "$ref": "#/components/schemas/CountryAlpha2"
          },
          "business": {
            "type": "string",
            "example": "food"
          }
        }
      },
      "ReceiverDetails": {
        "type": "object",
        "required": [
          "amount_received"
        ],
        "properties": {
          "amount_received": {
            "type": "integer",
            "format": "int64",
            "description": "The amount received by receiver"
          },
          "amount_charged": {
            "type": "integer",
            "format": "int64",
            "description": "The amount charged by ACH",
            "nullable": true
          },
          "amount_remaining": {
            "type": "integer",
            "format": "int64",
            "description": "The amount remaining to be sent via ACH",
            "nullable": true
          }
        }
      },
      "RedirectResponse": {
        "type": "object",
        "properties": {
          "param": {
            "type": "string",
            "nullable": true
          },
          "json_payload": {
            "type": "object",
            "nullable": true
          }
        }
      },
      "RefundListRequest": {
        "type": "object",
        "properties": {
          "payment_id": {
            "type": "string",
            "description": "The identifier for the payment",
            "nullable": true
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "description": "Limit on the number of objects to return",
            "nullable": true
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "description": "The starting point within a list of objects",
            "nullable": true
          },
          "time_range": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TimeRange"
              }
            ],
            "nullable": true
          },
          "connector": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of connectors to filter refunds list",
            "nullable": true
          },
          "currency": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Currency"
            },
            "description": "The list of currencies to filter refunds list",
            "nullable": true
          },
          "refund_status": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RefundStatus"
            },
            "description": "The list of refund statuses to filter refunds list",
            "nullable": true
          }
        }
      },
      "RefundListResponse": {
        "type": "object",
        "required": [
          "size",
          "data"
        ],
        "properties": {
          "size": {
            "type": "integer",
            "description": "The number of refunds included in the list",
            "minimum": 0.0
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RefundResponse"
            },
            "description": "The List of refund response object"
          }
        }
      },
      "RefundRequest": {
        "type": "object",
        "required": [
          "payment_id"
        ],
        "properties": {
          "refund_id": {
            "type": "string",
            "description": "Unique Identifier for the Refund. This is to ensure idempotency for multiple partial refund initiated against the same payment. If the identifiers is not defined by the merchant, this filed shall be auto generated and provide in the API response. It is recommended to generate uuid(v4) as the refund_id.",
            "example": "ref_mbabizu24mvu3mela5njyhpit4",
            "nullable": true,
            "maxLength": 30,
            "minLength": 30
          },
          "payment_id": {
            "type": "string",
            "description": "Total amount for which the refund is to be initiated. Amount for the payment in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc. If not provided, this will default to the full payment amount",
            "example": "pay_mbabizu24mvu3mela5njyhpit4",
            "maxLength": 30,
            "minLength": 30
          },
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "nullable": true,
            "maxLength": 255
          },
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "Total amount for which the refund is to be initiated. Amount for the payment in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc., If not provided, this will default to the full payment amount",
            "example": 6540,
            "nullable": true,
            "minimum": 100.0
          },
          "reason": {
            "type": "string",
            "description": "An arbitrary string attached to the object. Often useful for displaying to users and your customer support executive",
            "example": "Customer returned the product",
            "nullable": true,
            "maxLength": 255
          },
          "refund_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RefundType"
              }
            ],
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          },
          "merchant_connector_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantConnectorDetailsWrap"
              }
            ],
            "nullable": true
          }
        }
      },
      "RefundResponse": {
        "type": "object",
        "required": [
          "refund_id",
          "payment_id",
          "amount",
          "currency",
          "status",
          "connector"
        ],
        "properties": {
          "refund_id": {
            "type": "string",
            "description": "The identifier for refund"
          },
          "payment_id": {
            "type": "string",
            "description": "The identifier for payment"
          },
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "The refund amount, which should be less than or equal to the total payment amount. Amount for the payment in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc"
          },
          "currency": {
            "type": "string",
            "description": "The three-letter ISO currency code"
          },
          "reason": {
            "type": "string",
            "description": "An arbitrary string attached to the object. Often useful for displaying to users and your customer support executive",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/RefundStatus"
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object",
            "nullable": true
          },
          "error_message": {
            "type": "string",
            "description": "The error message",
            "nullable": true
          },
          "error_code": {
            "type": "string",
            "description": "The code for the error",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp at which refund is created",
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp at which refund is updated",
            "nullable": true
          },
          "connector": {
            "type": "string",
            "description": "The connector used for the refund and the corresponding payment",
            "example": "stripe"
          }
        }
      },
      "RefundStatus": {
        "type": "string",
        "description": "The status for refunds",
        "enum": [
          "succeeded",
          "failed",
          "pending",
          "review"
        ]
      },
      "RefundType": {
        "type": "string",
        "enum": [
          "scheduled",
          "instant"
        ]
      },
      "RefundUpdateRequest": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "An arbitrary string attached to the object. Often useful for displaying to users and your customer support executive",
            "example": "Customer returned the product",
            "nullable": true,
            "maxLength": 255
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.",
            "nullable": true
          }
        }
      },
      "RequiredFieldInfo": {
        "type": "object",
        "description": "Required fields info used while listing the payment_method_data",
        "required": [
          "required_field",
          "display_name",
          "field_type"
        ],
        "properties": {
          "required_field": {
            "type": "string",
            "description": "Required field for a payment_method through a payment_method_type"
          },
          "display_name": {
            "type": "string",
            "description": "Display name of the required field in the front-end"
          },
          "field_type": {
            "$ref": "#/components/schemas/FieldType"
          }
        }
      },
      "RetrieveApiKeyResponse": {
        "type": "object",
        "description": "The response body for retrieving an API Key.",
        "required": [
          "key_id",
          "merchant_id",
          "name",
          "prefix",
          "created",
          "expiration"
        ],
        "properties": {
          "key_id": {
            "type": "string",
            "description": "The identifier for the API Key.",
            "example": "5hEEqkgJUyuxgSKGArHA4mWSnX",
            "maxLength": 64
          },
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account.",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 64
          },
          "name": {
            "type": "string",
            "description": "The unique name for the API Key to help you identify it.",
            "example": "Sandbox integration key",
            "maxLength": 64
          },
          "description": {
            "type": "string",
            "description": "The description to provide more context about the API Key.",
            "example": "Key used by our developers to integrate with the sandbox environment",
            "nullable": true,
            "maxLength": 256
          },
          "prefix": {
            "type": "string",
            "description": "The first few characters of the plaintext API Key to help you identify it.",
            "maxLength": 64
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "The time at which the API Key was created.",
            "example": "2022-09-10T10:11:12Z"
          },
          "expiration": {
            "$ref": "#/components/schemas/ApiKeyExpiration"
          }
        }
      },
      "RetryAction": {
        "type": "string",
        "enum": [
          "manual_retry",
          "requeue"
        ]
      },
      "RevokeApiKeyResponse": {
        "type": "object",
        "description": "The response body for revoking an API Key.",
        "required": [
          "merchant_id",
          "key_id",
          "revoked"
        ],
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account.",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 64
          },
          "key_id": {
            "type": "string",
            "description": "The identifier for the API Key.",
            "example": "5hEEqkgJUyuxgSKGArHA4mWSnX",
            "maxLength": 64
          },
          "revoked": {
            "type": "boolean",
            "description": "Indicates whether the API key was revoked or not.",
            "example": "true"
          }
        }
      },
      "RewardData": {
        "type": "object",
        "required": [
          "merchant_id"
        ],
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The merchant ID with which we have to call the connector"
          }
        }
      },
      "RoutingAlgorithm": {
        "type": "string",
        "description": "The routing algorithm to be used to process the incoming request from merchant to outgoing payment processor or payment method. The default is 'Custom'",
        "enum": [
          "round_robin",
          "max_conversion",
          "min_cost",
          "custom"
        ],
        "example": "custom"
      },
      "SamsungPayWalletData": {
        "type": "object",
        "required": [
          "token"
        ],
        "properties": {
          "token": {
            "type": "string",
            "description": "The encrypted payment token from Samsung"
          }
        }
      },
      "SdkNextAction": {
        "type": "object",
        "required": [
          "next_action"
        ],
        "properties": {
          "next_action": {
            "$ref": "#/components/schemas/NextActionCall"
          }
        }
      },
      "SecretInfoToInitiateSdk": {
        "type": "object",
        "required": [
          "display",
          "payment"
        ],
        "properties": {
          "display": {
            "type": "string"
          },
          "payment": {
            "type": "string"
          }
        }
      },
      "SepaAndBacsBillingDetails": {
        "type": "object",
        "required": [
          "email",
          "name"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "The Email ID for SEPA and BACS billing",
            "example": "example@me.com"
          },
          "name": {
            "type": "string",
            "description": "The billing name for SEPA and BACS billing",
            "example": "Jane Doe"
          }
        }
      },
      "SepaBankTransferInstructions": {
        "type": "object",
        "required": [
          "account_holder_name",
          "bic",
          "country",
          "iban"
        ],
        "properties": {
          "account_holder_name": {
            "type": "string",
            "example": "Jane Doe"
          },
          "bic": {
            "type": "string",
            "example": "1024419982"
          },
          "country": {
            "type": "string"
          },
          "iban": {
            "type": "string",
            "example": "123456789"
          }
        }
      },
      "SessionToken": {
        "oneOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/GpaySessionTokenResponse"
              },
              {
                "type": "object",
                "required": [
                  "wallet_name"
                ],
                "properties": {
                  "wallet_name": {
                    "type": "string",
                    "enum": [
                      "google_pay"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/KlarnaSessionTokenResponse"
              },
              {
                "type": "object",
                "required": [
                  "wallet_name"
                ],
                "properties": {
                  "wallet_name": {
                    "type": "string",
                    "enum": [
                      "klarna"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaypalSessionTokenResponse"
              },
              {
                "type": "object",
                "required": [
                  "wallet_name"
                ],
                "properties": {
                  "wallet_name": {
                    "type": "string",
                    "enum": [
                      "paypal"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApplepaySessionTokenResponse"
              },
              {
                "type": "object",
                "required": [
                  "wallet_name"
                ],
                "properties": {
                  "wallet_name": {
                    "type": "string",
                    "enum": [
                      "apple_pay"
                    ]
                  }
                }
              }
            ]
          },
          {
            "type": "object",
            "required": [
              "wallet_name"
            ],
            "properties": {
              "wallet_name": {
                "type": "string",
                "enum": [
                  "no_session_token_received"
                ]
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "wallet_name"
        }
      },
      "SessionTokenInfo": {
        "type": "object",
        "required": [
          "certificate",
          "certificate_keys",
          "merchant_identifier",
          "display_name",
          "initiative",
          "initiative_context"
        ],
        "properties": {
          "certificate": {
            "type": "string"
          },
          "certificate_keys": {
            "type": "string"
          },
          "merchant_identifier": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "initiative": {
            "type": "string"
          },
          "initiative_context": {
            "type": "string"
          }
        }
      },
      "ThirdPartySdkSessionResponse": {
        "type": "object",
        "required": [
          "secrets"
        ],
        "properties": {
          "secrets": {
            "$ref": "#/components/schemas/SecretInfoToInitiateSdk"
          }
        }
      },
      "TimeRange": {
        "type": "object",
        "required": [
          "start_time"
        ],
        "properties": {
          "start_time": {
            "type": "string",
            "format": "date-time",
            "description": "The start time to filter refunds list or to get list of filters. To get list of filters start time is needed to be passed"
          },
          "end_time": {
            "type": "string",
            "format": "date-time",
            "description": "The end time to filter refunds list or to get list of filters. If not passed the default time is now",
            "nullable": true
          }
        }
      },
      "UpdateApiKeyRequest": {
        "type": "object",
        "description": "The request body for updating an API Key.",
        "properties": {
          "name": {
            "type": "string",
            "description": "A unique name for the API Key to help you identify it.",
            "example": "Sandbox integration key",
            "nullable": true,
            "maxLength": 64
          },
          "description": {
            "type": "string",
            "description": "A description to provide more context about the API Key.",
            "example": "Key used by our developers to integrate with the sandbox environment",
            "nullable": true,
            "maxLength": 256
          },
          "expiration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiKeyExpiration"
              }
            ],
            "nullable": true
          }
        }
      },
      "UpiData": {
        "type": "object",
        "properties": {
          "vpa_id": {
            "type": "string",
            "example": "successtest@iata",
            "nullable": true
          }
        }
      },
      "WalletData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "ali_pay_redirect"
            ],
            "properties": {
              "ali_pay_redirect": {
                "$ref": "#/components/schemas/AliPayRedirection"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "ali_pay_hk_redirect"
            ],
            "properties": {
              "ali_pay_hk_redirect": {
                "$ref": "#/components/schemas/AliPayHkRedirection"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "apple_pay"
            ],
            "properties": {
              "apple_pay": {
                "$ref": "#/components/schemas/ApplePayWalletData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "apple_pay_redirect"
            ],
            "properties": {
              "apple_pay_redirect": {
                "$ref": "#/components/schemas/ApplePayRedirectData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "apple_pay_third_party_sdk"
            ],
            "properties": {
              "apple_pay_third_party_sdk": {
                "$ref": "#/components/schemas/ApplePayThirdPartySdkData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "google_pay"
            ],
            "properties": {
              "google_pay": {
                "$ref": "#/components/schemas/GooglePayWalletData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "google_pay_redirect"
            ],
            "properties": {
              "google_pay_redirect": {
                "$ref": "#/components/schemas/GooglePayRedirectData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "google_pay_third_party_sdk"
            ],
            "properties": {
              "google_pay_third_party_sdk": {
                "$ref": "#/components/schemas/GooglePayThirdPartySdkData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "mb_way_redirect"
            ],
            "properties": {
              "mb_way_redirect": {
                "$ref": "#/components/schemas/MbWayRedirection"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "mobile_pay_redirect"
            ],
            "properties": {
              "mobile_pay_redirect": {
                "$ref": "#/components/schemas/MobilePayRedirection"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "paypal_redirect"
            ],
            "properties": {
              "paypal_redirect": {
                "$ref": "#/components/schemas/PaypalRedirection"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "paypal_sdk"
            ],
            "properties": {
              "paypal_sdk": {
                "$ref": "#/components/schemas/PayPalWalletData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "samsung_pay"
            ],
            "properties": {
              "samsung_pay": {
                "$ref": "#/components/schemas/SamsungPayWalletData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "we_chat_pay_redirect"
            ],
            "properties": {
              "we_chat_pay_redirect": {
                "$ref": "#/components/schemas/WeChatPayRedirection"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "we_chat_pay"
            ],
            "properties": {
              "we_chat_pay": {
                "$ref": "#/components/schemas/WeChatPay"
              }
            }
          }
        ]
      },
      "WeChatPay": {
        "type": "object"
      },
      "WeChatPayRedirection": {
        "type": "object"
      },
      "WebhookDetails": {
        "type": "object",
        "properties": {
          "webhook_version": {
            "type": "string",
            "description": "The version for Webhook",
            "example": "1.0.2",
            "nullable": true,
            "maxLength": 255
          },
          "webhook_username": {
            "type": "string",
            "description": "The user name for Webhook login",
            "example": "ekart_retail",
            "nullable": true,
            "maxLength": 255
          },
          "webhook_password": {
            "type": "string",
            "description": "The password for Webhook login",
            "example": "ekart@123",
            "nullable": true,
            "maxLength": 255
          },
          "webhook_url": {
            "type": "string",
            "description": "The url for the webhook endpoint",
            "example": "www.ekart.com/webhooks",
            "nullable": true
          },
          "payment_created_enabled": {
            "type": "boolean",
            "description": "If this property is true, a webhook message is posted whenever a new payment is created",
            "example": true,
            "nullable": true
          },
          "payment_succeeded_enabled": {
            "type": "boolean",
            "description": "If this property is true, a webhook message is posted whenever a payment is successful",
            "example": true,
            "nullable": true
          },
          "payment_failed_enabled": {
            "type": "boolean",
            "description": "If this property is true, a webhook message is posted whenever a payment fails",
            "example": true,
            "nullable": true
          }
        }
      }
    },
    "securitySchemes": {
      "admin_api_key": {
        "type": "apiKey",
        "in": "header",
        "name": "api-key",
        "description": "Admin API keys allow you to perform some privileged actions such as creating a merchant account and Merchant Connector account."
      },
      "api_key": {
        "type": "apiKey",
        "in": "header",
        "name": "api-key",
        "description": "API keys are the most common method of authentication and can be obtained from the HyperSwitch dashboard."
      },
      "ephemeral_key": {
        "type": "apiKey",
        "in": "header",
        "name": "api-key",
        "description": "Ephemeral keys provide temporary access to singular data, such as access to a single customer object for a short period of time."
      },
      "publishable_key": {
        "type": "apiKey",
        "in": "header",
        "name": "api-key",
        "description": "Publishable keys are a type of keys that can be public and have limited scope of usage."
      }
    }
  },
  "tags": [
    {
      "name": "Merchant Account",
      "description": "Create and manage merchant accounts"
    },
    {
      "name": "Merchant Connector Account",
      "description": "Create and manage merchant connector accounts"
    },
    {
      "name": "Payments",
      "description": "Create and manage one-time payments, recurring payments and mandates"
    },
    {
      "name": "Refunds",
      "description": "Create and manage refunds for successful payments"
    },
    {
      "name": "Mandates",
      "description": "Manage mandates"
    },
    {
      "name": "Customers",
      "description": "Create and manage customers"
    },
    {
      "name": "Payment Methods",
      "description": "Create and manage payment methods of customers"
    },
    {
      "name": "Disputes",
      "description": "Manage disputes"
    }
  ]
}