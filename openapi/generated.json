{
  "openapi": "3.0.3",
  "info": {
    "title": "Hyperswitch - API Documentation",
    "description": "\n## Get started\n\nHyperswitch provides a collection of APIs that enable you to process and manage payments.\nOur APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.\n\nYou can consume the APIs directly using your favorite HTTP/REST library.\n\nWe have a testing environment referred to \"sandbox\", which you can setup to test API calls without\naffecting production data.\nCurrently, our sandbox environment is live while our production environment is under development\nand will be available soon.\nYou can sign up on our Dashboard to get API keys to access Hyperswitch API.\n\n### Environment\n\nUse the following base URLs when making requests to the APIs:\n\n| Environment   |  Base URL                          |\n|---------------|------------------------------------|\n| Sandbox       | <https://sandbox.hyperswitch.io>   |\n| Production    | Coming Soon!                       |\n\n## Authentication\n\nWhen you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant\naccount, you are given a secret key (also referred as api-key) and a publishable key.\nYou may authenticate all API requests with Hyperswitch server by providing the appropriate key in\nthe request Authorization header.\n\n| Key           |  Description                                                                                  |\n|---------------|-----------------------------------------------------------------------------------------------|\n| Sandbox       | Private key. Used to authenticate all API requests from your merchant server                  |\n| Production    | Unique identifier for your account. Used to authenticate API requests from your app's client  |\n\nNever share your secret api keys. Keep them guarded and secure.\n",
    "contact": {
      "name": "Hyperswitch Support",
      "url": "https://hyperswitch.io",
      "email": "hyperswitch@juspay.in"
    },
    "license": {
      "name": "Apache-2.0"
    },
    "version": "0.2.0"
  },
  "servers": [
    {
      "url": "https://sandbox.hyperswitch.io",
      "description": "Sandbox Environment"
    }
  ],
  "paths": {
    "/accounts": {
      "post": {
        "tags": [
          "Merchant Account"
        ],
        "summary": "Merchant Account - Create",
        "description": "Merchant Account - Create\n\nCreate a new account for a merchant and the merchant could be a seller or retailer or client who likes to receive and send payments.",
        "operationId": "Create a Merchant Account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantAccountCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Merchant Account Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantAccountResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data"
          }
        },
        "deprecated": false,
        "security": [
          {
            "admin_api_key": []
          }
        ]
      }
    },
    "/accounts/{account_id}": {
      "get": {
        "tags": [
          "Merchant Account"
        ],
        "summary": "Merchant Account - Retrieve",
        "description": "Merchant Account - Retrieve\n\nRetrieve a merchant account details.",
        "operationId": "Retrieve a Merchant Account",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "The unique identifier for the merchant account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Merchant Account Retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantAccountResponse"
                }
              }
            }
          },
          "404": {
            "description": "Merchant account not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "admin_api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Merchant Account"
        ],
        "summary": "Merchant Account - Update",
        "description": "Merchant Account - Update\n\nTo update an existing merchant account. Helpful in updating merchant details such as email, contact details, or other configuration details like webhook, routing algorithm etc",
        "operationId": "Update a Merchant Account",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "The unique identifier for the merchant account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantAccountUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Merchant Account Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantAccountResponse"
                }
              }
            }
          },
          "404": {
            "description": "Merchant account not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "admin_api_key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Merchant Account"
        ],
        "summary": "Merchant Account - Delete",
        "description": "Merchant Account - Delete\n\nTo delete a merchant account",
        "operationId": "Delete a Merchant Account",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "The unique identifier for the merchant account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Merchant Account Deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantAccountDeleteResponse"
                }
              }
            }
          },
          "404": {
            "description": "Merchant account not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "admin_api_key": []
          }
        ]
      }
    },
    "/accounts/{account_id}/connectors": {
      "get": {
        "tags": [
          "Merchant Connector Account"
        ],
        "summary": "Merchant Connector - List",
        "description": "Merchant Connector - List\n\nList Merchant Connector Details for the merchant",
        "operationId": "List all Merchant Connectors",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "The unique identifier for the merchant account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Merchant Connector list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MerchantConnector"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "404": {
            "description": "Merchant Connector does not exist in records"
          }
        },
        "deprecated": false,
        "security": [
          {
            "admin_api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Merchant Connector Account"
        ],
        "summary": "PaymentsConnectors - Create",
        "description": "PaymentsConnectors - Create\n\nCreate a new Merchant Connector for the merchant account. The connector could be a payment processor / facilitator / acquirer or specialized services like Fraud / Accounting etc.\"",
        "operationId": "Create a Merchant Connector",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantConnector"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Merchant Connector Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantConnector"
                }
              }
            }
          },
          "400": {
            "description": "Missing Mandatory fields"
          }
        },
        "deprecated": false,
        "security": [
          {
            "admin_api_key": []
          }
        ]
      }
    },
    "/accounts/{account_id}/connectors/{connector_id}": {
      "get": {
        "tags": [
          "Merchant Connector Account"
        ],
        "summary": "Merchant Connector - Retrieve",
        "description": "Merchant Connector - Retrieve\n\nRetrieve Merchant Connector Details",
        "operationId": "Retrieve a Merchant Connector",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "The unique identifier for the merchant account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connector_id",
            "in": "path",
            "description": "The unique identifier for the Merchant Connector",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Merchant Connector retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantConnector"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "404": {
            "description": "Merchant Connector does not exist in records"
          }
        },
        "deprecated": false,
        "security": [
          {
            "admin_api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Merchant Connector Account"
        ],
        "summary": "Merchant Connector - Update",
        "description": "Merchant Connector - Update\n\nTo update an existing Merchant Connector. Helpful in enabling / disabling different payment methods and other settings for the connector etc.",
        "operationId": "Update a Merchant Connector",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "The unique identifier for the merchant account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connector_id",
            "in": "path",
            "description": "The unique identifier for the Merchant Connector",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantConnector"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Merchant Connector Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantConnector"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "404": {
            "description": "Merchant Connector does not exist in records"
          }
        },
        "deprecated": false,
        "security": [
          {
            "admin_api_key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Merchant Connector Account"
        ],
        "summary": "Merchant Connector - Delete",
        "description": "Merchant Connector - Delete\n\nDelete or Detach a Merchant Connector from Merchant Account",
        "operationId": "Delete a Merchant Connector",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "The unique identifier for the merchant account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connector_id",
            "in": "path",
            "description": "The unique identifier for the Merchant Connector",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Merchant Connector Deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantConnectorDeleteResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request"
          },
          "404": {
            "description": "Merchant Connector does not exist in records"
          }
        },
        "deprecated": false,
        "security": [
          {
            "admin_api_key": []
          }
        ]
      }
    },
    "/customers": {
      "post": {
        "tags": [
          "Customers"
        ],
        "summary": "Create Customer",
        "description": "Create Customer\n\nCreate a customer object and store the customer details to be reused for future payments. Incase the customer already exists in the system, this API will respond with the customer details.",
        "operationId": "Create a Customer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Customer Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data"
          }
        },
        "deprecated": false,
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/customers/{customer_id}": {
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Retrieve Customer",
        "description": "Retrieve Customer\n\nRetrieve a customer's details.",
        "operationId": "Retrieve a Customer",
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "description": "The unique identifier for the Customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer Retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResponse"
                }
              }
            }
          },
          "404": {
            "description": "Customer was not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "api_key": []
          },
          {
            "ephemeral_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Customers"
        ],
        "summary": "Update Customer",
        "description": "Update Customer\n\nUpdates the customer's details in a customer object.",
        "operationId": "Update a Customer",
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "description": "The unique identifier for the Customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Customer was Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResponse"
                }
              }
            }
          },
          "404": {
            "description": "Customer was not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Customers"
        ],
        "summary": "Delete Customer",
        "description": "Delete Customer\n\nDelete a customer record.",
        "operationId": "Delete a Customer",
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "description": "The unique identifier for the Customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer was Deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerDeleteResponse"
                }
              }
            }
          },
          "404": {
            "description": "Customer was not found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/mandates/revoke/{mandate_id}": {
      "post": {
        "tags": [
          "Mandates"
        ],
        "summary": "Mandates - Revoke Mandate",
        "description": "Mandates - Revoke Mandate\n\nRevoke a mandate",
        "operationId": "Revoke a Mandate",
        "parameters": [
          {
            "name": "mandate_id",
            "in": "path",
            "description": "The identifier for mandate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The mandate was revoked successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MandateRevokedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Mandate does not exist in our records"
          }
        },
        "deprecated": false,
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/mandates/{mandate_id}": {
      "get": {
        "tags": [
          "Mandates"
        ],
        "summary": "Mandates - Retrieve Mandate",
        "description": "Mandates - Retrieve Mandate\n\nRetrieve a mandate",
        "operationId": "Retrieve a Mandate",
        "parameters": [
          {
            "name": "mandate_id",
            "in": "path",
            "description": "The identifier for mandate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The mandate was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MandateResponse"
                }
              }
            }
          },
          "404": {
            "description": "Mandate does not exist in our records"
          }
        },
        "deprecated": false,
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/payment_methods": {
      "post": {
        "tags": [
          "Payment Methods"
        ],
        "summary": "PaymentMethods - Create",
        "description": "PaymentMethods - Create\n\nTo create a payment method against a customer object. In case of cards, this API could be used only by PCI compliant merchants",
        "operationId": "Create a Payment Method",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentMethodCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payment Method Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Data"
          }
        },
        "deprecated": false,
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/payment_methods/{account_id}": {
      "get": {
        "tags": [
          "Payment Methods"
        ],
        "summary": "List payment methods for a Merchant",
        "description": "List payment methods for a Merchant\n\nTo filter and list the applicable payment methods for a particular Merchant ID",
        "operationId": "List all Payment Methods for a Merchant",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "The unique identifier for the merchant account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accepted_country",
            "in": "query",
            "description": "The two-letter ISO currency code",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "accepted_currency",
            "in": "path",
            "description": "The three-letter ISO currency code",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Currency"
              }
            }
          },
          {
            "name": "minimum_amount",
            "in": "query",
            "description": "The minimum amount accepted for processing by the particular payment method.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "maximum_amount",
            "in": "query",
            "description": "The maximum amount amount accepted for processing by the particular payment method.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "recurring_payment_enabled",
            "in": "query",
            "description": "Indicates whether the payment method is eligible for recurring payments",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "installment_payment_enabled",
            "in": "query",
            "description": "Indicates whether the payment method is eligible for installment payments",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment Methods retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Data"
          },
          "404": {
            "description": "Payment Methods does not exist in records"
          }
        },
        "deprecated": false,
        "security": [
          {
            "api_key": []
          },
          {
            "publishable_key": []
          }
        ]
      }
    },
    "/payment_methods/{customer_id}": {
      "get": {
        "tags": [
          "Payment Methods"
        ],
        "summary": "List payment methods for a Customer",
        "description": "List payment methods for a Customer\n\nTo filter and list the applicable payment methods for a particular Customer ID",
        "operationId": "List all Payment Methods for a Customer",
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "description": "The unique identifier for the customer account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accepted_country",
            "in": "query",
            "description": "The two-letter ISO currency code",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "accepted_currency",
            "in": "path",
            "description": "The three-letter ISO currency code",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Currency"
              }
            }
          },
          {
            "name": "minimum_amount",
            "in": "query",
            "description": "The minimum amount accepted for processing by the particular payment method.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "maximum_amount",
            "in": "query",
            "description": "The maximum amount amount accepted for processing by the particular payment method.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "recurring_payment_enabled",
            "in": "query",
            "description": "Indicates whether the payment method is eligible for recurring payments",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "installment_payment_enabled",
            "in": "query",
            "description": "Indicates whether the payment method is eligible for installment payments",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment Methods retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerPaymentMethodsListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Data"
          },
          "404": {
            "description": "Payment Methods does not exist in records"
          }
        },
        "deprecated": false,
        "security": [
          {
            "api_key": []
          },
          {
            "ephemeral_key": []
          }
        ]
      }
    },
    "/payment_methods/{method_id}": {
      "get": {
        "tags": [
          "Payment Methods"
        ],
        "summary": "Payment Method - Retrieve",
        "description": "Payment Method - Retrieve\n\nTo retrieve a payment method",
        "operationId": "Retrieve a Payment method",
        "parameters": [
          {
            "name": "method_id",
            "in": "path",
            "description": "The unique identifier for the Payment Method",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment Method retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodResponse"
                }
              }
            }
          },
          "404": {
            "description": "Payment Method does not exist in records"
          }
        },
        "deprecated": false,
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Payment Methods"
        ],
        "summary": "Payment Method - Update",
        "description": "Payment Method - Update\n\nTo update an existing payment method attached to a customer object. This API is useful for use cases such as updating the card number for expired cards to prevent discontinuity in recurring payments",
        "operationId": "Update a Payment method",
        "parameters": [
          {
            "name": "method_id",
            "in": "path",
            "description": "The unique identifier for the Payment Method",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentMethodUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payment Method updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodResponse"
                }
              }
            }
          },
          "404": {
            "description": "Payment Method does not exist in records"
          }
        },
        "deprecated": false,
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Payment Methods"
        ],
        "summary": "Payment Method - Delete",
        "description": "Payment Method - Delete\n\nDelete payment method",
        "operationId": "Delete a Payment method",
        "parameters": [
          {
            "name": "method_id",
            "in": "path",
            "description": "The unique identifier for the Payment Method",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment Method deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodDeleteResponse"
                }
              }
            }
          },
          "404": {
            "description": "Payment Method does not exist in records"
          }
        },
        "deprecated": false,
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/payments": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Payments - Create",
        "description": "Payments - Create\n\nTo process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture",
        "operationId": "Create a Payment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payment created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing Mandatory fields"
          }
        },
        "deprecated": false,
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/payments/list": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Payments - List",
        "description": "Payments - List\n\nTo list the payments",
        "operationId": "List all Payments",
        "parameters": [
          {
            "name": "customer_id",
            "in": "query",
            "description": "The identifier for the customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "starting_after",
            "in": "query",
            "description": "A cursor for use in pagination, fetch the next list after some object",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ending_before",
            "in": "query",
            "description": "A cursor for use in pagination, fetch the previous list before some object",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit on the number of objects to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "created",
            "in": "query",
            "description": "The time at which payment is created",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "created_lt",
            "in": "query",
            "description": "Time less than the payment created time",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "created_gt",
            "in": "query",
            "description": "Time greater than the payment created time",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "created_lte",
            "in": "query",
            "description": "Time less than or equals to the payment created time",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "created_gte",
            "in": "query",
            "description": "Time greater than or equals to the payment created time",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Received payment list"
          },
          "404": {
            "description": "No payments found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/payments/session_tokens": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Payments - Session token",
        "description": "Payments - Session token\n\nTo create the session object or to get session token for wallets",
        "operationId": "Create Session tokens for a Payment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentsSessionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payment session object created or session token was retrieved from wallets",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsSessionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing mandatory fields"
          }
        },
        "deprecated": false,
        "security": [
          {
            "publishable_key": []
          }
        ]
      }
    },
    "/payments/{payment_id}": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Payments - Retrieve",
        "description": "Payments - Retrieve\n\nTo retrieve the properties of a Payment. This may be used to get the status of a previously initiated payment or next action for an ongoing payment",
        "operationId": "Retrieve a Payment",
        "parameters": [
          {
            "name": "payment_id",
            "in": "path",
            "description": "The identifier for payment",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentRetrieveBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Gets the payment with final status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsResponse"
                }
              }
            }
          },
          "404": {
            "description": "No payment found"
          }
        },
        "deprecated": false,
        "security": [
          {
            "api_key": []
          },
          {
            "publishable_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Payments - Update",
        "description": "Payments - Update\n\nTo update the properties of a PaymentIntent object. This may include attaching a payment method, or attaching customer object or metadata fields after the Payment is created",
        "operationId": "Update a Payment",
        "parameters": [
          {
            "name": "payment_id",
            "in": "path",
            "description": "The identifier for payment",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payment updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing mandatory fields"
          }
        },
        "deprecated": false,
        "security": [
          {
            "api_key": []
          },
          {
            "publishable_key": []
          }
        ]
      }
    },
    "/payments/{payment_id}/cancel": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Payments - Cancel",
        "description": "Payments - Cancel\n\nA Payment could can be cancelled when it is in one of these statuses: requires_payment_method, requires_capture, requires_confirmation, requires_customer_action",
        "operationId": "Cancel a Payment",
        "parameters": [
          {
            "name": "payment_id",
            "in": "path",
            "description": "The identifier for payment",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentsCancelRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payment canceled"
          },
          "400": {
            "description": "Missing mandatory fields"
          }
        },
        "deprecated": false,
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/payments/{payment_id}/capture": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Payments - Capture",
        "description": "Payments - Capture\n\nTo capture the funds for an uncaptured payment",
        "operationId": "Capture a Payment",
        "parameters": [
          {
            "name": "payment_id",
            "in": "path",
            "description": "The identifier for payment",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentsCaptureRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payment captured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing mandatory fields"
          }
        },
        "deprecated": false,
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/payments/{payment_id}/confirm": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Payments - Confirm",
        "description": "Payments - Confirm\n\nThis API is to confirm the payment request and forward payment to the payment processor. This API provides more granular control upon when the API is forwarded to the payment processor. Alternatively you can confirm the payment within the Payments Create API",
        "operationId": "Confirm a Payment",
        "parameters": [
          {
            "name": "payment_id",
            "in": "path",
            "description": "The identifier for payment",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payment confirmed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing mandatory fields"
          }
        },
        "deprecated": false,
        "security": [
          {
            "api_key": []
          },
          {
            "publishable_key": []
          }
        ]
      }
    },
    "/refunds": {
      "post": {
        "tags": [
          "Refunds"
        ],
        "summary": "Refunds - Create",
        "description": "Refunds - Create\n\nTo create a refund against an already processed payment",
        "operationId": "Create a Refund",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Refund created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing Mandatory fields"
          }
        },
        "deprecated": false,
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/refunds/list": {
      "get": {
        "tags": [
          "Refunds"
        ],
        "summary": "Refunds - List",
        "description": "Refunds - List\n\nTo list the refunds associated with a payment_id or with the merchant, if payment_id is not provided",
        "operationId": "List all Refunds",
        "parameters": [
          {
            "name": "payment_id",
            "in": "query",
            "description": "The identifier for the payment",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit on the number of objects to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "created",
            "in": "query",
            "description": "The time at which refund is created",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "created_lt",
            "in": "query",
            "description": "Time less than the refund created time",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "created_gt",
            "in": "query",
            "description": "Time greater than the refund created time",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "created_lte",
            "in": "query",
            "description": "Time less than or equals to the refund created time",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "created_gte",
            "in": "query",
            "description": "Time greater than or equals to the refund created time",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of refunds",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundListResponse"
                }
              }
            }
          },
          "404": {
            "description": "Refund does not exist in our records"
          }
        },
        "deprecated": false,
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/refunds/{refund_id}": {
      "get": {
        "tags": [
          "Refunds"
        ],
        "summary": "Refunds - Retrieve",
        "description": "Refunds - Retrieve\n\nTo retrieve the properties of a Refund. This may be used to get the status of a previously initiated payment or next action for an ongoing payment",
        "operationId": "Retrieve a Refund",
        "parameters": [
          {
            "name": "refund_id",
            "in": "path",
            "description": "The identifier for refund",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Refund retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundResponse"
                }
              }
            }
          },
          "404": {
            "description": "Refund does not exist in our records"
          }
        },
        "deprecated": false,
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Refunds"
        ],
        "summary": "Refunds - Update",
        "description": "Refunds - Update\n\nTo update the properties of a Refund object. This may include attaching a reason for the refund or metadata fields",
        "operationId": "Update a Refund",
        "parameters": [
          {
            "name": "refund_id",
            "in": "path",
            "description": "The identifier for refund",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Refund updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing Mandatory fields"
          }
        },
        "deprecated": false,
        "security": [
          {
            "api_key": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AcceptanceType": {
        "type": "string",
        "enum": [
          "online",
          "offline"
        ]
      },
      "AcceptedCountries": {
        "type": "object",
        "description": "List of enabled and disabled countries, empty in case all countries are enabled",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of accepted countries (disable_only, enable_only)"
          },
          "list": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of countries of the provided type",
            "example": [
              "FR",
              "DE",
              "IN"
            ]
          }
        }
      },
      "AcceptedCurrencies": {
        "type": "object",
        "description": "List of enabled and disabled currencies, empty in case all currencies are enabled",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "type of accepted currencies (disable_only, enable_only)"
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Currency"
            },
            "description": "List of currencies of the provided type",
            "example": [
              "USD",
              "EUR"
            ]
          }
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/AddressDetails"
          },
          "phone": {
            "$ref": "#/components/schemas/PhoneDetails"
          }
        }
      },
      "AddressDetails": {
        "type": "object",
        "properties": {
          "city": {
            "type": "string",
            "description": "The address city",
            "example": "New York",
            "maxLength": 50
          },
          "country": {
            "type": "string",
            "description": "The two-letter ISO country code for the address",
            "example": "US",
            "maxLength": 2,
            "minLength": 2
          },
          "line1": {
            "type": "string",
            "description": "The first line of the address",
            "example": "123, King Street",
            "maxLength": 200
          },
          "line2": {
            "type": "string",
            "description": "The second line of the address",
            "example": "Powelson Avenue",
            "maxLength": 50
          },
          "line3": {
            "type": "string",
            "description": "The third line of the address",
            "example": "Bridgewater",
            "maxLength": 50
          },
          "zip": {
            "type": "string",
            "description": "The zip/postal code for the address",
            "example": "08807",
            "maxLength": 50
          },
          "state": {
            "type": "string",
            "description": "The address state",
            "example": "New York"
          },
          "first_name": {
            "type": "string",
            "description": "The first name for the address",
            "example": "John",
            "maxLength": 255
          },
          "last_name": {
            "type": "string",
            "description": "The last name for the address",
            "example": "Doe",
            "maxLength": 255
          }
        }
      },
      "AmountInfo": {
        "type": "object",
        "required": [
          "label",
          "type",
          "amount"
        ],
        "properties": {
          "label": {
            "type": "string",
            "description": "The label must be the name of the merchant."
          },
          "type": {
            "type": "string",
            "description": "A value that indicates whether the line item(Ex: total, tax, discount, or grand total) is final or pending."
          },
          "amount": {
            "type": "string",
            "description": "The total amount for the payment"
          }
        }
      },
      "ApiKeyExpiration": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "never"
            ]
          },
          {
            "type": "string",
            "format": "date-time"
          }
        ]
      },
      "ApplePayPaymentRequest": {
        "type": "object",
        "required": [
          "country_code",
          "currency_code",
          "total",
          "merchant_capabilities",
          "supported_networks"
        ],
        "properties": {
          "country_code": {
            "type": "string",
            "description": "The code for country"
          },
          "currency_code": {
            "type": "string",
            "description": "The code for currency"
          },
          "total": {
            "$ref": "#/components/schemas/AmountInfo"
          },
          "merchant_capabilities": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of merchant capabilities(ex: whether capable of 3ds or no-3ds)"
          },
          "supported_networks": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of supported networks"
          }
        }
      },
      "ApplePaySessionResponse": {
        "type": "object",
        "required": [
          "epoch_timestamp",
          "expires_at",
          "merchant_session_identifier",
          "nonce",
          "merchant_identifier",
          "domain_name",
          "display_name",
          "signature",
          "operational_analytics_identifier",
          "retries",
          "psp_id"
        ],
        "properties": {
          "epoch_timestamp": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp at which session is requested"
          },
          "expires_at": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp at which session expires"
          },
          "merchant_session_identifier": {
            "type": "string",
            "description": "The identifier for the merchant session"
          },
          "nonce": {
            "type": "string",
            "description": "Apple pay generated unique ID (UUID) value"
          },
          "merchant_identifier": {
            "type": "string",
            "description": "The identifier for the merchant"
          },
          "domain_name": {
            "type": "string",
            "description": "The domain name of the merchant which is registered in Apple Pay"
          },
          "display_name": {
            "type": "string",
            "description": "The name to be displayed on Apple Pay button"
          },
          "signature": {
            "type": "string",
            "description": "A string which represents the properties of a payment"
          },
          "operational_analytics_identifier": {
            "type": "string",
            "description": "The identifier for the operational analytics"
          },
          "retries": {
            "type": "integer",
            "format": "int32",
            "description": "The number of retries to get the session response"
          },
          "psp_id": {
            "type": "string",
            "description": "The identifier for the connector transaction"
          }
        }
      },
      "ApplePayWalletData": {
        "type": "object",
        "required": [
          "payment_data",
          "payment_method",
          "transaction_identifier"
        ],
        "properties": {
          "payment_data": {
            "type": "string",
            "description": "The payment data of Apple pay"
          },
          "payment_method": {
            "$ref": "#/components/schemas/ApplepayPaymentMethod"
          },
          "transaction_identifier": {
            "type": "string",
            "description": "The unique identifier for the transaction"
          }
        }
      },
      "ApplepayPaymentMethod": {
        "type": "object",
        "required": [
          "display_name",
          "network",
          "type"
        ],
        "properties": {
          "display_name": {
            "type": "string",
            "description": "The name to be displayed on Apple Pay button"
          },
          "network": {
            "type": "string",
            "description": "The network of the Apple pay payment method"
          },
          "type": {
            "type": "string",
            "description": "The type of the payment method"
          }
        }
      },
      "ApplepaySessionTokenResponse": {
        "type": "object",
        "required": [
          "session_token_data",
          "payment_request_data"
        ],
        "properties": {
          "session_token_data": {
            "$ref": "#/components/schemas/ApplePaySessionResponse"
          },
          "payment_request_data": {
            "$ref": "#/components/schemas/ApplePayPaymentRequest"
          }
        }
      },
      "AuthenticationType": {
        "type": "string",
        "enum": [
          "three_ds",
          "no_three_ds"
        ]
      },
      "BankNames": {
        "type": "string",
        "description": "Name of banks supported by Hyperswitch",
        "enum": [
          "american_express",
          "bank_of_america",
          "barclays",
          "capital_one",
          "chase",
          "citi",
          "discover",
          "navy_federal_credit_union",
          "pentagon_federal_credit_union",
          "synchrony_bank",
          "wells_fargo",
          "abn_amro",
          "asn_bank",
          "bunq",
          "handelsbanken",
          "ing",
          "knab",
          "moneyou",
          "rabobank",
          "regiobank",
          "revolut",
          "sns_bank",
          "triodos_bank",
          "van_lanschot",
          "arzte_und_apotheker_bank",
          "austrian_anadi_bank_ag",
          "bank_austria",
          "bank99_ag",
          "bankhaus_carl_spangler",
          "bankhaus_schelhammer_und_schattera_ag",
          "bawag_psk_ag",
          "bks_bank_ag",
          "brull_kallmus_bank_ag",
          "btv_vier_lander_bank",
          "capital_bank_grawe_gruppe_ag",
          "dolomitenbank",
          "easybank_ag",
          "erste_bank_und_sparkassen",
          "hypo_alpeadriabank_international_ag",
          "hypo_noe_lb_fur_niederosterreich_u_wien",
          "hypo_oberosterreich_salzburg_steiermark",
          "hypo_tirol_bank_ag",
          "hypo_vorarlberg_bank_ag",
          "hypo_bank_burgenland_aktiengesellschaft",
          "marchfelder_bank",
          "oberbank_ag",
          "osterreichische_arzte_und_apothekerbank",
          "posojilnica_bank_e_gen",
          "raiffeisen_bankengruppe_osterreich",
          "schelhammer_capital_bank_ag",
          "schoellerbank_ag",
          "sparda_bank_wien",
          "volksbank_gruppe",
          "volkskreditbank_ag",
          "vr_bank_braunau"
        ]
      },
      "BankRedirectBilling": {
        "type": "object",
        "required": [
          "billing_name"
        ],
        "properties": {
          "billing_name": {
            "type": "string",
            "description": "The name for which billing is issued",
            "example": "John Doe"
          }
        }
      },
      "BankRedirectData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "eps"
            ],
            "properties": {
              "eps": {
                "type": "object",
                "required": [
                  "billing_details",
                  "bank_name"
                ],
                "properties": {
                  "billing_details": {
                    "$ref": "#/components/schemas/BankRedirectBilling"
                  },
                  "bank_name": {
                    "$ref": "#/components/schemas/BankNames"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "giropay"
            ],
            "properties": {
              "giropay": {
                "type": "object",
                "required": [
                  "billing_details"
                ],
                "properties": {
                  "billing_details": {
                    "$ref": "#/components/schemas/BankRedirectBilling"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "ideal"
            ],
            "properties": {
              "ideal": {
                "type": "object",
                "required": [
                  "billing_details",
                  "bank_name"
                ],
                "properties": {
                  "billing_details": {
                    "$ref": "#/components/schemas/BankRedirectBilling"
                  },
                  "bank_name": {
                    "$ref": "#/components/schemas/BankNames"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "sofort"
            ],
            "properties": {
              "sofort": {
                "type": "object",
                "required": [
                  "country",
                  "preferred_language"
                ],
                "properties": {
                  "country": {
                    "type": "string",
                    "description": "The country for bank payment",
                    "example": "US"
                  },
                  "preferred_language": {
                    "type": "string",
                    "description": "The preferred language",
                    "example": "en"
                  }
                }
              }
            }
          }
        ]
      },
      "CaptureMethod": {
        "type": "string",
        "enum": [
          "automatic",
          "manual",
          "manual_multiple",
          "scheduled"
        ]
      },
      "Card": {
        "type": "object",
        "required": [
          "card_number",
          "card_exp_month",
          "card_exp_year",
          "card_holder_name",
          "card_cvc"
        ],
        "properties": {
          "card_number": {
            "type": "string",
            "description": "The card number",
            "example": "4242424242424242"
          },
          "card_exp_month": {
            "type": "string",
            "description": "The card's expiry month",
            "example": "24"
          },
          "card_exp_year": {
            "type": "string",
            "description": "The card's expiry year",
            "example": "24"
          },
          "card_holder_name": {
            "type": "string",
            "description": "The card holder's name",
            "example": "John Test"
          },
          "card_cvc": {
            "type": "string",
            "description": "The CVC number for the card",
            "example": "242"
          },
          "card_issuer": {
            "type": "string",
            "description": "The name of the issuer of card",
            "example": "chase"
          },
          "card_network": {
            "$ref": "#/components/schemas/CardNetwork"
          }
        }
      },
      "CardDetail": {
        "type": "object",
        "required": [
          "card_number",
          "card_exp_month",
          "card_exp_year",
          "card_holder_name"
        ],
        "properties": {
          "card_number": {
            "type": "string",
            "description": "Card Number",
            "example": "4111111145551142"
          },
          "card_exp_month": {
            "type": "string",
            "description": "Card Expiry Month",
            "example": "10"
          },
          "card_exp_year": {
            "type": "string",
            "description": "Card Expiry Year",
            "example": "25"
          },
          "card_holder_name": {
            "type": "string",
            "description": "Card Holder Name",
            "example": "John Doe"
          }
        }
      },
      "CardDetailFromLocker": {
        "type": "object",
        "properties": {
          "scheme": {
            "type": "string"
          },
          "issuer_country": {
            "type": "string"
          },
          "last4_digits": {
            "type": "string"
          },
          "expiry_month": {
            "type": "string"
          },
          "expiry_year": {
            "type": "string"
          },
          "card_token": {
            "type": "string"
          },
          "card_holder_name": {
            "type": "string"
          },
          "card_fingerprint": {
            "type": "string"
          }
        }
      },
      "CardNetwork": {
        "type": "string",
        "enum": [
          "Visa",
          "Mastercard",
          "AmericanExpress",
          "JCB",
          "DinersClub",
          "Discover",
          "CartesBancaires",
          "UnionPay",
          "Interac",
          "RuPay",
          "Maestro"
        ]
      },
      "Connector": {
        "type": "string",
        "enum": [
          "aci",
          "adyen",
          "airwallex",
          "applepay",
          "authorizedotnet",
          "bluesnap",
          "braintree",
          "checkout",
          "cybersource",
          "dummy",
          "bambora",
          "dlocal",
          "fiserv",
          "globalpay",
          "klarna",
          "multisafepay",
          "nuvei",
          "payu",
          "rapyd",
          "shift4",
          "stripe",
          "worldline",
          "worldpay"
        ]
      },
      "ConnectorType": {
        "type": "string",
        "enum": [
          "payment_processor",
          "payment_vas",
          "fin_operations",
          "fiz_operations",
          "networks",
          "banking_entities",
          "non_banking_finance"
        ]
      },
      "CreateApiKeyRequest": {
        "type": "object",
        "description": "The request body for creating an API Key.",
        "required": [
          "name",
          "expiration"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "A unique name for the API Key to help you identify it.",
            "example": "Sandbox integration key",
            "maxLength": 64
          },
          "description": {
            "type": "string",
            "description": "A description to provide more context about the API Key.",
            "example": "Key used by our developers to integrate with the sandbox environment",
            "maxLength": 256
          },
          "expiration": {
            "$ref": "#/components/schemas/ApiKeyExpiration"
          }
        }
      },
      "CreateApiKeyResponse": {
        "type": "object",
        "description": "The response body for creating an API Key.",
        "required": [
          "key_id",
          "merchant_id",
          "name",
          "api_key",
          "created",
          "expiration"
        ],
        "properties": {
          "key_id": {
            "type": "string",
            "description": "The identifier for the API Key.",
            "example": "5hEEqkgJUyuxgSKGArHA4mWSnX",
            "maxLength": 64
          },
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account.",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 64
          },
          "name": {
            "type": "string",
            "description": "The unique name for the API Key to help you identify it.",
            "example": "Sandbox integration key",
            "maxLength": 64
          },
          "description": {
            "type": "string",
            "description": "The description to provide more context about the API Key.",
            "example": "Key used by our developers to integrate with the sandbox environment",
            "maxLength": 256
          },
          "api_key": {
            "type": "string",
            "description": "The plaintext API Key used for server-side API access. Ensure you store the API Key\nsecurely as you will not be able to see it again.",
            "maxLength": 128
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "The time at which the API Key was created.",
            "example": "2022-09-10T10:11:12Z"
          },
          "expiration": {
            "$ref": "#/components/schemas/ApiKeyExpiration"
          }
        }
      },
      "Currency": {
        "type": "string",
        "enum": [
          "AED",
          "ALL",
          "AMD",
          "ANG",
          "ARS",
          "AUD",
          "AWG",
          "AZN",
          "BBD",
          "BDT",
          "BHD",
          "BMD",
          "BND",
          "BOB",
          "BRL",
          "BSD",
          "BWP",
          "BZD",
          "CAD",
          "CHF",
          "CNY",
          "COP",
          "CRC",
          "CUP",
          "CZK",
          "DKK",
          "DOP",
          "DZD",
          "EGP",
          "ETB",
          "EUR",
          "FJD",
          "GBP",
          "GHS",
          "GIP",
          "GMD",
          "GTQ",
          "GYD",
          "HKD",
          "HNL",
          "HRK",
          "HTG",
          "HUF",
          "IDR",
          "ILS",
          "INR",
          "JMD",
          "JOD",
          "JPY",
          "KES",
          "KGS",
          "KHR",
          "KRW",
          "KWD",
          "KYD",
          "KZT",
          "LAK",
          "LBP",
          "LKR",
          "LRD",
          "LSL",
          "MAD",
          "MDL",
          "MKD",
          "MMK",
          "MNT",
          "MOP",
          "MUR",
          "MVR",
          "MWK",
          "MXN",
          "MYR",
          "NAD",
          "NGN",
          "NIO",
          "NOK",
          "NPR",
          "NZD",
          "OMR",
          "PEN",
          "PGK",
          "PHP",
          "PKR",
          "PLN",
          "QAR",
          "RUB",
          "SAR",
          "SCR",
          "SEK",
          "SGD",
          "SLL",
          "SOS",
          "SSP",
          "SVC",
          "SZL",
          "THB",
          "TTD",
          "TWD",
          "TZS",
          "USD",
          "UYU",
          "UZS",
          "YER",
          "ZAR"
        ]
      },
      "CustomerAcceptance": {
        "type": "object",
        "required": [
          "acceptance_type"
        ],
        "properties": {
          "acceptance_type": {
            "$ref": "#/components/schemas/AcceptanceType"
          },
          "accepted_at": {
            "type": "string",
            "format": "date-time",
            "description": "Specifying when the customer acceptance was provided",
            "example": "2022-09-10T10:11:12Z"
          },
          "online": {
            "$ref": "#/components/schemas/OnlineMandate"
          }
        }
      },
      "CustomerDeleteResponse": {
        "type": "object",
        "required": [
          "customer_id",
          "customer_deleted",
          "address_deleted",
          "payment_methods_deleted"
        ],
        "properties": {
          "customer_id": {
            "type": "string",
            "description": "The identifier for the customer object",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "customer_deleted": {
            "type": "boolean",
            "description": "Whether customer was deleted or not",
            "example": false
          },
          "address_deleted": {
            "type": "boolean",
            "description": "Whether address was deleted or not",
            "example": false
          },
          "payment_methods_deleted": {
            "type": "boolean",
            "description": "Whether payment methods deleted or not",
            "example": false
          }
        }
      },
      "CustomerPaymentMethod": {
        "type": "object",
        "required": [
          "payment_token",
          "customer_id",
          "payment_method",
          "recurring_enabled",
          "installment_payment_enabled"
        ],
        "properties": {
          "payment_token": {
            "type": "string",
            "description": "Token for payment method in temporary card locker which gets refreshed often",
            "example": "7ebf443f-a050-4067-84e5-e6f6d4800aef"
          },
          "customer_id": {
            "type": "string",
            "description": "The unique identifier of the customer.",
            "example": "cus_meowerunwiuwiwqw"
          },
          "payment_method": {
            "$ref": "#/components/schemas/PaymentMethodType"
          },
          "payment_method_type": {
            "$ref": "#/components/schemas/PaymentMethodType"
          },
          "payment_method_issuer": {
            "type": "string",
            "description": "The name of the bank/ provider issuing the payment method to the end user",
            "example": "Citibank"
          },
          "payment_method_issuer_code": {
            "$ref": "#/components/schemas/PaymentMethodIssuerCode"
          },
          "recurring_enabled": {
            "type": "boolean",
            "description": "Indicates whether the payment method is eligible for recurring payments",
            "example": true
          },
          "installment_payment_enabled": {
            "type": "boolean",
            "description": "Indicates whether the payment method is eligible for installment payments",
            "example": true
          },
          "payment_experience": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentExperience"
            },
            "description": "Type of payment experience enabled with the connector",
            "example": [
              "redirect_to_url"
            ]
          },
          "card": {
            "$ref": "#/components/schemas/CardDetailFromLocker"
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object."
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "A timestamp (ISO 8601 code) that determines when the customer was created",
            "example": "2023-01-18T11:04:09.922Z"
          }
        }
      },
      "CustomerPaymentMethodsListResponse": {
        "type": "object",
        "required": [
          "customer_payment_methods"
        ],
        "properties": {
          "customer_payment_methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerPaymentMethod"
            },
            "description": "List of payment methods for customer"
          }
        }
      },
      "CustomerRequest": {
        "type": "object",
        "description": "The customer details",
        "properties": {
          "customer_id": {
            "type": "string",
            "description": "The identifier for the customer object. If not provided the customer ID will be autogenerated.",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "name": {
            "type": "string",
            "description": "The customer's name",
            "example": "Jon Test",
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "description": "The customer's email address",
            "example": "JonTest@test.com",
            "maxLength": 255
          },
          "phone": {
            "type": "string",
            "description": "The customer's phone number",
            "example": "9999999999",
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "description": "An arbitrary string that you can attach to a customer object.",
            "example": "First Customer",
            "maxLength": 255
          },
          "phone_country_code": {
            "type": "string",
            "description": "The country code for the customer phone number",
            "example": "+65",
            "maxLength": 255
          },
          "address": {
            "type": "object",
            "description": "The address for the customer"
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500\ncharacters long. Metadata is useful for storing additional, structured information on an\nobject."
          }
        }
      },
      "CustomerResponse": {
        "type": "object",
        "required": [
          "customer_id",
          "created_at"
        ],
        "properties": {
          "customer_id": {
            "type": "string",
            "description": "The identifier for the customer object. If not provided the customer ID will be autogenerated.",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "name": {
            "type": "string",
            "description": "The customer's name",
            "example": "Jon Test",
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "description": "The customer's email address",
            "example": "JonTest@test.com",
            "maxLength": 255
          },
          "phone": {
            "type": "string",
            "description": "The customer's phone number",
            "example": "9999999999",
            "maxLength": 255
          },
          "phone_country_code": {
            "type": "string",
            "description": "The country code for the customer phone number",
            "example": "+65",
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "description": "An arbitrary string that you can attach to a customer object.",
            "example": "First Customer",
            "maxLength": 255
          },
          "address": {
            "type": "object",
            "description": "The address for the customer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "A timestamp (ISO 8601 code) that determines when the customer was created",
            "example": "2023-01-18T11:04:09.922Z"
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500\ncharacters long. Metadata is useful for storing additional, structured information on an\nobject."
          }
        }
      },
      "FutureUsage": {
        "type": "string",
        "enum": [
          "off_session",
          "on_session"
        ]
      },
      "GooglePayPaymentMethodInfo": {
        "type": "object",
        "required": [
          "card_network",
          "card_details"
        ],
        "properties": {
          "card_network": {
            "type": "string",
            "description": "The name of the card network"
          },
          "card_details": {
            "type": "string",
            "description": "The details of the card"
          }
        }
      },
      "GooglePayWalletData": {
        "type": "object",
        "required": [
          "type",
          "description",
          "info",
          "tokenization_data"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of payment method"
          },
          "description": {
            "type": "string",
            "description": "User-facing message to describe the payment method that funds this transaction."
          },
          "info": {
            "$ref": "#/components/schemas/GooglePayPaymentMethodInfo"
          },
          "tokenization_data": {
            "$ref": "#/components/schemas/GpayTokenizationData"
          }
        }
      },
      "GpayAllowedMethodsParameters": {
        "type": "object",
        "required": [
          "allowed_auth_methods",
          "allowed_card_networks"
        ],
        "properties": {
          "allowed_auth_methods": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of allowed auth methods (ex: 3DS, No3DS, PAN_ONLY etc)"
          },
          "allowed_card_networks": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of allowed card networks (ex: AMEX,JCB etc)"
          }
        }
      },
      "GpayAllowedPaymentMethods": {
        "type": "object",
        "required": [
          "type",
          "parameters",
          "tokenization_specification"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of payment method"
          },
          "parameters": {
            "$ref": "#/components/schemas/GpayAllowedMethodsParameters"
          },
          "tokenization_specification": {
            "$ref": "#/components/schemas/GpayTokenizationSpecification"
          }
        }
      },
      "GpayMerchantInfo": {
        "type": "object",
        "required": [
          "merchant_name"
        ],
        "properties": {
          "merchant_name": {
            "type": "string",
            "description": "The name of the merchant"
          }
        }
      },
      "GpaySessionTokenResponse": {
        "type": "object",
        "required": [
          "merchant_info",
          "allowed_payment_methods",
          "transaction_info"
        ],
        "properties": {
          "merchant_info": {
            "$ref": "#/components/schemas/GpayMerchantInfo"
          },
          "allowed_payment_methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GpayAllowedPaymentMethods"
            },
            "description": "List of the allowed payment meythods"
          },
          "transaction_info": {
            "$ref": "#/components/schemas/GpayTransactionInfo"
          }
        }
      },
      "GpayTokenParameters": {
        "type": "object",
        "required": [
          "gateway",
          "gateway_merchant_id"
        ],
        "properties": {
          "gateway": {
            "type": "string",
            "description": "The name of the connector"
          },
          "gateway_merchant_id": {
            "type": "string",
            "description": "The merchant ID registered in the connector associated"
          }
        }
      },
      "GpayTokenizationData": {
        "type": "object",
        "required": [
          "type",
          "token"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of the token"
          },
          "token": {
            "type": "string",
            "description": "Token generated for the wallet"
          }
        }
      },
      "GpayTokenizationSpecification": {
        "type": "object",
        "required": [
          "type",
          "parameters"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The token specification type(ex: PAYMENT_GATEWAY)"
          },
          "parameters": {
            "$ref": "#/components/schemas/GpayTokenParameters"
          }
        }
      },
      "GpayTransactionInfo": {
        "type": "object",
        "required": [
          "country_code",
          "currency_code",
          "total_price_status",
          "total_price"
        ],
        "properties": {
          "country_code": {
            "type": "string",
            "description": "The country code"
          },
          "currency_code": {
            "type": "string",
            "description": "The currency code"
          },
          "total_price_status": {
            "type": "string",
            "description": "The total price status (ex: 'FINAL')"
          },
          "total_price": {
            "type": "integer",
            "format": "int64",
            "description": "The total price"
          }
        }
      },
      "IntentStatus": {
        "type": "string",
        "enum": [
          "succeeded",
          "failed",
          "cancelled",
          "processing",
          "requires_customer_action",
          "requires_payment_method",
          "requires_confirmation",
          "requires_capture"
        ]
      },
      "KlarnaSessionTokenResponse": {
        "type": "object",
        "required": [
          "session_token",
          "session_id"
        ],
        "properties": {
          "session_token": {
            "type": "string",
            "description": "The session token for Klarna"
          },
          "session_id": {
            "type": "string",
            "description": "The identifier for the session"
          }
        }
      },
      "MandateAmountData": {
        "type": "object",
        "required": [
          "amount",
          "currency"
        ],
        "properties": {
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "The maximum amount to be debited for the mandate transaction",
            "example": 6540
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          }
        }
      },
      "MandateCardDetails": {
        "type": "object",
        "properties": {
          "last4_digits": {
            "type": "string",
            "description": "The last 4 digits of card"
          },
          "card_exp_month": {
            "type": "string",
            "description": "The expiry month of card"
          },
          "card_exp_year": {
            "type": "string",
            "description": "The expiry year of card"
          },
          "card_holder_name": {
            "type": "string",
            "description": "The card holder name"
          },
          "card_token": {
            "type": "string",
            "description": "The token from card locker"
          },
          "scheme": {
            "type": "string",
            "description": "The card scheme network for the particular card"
          },
          "issuer_country": {
            "type": "string",
            "description": "The country code in in which the card was issued"
          },
          "card_fingerprint": {
            "type": "string",
            "description": "A unique identifier alias to identify a particular card"
          }
        }
      },
      "MandateData": {
        "type": "object",
        "required": [
          "customer_acceptance",
          "mandate_type"
        ],
        "properties": {
          "customer_acceptance": {
            "$ref": "#/components/schemas/CustomerAcceptance"
          },
          "mandate_type": {
            "$ref": "#/components/schemas/MandateType"
          }
        }
      },
      "MandateResponse": {
        "type": "object",
        "required": [
          "mandate_id",
          "status",
          "payment_method_id",
          "payment_method"
        ],
        "properties": {
          "mandate_id": {
            "type": "string",
            "description": "The identifier for mandate"
          },
          "status": {
            "$ref": "#/components/schemas/MandateStatus"
          },
          "payment_method_id": {
            "type": "string",
            "description": "The identifier for payment method"
          },
          "payment_method": {
            "type": "string",
            "description": "The payment method"
          },
          "card": {
            "$ref": "#/components/schemas/MandateCardDetails"
          },
          "customer_acceptance": {
            "$ref": "#/components/schemas/CustomerAcceptance"
          }
        }
      },
      "MandateRevokedResponse": {
        "type": "object",
        "required": [
          "mandate_id",
          "status"
        ],
        "properties": {
          "mandate_id": {
            "type": "string",
            "description": "The identifier for mandate"
          },
          "status": {
            "$ref": "#/components/schemas/MandateStatus"
          }
        }
      },
      "MandateStatus": {
        "type": "string",
        "description": "The status of the mandate, which indicates whether it can be used to initiate a payment",
        "enum": [
          "active",
          "inactive",
          "pending",
          "revoked"
        ]
      },
      "MandateType": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "single_use"
            ],
            "properties": {
              "single_use": {
                "$ref": "#/components/schemas/MandateAmountData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "multi_use"
            ],
            "properties": {
              "multi_use": {
                "$ref": "#/components/schemas/MandateAmountData"
              }
            }
          }
        ]
      },
      "MerchantAccountCreate": {
        "type": "object",
        "required": [
          "merchant_id"
        ],
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "merchant_name": {
            "type": "string",
            "description": "Name of the Merchant Account",
            "example": "NewAge Retailer"
          },
          "merchant_details": {
            "$ref": "#/components/schemas/MerchantDetails"
          },
          "return_url": {
            "type": "string",
            "description": "The URL to redirect after the completion of the operation",
            "example": "https://www.example.com/success",
            "maxLength": 255
          },
          "webhook_details": {
            "$ref": "#/components/schemas/WebhookDetails"
          },
          "routing_algorithm": {
            "type": "object",
            "description": "The routing algorithm to be used for routing payments to desired connectors"
          },
          "sub_merchants_enabled": {
            "type": "boolean",
            "description": "A boolean value to indicate if the merchant is a sub-merchant under a master or a parent merchant. By default, its value is false.",
            "default": false,
            "example": false
          },
          "parent_merchant_id": {
            "type": "string",
            "description": "Refers to the Parent Merchant ID if the merchant being created is a sub-merchant",
            "example": "xkkdf909012sdjki2dkh5sdf",
            "maxLength": 255
          },
          "enable_payment_response_hash": {
            "type": "boolean",
            "description": "A boolean value to indicate if payment response hash needs to be enabled",
            "default": false,
            "example": true
          },
          "payment_response_hash_key": {
            "type": "string",
            "description": "Refers to the hash key used for payment response"
          },
          "redirect_to_merchant_with_http_post": {
            "type": "boolean",
            "description": "A boolean value to indicate if redirect to merchant with http post needs to be enabled",
            "default": false,
            "example": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object."
          },
          "publishable_key": {
            "type": "string",
            "description": "API key that will be used for server side API access",
            "example": "AH3423bkjbkjdsfbkj"
          },
          "locker_id": {
            "type": "string",
            "description": "An identifier for the vault used to store payment method information.",
            "example": "locker_abc123"
          }
        }
      },
      "MerchantAccountDeleteResponse": {
        "type": "object",
        "required": [
          "merchant_id",
          "deleted"
        ],
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "deleted": {
            "type": "boolean",
            "description": "If the connector is deleted or not",
            "example": false
          }
        }
      },
      "MerchantAccountResponse": {
        "type": "object",
        "required": [
          "merchant_id",
          "enable_payment_response_hash",
          "redirect_to_merchant_with_http_post"
        ],
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "merchant_name": {
            "type": "string",
            "description": "Name of the Merchant Account",
            "example": "NewAge Retailer"
          },
          "return_url": {
            "type": "string",
            "description": "The URL to redirect after the completion of the operation",
            "example": "https://www.example.com/success",
            "maxLength": 255
          },
          "enable_payment_response_hash": {
            "type": "boolean",
            "description": "A boolean value to indicate if payment response hash needs to be enabled",
            "default": false,
            "example": true
          },
          "payment_response_hash_key": {
            "type": "string",
            "description": "Refers to the Parent Merchant ID if the merchant being created is a sub-merchant",
            "example": "xkkdf909012sdjki2dkh5sdf",
            "maxLength": 255
          },
          "redirect_to_merchant_with_http_post": {
            "type": "boolean",
            "description": "A boolean value to indicate if redirect to merchant with http post needs to be enabled",
            "default": false,
            "example": true
          },
          "merchant_details": {
            "$ref": "#/components/schemas/MerchantDetails"
          },
          "webhook_details": {
            "$ref": "#/components/schemas/WebhookDetails"
          },
          "routing_algorithm": {
            "$ref": "#/components/schemas/RoutingAlgorithm"
          },
          "sub_merchants_enabled": {
            "type": "boolean",
            "description": "A boolean value to indicate if the merchant is a sub-merchant under a master or a parent merchant. By default, its value is false.",
            "default": false,
            "example": false
          },
          "parent_merchant_id": {
            "type": "string",
            "description": "Refers to the Parent Merchant ID if the merchant being created is a sub-merchant",
            "example": "xkkdf909012sdjki2dkh5sdf",
            "maxLength": 255
          },
          "publishable_key": {
            "type": "string",
            "description": "API key that will be used for server side API access",
            "example": "AH3423bkjbkjdsfbkj"
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object."
          },
          "locker_id": {
            "type": "string",
            "description": "An identifier for the vault used to store payment method information.",
            "example": "locker_abc123"
          }
        }
      },
      "MerchantAccountUpdate": {
        "type": "object",
        "required": [
          "merchant_id"
        ],
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "merchant_name": {
            "type": "string",
            "description": "Name of the Merchant Account",
            "example": "NewAge Retailer"
          },
          "merchant_details": {
            "$ref": "#/components/schemas/MerchantDetails"
          },
          "return_url": {
            "type": "string",
            "description": "The URL to redirect after the completion of the operation",
            "example": "https://www.example.com/success",
            "maxLength": 255
          },
          "webhook_details": {
            "$ref": "#/components/schemas/WebhookDetails"
          },
          "routing_algorithm": {
            "type": "object",
            "description": "The routing algorithm to be used for routing payments to desired connectors"
          },
          "sub_merchants_enabled": {
            "type": "boolean",
            "description": "A boolean value to indicate if the merchant is a sub-merchant under a master or a parent merchant. By default, its value is false.",
            "default": false,
            "example": false
          },
          "parent_merchant_id": {
            "type": "string",
            "description": "Refers to the Parent Merchant ID if the merchant being created is a sub-merchant",
            "example": "xkkdf909012sdjki2dkh5sdf",
            "maxLength": 255
          },
          "enable_payment_response_hash": {
            "type": "boolean",
            "description": "A boolean value to indicate if payment response hash needs to be enabled",
            "default": false,
            "example": true
          },
          "payment_response_hash_key": {
            "type": "string",
            "description": "Refers to the hash key used for payment response"
          },
          "redirect_to_merchant_with_http_post": {
            "type": "boolean",
            "description": "A boolean value to indicate if redirect to merchant with http post needs to be enabled",
            "default": false,
            "example": true
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object."
          },
          "publishable_key": {
            "type": "string",
            "description": "API key that will be used for server side API access",
            "example": "AH3423bkjbkjdsfbkj"
          },
          "locker_id": {
            "type": "string",
            "description": "An identifier for the vault used to store payment method information.",
            "example": "locker_abc123"
          }
        }
      },
      "MerchantConnector": {
        "type": "object",
        "description": "Create a new Merchant Connector for the merchant account. The connector could be a payment processor / facilitator / acquirer or specialized services like Fraud / Accounting etc.\"",
        "required": [
          "connector_type",
          "connector_name"
        ],
        "properties": {
          "connector_type": {
            "$ref": "#/components/schemas/ConnectorType"
          },
          "connector_name": {
            "type": "string",
            "description": "Name of the Connector",
            "example": "stripe"
          },
          "merchant_connector_id": {
            "type": "string",
            "description": "Unique ID of the connector",
            "example": "mca_5apGeP94tMts6rg3U3kR"
          },
          "connector_account_details": {
            "type": "object",
            "description": "Account details of the Connector. You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Useful for storing additional, structured information on an object."
          },
          "test_mode": {
            "type": "boolean",
            "description": "A boolean value to indicate if the connector is in Test mode. By default, its value is false.",
            "default": false,
            "example": false
          },
          "disabled": {
            "type": "boolean",
            "description": "A boolean value to indicate if the connector is disabled. By default, its value is false.",
            "default": false,
            "example": false
          },
          "payment_methods_enabled": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodsEnabled"
            },
            "description": "Refers to the Parent Merchant ID if the merchant being created is a sub-merchant",
            "example": [
              {
                "accepted_countries": {
                  "list": [
                    "FR",
                    "DE",
                    "IN"
                  ],
                  "type": "disable_only"
                },
                "accepted_currencies": {
                  "list": [
                    "USD",
                    "EUR"
                  ],
                  "type": "enable_only"
                },
                "installment_payment_enabled": true,
                "maximum_amount": 68607706,
                "minimum_amount": 1,
                "payment_method": "wallet",
                "payment_method_issuers": [
                  "labore magna ipsum",
                  "aute"
                ],
                "payment_method_types": [
                  "upi_collect",
                  "upi_intent"
                ],
                "payment_schemes": [
                  "Discover",
                  "Discover"
                ],
                "recurring_enabled": true
              }
            ]
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object."
          }
        }
      },
      "MerchantConnectorDeleteResponse": {
        "type": "object",
        "required": [
          "merchant_id",
          "merchant_connector_id",
          "deleted"
        ],
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "merchant_connector_id": {
            "type": "string",
            "description": "Unique ID of the connector",
            "example": "mca_5apGeP94tMts6rg3U3kR"
          },
          "deleted": {
            "type": "boolean",
            "description": "If the connector is deleted or not",
            "example": false
          }
        }
      },
      "MerchantConnectorId": {
        "type": "object",
        "required": [
          "merchant_id",
          "merchant_connector_id"
        ],
        "properties": {
          "merchant_id": {
            "type": "string"
          },
          "merchant_connector_id": {
            "type": "string"
          }
        }
      },
      "MerchantDetails": {
        "type": "object",
        "properties": {
          "primary_contact_person": {
            "type": "string",
            "description": "The merchant's primary contact name",
            "example": "John Doe",
            "maxLength": 255
          },
          "primary_phone": {
            "type": "string",
            "description": "The merchant's primary phone number",
            "example": "999999999",
            "maxLength": 255
          },
          "primary_email": {
            "type": "string",
            "description": "The merchant's primary email address",
            "example": "johndoe@test.com",
            "maxLength": 255
          },
          "secondary_contact_person": {
            "type": "string",
            "description": "The merchant's secondary contact name",
            "example": "John Doe2",
            "maxLength": 255
          },
          "secondary_phone": {
            "type": "string",
            "description": "The merchant's secondary phone number",
            "example": "999999988",
            "maxLength": 255
          },
          "secondary_email": {
            "type": "string",
            "description": "The merchant's secondary email address",
            "example": "johndoe2@test.com",
            "maxLength": 255
          },
          "website": {
            "type": "string",
            "description": "The business website of the merchant",
            "example": "www.example.com",
            "maxLength": 255
          },
          "about_business": {
            "type": "string",
            "description": "A brief description about merchant's business",
            "example": "Online Retail with a wide selection of organic products for North America",
            "maxLength": 255
          },
          "address": {
            "$ref": "#/components/schemas/AddressDetails"
          }
        }
      },
      "Metadata": {
        "allOf": [
          {
            "type": "object",
            "description": "Any other metadata that is to be provided"
          },
          {
            "type": "object",
            "properties": {
              "order_details": {
                "$ref": "#/components/schemas/OrderDetails"
              }
            }
          }
        ]
      },
      "NextAction": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/NextActionType"
          },
          "redirect_to_url": {
            "type": "string",
            "description": "Contains the url for redirection flow",
            "example": "https://router.juspay.io/redirect/fakushdfjlksdfasklhdfj"
          }
        }
      },
      "NextActionType": {
        "type": "string",
        "enum": [
          "redirect_to_url",
          "display_qr_code",
          "invoke_sdk_client",
          "trigger_api"
        ]
      },
      "OnlineMandate": {
        "type": "object",
        "required": [
          "ip_address",
          "user_agent"
        ],
        "properties": {
          "ip_address": {
            "type": "string",
            "description": "Ip address of the customer machine from which the mandate was created",
            "example": "123.32.25.123"
          },
          "user_agent": {
            "type": "string",
            "description": "The user-agent of the customer's browser"
          }
        }
      },
      "OrderDetails": {
        "type": "object",
        "required": [
          "product_name",
          "quantity"
        ],
        "properties": {
          "product_name": {
            "type": "string",
            "description": "Name of the product that is being purchased",
            "example": "shirt",
            "maxLength": 255
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "description": "The quantity of the product to be purchased",
            "example": 1
          }
        }
      },
      "PayLaterData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "klarna_redirect"
            ],
            "properties": {
              "klarna_redirect": {
                "type": "object",
                "description": "For KlarnaRedirect as PayLater Option",
                "required": [
                  "billing_email",
                  "billing_country"
                ],
                "properties": {
                  "billing_email": {
                    "type": "string",
                    "description": "The billing email"
                  },
                  "billing_country": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "klarna_sdk"
            ],
            "properties": {
              "klarna_sdk": {
                "type": "object",
                "description": "For Klarna Sdk as PayLater Option",
                "required": [
                  "token"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The token for the sdk workflow"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "affirm_redirect"
            ],
            "properties": {
              "affirm_redirect": {
                "type": "object",
                "description": "For Affirm redirect as PayLater Option"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "afterpay_clearpay_redirect"
            ],
            "properties": {
              "afterpay_clearpay_redirect": {
                "type": "object",
                "description": "For AfterpayClearpay redirect as PayLater Option",
                "required": [
                  "billing_email",
                  "billing_name"
                ],
                "properties": {
                  "billing_email": {
                    "type": "string",
                    "description": "The billing email"
                  },
                  "billing_name": {
                    "type": "string",
                    "description": "The billing name"
                  }
                }
              }
            }
          }
        ]
      },
      "PayPalWalletData": {
        "type": "object",
        "required": [
          "token"
        ],
        "properties": {
          "token": {
            "type": "string",
            "description": "Token generated for the Apple pay"
          }
        }
      },
      "PaymentExperience": {
        "type": "string",
        "enum": [
          "redirect_to_url",
          "invoke_sdk_client",
          "display_qr_code",
          "one_click",
          "link_wallet",
          "invoke_payment_app"
        ]
      },
      "PaymentIdType": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "PaymentIntentId"
            ],
            "properties": {
              "PaymentIntentId": {
                "type": "string",
                "description": "The identifier for payment intent"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "ConnectorTransactionId"
            ],
            "properties": {
              "ConnectorTransactionId": {
                "type": "string",
                "description": "The identifier for connector transaction"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "PaymentAttemptId"
            ],
            "properties": {
              "PaymentAttemptId": {
                "type": "string",
                "description": "The identifier for payment attempt"
              }
            }
          }
        ]
      },
      "PaymentListConstraints": {
        "type": "object",
        "properties": {
          "customer_id": {
            "type": "string",
            "description": "The identifier for customer",
            "example": "cus_meowuwunwiuwiwqw"
          },
          "starting_after": {
            "type": "string",
            "description": "A cursor for use in pagination, fetch the next list after some object",
            "example": "pay_fafa124123"
          },
          "ending_before": {
            "type": "string",
            "description": "A cursor for use in pagination, fetch the previous list before some object",
            "example": "pay_fafa124123"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "description": "limit on the number of objects to return",
            "default": 10
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "The time at which payment is created",
            "example": "2022-09-10T10:11:12Z"
          },
          "created.lt": {
            "type": "string",
            "format": "date-time",
            "description": "Time less than the payment created time",
            "example": "2022-09-10T10:11:12Z"
          },
          "created.gt": {
            "type": "string",
            "format": "date-time",
            "description": "Time greater than the payment created time",
            "example": "2022-09-10T10:11:12Z"
          },
          "created.lte": {
            "type": "string",
            "format": "date-time",
            "description": "Time less than or equals to the payment created time",
            "example": "2022-09-10T10:11:12Z"
          },
          "created.gte": {
            "type": "string",
            "format": "date-time",
            "description": "Time greater than or equals to the payment created time",
            "example": "2022-09-10T10:11:12Z"
          }
        }
      },
      "PaymentListResponse": {
        "type": "object",
        "required": [
          "size",
          "data"
        ],
        "properties": {
          "size": {
            "type": "integer",
            "description": "The number of payments included in the list"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentsResponse"
            }
          }
        }
      },
      "PaymentMethod": {
        "type": "string",
        "enum": [
          "card",
          "pay_later",
          "wallet",
          "bank_redirect"
        ]
      },
      "PaymentMethodCreate": {
        "type": "object",
        "required": [
          "payment_method"
        ],
        "properties": {
          "payment_method": {
            "$ref": "#/components/schemas/PaymentMethodType"
          },
          "payment_method_type": {
            "$ref": "#/components/schemas/PaymentMethodType"
          },
          "payment_method_issuer": {
            "type": "string",
            "description": "The name of the bank/ provider issuing the payment method to the end user",
            "example": "Citibank"
          },
          "payment_method_issuer_code": {
            "$ref": "#/components/schemas/PaymentMethodIssuerCode"
          },
          "card": {
            "$ref": "#/components/schemas/CardDetail"
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object."
          },
          "customer_id": {
            "type": "string",
            "description": "The unique identifier of the customer.",
            "example": "cus_meowerunwiuwiwqw"
          },
          "card_network": {
            "type": "string",
            "description": "The card network",
            "example": "Visa"
          }
        }
      },
      "PaymentMethodData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "card"
            ],
            "properties": {
              "card": {
                "$ref": "#/components/schemas/Card"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "wallet"
            ],
            "properties": {
              "wallet": {
                "$ref": "#/components/schemas/WalletData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "pay_later"
            ],
            "properties": {
              "pay_later": {
                "$ref": "#/components/schemas/PayLaterData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "bank_redirect"
            ],
            "properties": {
              "bank_redirect": {
                "$ref": "#/components/schemas/BankRedirectData"
              }
            }
          }
        ]
      },
      "PaymentMethodDeleteResponse": {
        "type": "object",
        "required": [
          "payment_method_id",
          "deleted"
        ],
        "properties": {
          "payment_method_id": {
            "type": "string",
            "description": "The unique identifier of the Payment method",
            "example": "card_rGK4Vi5iSW70MY7J2mIy"
          },
          "deleted": {
            "type": "boolean",
            "description": "Whether payment method was deleted or not",
            "example": true
          }
        }
      },
      "PaymentMethodIssuerCode": {
        "type": "string",
        "enum": [
          "jp_hdfc",
          "jp_icici",
          "jp_googlepay",
          "jp_applepay",
          "jp_phonepay",
          "jp_wechat",
          "jp_sofort",
          "jp_giropay",
          "jp_sepa",
          "jp_bacs"
        ]
      },
      "PaymentMethodList": {
        "type": "object",
        "required": [
          "payment_method"
        ],
        "properties": {
          "payment_method": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "payment_method_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodType"
            },
            "description": "This is a sub-category of payment method.",
            "example": [
              "credit"
            ]
          }
        }
      },
      "PaymentMethodListResponse": {
        "type": "object",
        "required": [
          "payment_methods"
        ],
        "properties": {
          "redirect_url": {
            "type": "string",
            "description": "Redirect URL of the merchant",
            "example": "https://www.google.com"
          },
          "payment_methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodList"
            },
            "description": "Information about the payment method",
            "example": [
              {
                "payment_experience": null,
                "payment_method": "wallet",
                "payment_method_issuers": [
                  "labore magna ipsum",
                  "aute"
                ]
              }
            ]
          }
        }
      },
      "PaymentMethodResponse": {
        "type": "object",
        "required": [
          "merchant_id",
          "payment_method_id",
          "payment_method",
          "recurring_enabled",
          "installment_payment_enabled"
        ],
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "Unique identifier for a merchant",
            "example": "merchant_1671528864"
          },
          "customer_id": {
            "type": "string",
            "description": "The unique identifier of the customer.",
            "example": "cus_meowerunwiuwiwqw"
          },
          "payment_method_id": {
            "type": "string",
            "description": "The unique identifier of the Payment method",
            "example": "card_rGK4Vi5iSW70MY7J2mIy"
          },
          "payment_method": {
            "$ref": "#/components/schemas/PaymentMethodType"
          },
          "payment_method_type": {
            "$ref": "#/components/schemas/PaymentMethodType"
          },
          "card": {
            "$ref": "#/components/schemas/CardDetailFromLocker"
          },
          "recurring_enabled": {
            "type": "boolean",
            "description": "Indicates whether the payment method is eligible for recurring payments",
            "example": true
          },
          "installment_payment_enabled": {
            "type": "boolean",
            "description": "Indicates whether the payment method is eligible for installment payments",
            "example": true
          },
          "payment_experience": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentExperience"
            },
            "description": "Type of payment experience enabled with the connector",
            "example": [
              "redirect_to_url"
            ]
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object."
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "A timestamp (ISO 8601 code) that determines when the customer was created",
            "example": "2023-01-18T11:04:09.922Z"
          }
        }
      },
      "PaymentMethodType": {
        "type": "string",
        "enum": [
          "credit",
          "debit",
          "giropay",
          "ideal",
          "sofort",
          "eps",
          "klarna",
          "affirm",
          "afterpay_clearpay",
          "google_pay",
          "apple_pay",
          "paypal"
        ]
      },
      "PaymentMethodUpdate": {
        "type": "object",
        "properties": {
          "card": {
            "$ref": "#/components/schemas/CardDetail"
          },
          "card_network": {
            "$ref": "#/components/schemas/CardNetwork"
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object."
          }
        }
      },
      "PaymentMethodsEnabled": {
        "type": "object",
        "description": "Details of all the payment methods enabled for the connector for the given merchant account",
        "required": [
          "payment_method"
        ],
        "properties": {
          "payment_method": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "payment_method_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodType"
            },
            "description": "Subtype of payment method",
            "example": [
              "credit"
            ]
          }
        }
      },
      "PaymentRetrieveBody": {
        "type": "object",
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account."
          },
          "force_sync": {
            "type": "boolean",
            "description": "Decider to enable or disable the connector call for retrieve request"
          }
        }
      },
      "PaymentsCancelRequest": {
        "type": "object",
        "properties": {
          "cancellation_reason": {
            "type": "string",
            "description": "The reason for the payment cancel"
          }
        }
      },
      "PaymentsCaptureRequest": {
        "type": "object",
        "properties": {
          "payment_id": {
            "type": "string",
            "description": "The unique identifier for the payment"
          },
          "merchant_id": {
            "type": "string",
            "description": "The unique identifier for the merchant"
          },
          "amount_to_capture": {
            "type": "integer",
            "format": "int64",
            "description": "The Amount to be captured/ debited from the user's payment method."
          },
          "refund_uncaptured_amount": {
            "type": "boolean",
            "description": "Decider to refund the uncaptured amount"
          },
          "statement_descriptor_suffix": {
            "type": "string",
            "description": "Provides information about a card payment that customers see on their statements."
          },
          "statement_descriptor_prefix": {
            "type": "string",
            "description": "Concatenated with the statement descriptor suffix that’s set on the account to form the complete statement descriptor."
          }
        }
      },
      "PaymentsRequest": {
        "type": "object",
        "properties": {
          "payment_id": {
            "type": "string",
            "description": "Unique identifier for the payment. This ensures idempotency for multiple payments\nthat have been done by a single merchant. This field is auto generated and is returned in the API response.",
            "example": "pay_mbabizu24mvu3mela5njyhpit4",
            "maxLength": 30,
            "minLength": 30
          },
          "merchant_id": {
            "type": "string",
            "description": "This is an identifier for the merchant account. This is inferred from the API key\nprovided during the request",
            "example": "merchant_1668273825",
            "maxLength": 255
          },
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "The payment amount. Amount for the payment in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc.,",
            "example": 6540
          },
          "connector": {
            "$ref": "#/components/schemas/Connector"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "capture_method": {
            "$ref": "#/components/schemas/CaptureMethod"
          },
          "amount_to_capture": {
            "type": "integer",
            "format": "int64",
            "description": "The Amount to be captured/ debited from the users payment method. It shall be in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc.,\nIf not provided, the default amount_to_capture will be the payment amount.",
            "example": 6540
          },
          "capture_on": {
            "type": "string",
            "format": "date-time",
            "description": "A timestamp (ISO 8601 code) that determines when the payment should be captured.\nProviding this field will automatically set `capture` to true",
            "example": "2022-09-10T10:11:12Z"
          },
          "confirm": {
            "type": "boolean",
            "description": "Whether to confirm the payment (if applicable)",
            "default": false,
            "example": true
          },
          "customer_id": {
            "type": "string",
            "description": "The identifier for the customer object. If not provided the customer ID will be autogenerated.",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "description": "description: The customer's email address",
            "example": "johntest@test.com",
            "maxLength": 255
          },
          "name": {
            "type": "string",
            "description": "description: The customer's name",
            "example": "John Test",
            "maxLength": 255
          },
          "phone": {
            "type": "string",
            "description": "The customer's phone number",
            "example": "3141592653",
            "maxLength": 255
          },
          "phone_country_code": {
            "type": "string",
            "description": "The country code for the customer phone number",
            "example": "+1",
            "maxLength": 255
          },
          "off_session": {
            "type": "boolean",
            "description": "Set to true to indicate that the customer is not in your checkout flow during this payment, and therefore is unable to authenticate. This parameter is intended for scenarios where you collect card details and charge them later. This parameter can only be used with `confirm: true`.",
            "example": true
          },
          "description": {
            "type": "string",
            "description": "A description of the payment",
            "example": "It's my first payment request"
          },
          "return_url": {
            "type": "string",
            "description": "The URL to redirect after the completion of the operation",
            "example": "https://hyperswitch.io"
          },
          "setup_future_usage": {
            "$ref": "#/components/schemas/FutureUsage"
          },
          "authentication_type": {
            "$ref": "#/components/schemas/AuthenticationType"
          },
          "payment_method_data": {
            "$ref": "#/components/schemas/PaymentMethodData"
          },
          "payment_method": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "payment_token": {
            "type": "string",
            "description": "Provide a reference to a stored payment method",
            "example": "187282ab-40ef-47a9-9206-5099ba31e432"
          },
          "card_cvc": {
            "type": "string",
            "description": "This is used when payment is to be confirmed and the card is not saved"
          },
          "shipping": {
            "$ref": "#/components/schemas/Address"
          },
          "billing": {
            "$ref": "#/components/schemas/Address"
          },
          "statement_descriptor_name": {
            "type": "string",
            "description": "For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters.",
            "example": "Hyperswitch Router",
            "maxLength": 255
          },
          "statement_descriptor_suffix": {
            "type": "string",
            "description": "Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.",
            "example": "Payment for shoes purchase",
            "maxLength": 255
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "client_secret": {
            "type": "string",
            "description": "It's a token used for client side verification.",
            "example": "pay_U42c409qyHwOkWo3vK60_secret_el9ksDkiB8hi6j9N78yo"
          },
          "mandate_data": {
            "$ref": "#/components/schemas/MandateData"
          },
          "mandate_id": {
            "type": "string",
            "description": "A unique identifier to link the payment to a mandate, can be use instead of payment_method_data",
            "example": "mandate_iwer89rnjef349dni3",
            "maxLength": 255
          },
          "browser_info": {
            "type": "object",
            "description": "Additional details required by 3DS 2.0"
          },
          "payment_experience": {
            "$ref": "#/components/schemas/PaymentExperience"
          },
          "payment_method_type": {
            "$ref": "#/components/schemas/PaymentMethodType"
          }
        }
      },
      "PaymentsResponse": {
        "type": "object",
        "required": [
          "status",
          "amount",
          "currency",
          "payment_method"
        ],
        "properties": {
          "payment_id": {
            "type": "string",
            "description": "Unique identifier for the payment. This ensures idempotency for multiple payments\nthat have been done by a single merchant.",
            "example": "pay_mbabizu24mvu3mela5njyhpit4",
            "maxLength": 30,
            "minLength": 30
          },
          "merchant_id": {
            "type": "string",
            "description": "This is an identifier for the merchant account. This is inferred from the API key\nprovided during the request",
            "example": "merchant_1668273825",
            "maxLength": 255
          },
          "status": {
            "$ref": "#/components/schemas/IntentStatus"
          },
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "The payment amount. Amount for the payment in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc.,",
            "example": 100
          },
          "amount_capturable": {
            "type": "integer",
            "format": "int64",
            "description": "The maximum amount that could be captured from the payment",
            "example": 6540,
            "minimum": 100.0
          },
          "amount_received": {
            "type": "integer",
            "format": "int64",
            "description": "The amount which is already captured from the payment",
            "example": 6540,
            "minimum": 100.0
          },
          "connector": {
            "type": "string",
            "description": "The connector used for the payment",
            "example": "stripe"
          },
          "client_secret": {
            "type": "string",
            "description": "It's a token used for client side verification.",
            "example": "pay_U42c409qyHwOkWo3vK60_secret_el9ksDkiB8hi6j9N78yo"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the payment was created",
            "example": "2022-09-10T10:11:12Z"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "customer_id": {
            "type": "string",
            "description": "The identifier for the customer object. If not provided the customer ID will be autogenerated.",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "description": "A description of the payment",
            "example": "It's my first payment request"
          },
          "refunds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RefundResponse"
            },
            "description": "List of refund that happened on this intent"
          },
          "mandate_id": {
            "type": "string",
            "description": "A unique identifier to link the payment to a mandate, can be use instead of payment_method_data",
            "example": "mandate_iwer89rnjef349dni3",
            "maxLength": 255
          },
          "mandate_data": {
            "$ref": "#/components/schemas/MandateData"
          },
          "setup_future_usage": {
            "$ref": "#/components/schemas/FutureUsage"
          },
          "off_session": {
            "type": "boolean",
            "description": "Set to true to indicate that the customer is not in your checkout flow during this payment, and therefore is unable to authenticate. This parameter is intended for scenarios where you collect card details and charge them later. This parameter can only be used with confirm=true.",
            "example": true
          },
          "capture_on": {
            "type": "string",
            "format": "date-time",
            "description": "A timestamp (ISO 8601 code) that determines when the payment should be captured.\nProviding this field will automatically set `capture` to true",
            "example": "2022-09-10T10:11:12Z"
          },
          "capture_method": {
            "$ref": "#/components/schemas/CaptureMethod"
          },
          "payment_method": {
            "$ref": "#/components/schemas/PaymentMethodType"
          },
          "payment_method_data": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "payment_token": {
            "type": "string",
            "description": "Provide a reference to a stored payment method",
            "example": "187282ab-40ef-47a9-9206-5099ba31e432"
          },
          "shipping": {
            "$ref": "#/components/schemas/Address"
          },
          "billing": {
            "$ref": "#/components/schemas/Address"
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object."
          },
          "email": {
            "type": "string",
            "description": "description: The customer's email address",
            "example": "johntest@test.com",
            "maxLength": 255
          },
          "name": {
            "type": "string",
            "description": "description: The customer's name",
            "example": "John Test",
            "maxLength": 255
          },
          "phone": {
            "type": "string",
            "description": "The customer's phone number",
            "example": "3141592653",
            "maxLength": 255
          },
          "return_url": {
            "type": "string",
            "description": "The URL to redirect after the completion of the operation",
            "example": "https://hyperswitch.io"
          },
          "authentication_type": {
            "$ref": "#/components/schemas/AuthenticationType"
          },
          "statement_descriptor_name": {
            "type": "string",
            "description": "For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters.",
            "example": "Hyperswitch Router",
            "maxLength": 255
          },
          "statement_descriptor_suffix": {
            "type": "string",
            "description": "Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 255 characters for the concatenated descriptor.",
            "example": "Payment for shoes purchase",
            "maxLength": 255
          },
          "next_action": {
            "$ref": "#/components/schemas/NextAction"
          },
          "cancellation_reason": {
            "type": "string",
            "description": "If the payment was cancelled the reason provided here"
          },
          "error_code": {
            "type": "string",
            "description": "If there was an error while calling the connectors the code is received here",
            "example": "E0001"
          },
          "error_message": {
            "type": "string",
            "description": "If there was an error while calling the connector the error message is received here",
            "example": "Failed while verifying the card"
          },
          "payment_experience": {
            "$ref": "#/components/schemas/PaymentExperience"
          },
          "payment_method_type": {
            "$ref": "#/components/schemas/PaymentMethodType"
          }
        }
      },
      "PaymentsRetrieveRequest": {
        "type": "object",
        "required": [
          "resource_id",
          "force_sync"
        ],
        "properties": {
          "resource_id": {
            "$ref": "#/components/schemas/PaymentIdType"
          },
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account."
          },
          "force_sync": {
            "type": "boolean",
            "description": "Decider to enable or disable the connector call for retrieve request"
          },
          "param": {
            "type": "string",
            "description": "The parameters passed to a retrieve request"
          },
          "connector": {
            "type": "string",
            "description": "The name of the connector"
          }
        }
      },
      "PaymentsSessionRequest": {
        "type": "object",
        "required": [
          "payment_id",
          "client_secret",
          "wallets"
        ],
        "properties": {
          "payment_id": {
            "type": "string",
            "description": "The identifier for the payment"
          },
          "client_secret": {
            "type": "string",
            "description": "This is a token which expires after 15 minutes, used from the client to authenticate and create sessions from the SDK"
          },
          "wallets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SupportedWallets"
            },
            "description": "The list of the supported wallets"
          }
        }
      },
      "PaymentsSessionResponse": {
        "type": "object",
        "required": [
          "payment_id",
          "client_secret",
          "session_token"
        ],
        "properties": {
          "payment_id": {
            "type": "string",
            "description": "The identifier for the payment"
          },
          "client_secret": {
            "type": "string",
            "description": "This is a token which expires after 15 minutes, used from the client to authenticate and create sessions from the SDK"
          },
          "session_token": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SessionToken"
            },
            "description": "The list of session token object"
          }
        }
      },
      "PaymentsStartRequest": {
        "type": "object",
        "required": [
          "payment_id",
          "merchant_id",
          "attempt_id"
        ],
        "properties": {
          "payment_id": {
            "type": "string",
            "description": "Unique identifier for the payment. This ensures idempotency for multiple payments\nthat have been done by a single merchant. This field is auto generated and is returned in the API response."
          },
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account."
          },
          "attempt_id": {
            "type": "string",
            "description": "The identifier for the payment transaction"
          }
        }
      },
      "PaypalRedirection": {
        "type": "object"
      },
      "PaypalSessionTokenResponse": {
        "type": "object",
        "required": [
          "session_token"
        ],
        "properties": {
          "session_token": {
            "type": "string",
            "description": "The session token for PayPal"
          }
        }
      },
      "PhoneDetails": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "The contact number",
            "example": "9999999999"
          },
          "country_code": {
            "type": "string",
            "description": "The country code attached to the number",
            "example": "+1"
          }
        }
      },
      "RefundListRequest": {
        "type": "object",
        "properties": {
          "payment_id": {
            "type": "string",
            "description": "The identifier for the payment"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "description": "Limit on the number of objects to return"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "The time at which refund is created"
          },
          "created.lt": {
            "type": "string",
            "format": "date-time",
            "description": "Time less than the refund created time"
          },
          "created.gt": {
            "type": "string",
            "format": "date-time",
            "description": "Time greater than the refund created time"
          },
          "created.lte": {
            "type": "string",
            "format": "date-time",
            "description": "Time less than or equals to the refund created time"
          },
          "created.gte": {
            "type": "string",
            "format": "date-time",
            "description": "Time greater than or equals to the refund created time"
          }
        }
      },
      "RefundListResponse": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RefundResponse"
            },
            "description": "The list of refund response"
          }
        }
      },
      "RefundRequest": {
        "type": "object",
        "required": [
          "payment_id"
        ],
        "properties": {
          "refund_id": {
            "type": "string",
            "description": "Unique Identifier for the Refund. This is to ensure idempotency for multiple partial refund initiated against the same payment. If the identifiers is not defined by the merchant, this filed shall be auto generated and provide in the API response. It is recommended to generate uuid(v4) as the refund_id.",
            "example": "ref_mbabizu24mvu3mela5njyhpit4",
            "maxLength": 30,
            "minLength": 30
          },
          "payment_id": {
            "type": "string",
            "description": "Total amount for which the refund is to be initiated. Amount for the payment in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc. If not provided, this will default to the full payment amount",
            "example": "pay_mbabizu24mvu3mela5njyhpit4",
            "maxLength": 30,
            "minLength": 30
          },
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "Total amount for which the refund is to be initiated. Amount for the payment in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc., If not provided, this will default to the full payment amount",
            "example": 6540,
            "minimum": 100.0
          },
          "reason": {
            "type": "string",
            "description": "An arbitrary string attached to the object. Often useful for displaying to users and your customer support executive",
            "example": "Customer returned the product",
            "maxLength": 255
          },
          "refund_type": {
            "$ref": "#/components/schemas/RefundType"
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object."
          }
        }
      },
      "RefundResponse": {
        "type": "object",
        "required": [
          "refund_id",
          "payment_id",
          "amount",
          "currency",
          "status"
        ],
        "properties": {
          "refund_id": {
            "type": "string",
            "description": "The identifier for refund"
          },
          "payment_id": {
            "type": "string",
            "description": "The identifier for payment"
          },
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "The refund amount, which should be less than or equal to the total payment amount. Amount for the payment in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc"
          },
          "currency": {
            "type": "string",
            "description": "The three-letter ISO currency code"
          },
          "reason": {
            "type": "string",
            "description": "An arbitrary string attached to the object. Often useful for displaying to users and your customer support executive"
          },
          "status": {
            "$ref": "#/components/schemas/RefundStatus"
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object"
          },
          "error_message": {
            "type": "string",
            "description": "The error message"
          },
          "error_code": {
            "type": "string",
            "description": "The code for the error"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp at which refund is created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp at which refund is updated"
          }
        }
      },
      "RefundStatus": {
        "type": "string",
        "description": "The status for refunds",
        "enum": [
          "succeeded",
          "failed",
          "pending",
          "review"
        ]
      },
      "RefundType": {
        "type": "string",
        "enum": [
          "scheduled",
          "instant"
        ]
      },
      "RefundUpdateRequest": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "An arbitrary string attached to the object. Often useful for displaying to users and your customer support executive",
            "example": "Customer returned the product",
            "maxLength": 255
          },
          "metadata": {
            "type": "object",
            "description": "You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object."
          }
        }
      },
      "RetrieveApiKeyResponse": {
        "type": "object",
        "description": "The response body for retrieving an API Key.",
        "required": [
          "key_id",
          "merchant_id",
          "name",
          "prefix",
          "created",
          "expiration"
        ],
        "properties": {
          "key_id": {
            "type": "string",
            "description": "The identifier for the API Key.",
            "example": "5hEEqkgJUyuxgSKGArHA4mWSnX",
            "maxLength": 64
          },
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account.",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 64
          },
          "name": {
            "type": "string",
            "description": "The unique name for the API Key to help you identify it.",
            "example": "Sandbox integration key",
            "maxLength": 64
          },
          "description": {
            "type": "string",
            "description": "The description to provide more context about the API Key.",
            "example": "Key used by our developers to integrate with the sandbox environment",
            "maxLength": 256
          },
          "prefix": {
            "type": "string",
            "description": "The first few characters of the plaintext API Key to help you identify it.",
            "maxLength": 64
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "The time at which the API Key was created.",
            "example": "2022-09-10T10:11:12Z"
          },
          "expiration": {
            "$ref": "#/components/schemas/ApiKeyExpiration"
          }
        }
      },
      "RevokeApiKeyResponse": {
        "type": "object",
        "description": "The response body for revoking an API Key.",
        "required": [
          "key_id",
          "revoked"
        ],
        "properties": {
          "key_id": {
            "type": "string",
            "description": "The identifier for the API Key.",
            "example": "5hEEqkgJUyuxgSKGArHA4mWSnX",
            "maxLength": 64
          },
          "revoked": {
            "type": "boolean",
            "description": "Indicates whether the API key was revoked or not.",
            "example": "true"
          }
        }
      },
      "RoutingAlgorithm": {
        "type": "string",
        "description": "The routing algorithm to be used to process the incoming request from merchant to outgoing payment processor or payment method. The default is 'Custom'",
        "enum": [
          "round_robin",
          "max_conversion",
          "min_cost",
          "custom"
        ],
        "example": "custom"
      },
      "SessionToken": {
        "oneOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/GpaySessionTokenResponse"
              },
              {
                "type": "object",
                "required": [
                  "wallet_name"
                ],
                "properties": {
                  "wallet_name": {
                    "type": "string",
                    "enum": [
                      "google_pay"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/KlarnaSessionTokenResponse"
              },
              {
                "type": "object",
                "required": [
                  "wallet_name"
                ],
                "properties": {
                  "wallet_name": {
                    "type": "string",
                    "enum": [
                      "klarna"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaypalSessionTokenResponse"
              },
              {
                "type": "object",
                "required": [
                  "wallet_name"
                ],
                "properties": {
                  "wallet_name": {
                    "type": "string",
                    "enum": [
                      "paypal"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApplepaySessionTokenResponse"
              },
              {
                "type": "object",
                "required": [
                  "wallet_name"
                ],
                "properties": {
                  "wallet_name": {
                    "type": "string",
                    "enum": [
                      "apple_pay"
                    ]
                  }
                }
              }
            ]
          }
        ],
        "discriminator": {
          "propertyName": "wallet_name"
        }
      },
      "SupportedWallets": {
        "type": "string",
        "description": "Wallets which support obtaining session object",
        "enum": [
          "paypal",
          "apple_pay",
          "klarna",
          "gpay"
        ]
      },
      "UpdateApiKeyRequest": {
        "type": "object",
        "description": "The request body for updating an API Key.",
        "properties": {
          "name": {
            "type": "string",
            "description": "A unique name for the API Key to help you identify it.",
            "example": "Sandbox integration key",
            "maxLength": 64
          },
          "description": {
            "type": "string",
            "description": "A description to provide more context about the API Key.",
            "example": "Key used by our developers to integrate with the sandbox environment",
            "maxLength": 256
          },
          "expiration": {
            "$ref": "#/components/schemas/ApiKeyExpiration"
          }
        }
      },
      "WalletData": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "google_pay"
            ],
            "properties": {
              "google_pay": {
                "$ref": "#/components/schemas/GooglePayWalletData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "apple_pay"
            ],
            "properties": {
              "apple_pay": {
                "$ref": "#/components/schemas/ApplePayWalletData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "paypal_sdk"
            ],
            "properties": {
              "paypal_sdk": {
                "$ref": "#/components/schemas/PayPalWalletData"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "paypal_redirect"
            ],
            "properties": {
              "paypal_redirect": {
                "$ref": "#/components/schemas/PaypalRedirection"
              }
            }
          }
        ]
      },
      "WebhookDetails": {
        "type": "object",
        "properties": {
          "webhook_version": {
            "type": "string",
            "description": "The version for Webhook",
            "example": "1.0.2",
            "maxLength": 255
          },
          "webhook_username": {
            "type": "string",
            "description": "The user name for Webhook login",
            "example": "ekart_retail",
            "maxLength": 255
          },
          "webhook_password": {
            "type": "string",
            "description": "The password for Webhook login",
            "example": "ekart@123",
            "maxLength": 255
          },
          "webhook_url": {
            "type": "string",
            "description": "The url for the webhook endpoint",
            "example": "www.ekart.com/webhooks"
          },
          "payment_created_enabled": {
            "type": "boolean",
            "description": "If this property is true, a webhook message is posted whenever a new payment is created",
            "example": true
          },
          "payment_succeeded_enabled": {
            "type": "boolean",
            "description": "If this property is true, a webhook message is posted whenever a payment is successful",
            "example": true
          },
          "payment_failed_enabled": {
            "type": "boolean",
            "description": "If this property is true, a webhook message is posted whenever a payment fails",
            "example": true
          }
        }
      }
    },
    "securitySchemes": {
      "admin_api_key": {
        "type": "apiKey",
        "in": "header",
        "name": "api-key",
        "description": "Admin API keys allow you to perform some privileged actions such as creating a merchant account and Merchant Connector account."
      },
      "api_key": {
        "type": "apiKey",
        "in": "header",
        "name": "api-key",
        "description": "API keys are the most common method of authentication and can be obtained from the HyperSwitch dashboard."
      },
      "ephemeral_key": {
        "type": "apiKey",
        "in": "header",
        "name": "api-key",
        "description": "Ephemeral keys provide temporary access to singular data, such as access to a single customer object for a short period of time."
      },
      "publishable_key": {
        "type": "apiKey",
        "in": "header",
        "name": "api-key",
        "description": "Publishable keys are a type of keys that can be public and have limited scope of usage."
      }
    }
  },
  "tags": [
    {
      "name": "Merchant Account",
      "description": "Create and manage merchant accounts"
    },
    {
      "name": "Merchant Connector Account",
      "description": "Create and manage merchant connector accounts"
    },
    {
      "name": "Payments",
      "description": "Create and manage one-time payments, recurring payments and mandates"
    },
    {
      "name": "Refunds",
      "description": "Create and manage refunds for successful payments"
    },
    {
      "name": "Mandates",
      "description": "Manage mandates"
    },
    {
      "name": "Customers",
      "description": "Create and manage customers"
    },
    {
      "name": "Payment Methods",
      "description": "Create and manage payment methods of customers"
    }
  ]
}