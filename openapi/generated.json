{
  "openapi": "3.0.3",
  "info": {
    "title": "Juspay Router - API Documentation",
    "description": "\n## Get started\n\nJuspay Router provides a collection of APIs that enable you to process and manage payments.\nOur APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.\n\nYou can consume the APIs directly using your favorite HTTP/REST library.\n\nWe have a testing environment referred to \"sandbox\", which you can setup to test API calls without\naffecting production data.\n\n### Base URLs\n\nUse the following base URLs when making requests to the APIs:\n\n| Environment   |  Base URL                                            |\n|---------------|------------------------------------------------------|\n| Sandbox       | <https://sandbox.hyperswitch.io>                   |\n| Production    | <https://router.juspay.io>                           |\n\n## Authentication\n\nWhen you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant\naccount, you are given a secret key (also referred as api-key).\nYou may authenticate all API requests with Juspay server by providing the appropriate key in the\nrequest Authorization header.\n\nNever share your secret api keys. Keep them guarded and secure.\n",
    "contact": {
      "name": "Juspay Support",
      "url": "https://juspay.io",
      "email": "support@juspay.in"
    },
    "license": {
      "name": "Apache-2.0"
    },
    "version": "0.2.0"
  },
  "servers": [
    {
      "url": "https://sandbox.hyperswitch.io",
      "description": "Sandbox Environment"
    },
    {
      "url": "https://router.juspay.io",
      "description": "Production Environment"
    }
  ],
  "paths": {
    "/account": {
      "post": {
        "tags": ["crate::routes::admin"],
        "summary": "Merchant Account - Create",
        "description": "Merchant Account - Create\n\nCreate a new account for a merchant and the merchant could be a seller or retailer or client who likes to receive and send payments.",
        "operationId": "merchant_account_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMerchantAccount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Merchant Account Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantAccountResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data"
          }
        },
        "deprecated": false
      }
    },
    "/payments": {
      "post": {
        "tags": ["crate::routes::payments"],
        "summary": "Payments - Create",
        "description": "Payments - Create\n\nTo create a new payment, against a merchant API key",
        "operationId": "payments_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payment created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing Mandatory fields"
          }
        },
        "deprecated": false
      }
    },
    "/refunds": {
      "post": {
        "tags": ["crate::routes::refunds"],
        "summary": "Refunds - Create",
        "description": "Refunds - Create\n\nTo create a refund against an already processed payment",
        "operationId": "refunds_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Refund created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing Mandatory fields"
          }
        },
        "deprecated": false
      }
    }
  },
  "components": {
    "schemas": {
      "AcceptanceType": {
        "type": "string",
        "enum": ["online", "offline"]
      },
      "Address": {
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/AddressDetails"
          },
          "phone": {
            "$ref": "#/components/schemas/PhoneDetails"
          }
        }
      },
      "AddressDetails": {
        "type": "object",
        "properties": {
          "city": {
            "type": "string",
            "description": "The address city",
            "example": "New York",
            "maxLength": 50
          },
          "country": {
            "type": "string",
            "description": "The two-letter ISO country code for the address",
            "example": "US",
            "maxLength": 2,
            "minLength": 2
          },
          "line1": {
            "type": "string",
            "description": "The first line of the address",
            "example": "123, King Street",
            "maxLength": 200
          },
          "line2": {
            "type": "string",
            "description": "The second line of the address",
            "example": "Powelson Avenue",
            "maxLength": 50
          },
          "line3": {
            "type": "string",
            "description": "The third line of the address",
            "example": "Bridgewater",
            "maxLength": 50
          },
          "zip": {
            "type": "string",
            "description": "The zip/postal code for the address",
            "example": "08807",
            "maxLength": 50
          },
          "state": {
            "type": "string",
            "description": "The address state",
            "example": "New York"
          },
          "first_name": {
            "type": "string",
            "description": "The first name for the address",
            "example": "John",
            "maxLength": 255
          },
          "last_name": {
            "type": "string",
            "description": "The last name for the address",
            "example": "Doe",
            "maxLength": 255
          }
        }
      },
      "AuthenticationType": {
        "type": "string",
        "enum": ["three_ds", "no_three_ds"]
      },
      "CCard": {
        "type": "object",
        "required": [
          "card_number",
          "card_exp_month",
          "card_exp_year",
          "card_holder_name",
          "card_cvc"
        ],
        "properties": {
          "card_number": {
            "type": "string",
            "description": "The card number",
            "example": "4242424242424242"
          },
          "card_exp_month": {
            "type": "string",
            "description": "The card's expiry month",
            "example": "24"
          },
          "card_exp_year": {
            "type": "string",
            "description": "The card's expiry year",
            "example": "24"
          },
          "card_holder_name": {
            "type": "string",
            "description": "The card holder's name",
            "example": "John Test"
          },
          "card_cvc": {
            "type": "string",
            "description": "The CVC number for the card",
            "example": "242"
          }
        }
      },
      "CaptureMethod": {
        "type": "string",
        "enum": ["automatic", "manual", "manual_multiple", "scheduled"]
      },
      "Connector": {
        "type": "string",
        "enum": [
          "aci",
          "adyen",
          "applepay",
          "authorizedotnet",
          "braintree",
          "checkout",
          "cybersource",
          "dummy",
          "fiserv",
          "globalpay",
          "klarna",
          "payu",
          "rapyd",
          "shift4",
          "stripe",
          "worldline",
          "worldpay"
        ]
      },
      "ConnectorType": {
        "type": "string",
        "enum": [
          "payment_processor",
          "payment_vas",
          "fin_operations",
          "fiz_operations",
          "networks",
          "banking_entities",
          "non_banking_finance"
        ]
      },
      "CreateMerchantAccount": {
        "type": "object",
        "required": ["merchant_id"],
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "merchant_name": {
            "type": "string",
            "description": "Name of the Merchant Account",
            "example": "NewAge Retailer"
          },
          "api_key": {
            "type": "string",
            "description": "API key that will be used for server side API access",
            "example": "Ah2354543543523"
          },
          "merchant_details": {
            "$ref": "#/components/schemas/MerchantDetails"
          },
          "return_url": {
            "type": "string",
            "description": "The URL to redirect after the completion of the operation",
            "example": "https://www.example.com/success",
            "maxLength": 255
          },
          "webhook_details": {
            "$ref": "#/components/schemas/WebhookDetails"
          },
          "routing_algorithm": {
            "type": "object"
          },
          "sub_merchants_enabled": {
            "type": "boolean",
            "description": "A boolean value to indicate if the merchant is a sub-merchant under a master or a parent merchant. By default, its value is false.",
            "default": false,
            "example": false
          },
          "parent_merchant_id": {
            "type": "string",
            "description": "Refers to the Parent Merchant ID if the merchant being created is a sub-merchant",
            "example": "xkkdf909012sdjki2dkh5sdf",
            "maxLength": 255
          },
          "enable_payment_response_hash": {
            "type": "boolean",
            "description": "A boolean value to indicate if payment response hash needs to be enabled",
            "default": false,
            "example": true
          },
          "payment_response_hash_key": {
            "type": "string",
            "description": "Refers to the hash key used for payment response"
          },
          "redirect_to_merchant_with_http_post": {
            "type": "boolean",
            "description": "A boolean value to indicate if redirect to merchant with http post needs to be enabled",
            "default": false,
            "example": true
          },
          "metadata": {
            "type": "object"
          },
          "publishable_key": {
            "type": "string",
            "description": "API key that will be used for server side API access",
            "example": "AH3423bkjbkjdsfbkj"
          },
          "locker_id": {
            "type": "string",
            "description": "An identifier for the vault used to store payment method information.",
            "example": "locker_abc123"
          }
        }
      },
      "Currency": {
        "type": "string",
        "enum": [
          "AED",
          "ALL",
          "AMD",
          "ARS",
          "AUD",
          "AWG",
          "AZN",
          "BBD",
          "BDT",
          "BHD",
          "BMD",
          "BND",
          "BOB",
          "BRL",
          "BSD",
          "BWP",
          "BZD",
          "CAD",
          "CHF",
          "CNY",
          "COP",
          "CRC",
          "CUP",
          "CZK",
          "DKK",
          "DOP",
          "DZD",
          "EGP",
          "ETB",
          "EUR",
          "FJD",
          "GBP",
          "GHS",
          "GIP",
          "GMD",
          "GTQ",
          "GYD",
          "HKD",
          "HNL",
          "HRK",
          "HTG",
          "HUF",
          "IDR",
          "ILS",
          "INR",
          "JMD",
          "JOD",
          "JPY",
          "KES",
          "KGS",
          "KHR",
          "KRW",
          "KWD",
          "KYD",
          "KZT",
          "LAK",
          "LBP",
          "LKR",
          "LRD",
          "LSL",
          "MAD",
          "MDL",
          "MKD",
          "MMK",
          "MNT",
          "MOP",
          "MUR",
          "MVR",
          "MWK",
          "MXN",
          "MYR",
          "NAD",
          "NGN",
          "NIO",
          "NOK",
          "NPR",
          "NZD",
          "OMR",
          "PEN",
          "PGK",
          "PHP",
          "PKR",
          "PLN",
          "QAR",
          "RUB",
          "SAR",
          "SCR",
          "SEK",
          "SGD",
          "SLL",
          "SOS",
          "SSP",
          "SVC",
          "SZL",
          "THB",
          "TTD",
          "TWD",
          "TZS",
          "USD",
          "UYU",
          "UZS",
          "YER",
          "ZAR"
        ]
      },
      "CustomerAcceptance": {
        "type": "object",
        "required": ["acceptance_type"],
        "properties": {
          "acceptance_type": {
            "$ref": "#/components/schemas/AcceptanceType"
          },
          "accepted_at": {
            "type": "string",
            "format": "date-time",
            "description": "Specifying when the customer acceptance was provided",
            "example": "2022-09-10T10:11:12Z"
          },
          "online": {
            "$ref": "#/components/schemas/OnlineMandate"
          }
        }
      },
      "CustomerDeleteResponse": {
        "type": "object",
        "required": [
          "customer_id",
          "customer_deleted",
          "address_deleted",
          "payment_methods_deleted"
        ],
        "properties": {
          "customer_id": {
            "type": "string",
            "description": "The identifier for the customer object",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "customer_deleted": {
            "type": "boolean",
            "description": "Whether customer was deleted or not",
            "example": false
          },
          "address_deleted": {
            "type": "boolean",
            "description": "Whether address was deleted or not",
            "example": false
          },
          "payment_methods_deleted": {
            "type": "boolean",
            "description": "Whether payment methods deleted or not",
            "example": false
          }
        }
      },
      "CustomerRequest": {
        "type": "object",
        "description": "The customer details",
        "properties": {
          "customer_id": {
            "type": "string",
            "description": "The identifier for the customer object. If not provided the customer ID will be autogenerated.",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "name": {
            "type": "string",
            "description": "The customer's name",
            "example": "Jon Test",
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "description": "The customer's email address",
            "example": "JonTest@test.com",
            "maxLength": 255
          },
          "phone": {
            "type": "string",
            "description": "The customer's phone number",
            "example": "9999999999",
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "description": "An arbitrary string that you can attach to a customer object.",
            "example": "First Customer",
            "maxLength": 255
          },
          "phone_country_code": {
            "type": "string",
            "description": "The country code for the customer phone number",
            "example": "+65",
            "maxLength": 255
          },
          "address": {
            "type": "object"
          },
          "metadata": {
            "type": "object"
          }
        }
      },
      "CustomerResponse": {
        "type": "object",
        "required": ["customer_id", "created_at"],
        "properties": {
          "customer_id": {
            "type": "string",
            "description": "The identifier for the customer object. If not provided the customer ID will be autogenerated.",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "name": {
            "type": "string",
            "description": "The customer's name",
            "example": "Jon Test",
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "description": "The customer's email address",
            "example": "JonTest@test.com",
            "maxLength": 255
          },
          "phone": {
            "type": "string",
            "description": "The customer's phone number",
            "example": "9999999999",
            "maxLength": 255
          },
          "phone_country_code": {
            "type": "string",
            "description": "The country code for the customer phone number",
            "example": "+65",
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "description": "An arbitrary string that you can attach to a customer object.",
            "example": "First Customer",
            "maxLength": 255
          },
          "address": {
            "type": "object"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "A timestamp (ISO 8601 code) that determines when the customer was created",
            "example": "2023-01-18T11:04:09.922Z"
          },
          "metadata": {
            "type": "object"
          }
        }
      },
      "DeleteMcaResponse": {
        "type": "object",
        "required": ["merchant_id", "merchant_connector_id", "deleted"],
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "merchant_connector_id": {
            "type": "integer",
            "format": "int32",
            "description": "Unique ID of the connector",
            "example": 42
          },
          "deleted": {
            "type": "boolean",
            "description": "If the connector is deleted or not",
            "example": false
          }
        }
      },
      "DeleteResponse": {
        "type": "object",
        "required": ["merchant_id", "deleted"],
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "deleted": {
            "type": "boolean",
            "description": "If the connector is deleted or not",
            "example": false
          }
        }
      },
      "FutureUsage": {
        "type": "string",
        "enum": ["off_session", "on_session"]
      },
      "GpayAllowedMethodsParameters": {
        "type": "object",
        "required": ["allowed_auth_methods", "allowed_card_networks"],
        "properties": {
          "allowed_auth_methods": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The list of allowed auth methods (ex: 3DS, No3DS, PAN_ONLY etc)"
            }
          },
          "allowed_card_networks": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The list of allowed card networks (ex: AMEX,JCB etc)"
            }
          }
        }
      },
      "GpayAllowedPaymentMethods": {
        "type": "object",
        "required": ["type", "parameters", "tokenization_specification"],
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of payment method"
          },
          "parameters": {
            "$ref": "#/components/schemas/GpayAllowedMethodsParameters"
          },
          "tokenization_specification": {
            "$ref": "#/components/schemas/GpayTokenizationSpecification"
          }
        }
      },
      "GpayMerchantInfo": {
        "type": "object",
        "required": ["merchant_name"],
        "properties": {
          "merchant_name": {
            "type": "string",
            "description": "The name of the merchant"
          }
        }
      },
      "GpayTokenParameters": {
        "type": "object",
        "required": ["gateway", "gateway_merchant_id"],
        "properties": {
          "gateway": {
            "type": "string",
            "description": "The name of the connector"
          },
          "gateway_merchant_id": {
            "type": "string",
            "description": "The merchant ID registered in the connector associated"
          }
        }
      },
      "GpayTokenizationSpecification": {
        "type": "object",
        "required": ["type", "parameters"],
        "properties": {
          "type": {
            "type": "string",
            "description": "The token specification type(ex: PAYMENT_GATEWAY)"
          },
          "parameters": {
            "$ref": "#/components/schemas/GpayTokenParameters"
          }
        }
      },
      "GpayTransactionInfo": {
        "type": "object",
        "required": [
          "country_code",
          "currency_code",
          "total_price_status",
          "total_price"
        ],
        "properties": {
          "country_code": {
            "type": "string",
            "description": "The country code"
          },
          "currency_code": {
            "type": "string",
            "description": "The currency code"
          },
          "total_price_status": {
            "type": "string",
            "description": "The total price status (ex: 'FINAL')"
          },
          "total_price": {
            "type": "integer",
            "format": "int64",
            "description": "The total price"
          }
        }
      },
      "IntentStatus": {
        "type": "string",
        "enum": [
          "succeeded",
          "failed",
          "cancelled",
          "processing",
          "requires_customer_action",
          "requires_payment_method",
          "requires_confirmation",
          "requires_capture"
        ]
      },
      "KlarnaRedirectIssuer": {
        "type": "string",
        "enum": ["stripe"]
      },
      "KlarnaSdkIssuer": {
        "type": "string",
        "enum": ["klarna"]
      },
      "MandateAmountData": {
        "type": "object",
        "required": ["amount", "currency"],
        "properties": {
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "The maximum amount to be debited for the mandate transaction",
            "example": 6540
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          }
        }
      },
      "MandateData": {
        "type": "object",
        "required": ["customer_acceptance", "mandate_type"],
        "properties": {
          "customer_acceptance": {
            "$ref": "#/components/schemas/CustomerAcceptance"
          },
          "mandate_type": {
            "$ref": "#/components/schemas/MandateType"
          }
        }
      },
      "MandateType": {
        "oneOf": [
          {
            "type": "object",
            "required": ["single_use"],
            "properties": {
              "single_use": {
                "$ref": "#/components/schemas/MandateAmountData"
              }
            }
          },
          {
            "type": "object",
            "required": ["multi_use"],
            "properties": {
              "multi_use": {
                "$ref": "#/components/schemas/MandateAmountData"
              }
            }
          }
        ]
      },
      "MerchantAccountResponse": {
        "type": "object",
        "required": [
          "merchant_id",
          "enable_payment_response_hash",
          "redirect_to_merchant_with_http_post"
        ],
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "merchant_name": {
            "type": "string",
            "description": "Name of the Merchant Account",
            "example": "NewAge Retailer"
          },
          "api_key": {
            "type": "string",
            "description": "API key that will be used for server side API access",
            "example": "Ah2354543543523"
          },
          "return_url": {
            "type": "string",
            "description": "The URL to redirect after the completion of the operation",
            "example": "https://www.example.com/success",
            "maxLength": 255
          },
          "enable_payment_response_hash": {
            "type": "boolean",
            "description": "A boolean value to indicate if payment response hash needs to be enabled",
            "default": false,
            "example": true
          },
          "payment_response_hash_key": {
            "type": "string",
            "description": "Refers to the Parent Merchant ID if the merchant being created is a sub-merchant",
            "example": "xkkdf909012sdjki2dkh5sdf",
            "maxLength": 255
          },
          "redirect_to_merchant_with_http_post": {
            "type": "boolean",
            "description": "A boolean value to indicate if redirect to merchant with http post needs to be enabled",
            "default": false,
            "example": true
          },
          "merchant_details": {
            "$ref": "#/components/schemas/MerchantDetails"
          },
          "webhook_details": {
            "$ref": "#/components/schemas/WebhookDetails"
          },
          "routing_algorithm": {
            "$ref": "#/components/schemas/RoutingAlgorithm"
          },
          "sub_merchants_enabled": {
            "type": "boolean",
            "description": "A boolean value to indicate if the merchant is a sub-merchant under a master or a parent merchant. By default, its value is false.",
            "default": false,
            "example": false
          },
          "parent_merchant_id": {
            "type": "string",
            "description": "Refers to the Parent Merchant ID if the merchant being created is a sub-merchant",
            "example": "xkkdf909012sdjki2dkh5sdf",
            "maxLength": 255
          },
          "publishable_key": {
            "type": "string",
            "description": "API key that will be used for server side API access",
            "example": "AH3423bkjbkjdsfbkj"
          },
          "metadata": {
            "type": "object"
          },
          "locker_id": {
            "type": "string",
            "description": "An identifier for the vault used to store payment method information.",
            "example": "locker_abc123"
          }
        }
      },
      "MerchantConnectorId": {
        "type": "object",
        "required": ["merchant_id", "merchant_connector_id"],
        "properties": {
          "merchant_id": {
            "type": "string"
          },
          "merchant_connector_id": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "MerchantDetails": {
        "type": "object",
        "properties": {
          "primary_contact_person": {
            "type": "string",
            "description": "The merchant's primary contact name",
            "example": "John Doe",
            "maxLength": 255
          },
          "primary_phone": {
            "type": "string",
            "description": "The merchant's primary phone number",
            "example": "999999999",
            "maxLength": 255
          },
          "primary_email": {
            "type": "string",
            "description": "The merchant's primary email address",
            "example": "johndoe@test.com",
            "maxLength": 255
          },
          "secondary_contact_person": {
            "type": "string",
            "description": "The merchant's secondary contact name",
            "example": "John Doe2",
            "maxLength": 255
          },
          "secondary_phone": {
            "type": "string",
            "description": "The merchant's secondary phone number",
            "example": "999999988",
            "maxLength": 255
          },
          "secondary_email": {
            "type": "string",
            "description": "The merchant's secondary email address",
            "example": "johndoe2@test.com",
            "maxLength": 255
          },
          "website": {
            "type": "string",
            "description": "The business website of the merchant",
            "example": "www.example.com",
            "maxLength": 255
          },
          "about_business": {
            "type": "string",
            "description": "A brief description about merchant's business",
            "example": "Online Retail with a wide selection of organic products for North America",
            "maxLength": 255
          },
          "address": {
            "$ref": "#/components/schemas/AddressDetails"
          }
        }
      },
      "Metadata": {
        "allOf": [
          {
            "type": "object"
          },
          {
            "type": "object",
            "properties": {
              "order_details": {
                "$ref": "#/components/schemas/OrderDetails"
              }
            }
          }
        ]
      },
      "NextAction": {
        "type": "object",
        "required": ["type"],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/NextActionType"
          },
          "redirect_to_url": {
            "type": "string",
            "description": "Contains the url for redirection flow",
            "example": "https://router.juspay.io/redirect/fakushdfjlksdfasklhdfj"
          }
        }
      },
      "NextActionType": {
        "type": "string",
        "enum": [
          "redirect_to_url",
          "display_qr_code",
          "invoke_sdk_client",
          "trigger_api"
        ]
      },
      "OnlineMandate": {
        "type": "object",
        "required": ["ip_address", "user_agent"],
        "properties": {
          "ip_address": {
            "type": "string",
            "description": "Ip address of the customer machine from which the mandate was created",
            "example": "123.32.25.123"
          },
          "user_agent": {
            "type": "string",
            "description": "The user-agent of the customer's browser"
          }
        }
      },
      "OrderDetails": {
        "type": "object",
        "required": ["product_name", "quantity"],
        "properties": {
          "product_name": {
            "type": "string",
            "description": "Name of the product that is being purchased",
            "example": "shirt",
            "maxLength": 255
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "description": "The quantity of the product to be purchased",
            "example": 1
          }
        }
      },
      "PayLaterData": {
        "oneOf": [
          {
            "type": "object",
            "required": ["klarna_redirect"],
            "properties": {
              "klarna_redirect": {
                "type": "object",
                "description": "For KlarnaRedirect as PayLater Option",
                "required": ["issuer_name", "billing_email", "billing_country"],
                "properties": {
                  "issuer_name": {
                    "$ref": "#/components/schemas/KlarnaRedirectIssuer"
                  },
                  "billing_email": {
                    "type": "string",
                    "description": "The billing email"
                  },
                  "billing_country": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": ["klarna_sdk"],
            "properties": {
              "klarna_sdk": {
                "type": "object",
                "description": "For Klarna Sdk as PayLater Option",
                "required": ["issuer_name", "token"],
                "properties": {
                  "issuer_name": {
                    "$ref": "#/components/schemas/KlarnaSdkIssuer"
                  },
                  "token": {
                    "type": "string",
                    "description": "The token for the sdk workflow"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": ["affirm_redirect"],
            "properties": {
              "affirm_redirect": {
                "type": "object",
                "description": "For Affirm redirect flow",
                "required": ["billing_email"],
                "properties": {
                  "billing_email": {
                    "type": "string",
                    "description": "The billing email address"
                  }
                }
              }
            }
          }
        ]
      },
      "PaymentConnectorCreate": {
        "type": "object",
        "description": "Create a new Payment Connector for the merchant account. The connector could be a payment processor / facilitator / acquirer or specialized services like Fraud / Accounting etc.\"",
        "required": ["connector_type", "connector_name"],
        "properties": {
          "connector_type": {
            "$ref": "#/components/schemas/ConnectorType"
          },
          "connector_name": {
            "type": "string",
            "description": "Name of the Connector",
            "example": "stripe"
          },
          "merchant_connector_id": {
            "type": "integer",
            "format": "int32",
            "description": "Unique ID of the connector",
            "example": 42
          },
          "connector_account_details": {
            "type": "object"
          },
          "test_mode": {
            "type": "boolean",
            "description": "A boolean value to indicate if the connector is in Test mode. By default, its value is false.",
            "default": false,
            "example": false
          },
          "disabled": {
            "type": "boolean",
            "description": "A boolean value to indicate if the connector is disabled. By default, its value is false.",
            "default": false,
            "example": false
          },
          "payment_methods_enabled": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethods"
            },
            "example": [
              {
                "payment_method": "wallet",
                "payment_method_types": ["upi_collect", "upi_intent"],
                "payment_method_issuers": ["labore magna ipsum", "aute"],
                "payment_schemes": ["Discover", "Discover"],
                "accepted_currencies": ["AED", "AED"],
                "accepted_countries": ["in", "us"],
                "minimum_amount": 1,
                "maximum_amount": 68607706,
                "recurring_enabled": true,
                "installment_payment_enabled": true
              }
            ]
          },
          "metadata": {
            "type": "object"
          }
        }
      },
      "PaymentExperience": {
        "type": "string",
        "enum": [
          "redirect_to_url",
          "invoke_sdk_client",
          "display_qr_code",
          "one_click",
          "link_wallet",
          "invoke_payment_app"
        ]
      },
      "PaymentIdType": {
        "oneOf": [
          {
            "type": "object",
            "required": ["PaymentIntentId"],
            "properties": {
              "PaymentIntentId": {
                "type": "string",
                "description": "The identifier for payment intent"
              }
            }
          },
          {
            "type": "object",
            "required": ["ConnectorTransactionId"],
            "properties": {
              "ConnectorTransactionId": {
                "type": "string",
                "description": "The identifier for connector transaction"
              }
            }
          },
          {
            "type": "object",
            "required": ["PaymentAttemptId"],
            "properties": {
              "PaymentAttemptId": {
                "type": "string",
                "description": "The identifier for payment attempt"
              }
            }
          }
        ]
      },
      "PaymentListConstraints": {
        "type": "object",
        "properties": {
          "customer_id": {
            "type": "string",
            "description": "The identifier for customer"
          },
          "starting_after": {
            "type": "string",
            "description": "A cursor for use in pagination, fetch the next list after some object"
          },
          "ending_before": {
            "type": "string",
            "description": "A cursor for use in pagination, fetch the previous list before some object"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "description": "limit on the number of objects to return"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "The time at which payment is created"
          },
          "created.lt": {
            "type": "string",
            "format": "date-time",
            "description": "Time less than the payment created time"
          },
          "created.gt": {
            "type": "string",
            "format": "date-time",
            "description": "Time greater than the payment created time"
          },
          "created.lte": {
            "type": "string",
            "format": "date-time",
            "description": "Time less than or equals to the payment created time"
          },
          "created.gte": {
            "type": "string",
            "format": "date-time",
            "description": "Time greater than or equals to the payment created time"
          }
        }
      },
      "PaymentListResponse": {
        "type": "object",
        "required": ["size", "data"],
        "properties": {
          "size": {
            "type": "integer",
            "description": "The number of payments included in the list"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentsResponse"
            }
          }
        }
      },
      "PaymentMethod": {
        "oneOf": [
          {
            "type": "object",
            "required": ["Card"],
            "properties": {
              "Card": {
                "$ref": "#/components/schemas/CCard"
              }
            }
          },
          {
            "type": "string",
            "enum": ["BankTransfer"]
          },
          {
            "type": "object",
            "required": ["Wallet"],
            "properties": {
              "Wallet": {
                "$ref": "#/components/schemas/WalletData"
              }
            }
          },
          {
            "type": "object",
            "required": ["PayLater"],
            "properties": {
              "PayLater": {
                "$ref": "#/components/schemas/PayLaterData"
              }
            }
          },
          {
            "type": "string",
            "enum": ["Paypal"]
          }
        ]
      },
      "PaymentMethodSubType": {
        "type": "string",
        "enum": [
          "credit",
          "debit",
          "upi_intent",
          "upi_collect",
          "credit_card_installments",
          "pay_later_installments"
        ]
      },
      "PaymentMethodType": {
        "type": "string",
        "enum": [
          "card",
          "payment_container",
          "bank_transfer",
          "bank_debit",
          "pay_later",
          "netbanking",
          "upi",
          "open_banking",
          "consumer_finance",
          "wallet",
          "klarna",
          "paypal"
        ]
      },
      "PaymentMethods": {
        "type": "object",
        "description": "Details of all the payment methods enabled for the connector for the given merchant account",
        "required": [
          "payment_method",
          "recurring_enabled",
          "installment_payment_enabled"
        ],
        "properties": {
          "payment_method": {
            "$ref": "#/components/schemas/PaymentMethodType"
          },
          "payment_method_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodSubType"
            },
            "example": ["credit"]
          },
          "payment_method_issuers": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "List of payment method issuers to be enabled for this payment method"
            },
            "example": ["HDFC"]
          },
          "payment_schemes": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "List of payment schemes accepted or has the processing capabilities of the processor"
            },
            "example": ["MASTER", "VISA", "DINERS"]
          },
          "accepted_currencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Currency"
            },
            "example": ["USD", "EUR", "AED"]
          },
          "accepted_countries": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "List of Countries accepted or has the processing capabilities of the processor"
            },
            "example": ["US", "IN"]
          },
          "minimum_amount": {
            "type": "integer",
            "format": "int32",
            "description": "Minimum amount supported by the processor. To be represented in the lowest denomination of the target currency (For example, for USD it should be in cents)",
            "example": 1
          },
          "maximum_amount": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum amount supported by the processor. To be represented in the lowest denomination of\nthe target currency (For example, for USD it should be in cents)",
            "example": 1313
          },
          "recurring_enabled": {
            "type": "boolean",
            "description": "Boolean to enable recurring payments / mandates. Default is true.",
            "default": true,
            "example": false
          },
          "installment_payment_enabled": {
            "type": "boolean",
            "description": "Boolean to enable installment / EMI / BNPL payments. Default is true.",
            "default": true,
            "example": false
          },
          "payment_experience": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentExperience"
            },
            "example": ["redirect_to_url"]
          }
        }
      },
      "PaymentRetrieveBody": {
        "type": "object",
        "properties": {
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account."
          },
          "force_sync": {
            "type": "boolean",
            "description": "Decider to enable or disable the connector call for retrieve request"
          }
        }
      },
      "PaymentsCancelRequest": {
        "type": "object",
        "properties": {
          "cancellation_reason": {
            "type": "string",
            "description": "The reason for the payment cancel"
          }
        }
      },
      "PaymentsCaptureRequest": {
        "type": "object",
        "properties": {
          "payment_id": {
            "type": "string",
            "description": "The unique identifier for the payment"
          },
          "merchant_id": {
            "type": "string",
            "description": "The unique identifier for the merchant"
          },
          "amount_to_capture": {
            "type": "integer",
            "format": "int64",
            "description": "The Amount to be captured/ debited from the user's payment method."
          },
          "refund_uncaptured_amount": {
            "type": "boolean",
            "description": "Decider to refund the uncaptured amount"
          },
          "statement_descriptor_suffix": {
            "type": "string",
            "description": "Provides information about a card payment that customers see on their statements."
          },
          "statement_descriptor_prefix": {
            "type": "string",
            "description": "Concatenated with the statement descriptor suffix that’s set on the account to form the complete statement descriptor."
          }
        }
      },
      "PaymentsRequest": {
        "type": "object",
        "properties": {
          "payment_id": {
            "type": "string",
            "description": "Unique identifier for the payment. This ensures impotency for multiple payments\nthat have been done by a single merchant. This field is auto generated and is returned in the API response.",
            "example": "pay_mbabizu24mvu3mela5njyhpit4",
            "maxLength": 30,
            "minLength": 30
          },
          "merchant_id": {
            "type": "string",
            "description": "This is an identifier for the merchant account. This is inferred from the API key\nprovided during the request",
            "example": "merchant_1668273825",
            "maxLength": 255
          },
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "The payment amount. Amount for the payment in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc.,",
            "example": 6540
          },
          "connector": {
            "$ref": "#/components/schemas/Connector"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "capture_method": {
            "$ref": "#/components/schemas/CaptureMethod"
          },
          "amount_to_capture": {
            "type": "integer",
            "format": "int64",
            "description": "The Amount to be captured/ debited from the users payment method. It shall be in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc.,\nIf not provided, the default amount_to_capture will be the payment amount.",
            "example": 6540
          },
          "capture_on": {
            "type": "string",
            "format": "date-time",
            "description": "A timestamp (ISO 8601 code) that determines when the payment should be captured.\nProviding this field will automatically set `capture` to true",
            "example": "2022-09-10T10:11:12Z"
          },
          "confirm": {
            "type": "boolean",
            "description": "Whether to confirm the payment (if applicable)",
            "default": false,
            "example": true
          },
          "customer_id": {
            "type": "string",
            "description": "The identifier for the customer object. If not provided the customer ID will be autogenerated.",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "description": "description: The customer's email address",
            "example": "johntest@test.com",
            "maxLength": 255
          },
          "name": {
            "type": "string",
            "description": "description: The customer's name",
            "example": "John Test",
            "maxLength": 255
          },
          "phone": {
            "type": "string",
            "description": "The customer's phone number",
            "example": "3141592653",
            "maxLength": 255
          },
          "phone_country_code": {
            "type": "string",
            "description": "The country code for the customer phone number",
            "example": "+1",
            "maxLength": 255
          },
          "off_session": {
            "type": "boolean",
            "description": "Set to true to indicate that the customer is not in your checkout flow during this payment, and therefore is unable to authenticate. This parameter is intended for scenarios where you collect card details and charge them later. This parameter can only be used with `confirm: true`.",
            "example": true
          },
          "description": {
            "type": "string",
            "description": "A description of the payment",
            "example": "It's my first payment request"
          },
          "return_url": {
            "type": "string",
            "description": "The URL to redirect after the completion of the operation",
            "example": "https://hyperswitch.io"
          },
          "setup_future_usage": {
            "$ref": "#/components/schemas/FutureUsage"
          },
          "authentication_type": {
            "$ref": "#/components/schemas/AuthenticationType"
          },
          "payment_method_data": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "payment_method": {
            "$ref": "#/components/schemas/PaymentMethodType"
          },
          "payment_token": {
            "type": "string",
            "description": "Provide a reference to a stored payment method",
            "example": "187282ab-40ef-47a9-9206-5099ba31e432"
          },
          "card_cvc": {
            "type": "string"
          },
          "shipping": {
            "$ref": "#/components/schemas/Address"
          },
          "billing": {
            "$ref": "#/components/schemas/Address"
          },
          "statement_descriptor_name": {
            "type": "string",
            "description": "For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters.",
            "example": "Juspay Router",
            "maxLength": 255
          },
          "statement_descriptor_suffix": {
            "type": "string",
            "description": "Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.",
            "example": "Payment for shoes purchase",
            "maxLength": 255
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "client_secret": {
            "type": "string",
            "description": "It's a token used for client side verification.",
            "example": "pay_U42c409qyHwOkWo3vK60_secret_el9ksDkiB8hi6j9N78yo"
          },
          "mandate_data": {
            "$ref": "#/components/schemas/MandateData"
          },
          "mandate_id": {
            "type": "string",
            "description": "A unique identifier to link the payment to a mandate, can be use instead of payment_method_data",
            "example": "mandate_iwer89rnjef349dni3",
            "maxLength": 255
          },
          "browser_info": {
            "type": "object"
          }
        }
      },
      "PaymentsResponse": {
        "type": "object",
        "required": ["status", "amount", "currency", "payment_method"],
        "properties": {
          "payment_id": {
            "type": "string",
            "description": "Unique identifier for the payment. This ensures impotency for multiple payments\nthat have been done by a single merchant.",
            "example": "pay_mbabizu24mvu3mela5njyhpit4",
            "maxLength": 30,
            "minLength": 30
          },
          "merchant_id": {
            "type": "string",
            "description": "This is an identifier for the merchant account. This is inferred from the API key\nprovided during the request",
            "example": "merchant_1668273825",
            "maxLength": 255
          },
          "status": {
            "$ref": "#/components/schemas/IntentStatus"
          },
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "The payment amount. Amount for the payment in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc.,",
            "example": 100
          },
          "amount_capturable": {
            "type": "integer",
            "format": "int64",
            "description": "The maximum amount that could be captured from the payment",
            "example": 6540,
            "minimum": 100.0
          },
          "amount_received": {
            "type": "integer",
            "format": "int64",
            "description": "The amount which is already captured from the payment",
            "example": 6540,
            "minimum": 100.0
          },
          "connector": {
            "type": "string",
            "description": "The connector used for the payment",
            "example": "stripe"
          },
          "client_secret": {
            "type": "string",
            "description": "It's a token used for client side verification.",
            "example": "pay_U42c409qyHwOkWo3vK60_secret_el9ksDkiB8hi6j9N78yo"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the payment was created",
            "example": "2022-09-10T10:11:12Z"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "customer_id": {
            "type": "string",
            "description": "The identifier for the customer object. If not provided the customer ID will be autogenerated.",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "description": "A description of the payment",
            "example": "It's my first payment request"
          },
          "refunds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RefundResponse"
            }
          },
          "mandate_id": {
            "type": "string",
            "description": "A unique identifier to link the payment to a mandate, can be use instead of payment_method_data",
            "example": "mandate_iwer89rnjef349dni3",
            "maxLength": 255
          },
          "mandate_data": {
            "$ref": "#/components/schemas/MandateData"
          },
          "setup_future_usage": {
            "$ref": "#/components/schemas/FutureUsage"
          },
          "off_session": {
            "type": "boolean",
            "description": "Set to true to indicate that the customer is not in your checkout flow during this payment, and therefore is unable to authenticate. This parameter is intended for scenarios where you collect card details and charge them later. This parameter can only be used with confirm=true.",
            "example": true
          },
          "capture_on": {
            "type": "string",
            "format": "date-time",
            "description": "A timestamp (ISO 8601 code) that determines when the payment should be captured.\nProviding this field will automatically set `capture` to true",
            "example": "2022-09-10T10:11:12Z"
          },
          "capture_method": {
            "$ref": "#/components/schemas/CaptureMethod"
          },
          "payment_method": {
            "$ref": "#/components/schemas/PaymentMethodType"
          },
          "payment_method_data": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "payment_token": {
            "type": "string",
            "description": "Provide a reference to a stored payment method",
            "example": "187282ab-40ef-47a9-9206-5099ba31e432"
          },
          "shipping": {
            "$ref": "#/components/schemas/Address"
          },
          "billing": {
            "$ref": "#/components/schemas/Address"
          },
          "metadata": {
            "type": "object"
          },
          "email": {
            "type": "string",
            "description": "description: The customer's email address",
            "example": "johntest@test.com",
            "maxLength": 255
          },
          "name": {
            "type": "string",
            "description": "description: The customer's name",
            "example": "John Test",
            "maxLength": 255
          },
          "phone": {
            "type": "string",
            "description": "The customer's phone number",
            "example": "3141592653",
            "maxLength": 255
          },
          "return_url": {
            "type": "string",
            "description": "The URL to redirect after the completion of the operation",
            "example": "https://hyperswitch.io"
          },
          "authentication_type": {
            "$ref": "#/components/schemas/AuthenticationType"
          },
          "statement_descriptor_name": {
            "type": "string",
            "description": "For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters.",
            "example": "Juspay Router",
            "maxLength": 255
          },
          "statement_descriptor_suffix": {
            "type": "string",
            "description": "Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 255 characters for the concatenated descriptor.",
            "example": "Payment for shoes purchase",
            "maxLength": 255
          },
          "next_action": {
            "$ref": "#/components/schemas/NextAction"
          },
          "cancellation_reason": {
            "type": "string",
            "description": "If the payment was cancelled the reason provided here"
          },
          "error_code": {
            "type": "string",
            "description": "If there was an error while calling the connectors the code is received here",
            "example": "E0001"
          },
          "error_message": {
            "type": "string",
            "description": "If there was an error while calling the connector the error message is received here",
            "example": "Failed while verifying the card"
          }
        }
      },
      "PaymentsRetrieveRequest": {
        "type": "object",
        "required": ["resource_id", "force_sync"],
        "properties": {
          "resource_id": {
            "$ref": "#/components/schemas/PaymentIdType"
          },
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account."
          },
          "force_sync": {
            "type": "boolean",
            "description": "Decider to enable or disable the connector call for retrieve request"
          },
          "param": {
            "type": "string",
            "description": "The parameters passed to a retrieve request"
          },
          "connector": {
            "type": "string",
            "description": "The name of the connector"
          }
        }
      },
      "PaymentsSessionRequest": {
        "type": "object",
        "required": ["payment_id", "client_secret", "wallets"],
        "properties": {
          "payment_id": {
            "type": "string",
            "description": "The identifier for the payment"
          },
          "client_secret": {
            "type": "string",
            "description": "This is a token which expires after 15 minutes, used from the client to authenticate and create sessions from the SDK"
          },
          "wallets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SupportedWallets"
            }
          }
        }
      },
      "PaymentsSessionResponse": {
        "type": "object",
        "required": ["payment_id", "client_secret", "session_token"],
        "properties": {
          "payment_id": {
            "type": "string",
            "description": "The identifier for the payment"
          },
          "client_secret": {
            "type": "string",
            "description": "This is a token which expires after 15 minutes, used from the client to authenticate and create sessions from the SDK"
          },
          "session_token": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SessionToken"
            }
          }
        }
      },
      "PaymentsStartRequest": {
        "type": "object",
        "required": ["payment_id", "merchant_id", "attempt_id"],
        "properties": {
          "payment_id": {
            "type": "string",
            "description": "Unique identifier for the payment. This ensures impotency for multiple payments\nthat have been done by a single merchant. This field is auto generated and is returned in the API response."
          },
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account."
          },
          "attempt_id": {
            "type": "string",
            "description": "The identifier for the payment transaction"
          }
        }
      },
      "PhoneDetails": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "The contact number",
            "example": "9999999999"
          },
          "country_code": {
            "type": "string",
            "description": "The country code attached to the number",
            "example": "+1"
          }
        }
      },
      "RefundListRequest": {
        "type": "object",
        "properties": {
          "payment_id": {
            "type": "string",
            "description": "The identifier for the payment"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "description": "Limit on the number of objects to return"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "The time at which refund is created"
          },
          "created.lt": {
            "type": "string",
            "format": "date-time",
            "description": "Time less than the refund created time"
          },
          "created.gt": {
            "type": "string",
            "format": "date-time",
            "description": "Time greater than the refund created time"
          },
          "created.lte": {
            "type": "string",
            "format": "date-time",
            "description": "Time less than or equals to the refund created time"
          },
          "created.gte": {
            "type": "string",
            "format": "date-time",
            "description": "Time greater than or equals to the refund created time"
          }
        }
      },
      "RefundRequest": {
        "type": "object",
        "required": ["payment_id"],
        "properties": {
          "refund_id": {
            "type": "string",
            "description": "Unique Identifier for the Refund. This is to ensure idempotency for multiple partial refund initiated against the same payment. If the identifiers is not defined by the merchant, this filed shall be auto generated and provide in the API response. It is recommended to generate uuid(v4) as the refund_id.",
            "example": "ref_mbabizu24mvu3mela5njyhpit4",
            "maxLength": 30,
            "minLength": 30
          },
          "payment_id": {
            "type": "string",
            "description": "Total amount for which the refund is to be initiated. Amount for the payment in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc. If not provided, this will default to the full payment amount",
            "example": "pay_mbabizu24mvu3mela5njyhpit4",
            "maxLength": 30,
            "minLength": 30
          },
          "merchant_id": {
            "type": "string",
            "description": "The identifier for the Merchant Account",
            "example": "y3oqhf46pyzuxjbcn2giaqnb44",
            "maxLength": 255
          },
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "Total amount for which the refund is to be initiated. Amount for the payment in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc., If not provided, this will default to the full payment amount",
            "example": 6540,
            "minimum": 100.0
          },
          "reason": {
            "type": "string",
            "description": "An arbitrary string attached to the object. Often useful for displaying to users and your customer support executive",
            "example": "Customer returned the product",
            "maxLength": 255
          },
          "refund_type": {
            "$ref": "#/components/schemas/RefundType"
          },
          "metadata": {
            "type": "object"
          }
        }
      },
      "RefundResponse": {
        "type": "object",
        "required": ["refund_id", "payment_id", "amount", "currency", "status"],
        "properties": {
          "refund_id": {
            "type": "string"
          },
          "payment_id": {
            "type": "string"
          },
          "amount": {
            "type": "integer",
            "format": "int64"
          },
          "currency": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/RefundStatus"
          },
          "metadata": {
            "type": "object"
          },
          "error_message": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "RefundStatus": {
        "type": "string",
        "enum": ["succeeded", "failed", "pending", "review"]
      },
      "RefundType": {
        "type": "string",
        "enum": ["scheduled", "instant"]
      },
      "RefundUpdateRequest": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "An arbitrary string attached to the object. Often useful for displaying to users and your customer support executive",
            "example": "Customer returned the product",
            "maxLength": 255
          },
          "metadata": {
            "type": "object"
          }
        }
      },
      "RoutingAlgorithm": {
        "type": "string",
        "description": "The routing algorithm to be used to process the incoming request from merchant to outgoing payment processor or payment method. The default is 'Custom'",
        "enum": ["round_robin", "max_conversion", "min_cost", "custom"],
        "example": "custom"
      },
      "SessionToken": {
        "oneOf": [
          {
            "type": "object",
            "description": "The session response structure for Google Pay",
            "required": [
              "merchant_info",
              "allowed_payment_methods",
              "transaction_info",
              "wallet_name"
            ],
            "properties": {
              "merchant_info": {
                "$ref": "#/components/schemas/GpayMerchantInfo"
              },
              "allowed_payment_methods": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GpayAllowedPaymentMethods"
                }
              },
              "transaction_info": {
                "$ref": "#/components/schemas/GpayTransactionInfo"
              },
              "wallet_name": {
                "type": "string",
                "enum": ["gpay"]
              }
            }
          },
          {
            "type": "object",
            "description": "The session response structure for Klarna",
            "required": ["session_token", "session_id", "wallet_name"],
            "properties": {
              "session_token": {
                "type": "string",
                "description": "The session token for Klarna"
              },
              "session_id": {
                "type": "string",
                "description": "The identifier for the session"
              },
              "wallet_name": {
                "type": "string",
                "enum": ["klarna"]
              }
            }
          },
          {
            "type": "object",
            "description": "The session response structure for PayPal",
            "required": ["session_token", "wallet_name"],
            "properties": {
              "session_token": {
                "type": "string",
                "description": "The session token for PayPal"
              },
              "wallet_name": {
                "type": "string",
                "enum": ["paypal"]
              }
            }
          },
          {
            "type": "object",
            "description": "The session response structure for Apple Pay",
            "required": [
              "epoch_timestamp",
              "expires_at",
              "merchant_session_identifier",
              "nonce",
              "merchant_identifier",
              "domain_name",
              "display_name",
              "signature",
              "operational_analytics_identifier",
              "retries",
              "psp_id",
              "wallet_name"
            ],
            "properties": {
              "epoch_timestamp": {
                "type": "integer",
                "format": "int64",
                "description": "Timestamp at which session is requested"
              },
              "expires_at": {
                "type": "integer",
                "format": "int64",
                "description": "Timestamp at which session expires"
              },
              "merchant_session_identifier": {
                "type": "string",
                "description": "The identifier for the merchant session"
              },
              "nonce": {
                "type": "string",
                "description": "Applepay generates unique ID (UUID) value"
              },
              "merchant_identifier": {
                "type": "string",
                "description": "The identifier for the merchant"
              },
              "domain_name": {
                "type": "string",
                "description": "The domain name of the merchant which is registered in Apple Pay"
              },
              "display_name": {
                "type": "string",
                "description": "The name to be displayed on Apple Pay button"
              },
              "signature": {
                "type": "string",
                "description": "A string which represents the properties of a payment"
              },
              "operational_analytics_identifier": {
                "type": "string",
                "description": "The identifier for the operational analytics"
              },
              "retries": {
                "type": "integer",
                "format": "int32",
                "description": "The number of retries to get the session response"
              },
              "psp_id": {
                "type": "string",
                "description": "The identifier for the connector transaction"
              },
              "wallet_name": {
                "type": "string",
                "enum": ["applepay"]
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "wallet_name"
        }
      },
      "SupportedWallets": {
        "type": "string",
        "description": "Wallets which support obtaining session object",
        "enum": ["paypal", "apple_pay", "klarna", "gpay"]
      },
      "WalletData": {
        "type": "object",
        "required": ["issuer_name"],
        "properties": {
          "issuer_name": {
            "$ref": "#/components/schemas/WalletIssuer"
          },
          "token": {
            "type": "string",
            "description": "Token generated for the wallet"
          }
        }
      },
      "WalletIssuer": {
        "type": "string",
        "enum": ["googlepay", "applepay", "paypal"]
      },
      "WebhookDetails": {
        "type": "object",
        "properties": {
          "webhook_version": {
            "type": "string",
            "description": "The version for Webhook",
            "example": "1.0.2",
            "maxLength": 255
          },
          "webhook_username": {
            "type": "string",
            "description": "The user name for Webhook login",
            "example": "ekart_retail",
            "maxLength": 255
          },
          "webhook_password": {
            "type": "string",
            "description": "The password for Webhook login",
            "example": "ekart@123",
            "maxLength": 255
          },
          "webhook_url": {
            "type": "string",
            "description": "The url for the webhook endpoint",
            "example": "www.ekart.com/webhooks"
          },
          "payment_created_enabled": {
            "type": "boolean",
            "description": "If this property is true, a webhook message is posted whenever a new payment is created",
            "example": true
          },
          "payment_succeeded_enabled": {
            "type": "boolean",
            "description": "If this property is true, a webhook message is posted whenever a payment is successful",
            "example": true
          },
          "payment_failed_enabled": {
            "type": "boolean",
            "description": "If this property is true, a webhook message is posted whenever a payment fails",
            "example": true
          }
        }
      }
    }
  }
}
